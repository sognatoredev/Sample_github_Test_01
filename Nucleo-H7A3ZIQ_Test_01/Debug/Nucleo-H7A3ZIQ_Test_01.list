
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d00  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08007204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005bc  24000074  08007278  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000630  08007278  00020630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000174c5  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a75  00000000  00000000  00037567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010d8  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fb0  00000000  00000000  0003b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003db7  00000000  00000000  0003c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017613  00000000  00000000  0003fe1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ffeb  00000000  00000000  00057432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0019741d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000049a0  00000000  00000000  00197470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006f98 	.word	0x08006f98

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08006f98 	.word	0x08006f98

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b84      	ldr	r3, [pc, #528]	; (80008cc <MX_GPIO_Init+0x228>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	4a82      	ldr	r2, [pc, #520]	; (80008cc <MX_GPIO_Init+0x228>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ca:	4b80      	ldr	r3, [pc, #512]	; (80008cc <MX_GPIO_Init+0x228>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	623b      	str	r3, [r7, #32]
 80006d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4b7c      	ldr	r3, [pc, #496]	; (80008cc <MX_GPIO_Init+0x228>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	4a7b      	ldr	r2, [pc, #492]	; (80008cc <MX_GPIO_Init+0x228>)
 80006e0:	f043 0320 	orr.w	r3, r3, #32
 80006e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e8:	4b78      	ldr	r3, [pc, #480]	; (80008cc <MX_GPIO_Init+0x228>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	61fb      	str	r3, [r7, #28]
 80006f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b75      	ldr	r3, [pc, #468]	; (80008cc <MX_GPIO_Init+0x228>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fc:	4a73      	ldr	r2, [pc, #460]	; (80008cc <MX_GPIO_Init+0x228>)
 80006fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000706:	4b71      	ldr	r3, [pc, #452]	; (80008cc <MX_GPIO_Init+0x228>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b6d      	ldr	r3, [pc, #436]	; (80008cc <MX_GPIO_Init+0x228>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800071a:	4a6c      	ldr	r2, [pc, #432]	; (80008cc <MX_GPIO_Init+0x228>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000724:	4b69      	ldr	r3, [pc, #420]	; (80008cc <MX_GPIO_Init+0x228>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b66      	ldr	r3, [pc, #408]	; (80008cc <MX_GPIO_Init+0x228>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000738:	4a64      	ldr	r2, [pc, #400]	; (80008cc <MX_GPIO_Init+0x228>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000742:	4b62      	ldr	r3, [pc, #392]	; (80008cc <MX_GPIO_Init+0x228>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000750:	4b5e      	ldr	r3, [pc, #376]	; (80008cc <MX_GPIO_Init+0x228>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000756:	4a5d      	ldr	r2, [pc, #372]	; (80008cc <MX_GPIO_Init+0x228>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000760:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <MX_GPIO_Init+0x228>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <MX_GPIO_Init+0x228>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000774:	4a55      	ldr	r2, [pc, #340]	; (80008cc <MX_GPIO_Init+0x228>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800077e:	4b53      	ldr	r3, [pc, #332]	; (80008cc <MX_GPIO_Init+0x228>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078c:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <MX_GPIO_Init+0x228>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000792:	4a4e      	ldr	r2, [pc, #312]	; (80008cc <MX_GPIO_Init+0x228>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800079c:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <MX_GPIO_Init+0x228>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b0:	4847      	ldr	r0, [pc, #284]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80007b2:	f001 f9b5 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f244 0101 	movw	r1, #16385	; 0x4001
 80007bc:	4845      	ldr	r0, [pc, #276]	; (80008d4 <MX_GPIO_Init+0x230>)
 80007be:	f001 f9af 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	4844      	ldr	r0, [pc, #272]	; (80008d8 <MX_GPIO_Init+0x234>)
 80007c8:	f001 f9aa 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e0:	4619      	mov	r1, r3
 80007e2:	483e      	ldr	r0, [pc, #248]	; (80008dc <MX_GPIO_Init+0x238>)
 80007e4:	f000 ffec 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	4833      	ldr	r0, [pc, #204]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000802:	f000 ffdd 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000806:	f244 0301 	movw	r3, #16385	; 0x4001
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	482d      	ldr	r0, [pc, #180]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000820:	f000 ffce 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000828:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x23c>)
 800083a:	f000 ffc1 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800083e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	4619      	mov	r1, r3
 8000852:	4824      	ldr	r0, [pc, #144]	; (80008e4 <MX_GPIO_Init+0x240>)
 8000854:	f000 ffb4 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800086a:	230a      	movs	r3, #10
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	481b      	ldr	r0, [pc, #108]	; (80008e4 <MX_GPIO_Init+0x240>)
 8000876:	f000 ffa3 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800087a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_GPIO_Init+0x240>)
 8000894:	f000 ff94 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000898:	2302      	movs	r3, #2
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_GPIO_Init+0x234>)
 80008b0:	f000 ff86 	bl	80017c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2028      	movs	r0, #40	; 0x28
 80008ba:	f000 ff4c 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008be:	2028      	movs	r0, #40	; 0x28
 80008c0:	f000 ff63 	bl	800178a <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3738      	adds	r7, #56	; 0x38
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58024400 	.word	0x58024400
 80008d0:	58021400 	.word	0x58021400
 80008d4:	58020400 	.word	0x58020400
 80008d8:	58021000 	.word	0x58021000
 80008dc:	58020800 	.word	0x58020800
 80008e0:	58021800 	.word	0x58021800
 80008e4:	58020000 	.word	0x58020000

080008e8 <LED_Process>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
void LED_Process (void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <LED_Process+0x54>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008f4:	d307      	bcc.n	8000906 <LED_Process+0x1e>
  {
    TIM1_CNT = 0;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <LED_Process+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]

    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80008fc:	2101      	movs	r1, #1
 80008fe:	4810      	ldr	r0, [pc, #64]	; (8000940 <LED_Process+0x58>)
 8000900:	f001 f927 	bl	8001b52 <HAL_GPIO_TogglePin>
  else if (TIM8_CNT > 99999) // 10us * 99999 period Timer8 Counter.
  {
    TIM8_CNT = 0;
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
  }
}
 8000904:	e018      	b.n	8000938 <LED_Process+0x50>
  else if (TIM2_CNT > 9) // 100ms * 9 period Timer2 Counter.
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <LED_Process+0x5c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b09      	cmp	r3, #9
 800090c:	d907      	bls.n	800091e <LED_Process+0x36>
    TIM2_CNT = 0;
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <LED_Process+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000914:	2102      	movs	r1, #2
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <LED_Process+0x60>)
 8000918:	f001 f91b 	bl	8001b52 <HAL_GPIO_TogglePin>
}
 800091c:	e00c      	b.n	8000938 <LED_Process+0x50>
  else if (TIM8_CNT > 99999) // 10us * 99999 period Timer8 Counter.
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <LED_Process+0x64>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LED_Process+0x68>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d907      	bls.n	8000938 <LED_Process+0x50>
    TIM8_CNT = 0;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <LED_Process+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800092e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <LED_Process+0x58>)
 8000934:	f001 f90d 	bl	8001b52 <HAL_GPIO_TogglePin>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2400020c 	.word	0x2400020c
 8000940:	58020400 	.word	0x58020400
 8000944:	24000210 	.word	0x24000210
 8000948:	58021000 	.word	0x58021000
 800094c:	24000214 	.word	0x24000214
 8000950:	0001869f 	.word	0x0001869f

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fd6c 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f822 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f7ff fea0 	bl	80006a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000964:	f000 fb74 	bl	8001050 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000968:	f000 fc28 	bl	80011bc <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 800096c:	f000 fa14 	bl	8000d98 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000970:	f000 fa66 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000974:	f000 fab4 	bl	8000ee0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <main+0x44>)
 800097a:	f003 ff6f 	bl	800485c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <main+0x48>)
 8000980:	f003 ff6c 	bl	800485c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <main+0x4c>)
 8000986:	f003 ff69 	bl	800485c <HAL_TIM_Base_Start_IT>

  BootMessagePrint();
 800098a:	f000 fc1f 	bl	80011cc <BootMessagePrint>
  GetClockSourcePrint();
 800098e:	f000 fc99 	bl	80012c4 <GetClockSourcePrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Process();
 8000992:	f7ff ffa9 	bl	80008e8 <LED_Process>
 8000996:	e7fc      	b.n	8000992 <main+0x3e>
 8000998:	24000094 	.word	0x24000094
 800099c:	240000e0 	.word	0x240000e0
 80009a0:	2400012c 	.word	0x2400012c

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09c      	sub	sp, #112	; 0x70
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	224c      	movs	r2, #76	; 0x4c
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fe7a 	bl	80066ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2220      	movs	r2, #32
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 fe74 	bl	80066ac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009c4:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <SystemClock_Config+0xe4>)
 80009c6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ce:	2004      	movs	r0, #4
 80009d0:	f001 f8f4 	bl	8001bbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <SystemClock_Config+0xe8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <SystemClock_Config+0xe8>)
 80009de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <SystemClock_Config+0xe8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f0:	bf00      	nop
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <SystemClock_Config+0xe8>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009fe:	d1f8      	bne.n	80009f2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a00:	2321      	movs	r3, #33	; 0x21
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	2302      	movs	r3, #2
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a1a:	2346      	movs	r3, #70	; 0x46
 8000a1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a22:	2304      	movs	r3, #4
 8000a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f918 	bl	8001c70 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a46:	f000 f823 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	233f      	movs	r3, #63	; 0x3f
 8000a4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2107      	movs	r1, #7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fd2f 	bl	80024d4 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a7c:	f000 f808 	bl	8000a90 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3770      	adds	r7, #112	; 0x70
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58024800 	.word	0x58024800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_MspInit+0x30>)
 8000aa4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x30>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x30>)
 8000ab4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	58024400 	.word	0x58024400

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ade:	f000 fd3b 	bl	8001558 <HAL_Delay>
 8000ae2:	e7fa      	b.n	8000ada <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 fcf8 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <TIM1_UP_IRQHandler+0x10>)
 8000b32:	f003 ff0b 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	24000094 	.word	0x24000094

08000b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <TIM2_IRQHandler+0x10>)
 8000b46:	f003 ff01 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	240000e0 	.word	0x240000e0

08000b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b5c:	f001 f813 	bl	8001b86 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000b6a:	f003 feef 	bl	800494c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2400012c 	.word	0x2400012c

08000b78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d105      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    TIM1_CNT++;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b92:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
  {
    TIM8_CNT++;
  }
}
 8000b94:	e014      	b.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9e:	d105      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x34>
    TIM2_CNT++;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ba8:	6013      	str	r3, [r2, #0]
}
 8000baa:	e009      	b.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d104      	bne.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x48>
    TIM8_CNT++;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	2400020c 	.word	0x2400020c
 8000bd4:	24000210 	.word	0x24000210
 8000bd8:	40010400 	.word	0x40010400
 8000bdc:	24000214 	.word	0x24000214

08000be0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
  userButton_cnt++;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bf4:	801a      	strh	r2, [r3, #0]

  if (GPIO_Pin == B1_Pin)
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfc:	d111      	bne.n	8000c22 <HAL_GPIO_EXTI_Callback+0x42>
  {
    sprintf(uart3_tx_buf, " Button Interrupt callback. Input Count : %d\r\n", userButton_cnt);
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	490a      	ldr	r1, [pc, #40]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c08:	f005 fd58 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c0e:	f7ff fb6f 	bl	80002f0 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	4906      	ldr	r1, [pc, #24]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c1e:	f004 fafd 	bl	800521c <HAL_UART_Transmit>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	24000618 	.word	0x24000618
 8000c30:	08006fb0 	.word	0x08006fb0
 8000c34:	24000218 	.word	0x24000218
 8000c38:	24000178 	.word	0x24000178

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f005 fcf4 	bl	8006658 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	24100000 	.word	0x24100000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	24000090 	.word	0x24000090
 8000ca4:	24000630 	.word	0x24000630

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cac:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <SystemInit+0xd0>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <SystemInit+0xd0>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cbc:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <SystemInit+0xd4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d807      	bhi.n	8000cd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <SystemInit+0xd4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f023 030f 	bic.w	r3, r3, #15
 8000cd0:	4a2a      	ldr	r2, [pc, #168]	; (8000d7c <SystemInit+0xd4>)
 8000cd2:	f043 0303 	orr.w	r3, r3, #3
 8000cd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <SystemInit+0xd8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <SystemInit+0xd8>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <SystemInit+0xd8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <SystemInit+0xd8>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4924      	ldr	r1, [pc, #144]	; (8000d80 <SystemInit+0xd8>)
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <SystemInit+0xdc>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <SystemInit+0xd4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 030c 	and.w	r3, r3, #12
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d007      	beq.n	8000d12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <SystemInit+0xd4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 030f 	bic.w	r3, r3, #15
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <SystemInit+0xd4>)
 8000d0c:	f043 0303 	orr.w	r3, r3, #3
 8000d10:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <SystemInit+0xd8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <SystemInit+0xd8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <SystemInit+0xd8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <SystemInit+0xd8>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <SystemInit+0xe0>)
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <SystemInit+0xd8>)
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <SystemInit+0xe4>)
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <SystemInit+0xd8>)
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <SystemInit+0xe8>)
 8000d34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <SystemInit+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <SystemInit+0xd8>)
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <SystemInit+0xe8>)
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <SystemInit+0xd8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <SystemInit+0xd8>)
 8000d4a:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <SystemInit+0xe8>)
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <SystemInit+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <SystemInit+0xd8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <SystemInit+0xd8>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <SystemInit+0xd8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <SystemInit+0xec>)
 8000d68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	52002000 	.word	0x52002000
 8000d80:	58024400 	.word	0x58024400
 8000d84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d88:	02020200 	.word	0x02020200
 8000d8c:	01ff0000 	.word	0x01ff0000
 8000d90:	01010280 	.word	0x01010280
 8000d94:	52004000 	.word	0x52004000

08000d98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <MX_TIM1_Init+0xa4>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dbe:	f240 1217 	movw	r2, #279	; 0x117
 8000dc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000de6:	f003 fce1 	bl	80047ac <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f7ff fe4e 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000e02:	f003 feab 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e0c:	f7ff fe40 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000e22:	f004 f8ff 	bl	8005024 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e2c:	f7ff fe30 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	24000094 	.word	0x24000094
 8000e3c:	40010000 	.word	0x40010000

08000e40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e68:	f240 1217 	movw	r2, #279	; 0x117
 8000e6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e76:	4a19      	ldr	r2, [pc, #100]	; (8000edc <MX_TIM2_Init+0x9c>)
 8000e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e88:	f003 fc90 	bl	80047ac <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e92:	f7ff fdfd 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ea4:	f003 fe5a 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eae:	f7ff fdef 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ec0:	f004 f8b0 	bl	8005024 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f7ff fde1 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	240000e0 	.word	0x240000e0
 8000edc:	0001869f 	.word	0x0001869f

08000ee0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <MX_TIM8_Init+0xa4>)
 8000f02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f06:	f240 1217 	movw	r2, #279	; 0x117
 8000f0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f14:	2209      	movs	r2, #9
 8000f16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f2a:	4815      	ldr	r0, [pc, #84]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f2c:	f003 fc3e 	bl	80047ac <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000f36:	f7ff fdab 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f48:	f003 fe08 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000f52:	f7ff fd9d 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <MX_TIM8_Init+0xa0>)
 8000f68:	f004 f85c 	bl	8005024 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f72:	f7ff fd8d 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2400012c 	.word	0x2400012c
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <HAL_TIM_Base_MspInit+0xbc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d117      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8000f9c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fa0:	4a29      	ldr	r2, [pc, #164]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8000fac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2019      	movs	r0, #25
 8000fbe:	f000 fbca 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fc2:	2019      	movs	r0, #25
 8000fc4:	f000 fbe1 	bl	800178a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000fc8:	e038      	b.n	800103c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd2:	d117      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201c      	movs	r0, #28
 8000ff8:	f000 fbad 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ffc:	201c      	movs	r0, #28
 8000ffe:	f000 fbc4 	bl	800178a <HAL_NVIC_EnableIRQ>
}
 8001002:	e01b      	b.n	800103c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM8)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_TIM_Base_MspInit+0xc4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d116      	bne.n	800103c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8001010:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_TIM_Base_MspInit+0xc0>)
 8001020:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	202c      	movs	r0, #44	; 0x2c
 8001032:	f000 fb90 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001036:	202c      	movs	r0, #44	; 0x2c
 8001038:	f000 fba7 	bl	800178a <HAL_NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40010000 	.word	0x40010000
 8001048:	58024400 	.word	0x58024400
 800104c:	40010400 	.word	0x40010400

08001050 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <MX_USART3_UART_Init+0x94>)
 8001058:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 800109a:	f004 f86f 	bl	800517c <HAL_UART_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010a4:	f7ff fcf4 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 80010ac:	f005 fa09 	bl	80064c2 <HAL_UARTEx_SetTxFifoThreshold>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010b6:	f7ff fceb 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 80010be:	f005 fa3e 	bl	800653e <HAL_UARTEx_SetRxFifoThreshold>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010c8:	f7ff fce2 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_USART3_UART_Init+0x90>)
 80010ce:	f005 f9bf 	bl	8006450 <HAL_UARTEx_DisableFifoMode>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010d8:	f7ff fcda 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24000178 	.word	0x24000178
 80010e4:	40004800 	.word	0x40004800

080010e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0ba      	sub	sp, #232	; 0xe8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	22c0      	movs	r2, #192	; 0xc0
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f005 facf 	bl	80066ac <memset>
  if(uartHandle->Instance==USART3)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a27      	ldr	r2, [pc, #156]	; (80011b0 <HAL_UART_MspInit+0xc8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d146      	bne.n	80011a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001118:	f04f 0202 	mov.w	r2, #2
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fd5c 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800113a:	f7ff fca9 	bl	8000a90 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_UART_MspInit+0xcc>)
 8001140:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_UART_MspInit+0xcc>)
 8001146:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_UART_MspInit+0xcc>)
 8001150:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_UART_MspInit+0xcc>)
 800115e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_UART_MspInit+0xcc>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_UART_MspInit+0xcc>)
 800116e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800117a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001194:	2307      	movs	r3, #7
 8001196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_UART_MspInit+0xd0>)
 80011a2:	f000 fb0d 	bl	80017c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	37e8      	adds	r7, #232	; 0xe8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40004800 	.word	0x40004800
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020c00 	.word	0x58020c00

080011bc <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80011d0:	4930      	ldr	r1, [pc, #192]	; (8001294 <BootMessagePrint+0xc8>)
 80011d2:	4831      	ldr	r0, [pc, #196]	; (8001298 <BootMessagePrint+0xcc>)
 80011d4:	f005 fa72 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80011d8:	482f      	ldr	r0, [pc, #188]	; (8001298 <BootMessagePrint+0xcc>)
 80011da:	f7ff f889 	bl	80002f0 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	492c      	ldr	r1, [pc, #176]	; (8001298 <BootMessagePrint+0xcc>)
 80011e8:	482c      	ldr	r0, [pc, #176]	; (800129c <BootMessagePrint+0xd0>)
 80011ea:	f004 f817 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <BootMessagePrint+0xd4>)
 80011f0:	492c      	ldr	r1, [pc, #176]	; (80012a4 <BootMessagePrint+0xd8>)
 80011f2:	4829      	ldr	r0, [pc, #164]	; (8001298 <BootMessagePrint+0xcc>)
 80011f4:	f005 fa62 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80011f8:	4827      	ldr	r0, [pc, #156]	; (8001298 <BootMessagePrint+0xcc>)
 80011fa:	f7ff f879 	bl	80002f0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	4924      	ldr	r1, [pc, #144]	; (8001298 <BootMessagePrint+0xcc>)
 8001208:	4824      	ldr	r0, [pc, #144]	; (800129c <BootMessagePrint+0xd0>)
 800120a:	f004 f807 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <BootMessagePrint+0xdc>)
 8001210:	4926      	ldr	r1, [pc, #152]	; (80012ac <BootMessagePrint+0xe0>)
 8001212:	4821      	ldr	r0, [pc, #132]	; (8001298 <BootMessagePrint+0xcc>)
 8001214:	f005 fa52 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001218:	481f      	ldr	r0, [pc, #124]	; (8001298 <BootMessagePrint+0xcc>)
 800121a:	f7ff f869 	bl	80002f0 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	491c      	ldr	r1, [pc, #112]	; (8001298 <BootMessagePrint+0xcc>)
 8001228:	481c      	ldr	r0, [pc, #112]	; (800129c <BootMessagePrint+0xd0>)
 800122a:	f003 fff7 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 800122e:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <BootMessagePrint+0xe4>)
 8001230:	4920      	ldr	r1, [pc, #128]	; (80012b4 <BootMessagePrint+0xe8>)
 8001232:	4819      	ldr	r0, [pc, #100]	; (8001298 <BootMessagePrint+0xcc>)
 8001234:	f005 fa42 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001238:	4817      	ldr	r0, [pc, #92]	; (8001298 <BootMessagePrint+0xcc>)
 800123a:	f7ff f859 	bl	80002f0 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	4914      	ldr	r1, [pc, #80]	; (8001298 <BootMessagePrint+0xcc>)
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <BootMessagePrint+0xd0>)
 800124a:	f003 ffe7 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <BootMessagePrint+0xec>)
 8001250:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <BootMessagePrint+0xf0>)
 8001252:	491b      	ldr	r1, [pc, #108]	; (80012c0 <BootMessagePrint+0xf4>)
 8001254:	4810      	ldr	r0, [pc, #64]	; (8001298 <BootMessagePrint+0xcc>)
 8001256:	f005 fa31 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <BootMessagePrint+0xcc>)
 800125c:	f7ff f848 	bl	80002f0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	490b      	ldr	r1, [pc, #44]	; (8001298 <BootMessagePrint+0xcc>)
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <BootMessagePrint+0xd0>)
 800126c:	f003 ffd6 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <BootMessagePrint+0xc8>)
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <BootMessagePrint+0xcc>)
 8001274:	f005 fa22 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <BootMessagePrint+0xcc>)
 800127a:	f7ff f839 	bl	80002f0 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	4904      	ldr	r1, [pc, #16]	; (8001298 <BootMessagePrint+0xcc>)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <BootMessagePrint+0xd0>)
 800128a:	f003 ffc7 	bl	800521c <HAL_UART_Transmit>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08006fe0 	.word	0x08006fe0
 8001298:	24000218 	.word	0x24000218
 800129c:	24000178 	.word	0x24000178
 80012a0:	08007010 	.word	0x08007010
 80012a4:	08007020 	.word	0x08007020
 80012a8:	0800703c 	.word	0x0800703c
 80012ac:	08007044 	.word	0x08007044
 80012b0:	08007060 	.word	0x08007060
 80012b4:	08007074 	.word	0x08007074
 80012b8:	08007090 	.word	0x08007090
 80012bc:	0800709c 	.word	0x0800709c
 80012c0:	080070a8 	.word	0x080070a8

080012c4 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80012c8:	493d      	ldr	r1, [pc, #244]	; (80013c0 <GetClockSourcePrint+0xfc>)
 80012ca:	483e      	ldr	r0, [pc, #248]	; (80013c4 <GetClockSourcePrint+0x100>)
 80012cc:	f005 f9f6 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80012d0:	483c      	ldr	r0, [pc, #240]	; (80013c4 <GetClockSourcePrint+0x100>)
 80012d2:	f7ff f80d 	bl	80002f0 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	4939      	ldr	r1, [pc, #228]	; (80013c4 <GetClockSourcePrint+0x100>)
 80012e0:	4839      	ldr	r0, [pc, #228]	; (80013c8 <GetClockSourcePrint+0x104>)
 80012e2:	f003 ff9b 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80012e6:	f001 faab 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a37      	ldr	r2, [pc, #220]	; (80013cc <GetClockSourcePrint+0x108>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0c9b      	lsrs	r3, r3, #18
 80012f4:	461a      	mov	r2, r3
 80012f6:	4936      	ldr	r1, [pc, #216]	; (80013d0 <GetClockSourcePrint+0x10c>)
 80012f8:	4832      	ldr	r0, [pc, #200]	; (80013c4 <GetClockSourcePrint+0x100>)
 80012fa:	f005 f9df 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80012fe:	4831      	ldr	r0, [pc, #196]	; (80013c4 <GetClockSourcePrint+0x100>)
 8001300:	f7fe fff6 	bl	80002f0 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	492d      	ldr	r1, [pc, #180]	; (80013c4 <GetClockSourcePrint+0x100>)
 800130e:	482e      	ldr	r0, [pc, #184]	; (80013c8 <GetClockSourcePrint+0x104>)
 8001310:	f003 ff84 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001314:	f001 fc0e 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8001318:	4603      	mov	r3, r0
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <GetClockSourcePrint+0x108>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9b      	lsrs	r3, r3, #18
 8001322:	461a      	mov	r2, r3
 8001324:	492b      	ldr	r1, [pc, #172]	; (80013d4 <GetClockSourcePrint+0x110>)
 8001326:	4827      	ldr	r0, [pc, #156]	; (80013c4 <GetClockSourcePrint+0x100>)
 8001328:	f005 f9c8 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800132c:	4825      	ldr	r0, [pc, #148]	; (80013c4 <GetClockSourcePrint+0x100>)
 800132e:	f7fe ffdf 	bl	80002f0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	4922      	ldr	r1, [pc, #136]	; (80013c4 <GetClockSourcePrint+0x100>)
 800133c:	4822      	ldr	r0, [pc, #136]	; (80013c8 <GetClockSourcePrint+0x104>)
 800133e:	f003 ff6d 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001342:	f001 fc27 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8001346:	4603      	mov	r3, r0
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <GetClockSourcePrint+0x108>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	461a      	mov	r2, r3
 8001352:	4921      	ldr	r1, [pc, #132]	; (80013d8 <GetClockSourcePrint+0x114>)
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <GetClockSourcePrint+0x100>)
 8001356:	f005 f9b1 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800135a:	481a      	ldr	r0, [pc, #104]	; (80013c4 <GetClockSourcePrint+0x100>)
 800135c:	f7fe ffc8 	bl	80002f0 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	4916      	ldr	r1, [pc, #88]	; (80013c4 <GetClockSourcePrint+0x100>)
 800136a:	4817      	ldr	r0, [pc, #92]	; (80013c8 <GetClockSourcePrint+0x104>)
 800136c:	f003 ff56 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001370:	f001 fc26 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8001374:	4603      	mov	r3, r0
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <GetClockSourcePrint+0x108>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	461a      	mov	r2, r3
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <GetClockSourcePrint+0x118>)
 8001382:	4810      	ldr	r0, [pc, #64]	; (80013c4 <GetClockSourcePrint+0x100>)
 8001384:	f005 f99a 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001388:	480e      	ldr	r0, [pc, #56]	; (80013c4 <GetClockSourcePrint+0x100>)
 800138a:	f7fe ffb1 	bl	80002f0 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29a      	uxth	r2, r3
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	490b      	ldr	r1, [pc, #44]	; (80013c4 <GetClockSourcePrint+0x100>)
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <GetClockSourcePrint+0x104>)
 800139a:	f003 ff3f 	bl	800521c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <GetClockSourcePrint+0xfc>)
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <GetClockSourcePrint+0x100>)
 80013a2:	f005 f98b 	bl	80066bc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <GetClockSourcePrint+0x100>)
 80013a8:	f7fe ffa2 	bl	80002f0 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	4903      	ldr	r1, [pc, #12]	; (80013c4 <GetClockSourcePrint+0x100>)
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <GetClockSourcePrint+0x104>)
 80013b8:	f003 ff30 	bl	800521c <HAL_UART_Transmit>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	08006fe0 	.word	0x08006fe0
 80013c4:	24000218 	.word	0x24000218
 80013c8:	24000178 	.word	0x24000178
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	080070c8 	.word	0x080070c8
 80013d4:	080070f8 	.word	0x080070f8
 80013d8:	08007128 	.word	0x08007128
 80013dc:	08007158 	.word	0x08007158

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e4:	f7ff fc60 	bl	8000ca8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	; (800142c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800140e:	f005 f929 	bl	8006664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff fa9f 	bl	8000954 <main>
  bx  lr
 8001416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800141c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001420:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001424:	08007204 	.word	0x08007204
  ldr r2, =_sbss
 8001428:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800142c:	24000630 	.word	0x24000630

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143a:	2003      	movs	r0, #3
 800143c:	f000 f980 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001440:	f001 f9fe 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_Init+0x68>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	4913      	ldr	r1, [pc, #76]	; (80014a0 <HAL_Init+0x6c>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_Init+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_Init+0x6c>)
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_Init+0x70>)
 8001476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_Init+0x74>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f814 	bl	80014ac <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e002      	b.n	8001494 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800148e:	f7ff fb05 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	58024400 	.word	0x58024400
 80014a0:	08007188 	.word	0x08007188
 80014a4:	24000004 	.word	0x24000004
 80014a8:	24000000 	.word	0x24000000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_InitTick+0x60>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e021      	b.n	8001504 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_InitTick+0x64>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f965 	bl	80017a6 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f92f 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x68>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2400000c 	.word	0x2400000c
 8001510:	24000000 	.word	0x24000000
 8001514:	24000008 	.word	0x24000008

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2400000c 	.word	0x2400000c
 800153c:	2400061c 	.word	0x2400061c

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2400061c 	.word	0x2400061c

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2400000c 	.word	0x2400000c

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x40>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	05fa0000 	.word	0x05fa0000

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff40 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff33 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa4 	bl	80016fc <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_GPIO_Init+0x234>)
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017d2:	e194      	b.n	8001afe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8186 	beq.w	8001af8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x44>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	69b9      	ldr	r1, [r7, #24]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80e0 	beq.w	8001af8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_GPIO_Init+0x238>)
 800193a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800193e:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_GPIO_Init+0x238>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_GPIO_Init+0x238>)
 800194a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_GPIO_Init+0x23c>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_GPIO_Init+0x240>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d052      	beq.n	8001a28 <HAL_GPIO_Init+0x268>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <HAL_GPIO_Init+0x244>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d031      	beq.n	80019ee <HAL_GPIO_Init+0x22e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_GPIO_Init+0x248>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d02b      	beq.n	80019ea <HAL_GPIO_Init+0x22a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_GPIO_Init+0x24c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d025      	beq.n	80019e6 <HAL_GPIO_Init+0x226>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <HAL_GPIO_Init+0x250>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01f      	beq.n	80019e2 <HAL_GPIO_Init+0x222>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_GPIO_Init+0x254>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d019      	beq.n	80019de <HAL_GPIO_Init+0x21e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_GPIO_Init+0x258>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0x21a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_GPIO_Init+0x25c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00d      	beq.n	80019d6 <HAL_GPIO_Init+0x216>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x260>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d007      	beq.n	80019d2 <HAL_GPIO_Init+0x212>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_GPIO_Init+0x264>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_GPIO_Init+0x20e>
 80019ca:	2309      	movs	r3, #9
 80019cc:	e02d      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019ce:	230a      	movs	r3, #10
 80019d0:	e02b      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019d2:	2308      	movs	r3, #8
 80019d4:	e029      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019d6:	2307      	movs	r3, #7
 80019d8:	e027      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019da:	2306      	movs	r3, #6
 80019dc:	e025      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019de:	2305      	movs	r3, #5
 80019e0:	e023      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e021      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019e6:	2303      	movs	r3, #3
 80019e8:	e01f      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e01d      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e01b      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019f2:	bf00      	nop
 80019f4:	58000080 	.word	0x58000080
 80019f8:	58024400 	.word	0x58024400
 80019fc:	58000400 	.word	0x58000400
 8001a00:	58020000 	.word	0x58020000
 8001a04:	58020400 	.word	0x58020400
 8001a08:	58020800 	.word	0x58020800
 8001a0c:	58020c00 	.word	0x58020c00
 8001a10:	58021000 	.word	0x58021000
 8001a14:	58021400 	.word	0x58021400
 8001a18:	58021800 	.word	0x58021800
 8001a1c:	58021c00 	.word	0x58021c00
 8001a20:	58022000 	.word	0x58022000
 8001a24:	58022400 	.word	0x58022400
 8001a28:	2300      	movs	r3, #0
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3a:	4938      	ldr	r1, [pc, #224]	; (8001b1c <HAL_GPIO_Init+0x35c>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f47f ae63 	bne.w	80017d4 <HAL_GPIO_Init+0x14>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3724      	adds	r7, #36	; 0x24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	58000400 	.word	0x58000400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b3c:	e003      	b.n	8001b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b64:	887a      	ldrh	r2, [r7, #2]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	400b      	ands	r3, r1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	619a      	str	r2, [r3, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f817 	bl	8000be0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	2b06      	cmp	r3, #6
 8001bce:	d00a      	beq.n	8001be6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e040      	b.n	8001c64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e03e      	b.n	8001c64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001bee:	491f      	ldr	r1, [pc, #124]	; (8001c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bf6:	f7ff fca3 	bl	8001540 <HAL_GetTick>
 8001bfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bfc:	e009      	b.n	8001c12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bfe:	f7ff fc9f 	bl	8001540 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c0c:	d901      	bls.n	8001c12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e028      	b.n	8001c64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b1e      	cmp	r3, #30
 8001c24:	d008      	beq.n	8001c38 <HAL_PWREx_ConfigSupply+0x7c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b2e      	cmp	r3, #46	; 0x2e
 8001c2a:	d005      	beq.n	8001c38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b1d      	cmp	r3, #29
 8001c30:	d002      	beq.n	8001c38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b2d      	cmp	r3, #45	; 0x2d
 8001c36:	d114      	bne.n	8001c62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c38:	f7ff fc82 	bl	8001540 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c3e:	e009      	b.n	8001c54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c40:	f7ff fc7e 	bl	8001540 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4e:	d901      	bls.n	8001c54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e007      	b.n	8001c64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_PWREx_ConfigSupply+0xb0>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d1ee      	bne.n	8001c40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	58024800 	.word	0x58024800

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 bc1f 	b.w	80024c2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80b3 	beq.w	8001df8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	4b95      	ldr	r3, [pc, #596]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d007      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x48>
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	2b18      	cmp	r3, #24
 8001cac:	d112      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x64>
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8098 	beq.w	8001df6 <HAL_RCC_OscConfig+0x186>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8093 	bne.w	8001df6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e3f6      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d106      	bne.n	8001cec <HAL_RCC_OscConfig+0x7c>
 8001cde:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a81      	ldr	r2, [pc, #516]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e058      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d112      	bne.n	8001d1a <HAL_RCC_OscConfig+0xaa>
 8001cf4:	4b7c      	ldr	r3, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7b      	ldr	r2, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a78      	ldr	r2, [pc, #480]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a75      	ldr	r2, [pc, #468]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e041      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d22:	d112      	bne.n	8001d4a <HAL_RCC_OscConfig+0xda>
 8001d24:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6f      	ldr	r2, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b6d      	ldr	r3, [pc, #436]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6c      	ldr	r2, [pc, #432]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e029      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001d52:	d112      	bne.n	8001d7a <HAL_RCC_OscConfig+0x10a>
 8001d54:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a63      	ldr	r2, [pc, #396]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e011      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001d98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d013      	beq.n	8001dce <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff fbcb 	bl	8001540 <HAL_GetTick>
 8001daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dae:	f7ff fbc7 	bl	8001540 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b64      	cmp	r3, #100	; 0x64
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e380      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc0:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x13e>
 8001dcc:	e014      	b.n	8001df8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fbb7 	bl	8001540 <HAL_GetTick>
 8001dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fbb3 	bl	8001540 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b64      	cmp	r3, #100	; 0x64
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e36c      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x166>
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 808c 	beq.w	8001f1e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_RCC_OscConfig+0x1bc>
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	2b18      	cmp	r3, #24
 8001e20:	d137      	bne.n	8001e92 <HAL_RCC_OscConfig+0x222>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d132      	bne.n	8001e92 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x1d4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e33e      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 0219 	bic.w	r2, r3, #25
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4925      	ldr	r1, [pc, #148]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff fb73 	bl	8001540 <HAL_GetTick>
 8001e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fb6f 	bl	8001540 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e328      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d028      	beq.n	8001eec <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0219 	bic.w	r2, r3, #25
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4910      	ldr	r1, [pc, #64]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff fb48 	bl	8001540 <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fb44 	bl	8001540 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e2fd      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	4901      	ldr	r1, [pc, #4]	; (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
 8001ee6:	e01a      	b.n	8001f1e <HAL_RCC_OscConfig+0x2ae>
 8001ee8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	4b97      	ldr	r3, [pc, #604]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a96      	ldr	r2, [pc, #600]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb22 	bl	8001540 <HAL_GetTick>
 8001efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fb1e 	bl	8001540 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e2d7      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f12:	4b8e      	ldr	r3, [pc, #568]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06a      	beq.n	8002000 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2a:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f34:	4b85      	ldr	r3, [pc, #532]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d007      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2e0>
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d11b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x30e>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d116      	bne.n	8001f7e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_OscConfig+0x2f8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e2ac      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f68:	4b78      	ldr	r3, [pc, #480]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	4975      	ldr	r1, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f7c:	e040      	b.n	8002000 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d023      	beq.n	8001fce <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f86:	4b71      	ldr	r3, [pc, #452]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a70      	ldr	r2, [pc, #448]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7ff fad5 	bl	8001540 <HAL_GetTick>
 8001f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fad1 	bl	8001540 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e28a      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fac:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	4961      	ldr	r1, [pc, #388]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
 8001fcc:	e018      	b.n	8002000 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff fab1 	bl	8001540 <HAL_GetTick>
 8001fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fe2:	f7ff faad 	bl	8001540 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e266      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ff4:	4b55      	ldr	r3, [pc, #340]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d036      	beq.n	800207a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d019      	beq.n	8002048 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002014:	4b4d      	ldr	r3, [pc, #308]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002018:	4a4c      	ldr	r2, [pc, #304]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff fa8e 	bl	8001540 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fa8a 	bl	8001540 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e243      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800203a:	4b44      	ldr	r3, [pc, #272]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x3b8>
 8002046:	e018      	b.n	800207a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800204a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204c:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff fa74 	bl	8001540 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7ff fa70 	bl	8001540 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e229      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800206e:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2e      	ldr	r2, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002098:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800209a:	f7ff fa51 	bl	8001540 <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a2:	f7ff fa4d 	bl	8001540 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e206      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x432>
 80020c0:	e018      	b.n	80020f4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a21      	ldr	r2, [pc, #132]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fa37 	bl	8001540 <HAL_GetTick>
 80020d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d6:	f7ff fa33 	bl	8001540 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1ec      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80af 	beq.w	8002260 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCC_OscConfig+0x4e0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_RCC_OscConfig+0x4e0>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800210e:	f7ff fa17 	bl	8001540 <HAL_GetTick>
 8002112:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff fa13 	bl	8001540 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1cc      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_OscConfig+0x4e0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d10b      	bne.n	8002154 <HAL_RCC_OscConfig+0x4e4>
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a02      	ldr	r2, [pc, #8]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	e05b      	b.n	8002202 <HAL_RCC_OscConfig+0x592>
 800214a:	bf00      	nop
 800214c:	58024400 	.word	0x58024400
 8002150:	58024800 	.word	0x58024800
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d112      	bne.n	8002182 <HAL_RCC_OscConfig+0x512>
 800215c:	4b9d      	ldr	r3, [pc, #628]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a9c      	ldr	r2, [pc, #624]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	4b9a      	ldr	r3, [pc, #616]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a99      	ldr	r2, [pc, #612]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800216e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	4b97      	ldr	r3, [pc, #604]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e03f      	b.n	8002202 <HAL_RCC_OscConfig+0x592>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d112      	bne.n	80021b0 <HAL_RCC_OscConfig+0x540>
 800218a:	4b92      	ldr	r3, [pc, #584]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a91      	ldr	r2, [pc, #580]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a8e      	ldr	r2, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800219c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	4b8c      	ldr	r3, [pc, #560]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a8b      	ldr	r2, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70
 80021ae:	e028      	b.n	8002202 <HAL_RCC_OscConfig+0x592>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b85      	cmp	r3, #133	; 0x85
 80021b6:	d112      	bne.n	80021de <HAL_RCC_OscConfig+0x56e>
 80021b8:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a85      	ldr	r2, [pc, #532]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
 80021c4:	4b83      	ldr	r3, [pc, #524]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a82      	ldr	r2, [pc, #520]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	4b80      	ldr	r3, [pc, #512]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a7f      	ldr	r2, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
 80021dc:	e011      	b.n	8002202 <HAL_RCC_OscConfig+0x592>
 80021de:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a7c      	ldr	r2, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	4b7a      	ldr	r3, [pc, #488]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a79      	ldr	r2, [pc, #484]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	4b77      	ldr	r3, [pc, #476]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	4a76      	ldr	r2, [pc, #472]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80021fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002200:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7ff f999 	bl	8001540 <HAL_GetTick>
 800220e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff f995 	bl	8001540 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e14c      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ee      	beq.n	8002212 <HAL_RCC_OscConfig+0x5a2>
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff f983 	bl	8001540 <HAL_GetTick>
 800223a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff f97f 	bl	8001540 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e136      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002254:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 812b 	beq.w	80024c0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800226a:	4b5a      	ldr	r3, [pc, #360]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002272:	2b18      	cmp	r3, #24
 8002274:	f000 80bb 	beq.w	80023ee <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2b02      	cmp	r3, #2
 800227e:	f040 8095 	bne.w	80023ac <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a53      	ldr	r2, [pc, #332]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800228c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff f957 	bl	8001540 <HAL_GetTick>
 8002292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff f953 	bl	8001540 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e10c      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b4:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80022b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b8:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_OscConfig+0x768>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	430a      	orrs	r2, r1
 80022c8:	4942      	ldr	r1, [pc, #264]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	628b      	str	r3, [r1, #40]	; 0x28
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	3b01      	subs	r3, #1
 80022de:	025b      	lsls	r3, r3, #9
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	3b01      	subs	r3, #1
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	3b01      	subs	r3, #1
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022fe:	4935      	ldr	r1, [pc, #212]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002300:	4313      	orrs	r3, r2
 8002302:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002304:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	4a32      	ldr	r2, [pc, #200]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002316:	4013      	ands	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800231c:	00d2      	lsls	r2, r2, #3
 800231e:	492d      	ldr	r1, [pc, #180]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002320:	4313      	orrs	r3, r2
 8002322:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f023 020c 	bic.w	r2, r3, #12
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4928      	ldr	r1, [pc, #160]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002332:	4313      	orrs	r3, r2
 8002334:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f023 0202 	bic.w	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4924      	ldr	r1, [pc, #144]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002344:	4313      	orrs	r3, r2
 8002346:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800235a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff f8dc 	bl	8001540 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff f8d8 	bl	8001540 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e091      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x71c>
 80023aa:	e089      	b.n	80024c0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_RCC_OscConfig+0x764>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff f8c2 	bl	8001540 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023be:	e00f      	b.n	80023e0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff f8be 	bl	8001540 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d908      	bls.n	80023e0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e077      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
 80023d2:	bf00      	nop
 80023d4:	58024400 	.word	0x58024400
 80023d8:	fffffc0c 	.word	0xfffffc0c
 80023dc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023e0:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e9      	bne.n	80023c0 <HAL_RCC_OscConfig+0x750>
 80023ec:	e068      	b.n	80024c0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d031      	beq.n	8002466 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d12a      	bne.n	8002466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d122      	bne.n	8002466 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d11a      	bne.n	8002466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	0a5b      	lsrs	r3, r3, #9
 8002434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d111      	bne.n	8002466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d108      	bne.n	8002466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	0e1b      	lsrs	r3, r3, #24
 8002458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e02b      	b.n	80024c2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002474:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d01f      	beq.n	80024c0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800248c:	f7ff f858 	bl	8001540 <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002492:	bf00      	nop
 8002494:	f7ff f854 	bl	8001540 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	4293      	cmp	r3, r2
 800249e:	d0f9      	beq.n	8002494 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_RCC_OscConfig+0x860>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ac:	00d2      	lsls	r2, r2, #3
 80024ae:	4907      	ldr	r1, [pc, #28]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_RCC_OscConfig+0x85c>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3730      	adds	r7, #48	; 0x30
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	58024400 	.word	0x58024400
 80024d0:	ffff0007 	.word	0xffff0007

080024d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e19c      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b8a      	ldr	r3, [pc, #552]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d910      	bls.n	8002518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b87      	ldr	r3, [pc, #540]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 020f 	bic.w	r2, r3, #15
 80024fe:	4985      	ldr	r1, [pc, #532]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b83      	ldr	r3, [pc, #524]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e184      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002530:	429a      	cmp	r2, r3
 8002532:	d908      	bls.n	8002546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002534:	4b78      	ldr	r3, [pc, #480]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4975      	ldr	r1, [pc, #468]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002542:	4313      	orrs	r3, r2
 8002544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800255e:	429a      	cmp	r2, r3
 8002560:	d908      	bls.n	8002574 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002562:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	496a      	ldr	r1, [pc, #424]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002570:	4313      	orrs	r3, r2
 8002572:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	4b64      	ldr	r3, [pc, #400]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800258c:	429a      	cmp	r2, r3
 800258e:	d908      	bls.n	80025a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002590:	4b61      	ldr	r3, [pc, #388]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	495e      	ldr	r1, [pc, #376]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d908      	bls.n	80025d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025be:	4b56      	ldr	r3, [pc, #344]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4953      	ldr	r1, [pc, #332]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d010      	beq.n	80025fe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d908      	bls.n	80025fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f023 020f 	bic.w	r2, r3, #15
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4947      	ldr	r1, [pc, #284]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d055      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4940      	ldr	r1, [pc, #256]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002618:	4313      	orrs	r3, r2
 800261a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d107      	bne.n	8002634 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002624:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d121      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0f6      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d107      	bne.n	800264c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d115      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0ea      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d107      	bne.n	8002664 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002654:	4b30      	ldr	r3, [pc, #192]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0de      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0d6      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f023 0207 	bic.w	r2, r3, #7
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4925      	ldr	r1, [pc, #148]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002686:	f7fe ff5b 	bl	8001540 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268e:	f7fe ff57 	bl	8001540 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0be      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d1eb      	bne.n	800268e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d208      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f023 020f 	bic.w	r2, r3, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x244>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d214      	bcs.n	800271c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 020f 	bic.w	r2, r3, #15
 80026fa:	4906      	ldr	r1, [pc, #24]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_RCC_ClockConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e086      	b.n	8002822 <HAL_RCC_ClockConfig+0x34e>
 8002714:	52002000 	.word	0x52002000
 8002718:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	4b3f      	ldr	r3, [pc, #252]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002734:	429a      	cmp	r2, r3
 8002736:	d208      	bcs.n	800274a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002738:	4b3c      	ldr	r3, [pc, #240]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	4939      	ldr	r1, [pc, #228]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 8002746:	4313      	orrs	r3, r2
 8002748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d010      	beq.n	8002778 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002762:	429a      	cmp	r2, r3
 8002764:	d208      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002766:	4b31      	ldr	r3, [pc, #196]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	492e      	ldr	r1, [pc, #184]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 8002774:	4313      	orrs	r3, r2
 8002776:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002790:	429a      	cmp	r2, r3
 8002792:	d208      	bcs.n	80027a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4922      	ldr	r1, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027be:	429a      	cmp	r2, r3
 80027c0:	d208      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4917      	ldr	r1, [pc, #92]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80027d4:	f000 f834 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	4912      	ldr	r1, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x35c>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
 80027f0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_RCC_ClockConfig+0x358>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <HAL_RCC_ClockConfig+0x35c>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x360>)
 800280a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x364>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x368>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fe48 	bl	80014ac <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	58024400 	.word	0x58024400
 8002830:	08007188 	.word	0x08007188
 8002834:	24000004 	.word	0x24000004
 8002838:	24000000 	.word	0x24000000
 800283c:	24000008 	.word	0x24000008

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002846:	4bb3      	ldr	r3, [pc, #716]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284e:	2b18      	cmp	r3, #24
 8002850:	f200 8155 	bhi.w	8002afe <HAL_RCC_GetSysClockFreq+0x2be>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	080028c1 	.word	0x080028c1
 8002860:	08002aff 	.word	0x08002aff
 8002864:	08002aff 	.word	0x08002aff
 8002868:	08002aff 	.word	0x08002aff
 800286c:	08002aff 	.word	0x08002aff
 8002870:	08002aff 	.word	0x08002aff
 8002874:	08002aff 	.word	0x08002aff
 8002878:	08002aff 	.word	0x08002aff
 800287c:	080028e7 	.word	0x080028e7
 8002880:	08002aff 	.word	0x08002aff
 8002884:	08002aff 	.word	0x08002aff
 8002888:	08002aff 	.word	0x08002aff
 800288c:	08002aff 	.word	0x08002aff
 8002890:	08002aff 	.word	0x08002aff
 8002894:	08002aff 	.word	0x08002aff
 8002898:	08002aff 	.word	0x08002aff
 800289c:	080028ed 	.word	0x080028ed
 80028a0:	08002aff 	.word	0x08002aff
 80028a4:	08002aff 	.word	0x08002aff
 80028a8:	08002aff 	.word	0x08002aff
 80028ac:	08002aff 	.word	0x08002aff
 80028b0:	08002aff 	.word	0x08002aff
 80028b4:	08002aff 	.word	0x08002aff
 80028b8:	08002aff 	.word	0x08002aff
 80028bc:	080028f3 	.word	0x080028f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028c0:	4b94      	ldr	r3, [pc, #592]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028cc:	4b91      	ldr	r3, [pc, #580]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	4a90      	ldr	r2, [pc, #576]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80028de:	e111      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028e0:	4b8d      	ldr	r3, [pc, #564]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028e2:	61bb      	str	r3, [r7, #24]
      break;
 80028e4:	e10e      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80028e6:	4b8d      	ldr	r3, [pc, #564]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028e8:	61bb      	str	r3, [r7, #24]
      break;
 80028ea:	e10b      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028ec:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028ee:	61bb      	str	r3, [r7, #24]
      break;
 80028f0:	e108      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028fc:	4b85      	ldr	r3, [pc, #532]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002906:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002908:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002912:	4b80      	ldr	r3, [pc, #512]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80e1 	beq.w	8002af8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b02      	cmp	r3, #2
 800293a:	f000 8083 	beq.w	8002a44 <HAL_RCC_GetSysClockFreq+0x204>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b02      	cmp	r3, #2
 8002942:	f200 80a1 	bhi.w	8002a88 <HAL_RCC_GetSysClockFreq+0x248>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x114>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d056      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002952:	e099      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002954:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d02d      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	4a6b      	ldr	r2, [pc, #428]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800298a:	4b62      	ldr	r3, [pc, #392]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800299a:	ed97 6a02 	vldr	s12, [r7, #8]
 800299e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80029ba:	e087      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80029ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ce:	4b51      	ldr	r3, [pc, #324]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029de:	ed97 6a02 	vldr	s12, [r7, #8]
 80029e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029fe:	e065      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a12:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a42:	e043      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a86:	e021      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	0a5b      	lsrs	r3, r3, #9
 8002ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af0:	ee17 3a90 	vmov	r3, s15
 8002af4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
      break;
 8002afc:	e002      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b00:	61bb      	str	r3, [r7, #24]
      break;
 8002b02:	bf00      	nop
  }

  return sysclockfreq;
 8002b04:	69bb      	ldr	r3, [r7, #24]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	58024400 	.word	0x58024400
 8002b18:	03d09000 	.word	0x03d09000
 8002b1c:	003d0900 	.word	0x003d0900
 8002b20:	007a1200 	.word	0x007a1200
 8002b24:	46000000 	.word	0x46000000
 8002b28:	4c742400 	.word	0x4c742400
 8002b2c:	4a742400 	.word	0x4a742400
 8002b30:	4af42400 	.word	0x4af42400

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002b3a:	f7ff fe81 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	490f      	ldr	r1, [pc, #60]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <HAL_RCC_GetHCLKFreq+0x58>)
 8002b70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b72:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_RCC_GetHCLKFreq+0x58>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	58024400 	.word	0x58024400
 8002b88:	08007188 	.word	0x08007188
 8002b8c:	24000004 	.word	0x24000004
 8002b90:	24000000 	.word	0x24000000

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002b98:	f7ff ffcc 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4904      	ldr	r1, [pc, #16]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	08007188 	.word	0x08007188

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002bc4:	f7ff ffb6 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4904      	ldr	r1, [pc, #16]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	58024400 	.word	0x58024400
 8002be8:	08007188 	.word	0x08007188

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b0c8      	sub	sp, #288	; 0x120
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002c10:	2500      	movs	r5, #0
 8002c12:	ea54 0305 	orrs.w	r3, r4, r5
 8002c16:	d049      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c22:	d02f      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c28:	d828      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c2e:	d01a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c34:	d822      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3e:	d007      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c40:	e01c      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c42:	4ba7      	ldr	r3, [pc, #668]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	4aa6      	ldr	r2, [pc, #664]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c4e:	e01a      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c54:	3308      	adds	r3, #8
 8002c56:	2102      	movs	r1, #2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 fc43 	bl	80044e4 <RCCEx_PLL2_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c64:	e00f      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c6a:	3328      	adds	r3, #40	; 0x28
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 fcea 	bl	8004648 <RCCEx_PLL3_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c8e:	4b94      	ldr	r3, [pc, #592]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9c:	4a90      	ldr	r2, [pc, #576]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ca2:	e003      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ca8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002cb8:	f04f 0900 	mov.w	r9, #0
 8002cbc:	ea58 0309 	orrs.w	r3, r8, r9
 8002cc0:	d047      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d82a      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002ce9 	.word	0x08002ce9
 8002cd8:	08002cf7 	.word	0x08002cf7
 8002cdc:	08002d0d 	.word	0x08002d0d
 8002ce0:	08002d2b 	.word	0x08002d2b
 8002ce4:	08002d2b 	.word	0x08002d2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce8:	4b7d      	ldr	r3, [pc, #500]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4a7c      	ldr	r2, [pc, #496]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cf4:	e01a      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fbf0 	bl	80044e4 <RCCEx_PLL2_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d0a:	e00f      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d10:	3328      	adds	r3, #40	; 0x28
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 fc97 	bl	8004648 <RCCEx_PLL3_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d20:	e004      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d34:	4b6a      	ldr	r3, [pc, #424]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d38:	f023 0107 	bic.w	r1, r3, #7
 8002d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	4a67      	ldr	r2, [pc, #412]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6513      	str	r3, [r2, #80]	; 0x50
 8002d48:	e003      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002d5e:	f04f 0b00 	mov.w	fp, #0
 8002d62:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d66:	d054      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d72:	d036      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002d74:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d78:	d82f      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7e:	d032      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d84:	d829      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d86:	2bc0      	cmp	r3, #192	; 0xc0
 8002d88:	d02f      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d8c:	d825      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d8e:	2b80      	cmp	r3, #128	; 0x80
 8002d90:	d018      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d821      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d007      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002d9e:	e01c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002dac:	e01e      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db2:	3308      	adds	r3, #8
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 fb94 	bl	80044e4 <RCCEx_PLL2_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002dc2:	e013      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc8:	3328      	adds	r3, #40	; 0x28
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fc3b 	bl	8004648 <RCCEx_PLL3_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002dd8:	e008      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002de0:	e004      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002df4:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6513      	str	r3, [r2, #80]	; 0x50
 8002e08:	e003      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	d05c      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e3c:	d03b      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e3e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e42:	d834      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e48:	d037      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e4e:	d82e      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e54:	d033      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e5a:	d828      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e60:	d01a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e66:	d822      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d007      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002e72:	e01c      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e80:	e01e      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e86:	3308      	adds	r3, #8
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fb2a 	bl	80044e4 <RCCEx_PLL2_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e96:	e013      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9c:	3328      	adds	r3, #40	; 0x28
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fbd1 	bl	8004648 <RCCEx_PLL3_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002eac:	e008      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002eb4:	e004      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e002      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ecc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed6:	4a02      	ldr	r2, [pc, #8]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6513      	str	r3, [r2, #80]	; 0x50
 8002edc:	e006      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002ede:	bf00      	nop
 8002ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ee8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002f02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002f06:	460b      	mov	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	d03a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	2b30      	cmp	r3, #48	; 0x30
 8002f14:	d01f      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002f16:	2b30      	cmp	r3, #48	; 0x30
 8002f18:	d819      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d00c      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d815      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d019      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d111      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2a:	4bae      	ldr	r3, [pc, #696]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	4aad      	ldr	r2, [pc, #692]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f36:	e011      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 facf 	bl	80044e4 <RCCEx_PLL2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f4c:	e006      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f54:	e002      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f64:	4b9f      	ldr	r3, [pc, #636]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	4a9c      	ldr	r2, [pc, #624]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f74:	430b      	orrs	r3, r1
 8002f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f78:	e003      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	d051      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fac:	d035      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb2:	d82e      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fb8:	d031      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002fba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fbe:	d828      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc4:	d01a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	d822      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002fd6:	e01c      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd8:	4b82      	ldr	r3, [pc, #520]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4a81      	ldr	r2, [pc, #516]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fe4:	e01c      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fea:	3308      	adds	r3, #8
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fa78 	bl	80044e4 <RCCEx_PLL2_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ffa:	e011      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003000:	3328      	adds	r3, #40	; 0x28
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f001 fb1f 	bl	8004648 <RCCEx_PLL3_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003010:	e006      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003018:	e002      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800301e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003028:	4b6e      	ldr	r3, [pc, #440]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800302a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003036:	4a6b      	ldr	r2, [pc, #428]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003038:	430b      	orrs	r3, r1
 800303a:	6513      	str	r3, [r2, #80]	; 0x50
 800303c:	e003      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003042:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800305c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003060:	460b      	mov	r3, r1
 8003062:	4313      	orrs	r3, r2
 8003064:	d053      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800306a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d033      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003076:	d82c      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003078:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800307c:	d02f      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800307e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003082:	d826      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003084:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003088:	d02b      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800308a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800308e:	d820      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003094:	d012      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800309a:	d81a      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d022      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d115      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030aa:	3308      	adds	r3, #8
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 fa18 	bl	80044e4 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030ba:	e015      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c0:	3328      	adds	r3, #40	; 0x28
 80030c2:	2101      	movs	r1, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 fabf 	bl	8004648 <RCCEx_PLL3_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030d0:	e00a      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030da:	bf00      	nop
 80030dc:	e004      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030de:	bf00      	nop
 80030e0:	e002      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030e2:	bf00      	nop
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030f0:	4b3c      	ldr	r3, [pc, #240]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80030f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fe:	4a39      	ldr	r2, [pc, #228]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003100:	430b      	orrs	r3, r1
 8003102:	6513      	str	r3, [r2, #80]	; 0x50
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003106:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800310a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800310e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800311a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003124:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003128:	460b      	mov	r3, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	d060      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800312e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003132:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003136:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800313a:	d039      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800313c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003140:	d832      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003146:	d035      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314c:	d82c      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d031      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d826      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800315a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800315e:	d02d      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003160:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003164:	d820      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316a:	d012      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003170:	d81a      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d024      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800317a:	d115      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800317c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003180:	3308      	adds	r3, #8
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f001 f9ad 	bl	80044e4 <RCCEx_PLL2_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003190:	e017      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003196:	3328      	adds	r3, #40	; 0x28
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f001 fa54 	bl	8004648 <RCCEx_PLL3_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031a6:	e00c      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031ae:	e008      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031b0:	bf00      	nop
 80031b2:	e006      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031b4:	bf00      	nop
 80031b6:	e004      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031b8:	bf00      	nop
 80031ba:	e002      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031da:	4a02      	ldr	r2, [pc, #8]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031dc:	430b      	orrs	r3, r1
 80031de:	6593      	str	r3, [r2, #88]	; 0x58
 80031e0:	e006      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80031fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800320a:	460b      	mov	r3, r1
 800320c:	4313      	orrs	r3, r2
 800320e:	d037      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321a:	d00e      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800321c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003220:	d816      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d018      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322a:	d111      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800322c:	4bc4      	ldr	r3, [pc, #784]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	4ac3      	ldr	r2, [pc, #780]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003238:	e00f      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800323a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323e:	3308      	adds	r3, #8
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f001 f94e 	bl	80044e4 <RCCEx_PLL2_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800324e:	e004      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800325a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003262:	4bb7      	ldr	r3, [pc, #732]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800326a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003270:	4ab3      	ldr	r2, [pc, #716]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003272:	430b      	orrs	r3, r1
 8003274:	6513      	str	r3, [r2, #80]	; 0x50
 8003276:	e003      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800327c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800328c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003296:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800329a:	460b      	mov	r3, r1
 800329c:	4313      	orrs	r3, r2
 800329e:	d039      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d81c      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032ed 	.word	0x080032ed
 80032b4:	080032c1 	.word	0x080032c1
 80032b8:	080032cf 	.word	0x080032cf
 80032bc:	080032ed 	.word	0x080032ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c0:	4b9f      	ldr	r3, [pc, #636]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	4a9e      	ldr	r2, [pc, #632]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032cc:	e00f      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d2:	3308      	adds	r3, #8
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f904 	bl	80044e4 <RCCEx_PLL2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032f6:	4b92      	ldr	r3, [pc, #584]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	f023 0103 	bic.w	r1, r3, #3
 80032fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003304:	4a8e      	ldr	r2, [pc, #568]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003306:	430b      	orrs	r3, r1
 8003308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800330a:	e003      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003310:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800332a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800332e:	460b      	mov	r3, r1
 8003330:	4313      	orrs	r3, r2
 8003332:	f000 8099 	beq.w	8003468 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003336:	4b83      	ldr	r3, [pc, #524]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a82      	ldr	r2, [pc, #520]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003342:	f7fe f8fd 	bl	8001540 <HAL_GetTick>
 8003346:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800334a:	e00b      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334c:	f7fe f8f8 	bl	8001540 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d903      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003362:	e005      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003364:	4b77      	ldr	r3, [pc, #476]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ed      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003374:	2b00      	cmp	r3, #0
 8003376:	d173      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003378:	4b71      	ldr	r3, [pc, #452]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800337a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800337c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003384:	4053      	eors	r3, r2
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	2b00      	cmp	r3, #0
 800338c:	d015      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800338e:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003396:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800339a:	4b69      	ldr	r3, [pc, #420]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a68      	ldr	r2, [pc, #416]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a6:	4b66      	ldr	r3, [pc, #408]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a65      	ldr	r2, [pc, #404]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033b2:	4a63      	ldr	r2, [pc, #396]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c6:	d118      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe f8ba 	bl	8001540 <HAL_GetTick>
 80033cc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d0:	e00d      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe f8b5 	bl	8001540 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80033dc:	1ad2      	subs	r2, r2, r3
 80033de:	f241 3388 	movw	r3, #5000	; 0x1388
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d903      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80033ec:	e005      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ee:	4b54      	ldr	r3, [pc, #336]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0eb      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80033fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d129      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003412:	d10e      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800341c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003424:	091a      	lsrs	r2, r3, #4
 8003426:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003428:	4013      	ands	r3, r2
 800342a:	4a45      	ldr	r2, [pc, #276]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800342c:	430b      	orrs	r3, r1
 800342e:	6113      	str	r3, [r2, #16]
 8003430:	e005      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	4a42      	ldr	r2, [pc, #264]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003438:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800343c:	6113      	str	r3, [r2, #16]
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003440:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	4a3c      	ldr	r2, [pc, #240]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	e008      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003456:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800345a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003464:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f002 0301 	and.w	r3, r2, #1
 8003474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800347e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	f000 8090 	beq.w	80035aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800348a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003492:	2b28      	cmp	r3, #40	; 0x28
 8003494:	d870      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	08003581 	.word	0x08003581
 80034a0:	08003579 	.word	0x08003579
 80034a4:	08003579 	.word	0x08003579
 80034a8:	08003579 	.word	0x08003579
 80034ac:	08003579 	.word	0x08003579
 80034b0:	08003579 	.word	0x08003579
 80034b4:	08003579 	.word	0x08003579
 80034b8:	08003579 	.word	0x08003579
 80034bc:	0800354d 	.word	0x0800354d
 80034c0:	08003579 	.word	0x08003579
 80034c4:	08003579 	.word	0x08003579
 80034c8:	08003579 	.word	0x08003579
 80034cc:	08003579 	.word	0x08003579
 80034d0:	08003579 	.word	0x08003579
 80034d4:	08003579 	.word	0x08003579
 80034d8:	08003579 	.word	0x08003579
 80034dc:	08003563 	.word	0x08003563
 80034e0:	08003579 	.word	0x08003579
 80034e4:	08003579 	.word	0x08003579
 80034e8:	08003579 	.word	0x08003579
 80034ec:	08003579 	.word	0x08003579
 80034f0:	08003579 	.word	0x08003579
 80034f4:	08003579 	.word	0x08003579
 80034f8:	08003579 	.word	0x08003579
 80034fc:	08003581 	.word	0x08003581
 8003500:	08003579 	.word	0x08003579
 8003504:	08003579 	.word	0x08003579
 8003508:	08003579 	.word	0x08003579
 800350c:	08003579 	.word	0x08003579
 8003510:	08003579 	.word	0x08003579
 8003514:	08003579 	.word	0x08003579
 8003518:	08003579 	.word	0x08003579
 800351c:	08003581 	.word	0x08003581
 8003520:	08003579 	.word	0x08003579
 8003524:	08003579 	.word	0x08003579
 8003528:	08003579 	.word	0x08003579
 800352c:	08003579 	.word	0x08003579
 8003530:	08003579 	.word	0x08003579
 8003534:	08003579 	.word	0x08003579
 8003538:	08003579 	.word	0x08003579
 800353c:	08003581 	.word	0x08003581
 8003540:	58024400 	.word	0x58024400
 8003544:	58024800 	.word	0x58024800
 8003548:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003550:	3308      	adds	r3, #8
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f000 ffc5 	bl	80044e4 <RCCEx_PLL2_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003560:	e00f      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003566:	3328      	adds	r3, #40	; 0x28
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f001 f86c 	bl	8004648 <RCCEx_PLL3_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003576:	e004      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800357e:	e000      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003582:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800358a:	4bc0      	ldr	r3, [pc, #768]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359a:	4abc      	ldr	r2, [pc, #752]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800359c:	430b      	orrs	r3, r1
 800359e:	6553      	str	r3, [r2, #84]	; 0x54
 80035a0:	e003      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f002 0302 	and.w	r3, r2, #2
 80035b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035c0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80035c4:	460b      	mov	r3, r1
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d043      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d824      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	08003629 	.word	0x08003629
 80035e0:	080035f5 	.word	0x080035f5
 80035e4:	0800360b 	.word	0x0800360b
 80035e8:	08003629 	.word	0x08003629
 80035ec:	08003629 	.word	0x08003629
 80035f0:	08003629 	.word	0x08003629
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f8:	3308      	adds	r3, #8
 80035fa:	2101      	movs	r1, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 ff71 	bl	80044e4 <RCCEx_PLL2_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360e:	3328      	adds	r3, #40	; 0x28
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f818 	bl	8004648 <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800361e:	e004      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003632:	4b96      	ldr	r3, [pc, #600]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f023 0107 	bic.w	r1, r3, #7
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	4a92      	ldr	r2, [pc, #584]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003644:	430b      	orrs	r3, r1
 8003646:	6553      	str	r3, [r2, #84]	; 0x54
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800364e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f002 0304 	and.w	r3, r2, #4
 800365e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003668:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800366c:	460b      	mov	r3, r1
 800366e:	4313      	orrs	r3, r2
 8003670:	d043      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003676:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800367a:	2b05      	cmp	r3, #5
 800367c:	d824      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800367e:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	080036d1 	.word	0x080036d1
 8003688:	0800369d 	.word	0x0800369d
 800368c:	080036b3 	.word	0x080036b3
 8003690:	080036d1 	.word	0x080036d1
 8003694:	080036d1 	.word	0x080036d1
 8003698:	080036d1 	.word	0x080036d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800369c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a0:	3308      	adds	r3, #8
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 ff1d 	bl	80044e4 <RCCEx_PLL2_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036b0:	e00f      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b6:	3328      	adds	r3, #40	; 0x28
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 ffc4 	bl	8004648 <RCCEx_PLL3_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036c6:	e004      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80036d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f023 0107 	bic.w	r1, r3, #7
 80036e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ea:	4a68      	ldr	r2, [pc, #416]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6593      	str	r3, [r2, #88]	; 0x58
 80036f0:	e003      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f002 0320 	and.w	r3, r2, #32
 8003706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800370a:	2300      	movs	r3, #0
 800370c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d055      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800371a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003726:	d033      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800372c:	d82c      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d02f      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d826      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800373a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800373e:	d02b      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003740:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003744:	d820      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800374a:	d012      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003750:	d81a      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800375a:	d115      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003760:	3308      	adds	r3, #8
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f000 febd 	bl	80044e4 <RCCEx_PLL2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003770:	e015      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003776:	3328      	adds	r3, #40	; 0x28
 8003778:	2102      	movs	r1, #2
 800377a:	4618      	mov	r0, r3
 800377c:	f000 ff64 	bl	8004648 <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003786:	e00a      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800378e:	e006      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003790:	bf00      	nop
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80037ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b6:	4a35      	ldr	r2, [pc, #212]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6553      	str	r3, [r2, #84]	; 0x54
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80037d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80037dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d058      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80037e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80037f2:	d033      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80037f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80037f8:	d82c      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	d02f      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003804:	d826      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800380a:	d02b      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800380c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003810:	d820      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003816:	d012      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381c:	d81a      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d022      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003826:	d115      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800382c:	3308      	adds	r3, #8
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fe57 	bl	80044e4 <RCCEx_PLL2_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800383c:	e015      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003842:	3328      	adds	r3, #40	; 0x28
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fefe 	bl	8004648 <RCCEx_PLL3_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003852:	e00a      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800385a:	e006      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800385c:	bf00      	nop
 800385e:	e004      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10e      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800387a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003882:	4a02      	ldr	r2, [pc, #8]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6593      	str	r3, [r2, #88]	; 0x58
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003894:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80038a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d055      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038c4:	d033      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80038c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038ca:	d82c      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d0:	d02f      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d826      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80038dc:	d02b      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80038de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80038e2:	d820      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e8:	d012      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80038ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ee:	d81a      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d022      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80038f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f8:	d115      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fe:	3308      	adds	r3, #8
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fdee 	bl	80044e4 <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800390e:	e015      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003914:	3328      	adds	r3, #40	; 0x28
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fe95 	bl	8004648 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003924:	e00a      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800392e:	bf00      	nop
 8003930:	e004      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003944:	4ba1      	ldr	r3, [pc, #644]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003950:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003954:	4a9d      	ldr	r2, [pc, #628]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6593      	str	r3, [r2, #88]	; 0x58
 800395a:	e003      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003960:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 0308 	and.w	r3, r2, #8
 8003970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800397a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d01e      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d10c      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003996:	3328      	adds	r3, #40	; 0x28
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fe54 	bl	8004648 <RCCEx_PLL3_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039ac:	4b87      	ldr	r3, [pc, #540]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039bc:	4a83      	ldr	r2, [pc, #524]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039be:	430b      	orrs	r3, r1
 80039c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f002 0310 	and.w	r3, r2, #16
 80039ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80039d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80039dc:	460b      	mov	r3, r1
 80039de:	4313      	orrs	r3, r2
 80039e0:	d01e      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ee:	d10c      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f4:	3328      	adds	r3, #40	; 0x28
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fe25 	bl	8004648 <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a0a:	4b70      	ldr	r3, [pc, #448]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a1a:	4a6c      	ldr	r2, [pc, #432]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a36:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d03e      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a4c:	d022      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a52:	d81b      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003a5e:	e015      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a64:	3308      	adds	r3, #8
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd3b 	bl	80044e4 <RCCEx_PLL2_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7a:	3328      	adds	r3, #40	; 0x28
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fde2 	bl	8004648 <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aae:	4a47      	ldr	r2, [pc, #284]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003aca:	67bb      	str	r3, [r7, #120]	; 0x78
 8003acc:	2300      	movs	r3, #0
 8003ace:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ad0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	d03b      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae6:	d01f      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003aec:	d818      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d003      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af8:	d007      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003afa:	e011      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a32      	ldr	r2, [pc, #200]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b08:	e00f      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0e:	3328      	adds	r3, #40	; 0x28
 8003b10:	2101      	movs	r1, #1
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fd98 	bl	8004648 <RCCEx_PLL3_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b26:	e000      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6553      	str	r3, [r2, #84]	; 0x54
 8003b48:	e003      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b60:	2300      	movs	r3, #0
 8003b62:	677b      	str	r3, [r7, #116]	; 0x74
 8003b64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	d034      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d007      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003b7e:	e011      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b8c:	e00e      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b92:	3308      	adds	r3, #8
 8003b94:	2102      	movs	r1, #2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fca4 	bl	80044e4 <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ba2:	e003      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	4a02      	ldr	r2, [pc, #8]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003bca:	bf00      	nop
 8003bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be6:	2300      	movs	r3, #0
 8003be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	d00c      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf8:	3328      	adds	r3, #40	; 0x28
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fd23 	bl	8004648 <RCCEx_PLL3_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c24:	460b      	mov	r3, r1
 8003c26:	4313      	orrs	r3, r2
 8003c28:	d038      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c36:	d018      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3c:	d811      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c42:	d014      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c48:	d80b      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d011      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c52:	d106      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c54:	4bc3      	ldr	r3, [pc, #780]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4ac2      	ldr	r2, [pc, #776]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c60:	e008      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c7c:	4bb9      	ldr	r3, [pc, #740]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	4ab5      	ldr	r2, [pc, #724]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	6553      	str	r3, [r2, #84]	; 0x54
 8003c92:	e003      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003caa:	2300      	movs	r3, #0
 8003cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cb8:	4baa      	ldr	r3, [pc, #680]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc6:	4aa7      	ldr	r2, [pc, #668]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8003cda:	2300      	movs	r3, #0
 8003cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cde:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ce8:	4b9e      	ldr	r3, [pc, #632]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a9b      	ldr	r2, [pc, #620]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d009      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003d18:	4b92      	ldr	r3, [pc, #584]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d26:	4a8f      	ldr	r2, [pc, #572]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d48:	4b86      	ldr	r3, [pc, #536]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	4a85      	ldr	r2, [pc, #532]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d52:	6113      	str	r3, [r2, #16]
 8003d54:	4b83      	ldr	r3, [pc, #524]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d56:	6919      	ldr	r1, [r3, #16]
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d60:	4a80      	ldr	r2, [pc, #512]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d62:	430b      	orrs	r3, r1
 8003d64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d82:	4b78      	ldr	r3, [pc, #480]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	4a74      	ldr	r2, [pc, #464]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d92:	430b      	orrs	r3, r1
 8003d94:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003da2:	633b      	str	r3, [r7, #48]	; 0x30
 8003da4:	2300      	movs	r3, #0
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
 8003da8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003db2:	4b6c      	ldr	r3, [pc, #432]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc2:	4a68      	ldr	r2, [pc, #416]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dda:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d011      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de8:	3308      	adds	r3, #8
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fb79 	bl	80044e4 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003df8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	2100      	movs	r1, #0
 8003e12:	6239      	str	r1, [r7, #32]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	d011      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e28:	3308      	adds	r3, #8
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fb59 	bl	80044e4 <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	2100      	movs	r1, #0
 8003e52:	61b9      	str	r1, [r7, #24]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	d011      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e68:	3308      	adds	r3, #8
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fb39 	bl	80044e4 <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	2100      	movs	r1, #0
 8003e92:	6139      	str	r1, [r7, #16]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	d011      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea8:	3328      	adds	r3, #40	; 0x28
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fbcb 	bl	8004648 <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	d011      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee8:	3328      	adds	r3, #40	; 0x28
 8003eea:	2101      	movs	r1, #1
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fbab 	bl	8004648 <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	2100      	movs	r1, #0
 8003f12:	6039      	str	r1, [r7, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d011      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f28:	3328      	adds	r3, #40	; 0x28
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fb8b 	bl	8004648 <RCCEx_PLL3_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003f48:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400

08003f68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003f6c:	f7fe fde2 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4904      	ldr	r1, [pc, #16]	; (8003f90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	58024400 	.word	0x58024400
 8003f90:	08007188 	.word	0x08007188

08003f94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f9c:	4ba1      	ldr	r3, [pc, #644]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003fa6:	4b9f      	ldr	r3, [pc, #636]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	0b1b      	lsrs	r3, r3, #12
 8003fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fb2:	4b9c      	ldr	r3, [pc, #624]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003fbe:	4b99      	ldr	r3, [pc, #612]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	08db      	lsrs	r3, r3, #3
 8003fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8111 	beq.w	8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	f000 8083 	beq.w	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	f200 80a1 	bhi.w	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d056      	beq.n	80040ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ffe:	e099      	b.n	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004000:	4b88      	ldr	r3, [pc, #544]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02d      	beq.n	8004068 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800400c:	4b85      	ldr	r3, [pc, #532]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	08db      	lsrs	r3, r3, #3
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	4a84      	ldr	r2, [pc, #528]	; (8004228 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
 800401c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004036:	4b7b      	ldr	r3, [pc, #492]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004046:	ed97 6a03 	vldr	s12, [r7, #12]
 800404a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800422c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800404e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004066:	e087      	b.n	8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004230 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407a:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408a:	ed97 6a03 	vldr	s12, [r7, #12]
 800408e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800422c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040aa:	e065      	b.n	8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80040d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800422c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ee:	e043      	b.n	8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004102:	4b48      	ldr	r3, [pc, #288]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004112:	ed97 6a03 	vldr	s12, [r7, #12]
 8004116:	eddf 5a45 	vldr	s11, [pc, #276]	; 800422c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800411a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004132:	e021      	b.n	8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004156:	ed97 6a03 	vldr	s12, [r7, #12]
 800415a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800422c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800415e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004176:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	0a5b      	lsrs	r3, r3, #9
 800417e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800418e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004192:	edd7 6a07 	vldr	s13, [r7, #28]
 8004196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800419a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419e:	ee17 2a90 	vmov	r2, s15
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80041a6:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b0:	ee07 3a90 	vmov	s15, r3
 80041b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041cc:	ee17 2a90 	vmov	r2, s15
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	0e1b      	lsrs	r3, r3, #24
 80041da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80041f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041fa:	ee17 2a90 	vmov	r2, s15
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004202:	e008      	b.n	8004216 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
}
 8004216:	bf00      	nop
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	58024400 	.word	0x58024400
 8004228:	03d09000 	.word	0x03d09000
 800422c:	46000000 	.word	0x46000000
 8004230:	4c742400 	.word	0x4c742400
 8004234:	4a742400 	.word	0x4a742400
 8004238:	4af42400 	.word	0x4af42400

0800423c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004244:	4ba1      	ldr	r3, [pc, #644]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800424e:	4b9f      	ldr	r3, [pc, #636]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	0d1b      	lsrs	r3, r3, #20
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800425a:	4b9c      	ldr	r3, [pc, #624]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004266:	4b99      	ldr	r3, [pc, #612]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	08db      	lsrs	r3, r3, #3
 800426c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8111 	beq.w	80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b02      	cmp	r3, #2
 800428e:	f000 8083 	beq.w	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b02      	cmp	r3, #2
 8004296:	f200 80a1 	bhi.w	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d056      	beq.n	8004354 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042a6:	e099      	b.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a8:	4b88      	ldr	r3, [pc, #544]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02d      	beq.n	8004310 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042b4:	4b85      	ldr	r3, [pc, #532]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	4a84      	ldr	r2, [pc, #528]	; (80044d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042de:	4b7b      	ldr	r3, [pc, #492]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80042f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800430e:	e087      	b.n	8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004322:	4b6a      	ldr	r3, [pc, #424]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a03 	vldr	s12, [r7, #12]
 8004336:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004352:	e065      	b.n	8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b59      	ldr	r3, [pc, #356]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a03 	vldr	s12, [r7, #12]
 800437a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004396:	e043      	b.n	8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b48      	ldr	r3, [pc, #288]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80043be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043da:	e021      	b.n	8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b37      	ldr	r3, [pc, #220]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004402:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800441e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004420:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	0a5b      	lsrs	r3, r3, #9
 8004426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800443a:	edd7 6a07 	vldr	s13, [r7, #28]
 800443e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004446:	ee17 2a90 	vmov	r2, s15
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800444e:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004468:	edd7 6a07 	vldr	s13, [r7, #28]
 800446c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004474:	ee17 2a90 	vmov	r2, s15
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	0e1b      	lsrs	r3, r3, #24
 8004482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004496:	edd7 6a07 	vldr	s13, [r7, #28]
 800449a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800449e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a2:	ee17 2a90 	vmov	r2, s15
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044aa:	e008      	b.n	80044be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
}
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	58024400 	.word	0x58024400
 80044d0:	03d09000 	.word	0x03d09000
 80044d4:	46000000 	.word	0x46000000
 80044d8:	4c742400 	.word	0x4c742400
 80044dc:	4a742400 	.word	0x4a742400
 80044e0:	4af42400 	.word	0x4af42400

080044e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044f2:	4b53      	ldr	r3, [pc, #332]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d101      	bne.n	8004502 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e099      	b.n	8004636 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004502:	4b4f      	ldr	r3, [pc, #316]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a4e      	ldr	r2, [pc, #312]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800450c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450e:	f7fd f817 	bl	8001540 <HAL_GetTick>
 8004512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004514:	e008      	b.n	8004528 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004516:	f7fd f813 	bl	8001540 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e086      	b.n	8004636 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004528:	4b45      	ldr	r3, [pc, #276]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004534:	4b42      	ldr	r3, [pc, #264]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	493f      	ldr	r1, [pc, #252]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	628b      	str	r3, [r1, #40]	; 0x28
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	3b01      	subs	r3, #1
 800454e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	3b01      	subs	r3, #1
 8004558:	025b      	lsls	r3, r3, #9
 800455a:	b29b      	uxth	r3, r3
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	3b01      	subs	r3, #1
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004578:	4931      	ldr	r1, [pc, #196]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800457e:	4b30      	ldr	r3, [pc, #192]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	492d      	ldr	r1, [pc, #180]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004590:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	f023 0220 	bic.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4928      	ldr	r1, [pc, #160]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045a2:	4b27      	ldr	r3, [pc, #156]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	4a26      	ldr	r2, [pc, #152]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b2:	4b24      	ldr	r3, [pc, #144]	; (8004644 <RCCEx_PLL2_Config+0x160>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	69d2      	ldr	r2, [r2, #28]
 80045ba:	00d2      	lsls	r2, r2, #3
 80045bc:	4920      	ldr	r1, [pc, #128]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045c2:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045c8:	f043 0310 	orr.w	r3, r3, #16
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4a19      	ldr	r2, [pc, #100]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045e0:	e00f      	b.n	8004602 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	4a14      	ldr	r2, [pc, #80]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045f4:	e005      	b.n	8004602 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004600:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 8004608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800460c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460e:	f7fc ff97 	bl	8001540 <HAL_GetTick>
 8004612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004614:	e008      	b.n	8004628 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004616:	f7fc ff93 	bl	8001540 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <RCCEx_PLL2_Config+0x15c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	58024400 	.word	0x58024400
 8004644:	ffff0007 	.word	0xffff0007

08004648 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004656:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b03      	cmp	r3, #3
 8004660:	d101      	bne.n	8004666 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e099      	b.n	800479a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004666:	4b4f      	ldr	r3, [pc, #316]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a4e      	ldr	r2, [pc, #312]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004672:	f7fc ff65 	bl	8001540 <HAL_GetTick>
 8004676:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004678:	e008      	b.n	800468c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800467a:	f7fc ff61 	bl	8001540 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e086      	b.n	800479a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004698:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	051b      	lsls	r3, r3, #20
 80046a6:	493f      	ldr	r1, [pc, #252]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	628b      	str	r3, [r1, #40]	; 0x28
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	025b      	lsls	r3, r3, #9
 80046be:	b29b      	uxth	r3, r3
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046dc:	4931      	ldr	r1, [pc, #196]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046e2:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	492d      	ldr	r1, [pc, #180]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	4928      	ldr	r1, [pc, #160]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004706:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800470c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <RCCEx_PLL3_Config+0x160>)
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	69d2      	ldr	r2, [r2, #28]
 800471e:	00d2      	lsls	r2, r2, #3
 8004720:	4920      	ldr	r1, [pc, #128]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004738:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800473e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004744:	e00f      	b.n	8004766 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800474c:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004758:	e005      	b.n	8004766 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004772:	f7fc fee5 	bl	8001540 <HAL_GetTick>
 8004776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004778:	e008      	b.n	800478c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800477a:	f7fc fee1 	bl	8001540 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <RCCEx_PLL3_Config+0x15c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	58024400 	.word	0x58024400
 80047a8:	ffff0007 	.word	0xffff0007

080047ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e049      	b.n	8004852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fbd8 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 fad6 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d001      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e054      	b.n	800491e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <HAL_TIM_Base_Start_IT+0xd0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d022      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d01d      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a22      	ldr	r2, [pc, #136]	; (8004930 <HAL_TIM_Base_Start_IT+0xd4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a21      	ldr	r2, [pc, #132]	; (8004934 <HAL_TIM_Base_Start_IT+0xd8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <HAL_TIM_Base_Start_IT+0xdc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_TIM_Base_Start_IT+0xe0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <HAL_TIM_Base_Start_IT+0xe4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	; (8004944 <HAL_TIM_Base_Start_IT+0xe8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d115      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	4b19      	ldr	r3, [pc, #100]	; (8004948 <HAL_TIM_Base_Start_IT+0xec>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d015      	beq.n	800491a <HAL_TIM_Base_Start_IT+0xbe>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d011      	beq.n	800491a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e008      	b.n	800491a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e000      	b.n	800491c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40001800 	.word	0x40001800
 8004944:	40014000 	.word	0x40014000
 8004948:	00010007 	.word	0x00010007

0800494c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d020      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0202 	mvn.w	r2, #2
 8004980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9e2 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9d4 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f9e5 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d020      	beq.n	80049fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0204 	mvn.w	r2, #4
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9bc 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9ae 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f9bf 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d020      	beq.n	8004a48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0208 	mvn.w	r2, #8
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f996 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f988 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f999 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d020      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01b      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0210 	mvn.w	r2, #16
 8004a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f970 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f962 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f973 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0201 	mvn.w	r2, #1
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc f860 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fb37 	bl	8005154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb2f 	bl	8005168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f92d 	bl	8004d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00c      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0220 	mvn.w	r2, #32
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 faf7 	bl	8005140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIM_ConfigClockSource+0x1c>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e0dc      	b.n	8004d32 <HAL_TIM_ConfigClockSource+0x1d6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a64      	ldr	r2, [pc, #400]	; (8004d40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	f000 80a9 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bb4:	4a62      	ldr	r2, [pc, #392]	; (8004d40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	f200 80ae 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bbc:	4a61      	ldr	r2, [pc, #388]	; (8004d44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	f000 80a1 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bc4:	4a5f      	ldr	r2, [pc, #380]	; (8004d44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	f200 80a6 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bcc:	4a5e      	ldr	r2, [pc, #376]	; (8004d48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	f000 8099 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bd4:	4a5c      	ldr	r2, [pc, #368]	; (8004d48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	f200 809e 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004be0:	f000 8091 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004be4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004be8:	f200 8096 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf0:	f000 8089 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf8:	f200 808e 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c00:	d03e      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0x124>
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c06:	f200 8087 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	f000 8086 	beq.w	8004d1e <HAL_TIM_ConfigClockSource+0x1c2>
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d87f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d01a      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0xf6>
 8004c1c:	2b70      	cmp	r3, #112	; 0x70
 8004c1e:	d87b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c20:	2b60      	cmp	r3, #96	; 0x60
 8004c22:	d050      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x16a>
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d877      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c28:	2b50      	cmp	r3, #80	; 0x50
 8004c2a:	d03c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x14a>
 8004c2c:	2b50      	cmp	r3, #80	; 0x50
 8004c2e:	d873      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d058      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x18a>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d86f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d064      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c3c:	2b30      	cmp	r3, #48	; 0x30
 8004c3e:	d86b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d060      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d867      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05c      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d05a      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c50:	e062      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6899      	ldr	r1, [r3, #8]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f000 f9bf 	bl	8004fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	609a      	str	r2, [r3, #8]
      break;
 8004c7e:	e04f      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f000 f9a8 	bl	8004fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca2:	609a      	str	r2, [r3, #8]
      break;
 8004ca4:	e03c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 f918 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2150      	movs	r1, #80	; 0x50
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f972 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e02c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 f937 	bl	8004f46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2160      	movs	r1, #96	; 0x60
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f962 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e01c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 f8f8 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2140      	movs	r1, #64	; 0x40
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f952 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 8004d04:	e00c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f000 f949 	bl	8004fa8 <TIM_ITRx_SetConfig>
      break;
 8004d16:	e003      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e000      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	ffceff88 	.word	0xffceff88
 8004d40:	00100040 	.word	0x00100040
 8004d44:	00100030 	.word	0x00100030
 8004d48:	00100020 	.word	0x00100020

08004d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a46      	ldr	r2, [pc, #280]	; (8004ec8 <TIM_Base_SetConfig+0x12c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d00f      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a43      	ldr	r2, [pc, #268]	; (8004ecc <TIM_Base_SetConfig+0x130>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a42      	ldr	r2, [pc, #264]	; (8004ed0 <TIM_Base_SetConfig+0x134>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d007      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a41      	ldr	r2, [pc, #260]	; (8004ed4 <TIM_Base_SetConfig+0x138>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	; (8004ed8 <TIM_Base_SetConfig+0x13c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d108      	bne.n	8004dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a35      	ldr	r2, [pc, #212]	; (8004ec8 <TIM_Base_SetConfig+0x12c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01f      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d01b      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a32      	ldr	r2, [pc, #200]	; (8004ecc <TIM_Base_SetConfig+0x130>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d017      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a31      	ldr	r2, [pc, #196]	; (8004ed0 <TIM_Base_SetConfig+0x134>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a30      	ldr	r2, [pc, #192]	; (8004ed4 <TIM_Base_SetConfig+0x138>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00f      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <TIM_Base_SetConfig+0x13c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2e      	ldr	r2, [pc, #184]	; (8004edc <TIM_Base_SetConfig+0x140>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2d      	ldr	r2, [pc, #180]	; (8004ee0 <TIM_Base_SetConfig+0x144>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2c      	ldr	r2, [pc, #176]	; (8004ee4 <TIM_Base_SetConfig+0x148>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d108      	bne.n	8004e48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <TIM_Base_SetConfig+0x12c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00f      	beq.n	8004e94 <TIM_Base_SetConfig+0xf8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <TIM_Base_SetConfig+0x13c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_Base_SetConfig+0xf8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	; (8004edc <TIM_Base_SetConfig+0x140>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_Base_SetConfig+0xf8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_Base_SetConfig+0x144>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_Base_SetConfig+0xf8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_Base_SetConfig+0x148>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d103      	bne.n	8004e9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40010400 	.word	0x40010400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f023 0210 	bic.w	r2, r3, #16
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <TIM_ITRx_SetConfig+0x38>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f043 0307 	orr.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	609a      	str	r2, [r3, #8]
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	ffcfff8f 	.word	0xffcfff8f

08004fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	431a      	orrs	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005038:	2302      	movs	r3, #2
 800503a:	e06d      	b.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a30      	ldr	r2, [pc, #192]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005076:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005088:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a20      	ldr	r2, [pc, #128]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d022      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d01d      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d018      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00e      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d009      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a15      	ldr	r2, [pc, #84]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10c      	bne.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40001800 	.word	0x40001800
 800513c:	40014000 	.word	0x40014000

08005140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e042      	b.n	8005214 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fb ffa1 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2224      	movs	r2, #36	; 0x24
 80051aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 ff22 	bl	8006010 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f8b3 	bl	8005338 <UART_SetConfig>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e01b      	b.n	8005214 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ffa1 	bl	8006154 <UART_CheckIdleState>
 8005212:	4603      	mov	r3, r0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	2b20      	cmp	r3, #32
 8005234:	d17b      	bne.n	800532e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_UART_Transmit+0x26>
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e074      	b.n	8005330 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2221      	movs	r2, #33	; 0x21
 8005252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005256:	f7fc f973 	bl	8001540 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005274:	d108      	bne.n	8005288 <HAL_UART_Transmit+0x6c>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	e003      	b.n	8005290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005290:	e030      	b.n	80052f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f001 f803 	bl	80062a8 <UART_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e03d      	b.n	8005330 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	3302      	adds	r3, #2
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	e007      	b.n	80052e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3301      	adds	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1c8      	bne.n	8005292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	2140      	movs	r1, #64	; 0x40
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 ffcc 	bl	80062a8 <UART_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e006      	b.n	8005330 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e000      	b.n	8005330 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
  }
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800533c:	b092      	sub	sp, #72	; 0x48
 800533e:	af00      	add	r7, sp, #0
 8005340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	431a      	orrs	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4313      	orrs	r3, r2
 800535e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4bbe      	ldr	r3, [pc, #760]	; (8005660 <UART_SetConfig+0x328>)
 8005368:	4013      	ands	r3, r2
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005370:	430b      	orrs	r3, r1
 8005372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4ab3      	ldr	r2, [pc, #716]	; (8005664 <UART_SetConfig+0x32c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a0:	4313      	orrs	r3, r2
 80053a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	4baf      	ldr	r3, [pc, #700]	; (8005668 <UART_SetConfig+0x330>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	f023 010f 	bic.w	r1, r3, #15
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4aa6      	ldr	r2, [pc, #664]	; (800566c <UART_SetConfig+0x334>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d177      	bne.n	80054c8 <UART_SetConfig+0x190>
 80053d8:	4ba5      	ldr	r3, [pc, #660]	; (8005670 <UART_SetConfig+0x338>)
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e0:	2b28      	cmp	r3, #40	; 0x28
 80053e2:	d86d      	bhi.n	80054c0 <UART_SetConfig+0x188>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0xb4>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005491 	.word	0x08005491
 80053f0:	080054c1 	.word	0x080054c1
 80053f4:	080054c1 	.word	0x080054c1
 80053f8:	080054c1 	.word	0x080054c1
 80053fc:	080054c1 	.word	0x080054c1
 8005400:	080054c1 	.word	0x080054c1
 8005404:	080054c1 	.word	0x080054c1
 8005408:	080054c1 	.word	0x080054c1
 800540c:	08005499 	.word	0x08005499
 8005410:	080054c1 	.word	0x080054c1
 8005414:	080054c1 	.word	0x080054c1
 8005418:	080054c1 	.word	0x080054c1
 800541c:	080054c1 	.word	0x080054c1
 8005420:	080054c1 	.word	0x080054c1
 8005424:	080054c1 	.word	0x080054c1
 8005428:	080054c1 	.word	0x080054c1
 800542c:	080054a1 	.word	0x080054a1
 8005430:	080054c1 	.word	0x080054c1
 8005434:	080054c1 	.word	0x080054c1
 8005438:	080054c1 	.word	0x080054c1
 800543c:	080054c1 	.word	0x080054c1
 8005440:	080054c1 	.word	0x080054c1
 8005444:	080054c1 	.word	0x080054c1
 8005448:	080054c1 	.word	0x080054c1
 800544c:	080054a9 	.word	0x080054a9
 8005450:	080054c1 	.word	0x080054c1
 8005454:	080054c1 	.word	0x080054c1
 8005458:	080054c1 	.word	0x080054c1
 800545c:	080054c1 	.word	0x080054c1
 8005460:	080054c1 	.word	0x080054c1
 8005464:	080054c1 	.word	0x080054c1
 8005468:	080054c1 	.word	0x080054c1
 800546c:	080054b1 	.word	0x080054b1
 8005470:	080054c1 	.word	0x080054c1
 8005474:	080054c1 	.word	0x080054c1
 8005478:	080054c1 	.word	0x080054c1
 800547c:	080054c1 	.word	0x080054c1
 8005480:	080054c1 	.word	0x080054c1
 8005484:	080054c1 	.word	0x080054c1
 8005488:	080054c1 	.word	0x080054c1
 800548c:	080054b9 	.word	0x080054b9
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e326      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005498:	2304      	movs	r3, #4
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e322      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80054a0:	2308      	movs	r3, #8
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e31e      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e31a      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80054b0:	2320      	movs	r3, #32
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e316      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80054b8:	2340      	movs	r3, #64	; 0x40
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e312      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e30e      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a69      	ldr	r2, [pc, #420]	; (8005674 <UART_SetConfig+0x33c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d130      	bne.n	8005534 <UART_SetConfig+0x1fc>
 80054d2:	4b67      	ldr	r3, [pc, #412]	; (8005670 <UART_SetConfig+0x338>)
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d826      	bhi.n	800552c <UART_SetConfig+0x1f4>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x1ac>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	080054fd 	.word	0x080054fd
 80054e8:	08005505 	.word	0x08005505
 80054ec:	0800550d 	.word	0x0800550d
 80054f0:	08005515 	.word	0x08005515
 80054f4:	0800551d 	.word	0x0800551d
 80054f8:	08005525 	.word	0x08005525
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e2f0      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005504:	2304      	movs	r3, #4
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550a:	e2ec      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800550c:	2308      	movs	r3, #8
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e2e8      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005514:	2310      	movs	r3, #16
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e2e4      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800551c:	2320      	movs	r3, #32
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e2e0      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005524:	2340      	movs	r3, #64	; 0x40
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e2dc      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e2d8      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a4f      	ldr	r2, [pc, #316]	; (8005678 <UART_SetConfig+0x340>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d130      	bne.n	80055a0 <UART_SetConfig+0x268>
 800553e:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <UART_SetConfig+0x338>)
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	2b05      	cmp	r3, #5
 8005548:	d826      	bhi.n	8005598 <UART_SetConfig+0x260>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <UART_SetConfig+0x218>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	08005569 	.word	0x08005569
 8005554:	08005571 	.word	0x08005571
 8005558:	08005579 	.word	0x08005579
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	2300      	movs	r3, #0
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e2ba      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005570:	2304      	movs	r3, #4
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e2b6      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005578:	2308      	movs	r3, #8
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e2b2      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005580:	2310      	movs	r3, #16
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e2ae      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005588:	2320      	movs	r3, #32
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e2aa      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005590:	2340      	movs	r3, #64	; 0x40
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e2a6      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e2a2      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a35      	ldr	r2, [pc, #212]	; (800567c <UART_SetConfig+0x344>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d130      	bne.n	800560c <UART_SetConfig+0x2d4>
 80055aa:	4b31      	ldr	r3, [pc, #196]	; (8005670 <UART_SetConfig+0x338>)
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d826      	bhi.n	8005604 <UART_SetConfig+0x2cc>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x284>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055d5 	.word	0x080055d5
 80055c0:	080055dd 	.word	0x080055dd
 80055c4:	080055e5 	.word	0x080055e5
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e284      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e280      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e27c      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e278      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80055f4:	2320      	movs	r3, #32
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e274      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e270      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e26c      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <UART_SetConfig+0x348>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d142      	bne.n	800569c <UART_SetConfig+0x364>
 8005616:	4b16      	ldr	r3, [pc, #88]	; (8005670 <UART_SetConfig+0x338>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	2b05      	cmp	r3, #5
 8005620:	d838      	bhi.n	8005694 <UART_SetConfig+0x35c>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0x2f0>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005641 	.word	0x08005641
 800562c:	08005649 	.word	0x08005649
 8005630:	08005651 	.word	0x08005651
 8005634:	08005659 	.word	0x08005659
 8005638:	08005685 	.word	0x08005685
 800563c:	0800568d 	.word	0x0800568d
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005646:	e24e      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e24a      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005656:	e246      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e242      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005660:	cfff69f3 	.word	0xcfff69f3
 8005664:	58000c00 	.word	0x58000c00
 8005668:	11fff4ff 	.word	0x11fff4ff
 800566c:	40011000 	.word	0x40011000
 8005670:	58024400 	.word	0x58024400
 8005674:	40004400 	.word	0x40004400
 8005678:	40004800 	.word	0x40004800
 800567c:	40004c00 	.word	0x40004c00
 8005680:	40005000 	.word	0x40005000
 8005684:	2320      	movs	r3, #32
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568a:	e22c      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005692:	e228      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569a:	e224      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4ab1      	ldr	r2, [pc, #708]	; (8005968 <UART_SetConfig+0x630>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d176      	bne.n	8005794 <UART_SetConfig+0x45c>
 80056a6:	4bb1      	ldr	r3, [pc, #708]	; (800596c <UART_SetConfig+0x634>)
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ae:	2b28      	cmp	r3, #40	; 0x28
 80056b0:	d86c      	bhi.n	800578c <UART_SetConfig+0x454>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x380>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	0800575d 	.word	0x0800575d
 80056bc:	0800578d 	.word	0x0800578d
 80056c0:	0800578d 	.word	0x0800578d
 80056c4:	0800578d 	.word	0x0800578d
 80056c8:	0800578d 	.word	0x0800578d
 80056cc:	0800578d 	.word	0x0800578d
 80056d0:	0800578d 	.word	0x0800578d
 80056d4:	0800578d 	.word	0x0800578d
 80056d8:	08005765 	.word	0x08005765
 80056dc:	0800578d 	.word	0x0800578d
 80056e0:	0800578d 	.word	0x0800578d
 80056e4:	0800578d 	.word	0x0800578d
 80056e8:	0800578d 	.word	0x0800578d
 80056ec:	0800578d 	.word	0x0800578d
 80056f0:	0800578d 	.word	0x0800578d
 80056f4:	0800578d 	.word	0x0800578d
 80056f8:	0800576d 	.word	0x0800576d
 80056fc:	0800578d 	.word	0x0800578d
 8005700:	0800578d 	.word	0x0800578d
 8005704:	0800578d 	.word	0x0800578d
 8005708:	0800578d 	.word	0x0800578d
 800570c:	0800578d 	.word	0x0800578d
 8005710:	0800578d 	.word	0x0800578d
 8005714:	0800578d 	.word	0x0800578d
 8005718:	08005775 	.word	0x08005775
 800571c:	0800578d 	.word	0x0800578d
 8005720:	0800578d 	.word	0x0800578d
 8005724:	0800578d 	.word	0x0800578d
 8005728:	0800578d 	.word	0x0800578d
 800572c:	0800578d 	.word	0x0800578d
 8005730:	0800578d 	.word	0x0800578d
 8005734:	0800578d 	.word	0x0800578d
 8005738:	0800577d 	.word	0x0800577d
 800573c:	0800578d 	.word	0x0800578d
 8005740:	0800578d 	.word	0x0800578d
 8005744:	0800578d 	.word	0x0800578d
 8005748:	0800578d 	.word	0x0800578d
 800574c:	0800578d 	.word	0x0800578d
 8005750:	0800578d 	.word	0x0800578d
 8005754:	0800578d 	.word	0x0800578d
 8005758:	08005785 	.word	0x08005785
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005762:	e1c0      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005764:	2304      	movs	r3, #4
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576a:	e1bc      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800576c:	2308      	movs	r3, #8
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005772:	e1b8      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005774:	2310      	movs	r3, #16
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577a:	e1b4      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800577c:	2320      	movs	r3, #32
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e1b0      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e1ac      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e1a8      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a75      	ldr	r2, [pc, #468]	; (8005970 <UART_SetConfig+0x638>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d130      	bne.n	8005800 <UART_SetConfig+0x4c8>
 800579e:	4b73      	ldr	r3, [pc, #460]	; (800596c <UART_SetConfig+0x634>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d826      	bhi.n	80057f8 <UART_SetConfig+0x4c0>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0x478>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057c9 	.word	0x080057c9
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	080057d9 	.word	0x080057d9
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ce:	e18a      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d6:	e186      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057de:	e182      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e17e      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80057e8:	2320      	movs	r3, #32
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ee:	e17a      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80057f0:	2340      	movs	r3, #64	; 0x40
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e176      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e172      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5b      	ldr	r2, [pc, #364]	; (8005974 <UART_SetConfig+0x63c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d130      	bne.n	800586c <UART_SetConfig+0x534>
 800580a:	4b58      	ldr	r3, [pc, #352]	; (800596c <UART_SetConfig+0x634>)
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	2b05      	cmp	r3, #5
 8005814:	d826      	bhi.n	8005864 <UART_SetConfig+0x52c>
 8005816:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0x4e4>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005835 	.word	0x08005835
 8005820:	0800583d 	.word	0x0800583d
 8005824:	08005845 	.word	0x08005845
 8005828:	0800584d 	.word	0x0800584d
 800582c:	08005855 	.word	0x08005855
 8005830:	0800585d 	.word	0x0800585d
 8005834:	2300      	movs	r3, #0
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e154      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800583c:	2304      	movs	r3, #4
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005842:	e150      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005844:	2308      	movs	r3, #8
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584a:	e14c      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800584c:	2310      	movs	r3, #16
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e148      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005854:	2320      	movs	r3, #32
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e144      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800585c:	2340      	movs	r3, #64	; 0x40
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e140      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e13c      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a41      	ldr	r2, [pc, #260]	; (8005978 <UART_SetConfig+0x640>)
 8005872:	4293      	cmp	r3, r2
 8005874:	f040 8082 	bne.w	800597c <UART_SetConfig+0x644>
 8005878:	4b3c      	ldr	r3, [pc, #240]	; (800596c <UART_SetConfig+0x634>)
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005880:	2b28      	cmp	r3, #40	; 0x28
 8005882:	d86d      	bhi.n	8005960 <UART_SetConfig+0x628>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0x554>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	08005931 	.word	0x08005931
 8005890:	08005961 	.word	0x08005961
 8005894:	08005961 	.word	0x08005961
 8005898:	08005961 	.word	0x08005961
 800589c:	08005961 	.word	0x08005961
 80058a0:	08005961 	.word	0x08005961
 80058a4:	08005961 	.word	0x08005961
 80058a8:	08005961 	.word	0x08005961
 80058ac:	08005939 	.word	0x08005939
 80058b0:	08005961 	.word	0x08005961
 80058b4:	08005961 	.word	0x08005961
 80058b8:	08005961 	.word	0x08005961
 80058bc:	08005961 	.word	0x08005961
 80058c0:	08005961 	.word	0x08005961
 80058c4:	08005961 	.word	0x08005961
 80058c8:	08005961 	.word	0x08005961
 80058cc:	08005941 	.word	0x08005941
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005961 	.word	0x08005961
 80058d8:	08005961 	.word	0x08005961
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005961 	.word	0x08005961
 80058e4:	08005961 	.word	0x08005961
 80058e8:	08005961 	.word	0x08005961
 80058ec:	08005949 	.word	0x08005949
 80058f0:	08005961 	.word	0x08005961
 80058f4:	08005961 	.word	0x08005961
 80058f8:	08005961 	.word	0x08005961
 80058fc:	08005961 	.word	0x08005961
 8005900:	08005961 	.word	0x08005961
 8005904:	08005961 	.word	0x08005961
 8005908:	08005961 	.word	0x08005961
 800590c:	08005951 	.word	0x08005951
 8005910:	08005961 	.word	0x08005961
 8005914:	08005961 	.word	0x08005961
 8005918:	08005961 	.word	0x08005961
 800591c:	08005961 	.word	0x08005961
 8005920:	08005961 	.word	0x08005961
 8005924:	08005961 	.word	0x08005961
 8005928:	08005961 	.word	0x08005961
 800592c:	08005959 	.word	0x08005959
 8005930:	2301      	movs	r3, #1
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e0d6      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e0d2      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e0ce      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594e:	e0ca      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005950:	2320      	movs	r3, #32
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005956:	e0c6      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005958:	2340      	movs	r3, #64	; 0x40
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595e:	e0c2      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005966:	e0be      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005968:	40011400 	.word	0x40011400
 800596c:	58024400 	.word	0x58024400
 8005970:	40007800 	.word	0x40007800
 8005974:	40007c00 	.word	0x40007c00
 8005978:	40011800 	.word	0x40011800
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4aad      	ldr	r2, [pc, #692]	; (8005c38 <UART_SetConfig+0x900>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d176      	bne.n	8005a74 <UART_SetConfig+0x73c>
 8005986:	4bad      	ldr	r3, [pc, #692]	; (8005c3c <UART_SetConfig+0x904>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800598e:	2b28      	cmp	r3, #40	; 0x28
 8005990:	d86c      	bhi.n	8005a6c <UART_SetConfig+0x734>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0x660>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	08005a3d 	.word	0x08005a3d
 800599c:	08005a6d 	.word	0x08005a6d
 80059a0:	08005a6d 	.word	0x08005a6d
 80059a4:	08005a6d 	.word	0x08005a6d
 80059a8:	08005a6d 	.word	0x08005a6d
 80059ac:	08005a6d 	.word	0x08005a6d
 80059b0:	08005a6d 	.word	0x08005a6d
 80059b4:	08005a6d 	.word	0x08005a6d
 80059b8:	08005a45 	.word	0x08005a45
 80059bc:	08005a6d 	.word	0x08005a6d
 80059c0:	08005a6d 	.word	0x08005a6d
 80059c4:	08005a6d 	.word	0x08005a6d
 80059c8:	08005a6d 	.word	0x08005a6d
 80059cc:	08005a6d 	.word	0x08005a6d
 80059d0:	08005a6d 	.word	0x08005a6d
 80059d4:	08005a6d 	.word	0x08005a6d
 80059d8:	08005a4d 	.word	0x08005a4d
 80059dc:	08005a6d 	.word	0x08005a6d
 80059e0:	08005a6d 	.word	0x08005a6d
 80059e4:	08005a6d 	.word	0x08005a6d
 80059e8:	08005a6d 	.word	0x08005a6d
 80059ec:	08005a6d 	.word	0x08005a6d
 80059f0:	08005a6d 	.word	0x08005a6d
 80059f4:	08005a6d 	.word	0x08005a6d
 80059f8:	08005a55 	.word	0x08005a55
 80059fc:	08005a6d 	.word	0x08005a6d
 8005a00:	08005a6d 	.word	0x08005a6d
 8005a04:	08005a6d 	.word	0x08005a6d
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005a6d 	.word	0x08005a6d
 8005a10:	08005a6d 	.word	0x08005a6d
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005a6d 	.word	0x08005a6d
 8005a20:	08005a6d 	.word	0x08005a6d
 8005a24:	08005a6d 	.word	0x08005a6d
 8005a28:	08005a6d 	.word	0x08005a6d
 8005a2c:	08005a6d 	.word	0x08005a6d
 8005a30:	08005a6d 	.word	0x08005a6d
 8005a34:	08005a6d 	.word	0x08005a6d
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e050      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e04c      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a52:	e048      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5a:	e044      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e040      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e03c      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e038      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a71      	ldr	r2, [pc, #452]	; (8005c40 <UART_SetConfig+0x908>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d130      	bne.n	8005ae0 <UART_SetConfig+0x7a8>
 8005a7e:	4b6f      	ldr	r3, [pc, #444]	; (8005c3c <UART_SetConfig+0x904>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d826      	bhi.n	8005ad8 <UART_SetConfig+0x7a0>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x758>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa9 	.word	0x08005aa9
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	08005ab9 	.word	0x08005ab9
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ad1 	.word	0x08005ad1
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e01a      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab6:	e016      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005abe:	e012      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac6:	e00e      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005ac8:	2320      	movs	r3, #32
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e00a      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e006      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e002      	b.n	8005ae6 <UART_SetConfig+0x7ae>
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a55      	ldr	r2, [pc, #340]	; (8005c40 <UART_SetConfig+0x908>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	f040 80f8 	bne.w	8005ce2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005af2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	dc46      	bgt.n	8005b88 <UART_SetConfig+0x850>
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	db75      	blt.n	8005bea <UART_SetConfig+0x8b2>
 8005afe:	3b02      	subs	r3, #2
 8005b00:	2b1e      	cmp	r3, #30
 8005b02:	d872      	bhi.n	8005bea <UART_SetConfig+0x8b2>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0x7d4>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b8f 	.word	0x08005b8f
 8005b10:	08005beb 	.word	0x08005beb
 8005b14:	08005b97 	.word	0x08005b97
 8005b18:	08005beb 	.word	0x08005beb
 8005b1c:	08005beb 	.word	0x08005beb
 8005b20:	08005beb 	.word	0x08005beb
 8005b24:	08005ba7 	.word	0x08005ba7
 8005b28:	08005beb 	.word	0x08005beb
 8005b2c:	08005beb 	.word	0x08005beb
 8005b30:	08005beb 	.word	0x08005beb
 8005b34:	08005beb 	.word	0x08005beb
 8005b38:	08005beb 	.word	0x08005beb
 8005b3c:	08005beb 	.word	0x08005beb
 8005b40:	08005beb 	.word	0x08005beb
 8005b44:	08005bb7 	.word	0x08005bb7
 8005b48:	08005beb 	.word	0x08005beb
 8005b4c:	08005beb 	.word	0x08005beb
 8005b50:	08005beb 	.word	0x08005beb
 8005b54:	08005beb 	.word	0x08005beb
 8005b58:	08005beb 	.word	0x08005beb
 8005b5c:	08005beb 	.word	0x08005beb
 8005b60:	08005beb 	.word	0x08005beb
 8005b64:	08005beb 	.word	0x08005beb
 8005b68:	08005beb 	.word	0x08005beb
 8005b6c:	08005beb 	.word	0x08005beb
 8005b70:	08005beb 	.word	0x08005beb
 8005b74:	08005beb 	.word	0x08005beb
 8005b78:	08005beb 	.word	0x08005beb
 8005b7c:	08005beb 	.word	0x08005beb
 8005b80:	08005beb 	.word	0x08005beb
 8005b84:	08005bdd 	.word	0x08005bdd
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d02a      	beq.n	8005be2 <UART_SetConfig+0x8aa>
 8005b8c:	e02d      	b.n	8005bea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b8e:	f7fe f9eb 	bl	8003f68 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b94:	e02f      	b.n	8005bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe f9fa 	bl	8003f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba4:	e027      	b.n	8005bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ba6:	f107 0318 	add.w	r3, r7, #24
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fb46 	bl	800423c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb4:	e01f      	b.n	8005bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb6:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <UART_SetConfig+0x904>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bc2:	4b1e      	ldr	r3, [pc, #120]	; (8005c3c <UART_SetConfig+0x904>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	08db      	lsrs	r3, r3, #3
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <UART_SetConfig+0x90c>)
 8005bce:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bd4:	e00f      	b.n	8005bf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <UART_SetConfig+0x90c>)
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bda:	e00c      	b.n	8005bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <UART_SetConfig+0x910>)
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be0:	e009      	b.n	8005bf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be8:	e005      	b.n	8005bf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 81ee 	beq.w	8005fda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <UART_SetConfig+0x914>)
 8005c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d305      	bcc.n	8005c2e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d910      	bls.n	8005c50 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c34:	e1d1      	b.n	8005fda <UART_SetConfig+0xca2>
 8005c36:	bf00      	nop
 8005c38:	40011c00 	.word	0x40011c00
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	58000c00 	.word	0x58000c00
 8005c44:	03d09000 	.word	0x03d09000
 8005c48:	003d0900 	.word	0x003d0900
 8005c4c:	08007198 	.word	0x08007198
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	2200      	movs	r2, #0
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	60fa      	str	r2, [r7, #12]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	4ac0      	ldr	r2, [pc, #768]	; (8005f60 <UART_SetConfig+0xc28>)
 8005c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2200      	movs	r2, #0
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c72:	f7fa fb95 	bl	80003a0 <__aeabi_uldivmod>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	020b      	lsls	r3, r1, #8
 8005c88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c8c:	0202      	lsls	r2, r0, #8
 8005c8e:	6979      	ldr	r1, [r7, #20]
 8005c90:	6849      	ldr	r1, [r1, #4]
 8005c92:	0849      	lsrs	r1, r1, #1
 8005c94:	2000      	movs	r0, #0
 8005c96:	460c      	mov	r4, r1
 8005c98:	4605      	mov	r5, r0
 8005c9a:	eb12 0804 	adds.w	r8, r2, r4
 8005c9e:	eb43 0905 	adc.w	r9, r3, r5
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	469a      	mov	sl, r3
 8005caa:	4693      	mov	fp, r2
 8005cac:	4652      	mov	r2, sl
 8005cae:	465b      	mov	r3, fp
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	f7fa fb74 	bl	80003a0 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc6:	d308      	bcc.n	8005cda <UART_SetConfig+0x9a2>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cce:	d204      	bcs.n	8005cda <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e17f      	b.n	8005fda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ce0:	e17b      	b.n	8005fda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cea:	f040 80bd 	bne.w	8005e68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005cee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	dc48      	bgt.n	8005d88 <UART_SetConfig+0xa50>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	db7b      	blt.n	8005df2 <UART_SetConfig+0xaba>
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d879      	bhi.n	8005df2 <UART_SetConfig+0xaba>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x9cc>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d8f 	.word	0x08005d8f
 8005d08:	08005d97 	.word	0x08005d97
 8005d0c:	08005df3 	.word	0x08005df3
 8005d10:	08005df3 	.word	0x08005df3
 8005d14:	08005d9f 	.word	0x08005d9f
 8005d18:	08005df3 	.word	0x08005df3
 8005d1c:	08005df3 	.word	0x08005df3
 8005d20:	08005df3 	.word	0x08005df3
 8005d24:	08005daf 	.word	0x08005daf
 8005d28:	08005df3 	.word	0x08005df3
 8005d2c:	08005df3 	.word	0x08005df3
 8005d30:	08005df3 	.word	0x08005df3
 8005d34:	08005df3 	.word	0x08005df3
 8005d38:	08005df3 	.word	0x08005df3
 8005d3c:	08005df3 	.word	0x08005df3
 8005d40:	08005df3 	.word	0x08005df3
 8005d44:	08005dbf 	.word	0x08005dbf
 8005d48:	08005df3 	.word	0x08005df3
 8005d4c:	08005df3 	.word	0x08005df3
 8005d50:	08005df3 	.word	0x08005df3
 8005d54:	08005df3 	.word	0x08005df3
 8005d58:	08005df3 	.word	0x08005df3
 8005d5c:	08005df3 	.word	0x08005df3
 8005d60:	08005df3 	.word	0x08005df3
 8005d64:	08005df3 	.word	0x08005df3
 8005d68:	08005df3 	.word	0x08005df3
 8005d6c:	08005df3 	.word	0x08005df3
 8005d70:	08005df3 	.word	0x08005df3
 8005d74:	08005df3 	.word	0x08005df3
 8005d78:	08005df3 	.word	0x08005df3
 8005d7c:	08005df3 	.word	0x08005df3
 8005d80:	08005df3 	.word	0x08005df3
 8005d84:	08005de5 	.word	0x08005de5
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d02e      	beq.n	8005dea <UART_SetConfig+0xab2>
 8005d8c:	e031      	b.n	8005df2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d8e:	f7fc ff01 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8005d92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d94:	e033      	b.n	8005dfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d96:	f7fc ff13 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8005d9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d9c:	e02f      	b.n	8005dfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe f8f6 	bl	8003f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dac:	e027      	b.n	8005dfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dae:	f107 0318 	add.w	r3, r7, #24
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fa42 	bl	800423c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dbc:	e01f      	b.n	8005dfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dbe:	4b69      	ldr	r3, [pc, #420]	; (8005f64 <UART_SetConfig+0xc2c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dca:	4b66      	ldr	r3, [pc, #408]	; (8005f64 <UART_SetConfig+0xc2c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	4a64      	ldr	r2, [pc, #400]	; (8005f68 <UART_SetConfig+0xc30>)
 8005dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ddc:	e00f      	b.n	8005dfe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005dde:	4b62      	ldr	r3, [pc, #392]	; (8005f68 <UART_SetConfig+0xc30>)
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005de2:	e00c      	b.n	8005dfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005de4:	4b61      	ldr	r3, [pc, #388]	; (8005f6c <UART_SetConfig+0xc34>)
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005de8:	e009      	b.n	8005dfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005df0:	e005      	b.n	8005dfe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80ea 	beq.w	8005fda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	4a55      	ldr	r2, [pc, #340]	; (8005f60 <UART_SetConfig+0xc28>)
 8005e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e18:	005a      	lsls	r2, r3, #1
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	441a      	add	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	2b0f      	cmp	r3, #15
 8005e30:	d916      	bls.n	8005e60 <UART_SetConfig+0xb28>
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e38:	d212      	bcs.n	8005e60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f023 030f 	bic.w	r3, r3, #15
 8005e42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e52:	4313      	orrs	r3, r2
 8005e54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	e0bc      	b.n	8005fda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e66:	e0b8      	b.n	8005fda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	dc4b      	bgt.n	8005f08 <UART_SetConfig+0xbd0>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f2c0 8087 	blt.w	8005f84 <UART_SetConfig+0xc4c>
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	f200 8084 	bhi.w	8005f84 <UART_SetConfig+0xc4c>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0xb4c>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005f0f 	.word	0x08005f0f
 8005e88:	08005f17 	.word	0x08005f17
 8005e8c:	08005f85 	.word	0x08005f85
 8005e90:	08005f85 	.word	0x08005f85
 8005e94:	08005f1f 	.word	0x08005f1f
 8005e98:	08005f85 	.word	0x08005f85
 8005e9c:	08005f85 	.word	0x08005f85
 8005ea0:	08005f85 	.word	0x08005f85
 8005ea4:	08005f2f 	.word	0x08005f2f
 8005ea8:	08005f85 	.word	0x08005f85
 8005eac:	08005f85 	.word	0x08005f85
 8005eb0:	08005f85 	.word	0x08005f85
 8005eb4:	08005f85 	.word	0x08005f85
 8005eb8:	08005f85 	.word	0x08005f85
 8005ebc:	08005f85 	.word	0x08005f85
 8005ec0:	08005f85 	.word	0x08005f85
 8005ec4:	08005f3f 	.word	0x08005f3f
 8005ec8:	08005f85 	.word	0x08005f85
 8005ecc:	08005f85 	.word	0x08005f85
 8005ed0:	08005f85 	.word	0x08005f85
 8005ed4:	08005f85 	.word	0x08005f85
 8005ed8:	08005f85 	.word	0x08005f85
 8005edc:	08005f85 	.word	0x08005f85
 8005ee0:	08005f85 	.word	0x08005f85
 8005ee4:	08005f85 	.word	0x08005f85
 8005ee8:	08005f85 	.word	0x08005f85
 8005eec:	08005f85 	.word	0x08005f85
 8005ef0:	08005f85 	.word	0x08005f85
 8005ef4:	08005f85 	.word	0x08005f85
 8005ef8:	08005f85 	.word	0x08005f85
 8005efc:	08005f85 	.word	0x08005f85
 8005f00:	08005f85 	.word	0x08005f85
 8005f04:	08005f77 	.word	0x08005f77
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d037      	beq.n	8005f7c <UART_SetConfig+0xc44>
 8005f0c:	e03a      	b.n	8005f84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0e:	f7fc fe41 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8005f12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f14:	e03c      	b.n	8005f90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f16:	f7fc fe53 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8005f1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f1c:	e038      	b.n	8005f90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe f836 	bl	8003f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f2c:	e030      	b.n	8005f90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f2e:	f107 0318 	add.w	r3, r7, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe f982 	bl	800423c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f3c:	e028      	b.n	8005f90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <UART_SetConfig+0xc2c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d012      	beq.n	8005f70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <UART_SetConfig+0xc2c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	08db      	lsrs	r3, r3, #3
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <UART_SetConfig+0xc30>)
 8005f56:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f5c:	e018      	b.n	8005f90 <UART_SetConfig+0xc58>
 8005f5e:	bf00      	nop
 8005f60:	08007198 	.word	0x08007198
 8005f64:	58024400 	.word	0x58024400
 8005f68:	03d09000 	.word	0x03d09000
 8005f6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005f70:	4b24      	ldr	r3, [pc, #144]	; (8006004 <UART_SetConfig+0xccc>)
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f74:	e00c      	b.n	8005f90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <UART_SetConfig+0xcd0>)
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f7a:	e009      	b.n	8005f90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f82:	e005      	b.n	8005f90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f8e:	bf00      	nop
    }

    if (pclk != 0U)
 8005f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d021      	beq.n	8005fda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	; (800600c <UART_SetConfig+0xcd4>)
 8005f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	441a      	add	r2, r3
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	2b0f      	cmp	r3, #15
 8005fbe:	d909      	bls.n	8005fd4 <UART_SetConfig+0xc9c>
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc6:	d205      	bcs.n	8005fd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e002      	b.n	8005fda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2200      	movs	r2, #0
 8005fee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ff6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3748      	adds	r7, #72	; 0x48
 8005ffe:	46bd      	mov	sp, r7
 8006000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006004:	03d09000 	.word	0x03d09000
 8006008:	003d0900 	.word	0x003d0900
 800600c:	08007198 	.word	0x08007198

08006010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01a      	beq.n	8006126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610e:	d10a      	bne.n	8006126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
  }
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b098      	sub	sp, #96	; 0x60
 8006158:	af02      	add	r7, sp, #8
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006164:	f7fb f9ec 	bl	8001540 <HAL_GetTick>
 8006168:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b08      	cmp	r3, #8
 8006176:	d12f      	bne.n	80061d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006180:	2200      	movs	r2, #0
 8006182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f88e 	bl	80062a8 <UART_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d022      	beq.n	80061d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a6:	653b      	str	r3, [r7, #80]	; 0x50
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b0:	647b      	str	r3, [r7, #68]	; 0x44
 80061b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e6      	bne.n	8006192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e063      	b.n	80062a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d149      	bne.n	800627a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ee:	2200      	movs	r2, #0
 80061f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f857 	bl	80062a8 <UART_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d03c      	beq.n	800627a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	623b      	str	r3, [r7, #32]
   return(result);
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
 8006220:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e6      	bne.n	8006200 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3308      	adds	r3, #8
 8006238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	60fb      	str	r3, [r7, #12]
   return(result);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	64bb      	str	r3, [r7, #72]	; 0x48
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006252:	61fa      	str	r2, [r7, #28]
 8006254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	69b9      	ldr	r1, [r7, #24]
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	617b      	str	r3, [r7, #20]
   return(result);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e5      	bne.n	8006232 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e012      	b.n	80062a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3758      	adds	r7, #88	; 0x58
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b8:	e04f      	b.n	800635a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d04b      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c2:	f7fb f93d 	bl	8001540 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d302      	bcc.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e04e      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d037      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0xb2>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b80      	cmp	r3, #128	; 0x80
 80062ee:	d034      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0xb2>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d031      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d110      	bne.n	8006326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f839 	bl	8006384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2208      	movs	r2, #8
 8006316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e029      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006334:	d111      	bne.n	800635a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800633e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f81f 	bl	8006384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e00f      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	429a      	cmp	r2, r3
 8006376:	d0a0      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b095      	sub	sp, #84	; 0x54
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063aa:	643b      	str	r3, [r7, #64]	; 0x40
 80063ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e6      	bne.n	800638c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	4b1e      	ldr	r3, [pc, #120]	; (800644c <UART_EndRxTransfer+0xc8>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d118      	bne.n	800642c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60bb      	str	r3, [r7, #8]
   return(result);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f023 0310 	bic.w	r3, r3, #16
 800640e:	647b      	str	r3, [r7, #68]	; 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	613b      	str	r3, [r7, #16]
   return(result);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006440:	bf00      	nop
 8006442:	3754      	adds	r7, #84	; 0x54
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	effffffe 	.word	0xeffffffe

08006450 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_UARTEx_DisableFifoMode+0x16>
 8006462:	2302      	movs	r3, #2
 8006464:	e027      	b.n	80064b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2224      	movs	r2, #36	; 0x24
 8006472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006494:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e02d      	b.n	8006536 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2224      	movs	r2, #36	; 0x24
 80064e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0201 	bic.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f850 	bl	80065bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006552:	2302      	movs	r3, #2
 8006554:	e02d      	b.n	80065b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2224      	movs	r2, #36	; 0x24
 8006562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f812 	bl	80065bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d108      	bne.n	80065de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065dc:	e031      	b.n	8006642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065de:	2310      	movs	r3, #16
 80065e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065e2:	2310      	movs	r3, #16
 80065e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	0e5b      	lsrs	r3, r3, #25
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	0f5b      	lsrs	r3, r3, #29
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	7b3a      	ldrb	r2, [r7, #12]
 800660a:	4911      	ldr	r1, [pc, #68]	; (8006650 <UARTEx_SetNbDataToProcess+0x94>)
 800660c:	5c8a      	ldrb	r2, [r1, r2]
 800660e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006612:	7b3a      	ldrb	r2, [r7, #12]
 8006614:	490f      	ldr	r1, [pc, #60]	; (8006654 <UARTEx_SetNbDataToProcess+0x98>)
 8006616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006618:	fb93 f3f2 	sdiv	r3, r3, r2
 800661c:	b29a      	uxth	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	7b7a      	ldrb	r2, [r7, #13]
 8006628:	4909      	ldr	r1, [pc, #36]	; (8006650 <UARTEx_SetNbDataToProcess+0x94>)
 800662a:	5c8a      	ldrb	r2, [r1, r2]
 800662c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006630:	7b7a      	ldrb	r2, [r7, #13]
 8006632:	4908      	ldr	r1, [pc, #32]	; (8006654 <UARTEx_SetNbDataToProcess+0x98>)
 8006634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006636:	fb93 f3f2 	sdiv	r3, r3, r2
 800663a:	b29a      	uxth	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	080071b0 	.word	0x080071b0
 8006654:	080071b8 	.word	0x080071b8

08006658 <__errno>:
 8006658:	4b01      	ldr	r3, [pc, #4]	; (8006660 <__errno+0x8>)
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	24000010 	.word	0x24000010

08006664 <__libc_init_array>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4d0d      	ldr	r5, [pc, #52]	; (800669c <__libc_init_array+0x38>)
 8006668:	4c0d      	ldr	r4, [pc, #52]	; (80066a0 <__libc_init_array+0x3c>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	2600      	movs	r6, #0
 8006670:	42a6      	cmp	r6, r4
 8006672:	d109      	bne.n	8006688 <__libc_init_array+0x24>
 8006674:	4d0b      	ldr	r5, [pc, #44]	; (80066a4 <__libc_init_array+0x40>)
 8006676:	4c0c      	ldr	r4, [pc, #48]	; (80066a8 <__libc_init_array+0x44>)
 8006678:	f000 fc8e 	bl	8006f98 <_init>
 800667c:	1b64      	subs	r4, r4, r5
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	2600      	movs	r6, #0
 8006682:	42a6      	cmp	r6, r4
 8006684:	d105      	bne.n	8006692 <__libc_init_array+0x2e>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f855 3b04 	ldr.w	r3, [r5], #4
 800668c:	4798      	blx	r3
 800668e:	3601      	adds	r6, #1
 8006690:	e7ee      	b.n	8006670 <__libc_init_array+0xc>
 8006692:	f855 3b04 	ldr.w	r3, [r5], #4
 8006696:	4798      	blx	r3
 8006698:	3601      	adds	r6, #1
 800669a:	e7f2      	b.n	8006682 <__libc_init_array+0x1e>
 800669c:	080071fc 	.word	0x080071fc
 80066a0:	080071fc 	.word	0x080071fc
 80066a4:	080071fc 	.word	0x080071fc
 80066a8:	08007200 	.word	0x08007200

080066ac <memset>:
 80066ac:	4402      	add	r2, r0
 80066ae:	4603      	mov	r3, r0
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d100      	bne.n	80066b6 <memset+0xa>
 80066b4:	4770      	bx	lr
 80066b6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ba:	e7f9      	b.n	80066b0 <memset+0x4>

080066bc <siprintf>:
 80066bc:	b40e      	push	{r1, r2, r3}
 80066be:	b500      	push	{lr}
 80066c0:	b09c      	sub	sp, #112	; 0x70
 80066c2:	ab1d      	add	r3, sp, #116	; 0x74
 80066c4:	9002      	str	r0, [sp, #8]
 80066c6:	9006      	str	r0, [sp, #24]
 80066c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066cc:	4809      	ldr	r0, [pc, #36]	; (80066f4 <siprintf+0x38>)
 80066ce:	9107      	str	r1, [sp, #28]
 80066d0:	9104      	str	r1, [sp, #16]
 80066d2:	4909      	ldr	r1, [pc, #36]	; (80066f8 <siprintf+0x3c>)
 80066d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d8:	9105      	str	r1, [sp, #20]
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	a902      	add	r1, sp, #8
 80066e0:	f000 f868 	bl	80067b4 <_svfiprintf_r>
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	2200      	movs	r2, #0
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	b01c      	add	sp, #112	; 0x70
 80066ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f0:	b003      	add	sp, #12
 80066f2:	4770      	bx	lr
 80066f4:	24000010 	.word	0x24000010
 80066f8:	ffff0208 	.word	0xffff0208

080066fc <__ssputs_r>:
 80066fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	688e      	ldr	r6, [r1, #8]
 8006702:	429e      	cmp	r6, r3
 8006704:	4682      	mov	sl, r0
 8006706:	460c      	mov	r4, r1
 8006708:	4690      	mov	r8, r2
 800670a:	461f      	mov	r7, r3
 800670c:	d838      	bhi.n	8006780 <__ssputs_r+0x84>
 800670e:	898a      	ldrh	r2, [r1, #12]
 8006710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006714:	d032      	beq.n	800677c <__ssputs_r+0x80>
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	6909      	ldr	r1, [r1, #16]
 800671a:	eba5 0901 	sub.w	r9, r5, r1
 800671e:	6965      	ldr	r5, [r4, #20]
 8006720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006728:	3301      	adds	r3, #1
 800672a:	444b      	add	r3, r9
 800672c:	106d      	asrs	r5, r5, #1
 800672e:	429d      	cmp	r5, r3
 8006730:	bf38      	it	cc
 8006732:	461d      	movcc	r5, r3
 8006734:	0553      	lsls	r3, r2, #21
 8006736:	d531      	bpl.n	800679c <__ssputs_r+0xa0>
 8006738:	4629      	mov	r1, r5
 800673a:	f000 fb63 	bl	8006e04 <_malloc_r>
 800673e:	4606      	mov	r6, r0
 8006740:	b950      	cbnz	r0, 8006758 <__ssputs_r+0x5c>
 8006742:	230c      	movs	r3, #12
 8006744:	f8ca 3000 	str.w	r3, [sl]
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	6921      	ldr	r1, [r4, #16]
 800675a:	464a      	mov	r2, r9
 800675c:	f000 fabe 	bl	8006cdc <memcpy>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	6126      	str	r6, [r4, #16]
 800676e:	6165      	str	r5, [r4, #20]
 8006770:	444e      	add	r6, r9
 8006772:	eba5 0509 	sub.w	r5, r5, r9
 8006776:	6026      	str	r6, [r4, #0]
 8006778:	60a5      	str	r5, [r4, #8]
 800677a:	463e      	mov	r6, r7
 800677c:	42be      	cmp	r6, r7
 800677e:	d900      	bls.n	8006782 <__ssputs_r+0x86>
 8006780:	463e      	mov	r6, r7
 8006782:	6820      	ldr	r0, [r4, #0]
 8006784:	4632      	mov	r2, r6
 8006786:	4641      	mov	r1, r8
 8006788:	f000 fab6 	bl	8006cf8 <memmove>
 800678c:	68a3      	ldr	r3, [r4, #8]
 800678e:	1b9b      	subs	r3, r3, r6
 8006790:	60a3      	str	r3, [r4, #8]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	4433      	add	r3, r6
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	2000      	movs	r0, #0
 800679a:	e7db      	b.n	8006754 <__ssputs_r+0x58>
 800679c:	462a      	mov	r2, r5
 800679e:	f000 fba5 	bl	8006eec <_realloc_r>
 80067a2:	4606      	mov	r6, r0
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d1e1      	bne.n	800676c <__ssputs_r+0x70>
 80067a8:	6921      	ldr	r1, [r4, #16]
 80067aa:	4650      	mov	r0, sl
 80067ac:	f000 fabe 	bl	8006d2c <_free_r>
 80067b0:	e7c7      	b.n	8006742 <__ssputs_r+0x46>
	...

080067b4 <_svfiprintf_r>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	4698      	mov	r8, r3
 80067ba:	898b      	ldrh	r3, [r1, #12]
 80067bc:	061b      	lsls	r3, r3, #24
 80067be:	b09d      	sub	sp, #116	; 0x74
 80067c0:	4607      	mov	r7, r0
 80067c2:	460d      	mov	r5, r1
 80067c4:	4614      	mov	r4, r2
 80067c6:	d50e      	bpl.n	80067e6 <_svfiprintf_r+0x32>
 80067c8:	690b      	ldr	r3, [r1, #16]
 80067ca:	b963      	cbnz	r3, 80067e6 <_svfiprintf_r+0x32>
 80067cc:	2140      	movs	r1, #64	; 0x40
 80067ce:	f000 fb19 	bl	8006e04 <_malloc_r>
 80067d2:	6028      	str	r0, [r5, #0]
 80067d4:	6128      	str	r0, [r5, #16]
 80067d6:	b920      	cbnz	r0, 80067e2 <_svfiprintf_r+0x2e>
 80067d8:	230c      	movs	r3, #12
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e0d1      	b.n	8006986 <_svfiprintf_r+0x1d2>
 80067e2:	2340      	movs	r3, #64	; 0x40
 80067e4:	616b      	str	r3, [r5, #20]
 80067e6:	2300      	movs	r3, #0
 80067e8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ea:	2320      	movs	r3, #32
 80067ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80067f4:	2330      	movs	r3, #48	; 0x30
 80067f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069a0 <_svfiprintf_r+0x1ec>
 80067fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067fe:	f04f 0901 	mov.w	r9, #1
 8006802:	4623      	mov	r3, r4
 8006804:	469a      	mov	sl, r3
 8006806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800680a:	b10a      	cbz	r2, 8006810 <_svfiprintf_r+0x5c>
 800680c:	2a25      	cmp	r2, #37	; 0x25
 800680e:	d1f9      	bne.n	8006804 <_svfiprintf_r+0x50>
 8006810:	ebba 0b04 	subs.w	fp, sl, r4
 8006814:	d00b      	beq.n	800682e <_svfiprintf_r+0x7a>
 8006816:	465b      	mov	r3, fp
 8006818:	4622      	mov	r2, r4
 800681a:	4629      	mov	r1, r5
 800681c:	4638      	mov	r0, r7
 800681e:	f7ff ff6d 	bl	80066fc <__ssputs_r>
 8006822:	3001      	adds	r0, #1
 8006824:	f000 80aa 	beq.w	800697c <_svfiprintf_r+0x1c8>
 8006828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800682a:	445a      	add	r2, fp
 800682c:	9209      	str	r2, [sp, #36]	; 0x24
 800682e:	f89a 3000 	ldrb.w	r3, [sl]
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 80a2 	beq.w	800697c <_svfiprintf_r+0x1c8>
 8006838:	2300      	movs	r3, #0
 800683a:	f04f 32ff 	mov.w	r2, #4294967295
 800683e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006842:	f10a 0a01 	add.w	sl, sl, #1
 8006846:	9304      	str	r3, [sp, #16]
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800684e:	931a      	str	r3, [sp, #104]	; 0x68
 8006850:	4654      	mov	r4, sl
 8006852:	2205      	movs	r2, #5
 8006854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006858:	4851      	ldr	r0, [pc, #324]	; (80069a0 <_svfiprintf_r+0x1ec>)
 800685a:	f7f9 fd51 	bl	8000300 <memchr>
 800685e:	9a04      	ldr	r2, [sp, #16]
 8006860:	b9d8      	cbnz	r0, 800689a <_svfiprintf_r+0xe6>
 8006862:	06d0      	lsls	r0, r2, #27
 8006864:	bf44      	itt	mi
 8006866:	2320      	movmi	r3, #32
 8006868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800686c:	0711      	lsls	r1, r2, #28
 800686e:	bf44      	itt	mi
 8006870:	232b      	movmi	r3, #43	; 0x2b
 8006872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006876:	f89a 3000 	ldrb.w	r3, [sl]
 800687a:	2b2a      	cmp	r3, #42	; 0x2a
 800687c:	d015      	beq.n	80068aa <_svfiprintf_r+0xf6>
 800687e:	9a07      	ldr	r2, [sp, #28]
 8006880:	4654      	mov	r4, sl
 8006882:	2000      	movs	r0, #0
 8006884:	f04f 0c0a 	mov.w	ip, #10
 8006888:	4621      	mov	r1, r4
 800688a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800688e:	3b30      	subs	r3, #48	; 0x30
 8006890:	2b09      	cmp	r3, #9
 8006892:	d94e      	bls.n	8006932 <_svfiprintf_r+0x17e>
 8006894:	b1b0      	cbz	r0, 80068c4 <_svfiprintf_r+0x110>
 8006896:	9207      	str	r2, [sp, #28]
 8006898:	e014      	b.n	80068c4 <_svfiprintf_r+0x110>
 800689a:	eba0 0308 	sub.w	r3, r0, r8
 800689e:	fa09 f303 	lsl.w	r3, r9, r3
 80068a2:	4313      	orrs	r3, r2
 80068a4:	9304      	str	r3, [sp, #16]
 80068a6:	46a2      	mov	sl, r4
 80068a8:	e7d2      	b.n	8006850 <_svfiprintf_r+0x9c>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	1d19      	adds	r1, r3, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	9103      	str	r1, [sp, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bfbb      	ittet	lt
 80068b6:	425b      	neglt	r3, r3
 80068b8:	f042 0202 	orrlt.w	r2, r2, #2
 80068bc:	9307      	strge	r3, [sp, #28]
 80068be:	9307      	strlt	r3, [sp, #28]
 80068c0:	bfb8      	it	lt
 80068c2:	9204      	strlt	r2, [sp, #16]
 80068c4:	7823      	ldrb	r3, [r4, #0]
 80068c6:	2b2e      	cmp	r3, #46	; 0x2e
 80068c8:	d10c      	bne.n	80068e4 <_svfiprintf_r+0x130>
 80068ca:	7863      	ldrb	r3, [r4, #1]
 80068cc:	2b2a      	cmp	r3, #42	; 0x2a
 80068ce:	d135      	bne.n	800693c <_svfiprintf_r+0x188>
 80068d0:	9b03      	ldr	r3, [sp, #12]
 80068d2:	1d1a      	adds	r2, r3, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	9203      	str	r2, [sp, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bfb8      	it	lt
 80068dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80068e0:	3402      	adds	r4, #2
 80068e2:	9305      	str	r3, [sp, #20]
 80068e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069b0 <_svfiprintf_r+0x1fc>
 80068e8:	7821      	ldrb	r1, [r4, #0]
 80068ea:	2203      	movs	r2, #3
 80068ec:	4650      	mov	r0, sl
 80068ee:	f7f9 fd07 	bl	8000300 <memchr>
 80068f2:	b140      	cbz	r0, 8006906 <_svfiprintf_r+0x152>
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	eba0 000a 	sub.w	r0, r0, sl
 80068fa:	fa03 f000 	lsl.w	r0, r3, r0
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	4303      	orrs	r3, r0
 8006902:	3401      	adds	r4, #1
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800690a:	4826      	ldr	r0, [pc, #152]	; (80069a4 <_svfiprintf_r+0x1f0>)
 800690c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006910:	2206      	movs	r2, #6
 8006912:	f7f9 fcf5 	bl	8000300 <memchr>
 8006916:	2800      	cmp	r0, #0
 8006918:	d038      	beq.n	800698c <_svfiprintf_r+0x1d8>
 800691a:	4b23      	ldr	r3, [pc, #140]	; (80069a8 <_svfiprintf_r+0x1f4>)
 800691c:	bb1b      	cbnz	r3, 8006966 <_svfiprintf_r+0x1b2>
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	3307      	adds	r3, #7
 8006922:	f023 0307 	bic.w	r3, r3, #7
 8006926:	3308      	adds	r3, #8
 8006928:	9303      	str	r3, [sp, #12]
 800692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692c:	4433      	add	r3, r6
 800692e:	9309      	str	r3, [sp, #36]	; 0x24
 8006930:	e767      	b.n	8006802 <_svfiprintf_r+0x4e>
 8006932:	fb0c 3202 	mla	r2, ip, r2, r3
 8006936:	460c      	mov	r4, r1
 8006938:	2001      	movs	r0, #1
 800693a:	e7a5      	b.n	8006888 <_svfiprintf_r+0xd4>
 800693c:	2300      	movs	r3, #0
 800693e:	3401      	adds	r4, #1
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	4619      	mov	r1, r3
 8006944:	f04f 0c0a 	mov.w	ip, #10
 8006948:	4620      	mov	r0, r4
 800694a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800694e:	3a30      	subs	r2, #48	; 0x30
 8006950:	2a09      	cmp	r2, #9
 8006952:	d903      	bls.n	800695c <_svfiprintf_r+0x1a8>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0c5      	beq.n	80068e4 <_svfiprintf_r+0x130>
 8006958:	9105      	str	r1, [sp, #20]
 800695a:	e7c3      	b.n	80068e4 <_svfiprintf_r+0x130>
 800695c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006960:	4604      	mov	r4, r0
 8006962:	2301      	movs	r3, #1
 8006964:	e7f0      	b.n	8006948 <_svfiprintf_r+0x194>
 8006966:	ab03      	add	r3, sp, #12
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	462a      	mov	r2, r5
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <_svfiprintf_r+0x1f8>)
 800696e:	a904      	add	r1, sp, #16
 8006970:	4638      	mov	r0, r7
 8006972:	f3af 8000 	nop.w
 8006976:	1c42      	adds	r2, r0, #1
 8006978:	4606      	mov	r6, r0
 800697a:	d1d6      	bne.n	800692a <_svfiprintf_r+0x176>
 800697c:	89ab      	ldrh	r3, [r5, #12]
 800697e:	065b      	lsls	r3, r3, #25
 8006980:	f53f af2c 	bmi.w	80067dc <_svfiprintf_r+0x28>
 8006984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006986:	b01d      	add	sp, #116	; 0x74
 8006988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698c:	ab03      	add	r3, sp, #12
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	462a      	mov	r2, r5
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <_svfiprintf_r+0x1f8>)
 8006994:	a904      	add	r1, sp, #16
 8006996:	4638      	mov	r0, r7
 8006998:	f000 f87a 	bl	8006a90 <_printf_i>
 800699c:	e7eb      	b.n	8006976 <_svfiprintf_r+0x1c2>
 800699e:	bf00      	nop
 80069a0:	080071c0 	.word	0x080071c0
 80069a4:	080071ca 	.word	0x080071ca
 80069a8:	00000000 	.word	0x00000000
 80069ac:	080066fd 	.word	0x080066fd
 80069b0:	080071c6 	.word	0x080071c6

080069b4 <_printf_common>:
 80069b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b8:	4616      	mov	r6, r2
 80069ba:	4699      	mov	r9, r3
 80069bc:	688a      	ldr	r2, [r1, #8]
 80069be:	690b      	ldr	r3, [r1, #16]
 80069c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069c4:	4293      	cmp	r3, r2
 80069c6:	bfb8      	it	lt
 80069c8:	4613      	movlt	r3, r2
 80069ca:	6033      	str	r3, [r6, #0]
 80069cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069d0:	4607      	mov	r7, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b10a      	cbz	r2, 80069da <_printf_common+0x26>
 80069d6:	3301      	adds	r3, #1
 80069d8:	6033      	str	r3, [r6, #0]
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	0699      	lsls	r1, r3, #26
 80069de:	bf42      	ittt	mi
 80069e0:	6833      	ldrmi	r3, [r6, #0]
 80069e2:	3302      	addmi	r3, #2
 80069e4:	6033      	strmi	r3, [r6, #0]
 80069e6:	6825      	ldr	r5, [r4, #0]
 80069e8:	f015 0506 	ands.w	r5, r5, #6
 80069ec:	d106      	bne.n	80069fc <_printf_common+0x48>
 80069ee:	f104 0a19 	add.w	sl, r4, #25
 80069f2:	68e3      	ldr	r3, [r4, #12]
 80069f4:	6832      	ldr	r2, [r6, #0]
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	42ab      	cmp	r3, r5
 80069fa:	dc26      	bgt.n	8006a4a <_printf_common+0x96>
 80069fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a00:	1e13      	subs	r3, r2, #0
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	bf18      	it	ne
 8006a06:	2301      	movne	r3, #1
 8006a08:	0692      	lsls	r2, r2, #26
 8006a0a:	d42b      	bmi.n	8006a64 <_printf_common+0xb0>
 8006a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a10:	4649      	mov	r1, r9
 8006a12:	4638      	mov	r0, r7
 8006a14:	47c0      	blx	r8
 8006a16:	3001      	adds	r0, #1
 8006a18:	d01e      	beq.n	8006a58 <_printf_common+0xa4>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	68e5      	ldr	r5, [r4, #12]
 8006a1e:	6832      	ldr	r2, [r6, #0]
 8006a20:	f003 0306 	and.w	r3, r3, #6
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	bf08      	it	eq
 8006a28:	1aad      	subeq	r5, r5, r2
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	6922      	ldr	r2, [r4, #16]
 8006a2e:	bf0c      	ite	eq
 8006a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a34:	2500      	movne	r5, #0
 8006a36:	4293      	cmp	r3, r2
 8006a38:	bfc4      	itt	gt
 8006a3a:	1a9b      	subgt	r3, r3, r2
 8006a3c:	18ed      	addgt	r5, r5, r3
 8006a3e:	2600      	movs	r6, #0
 8006a40:	341a      	adds	r4, #26
 8006a42:	42b5      	cmp	r5, r6
 8006a44:	d11a      	bne.n	8006a7c <_printf_common+0xc8>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e008      	b.n	8006a5c <_printf_common+0xa8>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4638      	mov	r0, r7
 8006a52:	47c0      	blx	r8
 8006a54:	3001      	adds	r0, #1
 8006a56:	d103      	bne.n	8006a60 <_printf_common+0xac>
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a60:	3501      	adds	r5, #1
 8006a62:	e7c6      	b.n	80069f2 <_printf_common+0x3e>
 8006a64:	18e1      	adds	r1, r4, r3
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	2030      	movs	r0, #48	; 0x30
 8006a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a6e:	4422      	add	r2, r4
 8006a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a78:	3302      	adds	r3, #2
 8006a7a:	e7c7      	b.n	8006a0c <_printf_common+0x58>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4649      	mov	r1, r9
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c0      	blx	r8
 8006a86:	3001      	adds	r0, #1
 8006a88:	d0e6      	beq.n	8006a58 <_printf_common+0xa4>
 8006a8a:	3601      	adds	r6, #1
 8006a8c:	e7d9      	b.n	8006a42 <_printf_common+0x8e>
	...

08006a90 <_printf_i>:
 8006a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a94:	7e0f      	ldrb	r7, [r1, #24]
 8006a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a98:	2f78      	cmp	r7, #120	; 0x78
 8006a9a:	4691      	mov	r9, r2
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	469a      	mov	sl, r3
 8006aa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aa6:	d807      	bhi.n	8006ab8 <_printf_i+0x28>
 8006aa8:	2f62      	cmp	r7, #98	; 0x62
 8006aaa:	d80a      	bhi.n	8006ac2 <_printf_i+0x32>
 8006aac:	2f00      	cmp	r7, #0
 8006aae:	f000 80d8 	beq.w	8006c62 <_printf_i+0x1d2>
 8006ab2:	2f58      	cmp	r7, #88	; 0x58
 8006ab4:	f000 80a3 	beq.w	8006bfe <_printf_i+0x16e>
 8006ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ac0:	e03a      	b.n	8006b38 <_printf_i+0xa8>
 8006ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ac6:	2b15      	cmp	r3, #21
 8006ac8:	d8f6      	bhi.n	8006ab8 <_printf_i+0x28>
 8006aca:	a101      	add	r1, pc, #4	; (adr r1, 8006ad0 <_printf_i+0x40>)
 8006acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ad0:	08006b29 	.word	0x08006b29
 8006ad4:	08006b3d 	.word	0x08006b3d
 8006ad8:	08006ab9 	.word	0x08006ab9
 8006adc:	08006ab9 	.word	0x08006ab9
 8006ae0:	08006ab9 	.word	0x08006ab9
 8006ae4:	08006ab9 	.word	0x08006ab9
 8006ae8:	08006b3d 	.word	0x08006b3d
 8006aec:	08006ab9 	.word	0x08006ab9
 8006af0:	08006ab9 	.word	0x08006ab9
 8006af4:	08006ab9 	.word	0x08006ab9
 8006af8:	08006ab9 	.word	0x08006ab9
 8006afc:	08006c49 	.word	0x08006c49
 8006b00:	08006b6d 	.word	0x08006b6d
 8006b04:	08006c2b 	.word	0x08006c2b
 8006b08:	08006ab9 	.word	0x08006ab9
 8006b0c:	08006ab9 	.word	0x08006ab9
 8006b10:	08006c6b 	.word	0x08006c6b
 8006b14:	08006ab9 	.word	0x08006ab9
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006ab9 	.word	0x08006ab9
 8006b20:	08006ab9 	.word	0x08006ab9
 8006b24:	08006c33 	.word	0x08006c33
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	1d1a      	adds	r2, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	602a      	str	r2, [r5, #0]
 8006b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0a3      	b.n	8006c84 <_printf_i+0x1f4>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	6829      	ldr	r1, [r5, #0]
 8006b40:	0606      	lsls	r6, r0, #24
 8006b42:	f101 0304 	add.w	r3, r1, #4
 8006b46:	d50a      	bpl.n	8006b5e <_printf_i+0xce>
 8006b48:	680e      	ldr	r6, [r1, #0]
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	2e00      	cmp	r6, #0
 8006b4e:	da03      	bge.n	8006b58 <_printf_i+0xc8>
 8006b50:	232d      	movs	r3, #45	; 0x2d
 8006b52:	4276      	negs	r6, r6
 8006b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b58:	485e      	ldr	r0, [pc, #376]	; (8006cd4 <_printf_i+0x244>)
 8006b5a:	230a      	movs	r3, #10
 8006b5c:	e019      	b.n	8006b92 <_printf_i+0x102>
 8006b5e:	680e      	ldr	r6, [r1, #0]
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b66:	bf18      	it	ne
 8006b68:	b236      	sxthne	r6, r6
 8006b6a:	e7ef      	b.n	8006b4c <_printf_i+0xbc>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	1d19      	adds	r1, r3, #4
 8006b72:	6029      	str	r1, [r5, #0]
 8006b74:	0601      	lsls	r1, r0, #24
 8006b76:	d501      	bpl.n	8006b7c <_printf_i+0xec>
 8006b78:	681e      	ldr	r6, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <_printf_i+0xf2>
 8006b7c:	0646      	lsls	r6, r0, #25
 8006b7e:	d5fb      	bpl.n	8006b78 <_printf_i+0xe8>
 8006b80:	881e      	ldrh	r6, [r3, #0]
 8006b82:	4854      	ldr	r0, [pc, #336]	; (8006cd4 <_printf_i+0x244>)
 8006b84:	2f6f      	cmp	r7, #111	; 0x6f
 8006b86:	bf0c      	ite	eq
 8006b88:	2308      	moveq	r3, #8
 8006b8a:	230a      	movne	r3, #10
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b92:	6865      	ldr	r5, [r4, #4]
 8006b94:	60a5      	str	r5, [r4, #8]
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	bfa2      	ittt	ge
 8006b9a:	6821      	ldrge	r1, [r4, #0]
 8006b9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ba0:	6021      	strge	r1, [r4, #0]
 8006ba2:	b90e      	cbnz	r6, 8006ba8 <_printf_i+0x118>
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	d04d      	beq.n	8006c44 <_printf_i+0x1b4>
 8006ba8:	4615      	mov	r5, r2
 8006baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bae:	fb03 6711 	mls	r7, r3, r1, r6
 8006bb2:	5dc7      	ldrb	r7, [r0, r7]
 8006bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bb8:	4637      	mov	r7, r6
 8006bba:	42bb      	cmp	r3, r7
 8006bbc:	460e      	mov	r6, r1
 8006bbe:	d9f4      	bls.n	8006baa <_printf_i+0x11a>
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d10b      	bne.n	8006bdc <_printf_i+0x14c>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	07de      	lsls	r6, r3, #31
 8006bc8:	d508      	bpl.n	8006bdc <_printf_i+0x14c>
 8006bca:	6923      	ldr	r3, [r4, #16]
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	4299      	cmp	r1, r3
 8006bd0:	bfde      	ittt	le
 8006bd2:	2330      	movle	r3, #48	; 0x30
 8006bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bdc:	1b52      	subs	r2, r2, r5
 8006bde:	6122      	str	r2, [r4, #16]
 8006be0:	f8cd a000 	str.w	sl, [sp]
 8006be4:	464b      	mov	r3, r9
 8006be6:	aa03      	add	r2, sp, #12
 8006be8:	4621      	mov	r1, r4
 8006bea:	4640      	mov	r0, r8
 8006bec:	f7ff fee2 	bl	80069b4 <_printf_common>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d14c      	bne.n	8006c8e <_printf_i+0x1fe>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	b004      	add	sp, #16
 8006bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfe:	4835      	ldr	r0, [pc, #212]	; (8006cd4 <_printf_i+0x244>)
 8006c00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c04:	6829      	ldr	r1, [r5, #0]
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c0c:	6029      	str	r1, [r5, #0]
 8006c0e:	061d      	lsls	r5, r3, #24
 8006c10:	d514      	bpl.n	8006c3c <_printf_i+0x1ac>
 8006c12:	07df      	lsls	r7, r3, #31
 8006c14:	bf44      	itt	mi
 8006c16:	f043 0320 	orrmi.w	r3, r3, #32
 8006c1a:	6023      	strmi	r3, [r4, #0]
 8006c1c:	b91e      	cbnz	r6, 8006c26 <_printf_i+0x196>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f023 0320 	bic.w	r3, r3, #32
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	2310      	movs	r3, #16
 8006c28:	e7b0      	b.n	8006b8c <_printf_i+0xfc>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	f043 0320 	orr.w	r3, r3, #32
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	2378      	movs	r3, #120	; 0x78
 8006c34:	4828      	ldr	r0, [pc, #160]	; (8006cd8 <_printf_i+0x248>)
 8006c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c3a:	e7e3      	b.n	8006c04 <_printf_i+0x174>
 8006c3c:	0659      	lsls	r1, r3, #25
 8006c3e:	bf48      	it	mi
 8006c40:	b2b6      	uxthmi	r6, r6
 8006c42:	e7e6      	b.n	8006c12 <_printf_i+0x182>
 8006c44:	4615      	mov	r5, r2
 8006c46:	e7bb      	b.n	8006bc0 <_printf_i+0x130>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	6826      	ldr	r6, [r4, #0]
 8006c4c:	6961      	ldr	r1, [r4, #20]
 8006c4e:	1d18      	adds	r0, r3, #4
 8006c50:	6028      	str	r0, [r5, #0]
 8006c52:	0635      	lsls	r5, r6, #24
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	d501      	bpl.n	8006c5c <_printf_i+0x1cc>
 8006c58:	6019      	str	r1, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <_printf_i+0x1d2>
 8006c5c:	0670      	lsls	r0, r6, #25
 8006c5e:	d5fb      	bpl.n	8006c58 <_printf_i+0x1c8>
 8006c60:	8019      	strh	r1, [r3, #0]
 8006c62:	2300      	movs	r3, #0
 8006c64:	6123      	str	r3, [r4, #16]
 8006c66:	4615      	mov	r5, r2
 8006c68:	e7ba      	b.n	8006be0 <_printf_i+0x150>
 8006c6a:	682b      	ldr	r3, [r5, #0]
 8006c6c:	1d1a      	adds	r2, r3, #4
 8006c6e:	602a      	str	r2, [r5, #0]
 8006c70:	681d      	ldr	r5, [r3, #0]
 8006c72:	6862      	ldr	r2, [r4, #4]
 8006c74:	2100      	movs	r1, #0
 8006c76:	4628      	mov	r0, r5
 8006c78:	f7f9 fb42 	bl	8000300 <memchr>
 8006c7c:	b108      	cbz	r0, 8006c82 <_printf_i+0x1f2>
 8006c7e:	1b40      	subs	r0, r0, r5
 8006c80:	6060      	str	r0, [r4, #4]
 8006c82:	6863      	ldr	r3, [r4, #4]
 8006c84:	6123      	str	r3, [r4, #16]
 8006c86:	2300      	movs	r3, #0
 8006c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c8c:	e7a8      	b.n	8006be0 <_printf_i+0x150>
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	462a      	mov	r2, r5
 8006c92:	4649      	mov	r1, r9
 8006c94:	4640      	mov	r0, r8
 8006c96:	47d0      	blx	sl
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d0ab      	beq.n	8006bf4 <_printf_i+0x164>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	079b      	lsls	r3, r3, #30
 8006ca0:	d413      	bmi.n	8006cca <_printf_i+0x23a>
 8006ca2:	68e0      	ldr	r0, [r4, #12]
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	4298      	cmp	r0, r3
 8006ca8:	bfb8      	it	lt
 8006caa:	4618      	movlt	r0, r3
 8006cac:	e7a4      	b.n	8006bf8 <_printf_i+0x168>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	47d0      	blx	sl
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d09b      	beq.n	8006bf4 <_printf_i+0x164>
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	9903      	ldr	r1, [sp, #12]
 8006cc2:	1a5b      	subs	r3, r3, r1
 8006cc4:	42ab      	cmp	r3, r5
 8006cc6:	dcf2      	bgt.n	8006cae <_printf_i+0x21e>
 8006cc8:	e7eb      	b.n	8006ca2 <_printf_i+0x212>
 8006cca:	2500      	movs	r5, #0
 8006ccc:	f104 0619 	add.w	r6, r4, #25
 8006cd0:	e7f5      	b.n	8006cbe <_printf_i+0x22e>
 8006cd2:	bf00      	nop
 8006cd4:	080071d1 	.word	0x080071d1
 8006cd8:	080071e2 	.word	0x080071e2

08006cdc <memcpy>:
 8006cdc:	440a      	add	r2, r1
 8006cde:	4291      	cmp	r1, r2
 8006ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ce4:	d100      	bne.n	8006ce8 <memcpy+0xc>
 8006ce6:	4770      	bx	lr
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf2:	4291      	cmp	r1, r2
 8006cf4:	d1f9      	bne.n	8006cea <memcpy+0xe>
 8006cf6:	bd10      	pop	{r4, pc}

08006cf8 <memmove>:
 8006cf8:	4288      	cmp	r0, r1
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	eb01 0402 	add.w	r4, r1, r2
 8006d00:	d902      	bls.n	8006d08 <memmove+0x10>
 8006d02:	4284      	cmp	r4, r0
 8006d04:	4623      	mov	r3, r4
 8006d06:	d807      	bhi.n	8006d18 <memmove+0x20>
 8006d08:	1e43      	subs	r3, r0, #1
 8006d0a:	42a1      	cmp	r1, r4
 8006d0c:	d008      	beq.n	8006d20 <memmove+0x28>
 8006d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d16:	e7f8      	b.n	8006d0a <memmove+0x12>
 8006d18:	4402      	add	r2, r0
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	428a      	cmp	r2, r1
 8006d1e:	d100      	bne.n	8006d22 <memmove+0x2a>
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d2a:	e7f7      	b.n	8006d1c <memmove+0x24>

08006d2c <_free_r>:
 8006d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d2e:	2900      	cmp	r1, #0
 8006d30:	d044      	beq.n	8006dbc <_free_r+0x90>
 8006d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d36:	9001      	str	r0, [sp, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d3e:	bfb8      	it	lt
 8006d40:	18e4      	addlt	r4, r4, r3
 8006d42:	f000 f913 	bl	8006f6c <__malloc_lock>
 8006d46:	4a1e      	ldr	r2, [pc, #120]	; (8006dc0 <_free_r+0x94>)
 8006d48:	9801      	ldr	r0, [sp, #4]
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	b933      	cbnz	r3, 8006d5c <_free_r+0x30>
 8006d4e:	6063      	str	r3, [r4, #4]
 8006d50:	6014      	str	r4, [r2, #0]
 8006d52:	b003      	add	sp, #12
 8006d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d58:	f000 b90e 	b.w	8006f78 <__malloc_unlock>
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d908      	bls.n	8006d72 <_free_r+0x46>
 8006d60:	6825      	ldr	r5, [r4, #0]
 8006d62:	1961      	adds	r1, r4, r5
 8006d64:	428b      	cmp	r3, r1
 8006d66:	bf01      	itttt	eq
 8006d68:	6819      	ldreq	r1, [r3, #0]
 8006d6a:	685b      	ldreq	r3, [r3, #4]
 8006d6c:	1949      	addeq	r1, r1, r5
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	e7ed      	b.n	8006d4e <_free_r+0x22>
 8006d72:	461a      	mov	r2, r3
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	b10b      	cbz	r3, 8006d7c <_free_r+0x50>
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d9fa      	bls.n	8006d72 <_free_r+0x46>
 8006d7c:	6811      	ldr	r1, [r2, #0]
 8006d7e:	1855      	adds	r5, r2, r1
 8006d80:	42a5      	cmp	r5, r4
 8006d82:	d10b      	bne.n	8006d9c <_free_r+0x70>
 8006d84:	6824      	ldr	r4, [r4, #0]
 8006d86:	4421      	add	r1, r4
 8006d88:	1854      	adds	r4, r2, r1
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	d1e0      	bne.n	8006d52 <_free_r+0x26>
 8006d90:	681c      	ldr	r4, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	6053      	str	r3, [r2, #4]
 8006d96:	4421      	add	r1, r4
 8006d98:	6011      	str	r1, [r2, #0]
 8006d9a:	e7da      	b.n	8006d52 <_free_r+0x26>
 8006d9c:	d902      	bls.n	8006da4 <_free_r+0x78>
 8006d9e:	230c      	movs	r3, #12
 8006da0:	6003      	str	r3, [r0, #0]
 8006da2:	e7d6      	b.n	8006d52 <_free_r+0x26>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	1961      	adds	r1, r4, r5
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf04      	itt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	6063      	str	r3, [r4, #4]
 8006db2:	bf04      	itt	eq
 8006db4:	1949      	addeq	r1, r1, r5
 8006db6:	6021      	streq	r1, [r4, #0]
 8006db8:	6054      	str	r4, [r2, #4]
 8006dba:	e7ca      	b.n	8006d52 <_free_r+0x26>
 8006dbc:	b003      	add	sp, #12
 8006dbe:	bd30      	pop	{r4, r5, pc}
 8006dc0:	24000620 	.word	0x24000620

08006dc4 <sbrk_aligned>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4e0e      	ldr	r6, [pc, #56]	; (8006e00 <sbrk_aligned+0x3c>)
 8006dc8:	460c      	mov	r4, r1
 8006dca:	6831      	ldr	r1, [r6, #0]
 8006dcc:	4605      	mov	r5, r0
 8006dce:	b911      	cbnz	r1, 8006dd6 <sbrk_aligned+0x12>
 8006dd0:	f000 f8bc 	bl	8006f4c <_sbrk_r>
 8006dd4:	6030      	str	r0, [r6, #0]
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 f8b7 	bl	8006f4c <_sbrk_r>
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d00a      	beq.n	8006df8 <sbrk_aligned+0x34>
 8006de2:	1cc4      	adds	r4, r0, #3
 8006de4:	f024 0403 	bic.w	r4, r4, #3
 8006de8:	42a0      	cmp	r0, r4
 8006dea:	d007      	beq.n	8006dfc <sbrk_aligned+0x38>
 8006dec:	1a21      	subs	r1, r4, r0
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 f8ac 	bl	8006f4c <_sbrk_r>
 8006df4:	3001      	adds	r0, #1
 8006df6:	d101      	bne.n	8006dfc <sbrk_aligned+0x38>
 8006df8:	f04f 34ff 	mov.w	r4, #4294967295
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	24000624 	.word	0x24000624

08006e04 <_malloc_r>:
 8006e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e08:	1ccd      	adds	r5, r1, #3
 8006e0a:	f025 0503 	bic.w	r5, r5, #3
 8006e0e:	3508      	adds	r5, #8
 8006e10:	2d0c      	cmp	r5, #12
 8006e12:	bf38      	it	cc
 8006e14:	250c      	movcc	r5, #12
 8006e16:	2d00      	cmp	r5, #0
 8006e18:	4607      	mov	r7, r0
 8006e1a:	db01      	blt.n	8006e20 <_malloc_r+0x1c>
 8006e1c:	42a9      	cmp	r1, r5
 8006e1e:	d905      	bls.n	8006e2c <_malloc_r+0x28>
 8006e20:	230c      	movs	r3, #12
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	2600      	movs	r6, #0
 8006e26:	4630      	mov	r0, r6
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	4e2e      	ldr	r6, [pc, #184]	; (8006ee8 <_malloc_r+0xe4>)
 8006e2e:	f000 f89d 	bl	8006f6c <__malloc_lock>
 8006e32:	6833      	ldr	r3, [r6, #0]
 8006e34:	461c      	mov	r4, r3
 8006e36:	bb34      	cbnz	r4, 8006e86 <_malloc_r+0x82>
 8006e38:	4629      	mov	r1, r5
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	f7ff ffc2 	bl	8006dc4 <sbrk_aligned>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	4604      	mov	r4, r0
 8006e44:	d14d      	bne.n	8006ee2 <_malloc_r+0xde>
 8006e46:	6834      	ldr	r4, [r6, #0]
 8006e48:	4626      	mov	r6, r4
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	d140      	bne.n	8006ed0 <_malloc_r+0xcc>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	4631      	mov	r1, r6
 8006e52:	4638      	mov	r0, r7
 8006e54:	eb04 0803 	add.w	r8, r4, r3
 8006e58:	f000 f878 	bl	8006f4c <_sbrk_r>
 8006e5c:	4580      	cmp	r8, r0
 8006e5e:	d13a      	bne.n	8006ed6 <_malloc_r+0xd2>
 8006e60:	6821      	ldr	r1, [r4, #0]
 8006e62:	3503      	adds	r5, #3
 8006e64:	1a6d      	subs	r5, r5, r1
 8006e66:	f025 0503 	bic.w	r5, r5, #3
 8006e6a:	3508      	adds	r5, #8
 8006e6c:	2d0c      	cmp	r5, #12
 8006e6e:	bf38      	it	cc
 8006e70:	250c      	movcc	r5, #12
 8006e72:	4629      	mov	r1, r5
 8006e74:	4638      	mov	r0, r7
 8006e76:	f7ff ffa5 	bl	8006dc4 <sbrk_aligned>
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d02b      	beq.n	8006ed6 <_malloc_r+0xd2>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	442b      	add	r3, r5
 8006e82:	6023      	str	r3, [r4, #0]
 8006e84:	e00e      	b.n	8006ea4 <_malloc_r+0xa0>
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	1b52      	subs	r2, r2, r5
 8006e8a:	d41e      	bmi.n	8006eca <_malloc_r+0xc6>
 8006e8c:	2a0b      	cmp	r2, #11
 8006e8e:	d916      	bls.n	8006ebe <_malloc_r+0xba>
 8006e90:	1961      	adds	r1, r4, r5
 8006e92:	42a3      	cmp	r3, r4
 8006e94:	6025      	str	r5, [r4, #0]
 8006e96:	bf18      	it	ne
 8006e98:	6059      	strne	r1, [r3, #4]
 8006e9a:	6863      	ldr	r3, [r4, #4]
 8006e9c:	bf08      	it	eq
 8006e9e:	6031      	streq	r1, [r6, #0]
 8006ea0:	5162      	str	r2, [r4, r5]
 8006ea2:	604b      	str	r3, [r1, #4]
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f104 060b 	add.w	r6, r4, #11
 8006eaa:	f000 f865 	bl	8006f78 <__malloc_unlock>
 8006eae:	f026 0607 	bic.w	r6, r6, #7
 8006eb2:	1d23      	adds	r3, r4, #4
 8006eb4:	1af2      	subs	r2, r6, r3
 8006eb6:	d0b6      	beq.n	8006e26 <_malloc_r+0x22>
 8006eb8:	1b9b      	subs	r3, r3, r6
 8006eba:	50a3      	str	r3, [r4, r2]
 8006ebc:	e7b3      	b.n	8006e26 <_malloc_r+0x22>
 8006ebe:	6862      	ldr	r2, [r4, #4]
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	bf0c      	ite	eq
 8006ec4:	6032      	streq	r2, [r6, #0]
 8006ec6:	605a      	strne	r2, [r3, #4]
 8006ec8:	e7ec      	b.n	8006ea4 <_malloc_r+0xa0>
 8006eca:	4623      	mov	r3, r4
 8006ecc:	6864      	ldr	r4, [r4, #4]
 8006ece:	e7b2      	b.n	8006e36 <_malloc_r+0x32>
 8006ed0:	4634      	mov	r4, r6
 8006ed2:	6876      	ldr	r6, [r6, #4]
 8006ed4:	e7b9      	b.n	8006e4a <_malloc_r+0x46>
 8006ed6:	230c      	movs	r3, #12
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	4638      	mov	r0, r7
 8006edc:	f000 f84c 	bl	8006f78 <__malloc_unlock>
 8006ee0:	e7a1      	b.n	8006e26 <_malloc_r+0x22>
 8006ee2:	6025      	str	r5, [r4, #0]
 8006ee4:	e7de      	b.n	8006ea4 <_malloc_r+0xa0>
 8006ee6:	bf00      	nop
 8006ee8:	24000620 	.word	0x24000620

08006eec <_realloc_r>:
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	b921      	cbnz	r1, 8006f02 <_realloc_r+0x16>
 8006ef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	4611      	mov	r1, r2
 8006efe:	f7ff bf81 	b.w	8006e04 <_malloc_r>
 8006f02:	b92a      	cbnz	r2, 8006f10 <_realloc_r+0x24>
 8006f04:	f7ff ff12 	bl	8006d2c <_free_r>
 8006f08:	4625      	mov	r5, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f10:	f000 f838 	bl	8006f84 <_malloc_usable_size_r>
 8006f14:	4284      	cmp	r4, r0
 8006f16:	4607      	mov	r7, r0
 8006f18:	d802      	bhi.n	8006f20 <_realloc_r+0x34>
 8006f1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f1e:	d812      	bhi.n	8006f46 <_realloc_r+0x5a>
 8006f20:	4621      	mov	r1, r4
 8006f22:	4640      	mov	r0, r8
 8006f24:	f7ff ff6e 	bl	8006e04 <_malloc_r>
 8006f28:	4605      	mov	r5, r0
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d0ed      	beq.n	8006f0a <_realloc_r+0x1e>
 8006f2e:	42bc      	cmp	r4, r7
 8006f30:	4622      	mov	r2, r4
 8006f32:	4631      	mov	r1, r6
 8006f34:	bf28      	it	cs
 8006f36:	463a      	movcs	r2, r7
 8006f38:	f7ff fed0 	bl	8006cdc <memcpy>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fef4 	bl	8006d2c <_free_r>
 8006f44:	e7e1      	b.n	8006f0a <_realloc_r+0x1e>
 8006f46:	4635      	mov	r5, r6
 8006f48:	e7df      	b.n	8006f0a <_realloc_r+0x1e>
	...

08006f4c <_sbrk_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d06      	ldr	r5, [pc, #24]	; (8006f68 <_sbrk_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f7f9 fe70 	bl	8000c3c <_sbrk>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_sbrk_r+0x1a>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_sbrk_r+0x1a>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	24000628 	.word	0x24000628

08006f6c <__malloc_lock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__malloc_lock+0x8>)
 8006f6e:	f000 b811 	b.w	8006f94 <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	2400062c 	.word	0x2400062c

08006f78 <__malloc_unlock>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__malloc_unlock+0x8>)
 8006f7a:	f000 b80c 	b.w	8006f96 <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	2400062c 	.word	0x2400062c

08006f84 <_malloc_usable_size_r>:
 8006f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f88:	1f18      	subs	r0, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bfbc      	itt	lt
 8006f8e:	580b      	ldrlt	r3, [r1, r0]
 8006f90:	18c0      	addlt	r0, r0, r3
 8006f92:	4770      	bx	lr

08006f94 <__retarget_lock_acquire_recursive>:
 8006f94:	4770      	bx	lr

08006f96 <__retarget_lock_release_recursive>:
 8006f96:	4770      	bx	lr

08006f98 <_init>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr

08006fa4 <_fini>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr
