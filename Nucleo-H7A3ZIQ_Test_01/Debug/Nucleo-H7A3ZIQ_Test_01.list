
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b2c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08007ddc  08007ddc  00017ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008028  08008028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000060c  24000074  080080a4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000680  080080a4  00020680  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000183b9  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c98  00000000  00000000  0003845b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001118  00000000  00000000  0003b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fe0  00000000  00000000  0003c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031df5  00000000  00000000  0003d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000180b1  00000000  00000000  0006efe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140092  00000000  00000000  00087096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c7128  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a54  00000000  00000000  001c7178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007dc4 	.word	0x08007dc4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08007dc4 	.word	0x08007dc4

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <Button_Process>:
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
    }
}
#else
void Button_Process (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  if (userButton_state == 0x01)
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <Button_Process+0x3c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d114      	bne.n	80006da <Button_Process+0x36>
  {
    userButton_state = 0x00;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <Button_Process+0x3c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
    sprintf(uart3_tx_buf, " Button Interrupt callback. Input Count : %d\r\n", userButton_cnt);
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <Button_Process+0x40>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	490a      	ldr	r1, [pc, #40]	; (80006e8 <Button_Process+0x44>)
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <Button_Process+0x48>)
 80006c0:	f006 ff12 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <Button_Process+0x48>)
 80006c6:	f7ff fe13 	bl	80002f0 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	4906      	ldr	r1, [pc, #24]	; (80006ec <Button_Process+0x48>)
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <Button_Process+0x4c>)
 80006d6:	f005 fcb7 	bl	8006048 <HAL_UART_Transmit>
  }
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2400066a 	.word	0x2400066a
 80006e4:	24000668 	.word	0x24000668
 80006e8:	08007ddc 	.word	0x08007ddc
 80006ec:	24000268 	.word	0x24000268
 80006f0:	240001c4 	.word	0x240001c4

080006f4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	; 0x38
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b83      	ldr	r3, [pc, #524]	; (8000918 <MX_GPIO_Init+0x224>)
 800070c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000710:	4a81      	ldr	r2, [pc, #516]	; (8000918 <MX_GPIO_Init+0x224>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800071a:	4b7f      	ldr	r3, [pc, #508]	; (8000918 <MX_GPIO_Init+0x224>)
 800071c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000728:	4b7b      	ldr	r3, [pc, #492]	; (8000918 <MX_GPIO_Init+0x224>)
 800072a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072e:	4a7a      	ldr	r2, [pc, #488]	; (8000918 <MX_GPIO_Init+0x224>)
 8000730:	f043 0320 	orr.w	r3, r3, #32
 8000734:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000738:	4b77      	ldr	r3, [pc, #476]	; (8000918 <MX_GPIO_Init+0x224>)
 800073a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800073e:	f003 0320 	and.w	r3, r3, #32
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b74      	ldr	r3, [pc, #464]	; (8000918 <MX_GPIO_Init+0x224>)
 8000748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074c:	4a72      	ldr	r2, [pc, #456]	; (8000918 <MX_GPIO_Init+0x224>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000756:	4b70      	ldr	r3, [pc, #448]	; (8000918 <MX_GPIO_Init+0x224>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b6c      	ldr	r3, [pc, #432]	; (8000918 <MX_GPIO_Init+0x224>)
 8000766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076a:	4a6b      	ldr	r2, [pc, #428]	; (8000918 <MX_GPIO_Init+0x224>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000774:	4b68      	ldr	r3, [pc, #416]	; (8000918 <MX_GPIO_Init+0x224>)
 8000776:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b65      	ldr	r3, [pc, #404]	; (8000918 <MX_GPIO_Init+0x224>)
 8000784:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000788:	4a63      	ldr	r2, [pc, #396]	; (8000918 <MX_GPIO_Init+0x224>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000792:	4b61      	ldr	r3, [pc, #388]	; (8000918 <MX_GPIO_Init+0x224>)
 8000794:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a0:	4b5d      	ldr	r3, [pc, #372]	; (8000918 <MX_GPIO_Init+0x224>)
 80007a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a6:	4a5c      	ldr	r2, [pc, #368]	; (8000918 <MX_GPIO_Init+0x224>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007b0:	4b59      	ldr	r3, [pc, #356]	; (8000918 <MX_GPIO_Init+0x224>)
 80007b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b56      	ldr	r3, [pc, #344]	; (8000918 <MX_GPIO_Init+0x224>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c4:	4a54      	ldr	r2, [pc, #336]	; (8000918 <MX_GPIO_Init+0x224>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ce:	4b52      	ldr	r3, [pc, #328]	; (8000918 <MX_GPIO_Init+0x224>)
 80007d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007dc:	4b4e      	ldr	r3, [pc, #312]	; (8000918 <MX_GPIO_Init+0x224>)
 80007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e2:	4a4d      	ldr	r2, [pc, #308]	; (8000918 <MX_GPIO_Init+0x224>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ec:	4b4a      	ldr	r3, [pc, #296]	; (8000918 <MX_GPIO_Init+0x224>)
 80007ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000800:	4846      	ldr	r0, [pc, #280]	; (800091c <MX_GPIO_Init+0x228>)
 8000802:	f001 fad7 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	4845      	ldr	r0, [pc, #276]	; (8000920 <MX_GPIO_Init+0x22c>)
 800080c:	f001 fad2 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2102      	movs	r1, #2
 8000814:	4843      	ldr	r0, [pc, #268]	; (8000924 <MX_GPIO_Init+0x230>)
 8000816:	f001 facd 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	483d      	ldr	r0, [pc, #244]	; (8000928 <MX_GPIO_Init+0x234>)
 8000832:	f001 f90f 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	4833      	ldr	r0, [pc, #204]	; (800091c <MX_GPIO_Init+0x228>)
 8000850:	f001 f900 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000854:	2301      	movs	r3, #1
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	4619      	mov	r1, r3
 800086a:	482d      	ldr	r0, [pc, #180]	; (8000920 <MX_GPIO_Init+0x22c>)
 800086c:	f001 f8f2 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4829      	ldr	r0, [pc, #164]	; (800092c <MX_GPIO_Init+0x238>)
 8000886:	f001 f8e5 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800088a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	4824      	ldr	r0, [pc, #144]	; (8000930 <MX_GPIO_Init+0x23c>)
 80008a0:	f001 f8d8 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008b6:	230a      	movs	r3, #10
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <MX_GPIO_Init+0x23c>)
 80008c2:	f001 f8c7 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80008c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_GPIO_Init+0x23c>)
 80008e0:	f001 f8b8 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e4:	2302      	movs	r3, #2
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <MX_GPIO_Init+0x230>)
 80008fc:	f001 f8aa 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2028      	movs	r0, #40	; 0x28
 8000906:	f001 f870 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800090a:	2028      	movs	r0, #40	; 0x28
 800090c:	f001 f887 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 8000910:	bf00      	nop
 8000912:	3738      	adds	r7, #56	; 0x38
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	58024400 	.word	0x58024400
 800091c:	58021400 	.word	0x58021400
 8000920:	58020400 	.word	0x58020400
 8000924:	58021000 	.word	0x58021000
 8000928:	58020800 	.word	0x58020800
 800092c:	58021800 	.word	0x58021800
 8000930:	58020000 	.word	0x58020000

08000934 <LED_Dimming>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
static void LED_Dimming (void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    if (dutycontrol_flag == 0x00)
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <LED_Dimming+0x74>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d116      	bne.n	800096e <LED_Dimming+0x3a>
    {
        if (TIM1_DutyControl_cnt > 20)
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <LED_Dimming+0x78>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b14      	cmp	r3, #20
 8000946:	d907      	bls.n	8000958 <LED_Dimming+0x24>
        {
            TIM1_DutyControl_cnt = 0;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <LED_Dimming+0x78>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]

            htim12.Instance->CCR1++;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <LED_Dimming+0x7c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000954:	3201      	adds	r2, #1
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (htim12.Instance->CCR1 >= htim12.Init.Period)
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <LED_Dimming+0x7c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <LED_Dimming+0x7c>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	429a      	cmp	r2, r3
 8000964:	d31b      	bcc.n	800099e <LED_Dimming+0x6a>
        {
            dutycontrol_flag = 0x01;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <LED_Dimming+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]

            // sprintf(uart3_tx_buf, " TIM12 CCR1 : %d\r\n", );
            // HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
        }
    }
} 
 800096c:	e017      	b.n	800099e <LED_Dimming+0x6a>
    else if (dutycontrol_flag == 0x01)
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <LED_Dimming+0x74>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d113      	bne.n	800099e <LED_Dimming+0x6a>
        if (TIM1_DutyControl_cnt > 20)
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <LED_Dimming+0x78>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b14      	cmp	r3, #20
 800097c:	d907      	bls.n	800098e <LED_Dimming+0x5a>
            TIM1_DutyControl_cnt = 0;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <LED_Dimming+0x78>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
            htim12.Instance->CCR1--;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <LED_Dimming+0x7c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098a:	3a01      	subs	r2, #1
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
        if (htim12.Instance->CCR1 == 0)
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <LED_Dimming+0x7c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <LED_Dimming+0x6a>
            dutycontrol_flag = 0x00;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <LED_Dimming+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
} 
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	2400066b 	.word	0x2400066b
 80009ac:	2400025c 	.word	0x2400025c
 80009b0:	24000178 	.word	0x24000178

080009b4 <LED_Process>:

void LED_Process (void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    //if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
    if (TIM1_CNT >= 500) // 1ms period Timer2 Counter.
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <LED_Process+0x50>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009c0:	d307      	bcc.n	80009d2 <LED_Process+0x1e>
    {
        TIM1_CNT = 0;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <LED_Process+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]

        HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80009c8:	2101      	movs	r1, #1
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <LED_Process+0x54>)
 80009cc:	f001 fa0b 	bl	8001de6 <HAL_GPIO_TogglePin>
 80009d0:	e013      	b.n	80009fa <LED_Process+0x46>
        // HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
        //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    }
    else if (TIM2_CNT >= 10) // 100ms * 9 period Timer2 Counter.
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <LED_Process+0x58>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b09      	cmp	r3, #9
 80009d8:	d907      	bls.n	80009ea <LED_Process+0x36>
    {
        TIM2_CNT = 0;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <LED_Process+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009e0:	2102      	movs	r1, #2
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <LED_Process+0x5c>)
 80009e4:	f001 f9ff 	bl	8001de6 <HAL_GPIO_TogglePin>
 80009e8:	e007      	b.n	80009fa <LED_Process+0x46>
    }
    else if (TIM8_CNT >= 100000) // 10us * 99999 period Timer8 Counter.
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <LED_Process+0x60>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LED_Process+0x64>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d902      	bls.n	80009fa <LED_Process+0x46>
    {
        TIM8_CNT = 0;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <LED_Process+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
        //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    }

    LED_Dimming();
 80009fa:	f7ff ff9b 	bl	8000934 <LED_Dimming>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24000258 	.word	0x24000258
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	24000260 	.word	0x24000260
 8000a10:	58021000 	.word	0x58021000
 8000a14:	24000264 	.word	0x24000264
 8000a18:	0001869f 	.word	0x0001869f

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 fe52 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f82c 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f7ff fe64 	bl	80006f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a2c:	f000 fc5a 	bl	80012e4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a30:	f000 fd0e 	bl	8001450 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000a34:	f000 fa1e 	bl	8000e74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a38:	f000 fa70 	bl	8000f1c <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a3c:	f000 fabe 	bl	8000fbc <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a40:	f000 fb10 	bl	8001064 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  BootMessagePrint();
 8000a44:	f000 fd0c 	bl	8001460 <BootMessagePrint>
  GetClockSourcePrint();
 8000a48:	f000 fd86 	bl	8001558 <GetClockSourcePrint>

  HAL_TIM_Base_Start_IT(&htim1);
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <main+0x54>)
 8000a4e:	f004 f84f 	bl	8004af0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a52:	4808      	ldr	r0, [pc, #32]	; (8000a74 <main+0x58>)
 8000a54:	f004 f84c 	bl	8004af0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <main+0x5c>)
 8000a5a:	f004 f849 	bl	8004af0 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <main+0x60>)
 8000a62:	f004 f91f 	bl	8004ca4 <HAL_TIM_PWM_Start_IT>
    // {
    //   htim12.Instance->CCR1 = i;
    //   //HAL_Delay(20);  // 
    // }

    LED_Process();
 8000a66:	f7ff ffa5 	bl	80009b4 <LED_Process>
    Button_Process();
 8000a6a:	f7ff fe1b 	bl	80006a4 <Button_Process>
    LED_Process();
 8000a6e:	e7fa      	b.n	8000a66 <main+0x4a>
 8000a70:	24000094 	.word	0x24000094
 8000a74:	240000e0 	.word	0x240000e0
 8000a78:	2400012c 	.word	0x2400012c
 8000a7c:	24000178 	.word	0x24000178

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	; 0x70
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	224c      	movs	r2, #76	; 0x4c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f006 fd22 	bl	80074d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2220      	movs	r2, #32
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f006 fd1c 	bl	80074d8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000aa0:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <SystemClock_Config+0xe4>)
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aaa:	2004      	movs	r0, #4
 8000aac:	f001 f9d0 	bl	8001e50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <SystemClock_Config+0xe8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <SystemClock_Config+0xe8>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <SystemClock_Config+0xe8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000acc:	bf00      	nop
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <SystemClock_Config+0xe8>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ada:	d1f8      	bne.n	8000ace <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000adc:	2321      	movs	r3, #33	; 0x21
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aee:	2302      	movs	r3, #2
 8000af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000af6:	2346      	movs	r3, #70	; 0x46
 8000af8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b06:	230c      	movs	r3, #12
 8000b08:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f9f4 	bl	8001f04 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b22:	f000 f823 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	233f      	movs	r3, #63	; 0x3f
 8000b28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fe0b 	bl	8002768 <HAL_RCC_ClockConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000b58:	f000 f808 	bl	8000b6c <Error_Handler>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3770      	adds	r7, #112	; 0x70
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58024400 	.word	0x58024400
 8000b68:	58024800 	.word	0x58024800

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b84:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	58024400 	.word	0x58024400

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bba:	f000 fe17 	bl	80017ec <HAL_Delay>
 8000bbe:	e7fa      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 fdd4 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM1_UP_IRQHandler+0x10>)
 8000c0e:	f004 f9a3 	bl	8004f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	24000094 	.word	0x24000094

08000c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM2_IRQHandler+0x10>)
 8000c22:	f004 f999 	bl	8004f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	240000e0 	.word	0x240000e0

08000c30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c38:	f001 f8ef 	bl	8001e1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000c46:	f004 f987 	bl	8004f58 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000c4c:	f004 f984 	bl	8004f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2400012c 	.word	0x2400012c
 8000c58:	24000178 	.word	0x24000178

08000c5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000c62:	f004 f979 	bl	8004f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2400012c 	.word	0x2400012c

08000c70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10a      	bne.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
    TIM1_CNT++;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c8a:	6013      	str	r3, [r2, #0]
    TIM1_DutyControl_cnt++;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c94:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
  {
    TIM8_CNT++;
  }
}
 8000c96:	e014      	b.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca0:	d105      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x3e>
    TIM2_CNT++;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	e009      	b.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d104      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x52>
    TIM8_CNT++;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cc0:	6013      	str	r3, [r2, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	24000258 	.word	0x24000258
 8000cd8:	2400025c 	.word	0x2400025c
 8000cdc:	24000260 	.word	0x24000260
 8000ce0:	40010400 	.word	0x40010400
 8000ce4:	24000264 	.word	0x24000264

08000ce8 <HAL_GPIO_EXTI_Callback>:
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  userButton_state = 0x01;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
  userButton_cnt++;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d02:	801a      	strh	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	2400066a 	.word	0x2400066a
 8000d14:	24000668 	.word	0x24000668

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f006 fb9c 	bl	8007484 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24100000 	.word	0x24100000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	24000090 	.word	0x24000090
 8000d80:	24000680 	.word	0x24000680

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <SystemInit+0xd0>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <SystemInit+0xd0>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <SystemInit+0xd4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d807      	bhi.n	8000db4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <SystemInit+0xd4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 030f 	bic.w	r3, r3, #15
 8000dac:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <SystemInit+0xd4>)
 8000dae:	f043 0303 	orr.w	r3, r3, #3
 8000db2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <SystemInit+0xd8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <SystemInit+0xd8>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dc0:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <SystemInit+0xd8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <SystemInit+0xd8>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4924      	ldr	r1, [pc, #144]	; (8000e5c <SystemInit+0xd8>)
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <SystemInit+0xdc>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <SystemInit+0xd4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <SystemInit+0xd4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 030f 	bic.w	r3, r3, #15
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <SystemInit+0xd4>)
 8000de8:	f043 0303 	orr.w	r3, r3, #3
 8000dec:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <SystemInit+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <SystemInit+0xd8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <SystemInit+0xd8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <SystemInit+0xd8>)
 8000e02:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <SystemInit+0xe0>)
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <SystemInit+0xd8>)
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <SystemInit+0xe4>)
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <SystemInit+0xd8>)
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <SystemInit+0xe8>)
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <SystemInit+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <SystemInit+0xd8>)
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <SystemInit+0xe8>)
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <SystemInit+0xd8>)
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <SystemInit+0xe8>)
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <SystemInit+0xd8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <SystemInit+0xd8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <SystemInit+0xd8>)
 8000e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <SystemInit+0xd8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <SystemInit+0xec>)
 8000e44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00
 8000e58:	52002000 	.word	0x52002000
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e64:	02020200 	.word	0x02020200
 8000e68:	01ff0000 	.word	0x01ff0000
 8000e6c:	01010280 	.word	0x01010280
 8000e70:	52004000 	.word	0x52004000

08000e74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <MX_TIM1_Init+0xa4>)
 8000e96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000e9a:	f240 1217 	movw	r2, #279	; 0x117
 8000e9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000ea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000ec2:	f003 fdbd 	bl	8004a40 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ecc:	f7ff fe4e 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	4619      	mov	r1, r3
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000ede:	f004 fa57 	bl	8005390 <HAL_TIM_ConfigClockSource>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ee8:	f7ff fe40 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_TIM1_Init+0xa0>)
 8000efe:	f004 ffa7 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f08:	f7ff fe30 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	24000094 	.word	0x24000094
 8000f18:	40010000 	.word	0x40010000

08000f1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f44:	f240 1217 	movw	r2, #279	; 0x117
 8000f48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f52:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <MX_TIM2_Init+0x9c>)
 8000f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f64:	f003 fd6c 	bl	8004a40 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f6e:	f7ff fdfd 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f80:	f004 fa06 	bl	8005390 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f8a:	f7ff fdef 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_TIM2_Init+0x98>)
 8000f9c:	f004 ff58 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fa6:	f7ff fde1 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	240000e0 	.word	0x240000e0
 8000fb8:	0001869f 	.word	0x0001869f

08000fbc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <MX_TIM8_Init+0xa0>)
 8000fdc:	4a20      	ldr	r2, [pc, #128]	; (8001060 <MX_TIM8_Init+0xa4>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_TIM8_Init+0xa0>)
 8000fe2:	f240 1217 	movw	r2, #279	; 0x117
 8000fe6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_TIM8_Init+0xa0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_TIM8_Init+0xa0>)
 8000ff0:	2209      	movs	r2, #9
 8000ff2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_TIM8_Init+0xa0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_TIM8_Init+0xa0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_TIM8_Init+0xa0>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001006:	4815      	ldr	r0, [pc, #84]	; (800105c <MX_TIM8_Init+0xa0>)
 8001008:	f003 fd1a 	bl	8004a40 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001012:	f7ff fdab 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <MX_TIM8_Init+0xa0>)
 8001024:	f004 f9b4 	bl	8005390 <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800102e:	f7ff fd9d 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_TIM8_Init+0xa0>)
 8001044:	f004 ff04 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800104e:	f7ff fd8d 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2400012c 	.word	0x2400012c
 8001060:	40010400 	.word	0x40010400

08001064 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <MX_TIM12_Init+0xe8>)
 8001098:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <MX_TIM12_Init+0xec>)
 800109a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 27999;
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_TIM12_Init+0xe8>)
 800109e:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80010a2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_TIM12_Init+0xe8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_TIM12_Init+0xe8>)
 80010ac:	2263      	movs	r2, #99	; 0x63
 80010ae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_TIM12_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_TIM12_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80010bc:	4823      	ldr	r0, [pc, #140]	; (800114c <MX_TIM12_Init+0xe8>)
 80010be:	f003 fcbf 	bl	8004a40 <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80010c8:	f7ff fd50 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80010d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d6:	4619      	mov	r1, r3
 80010d8:	481c      	ldr	r0, [pc, #112]	; (800114c <MX_TIM12_Init+0xe8>)
 80010da:	f004 f959 	bl	8005390 <HAL_TIM_ConfigClockSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80010e4:	f7ff fd42 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <MX_TIM12_Init+0xe8>)
 80010ea:	f003 fd79 	bl	8004be0 <HAL_TIM_PWM_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80010f4:	f7ff fd3a 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_TIM12_Init+0xe8>)
 8001108:	f004 fea2 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001112:	f7ff fd2b 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001116:	2360      	movs	r3, #96	; 0x60
 8001118:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <MX_TIM12_Init+0xe8>)
 800112e:	f004 f81b 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001138:	f7ff fd18 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM12_Init+0xe8>)
 800113e:	f000 f895 	bl	800126c <HAL_TIM_MspPostInit>

}
 8001142:	bf00      	nop
 8001144:	3738      	adds	r7, #56	; 0x38
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	24000178 	.word	0x24000178
 8001150:	40001800 	.word	0x40001800

08001154 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a3e      	ldr	r2, [pc, #248]	; (800125c <HAL_TIM_Base_MspInit+0x108>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d117      	bne.n	8001196 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 8001168:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800116c:	4a3c      	ldr	r2, [pc, #240]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 8001178:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2019      	movs	r0, #25
 800118a:	f000 fc2e 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800118e:	2019      	movs	r0, #25
 8001190:	f000 fc45 	bl	8001a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001194:	e05d      	b.n	8001252 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800119e:	d117      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 80011a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011a6:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 80011b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	201c      	movs	r0, #28
 80011c4:	f000 fc11 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c8:	201c      	movs	r0, #28
 80011ca:	f000 fc28 	bl	8001a1e <HAL_NVIC_EnableIRQ>
}
 80011ce:	e040      	b.n	8001252 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM8)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_TIM_Base_MspInit+0x110>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d11f      	bne.n	800121a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 80011dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 80011ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	202b      	movs	r0, #43	; 0x2b
 80011fe:	f000 fbf4 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001202:	202b      	movs	r0, #43	; 0x2b
 8001204:	f000 fc0b 	bl	8001a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	202c      	movs	r0, #44	; 0x2c
 800120e:	f000 fbec 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001212:	202c      	movs	r0, #44	; 0x2c
 8001214:	f000 fc03 	bl	8001a1e <HAL_NVIC_EnableIRQ>
}
 8001218:	e01b      	b.n	8001252 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM12)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_TIM_Base_MspInit+0x114>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d116      	bne.n	8001252 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 8001226:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 800122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001230:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_TIM_Base_MspInit+0x10c>)
 8001236:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800123a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	202b      	movs	r0, #43	; 0x2b
 8001248:	f000 fbcf 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800124c:	202b      	movs	r0, #43	; 0x2b
 800124e:	f000 fbe6 	bl	8001a1e <HAL_NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010000 	.word	0x40010000
 8001260:	58024400 	.word	0x58024400
 8001264:	40010400 	.word	0x40010400
 8001268:	40001800 	.word	0x40001800

0800126c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_TIM_MspPostInit+0x6c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11f      	bne.n	80012ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_TIM_MspPostInit+0x70>)
 8001290:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001294:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_TIM_MspPostInit+0x70>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_TIM_MspPostInit+0x70>)
 80012a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80012be:	2302      	movs	r3, #2
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_TIM_MspPostInit+0x74>)
 80012ca:	f000 fbc3 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40001800 	.word	0x40001800
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020400 	.word	0x58020400

080012e4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_USART3_UART_Init+0x90>)
 80012ea:	4a23      	ldr	r2, [pc, #140]	; (8001378 <MX_USART3_UART_Init+0x94>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_USART3_UART_Init+0x90>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_USART3_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_USART3_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_USART3_UART_Init+0x90>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_USART3_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_USART3_UART_Init+0x90>)
 800132e:	f004 fe3b 	bl	8005fa8 <HAL_UART_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001338:	f7ff fc18 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001340:	f005 ffd5 	bl	80072ee <HAL_UARTEx_SetTxFifoThreshold>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800134a:	f7ff fc0f 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001352:	f006 f80a 	bl	800736a <HAL_UARTEx_SetRxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800135c:	f7ff fc06 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_USART3_UART_Init+0x90>)
 8001362:	f005 ff8b 	bl	800727c <HAL_UARTEx_DisableFifoMode>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800136c:	f7ff fbfe 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	240001c4 	.word	0x240001c4
 8001378:	40004800 	.word	0x40004800

0800137c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ba      	sub	sp, #232	; 0xe8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	22c0      	movs	r2, #192	; 0xc0
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f006 f89b 	bl	80074d8 <memset>
  if(uartHandle->Instance==USART3)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_UART_MspInit+0xc8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d146      	bne.n	800143a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013ac:	f04f 0202 	mov.w	r2, #2
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fd5c 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013ce:	f7ff fbcd 	bl	8000b6c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_UART_MspInit+0xcc>)
 80013d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_UART_MspInit+0xcc>)
 80013da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013de:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_UART_MspInit+0xcc>)
 80013e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_UART_MspInit+0xcc>)
 80013f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_UART_MspInit+0xcc>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_UART_MspInit+0xcc>)
 8001402:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800140e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001428:	2307      	movs	r3, #7
 800142a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_UART_MspInit+0xd0>)
 8001436:	f000 fb0d 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	37e8      	adds	r7, #232	; 0xe8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40004800 	.word	0x40004800
 8001448:	58024400 	.word	0x58024400
 800144c:	58020c00 	.word	0x58020c00

08001450 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 8001464:	4930      	ldr	r1, [pc, #192]	; (8001528 <BootMessagePrint+0xc8>)
 8001466:	4831      	ldr	r0, [pc, #196]	; (800152c <BootMessagePrint+0xcc>)
 8001468:	f006 f83e 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800146c:	482f      	ldr	r0, [pc, #188]	; (800152c <BootMessagePrint+0xcc>)
 800146e:	f7fe ff3f 	bl	80002f0 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	492c      	ldr	r1, [pc, #176]	; (800152c <BootMessagePrint+0xcc>)
 800147c:	482c      	ldr	r0, [pc, #176]	; (8001530 <BootMessagePrint+0xd0>)
 800147e:	f004 fde3 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 8001482:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <BootMessagePrint+0xd4>)
 8001484:	492c      	ldr	r1, [pc, #176]	; (8001538 <BootMessagePrint+0xd8>)
 8001486:	4829      	ldr	r0, [pc, #164]	; (800152c <BootMessagePrint+0xcc>)
 8001488:	f006 f82e 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800148c:	4827      	ldr	r0, [pc, #156]	; (800152c <BootMessagePrint+0xcc>)
 800148e:	f7fe ff2f 	bl	80002f0 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29a      	uxth	r2, r3
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	4924      	ldr	r1, [pc, #144]	; (800152c <BootMessagePrint+0xcc>)
 800149c:	4824      	ldr	r0, [pc, #144]	; (8001530 <BootMessagePrint+0xd0>)
 800149e:	f004 fdd3 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 80014a2:	4a26      	ldr	r2, [pc, #152]	; (800153c <BootMessagePrint+0xdc>)
 80014a4:	4926      	ldr	r1, [pc, #152]	; (8001540 <BootMessagePrint+0xe0>)
 80014a6:	4821      	ldr	r0, [pc, #132]	; (800152c <BootMessagePrint+0xcc>)
 80014a8:	f006 f81e 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014ac:	481f      	ldr	r0, [pc, #124]	; (800152c <BootMessagePrint+0xcc>)
 80014ae:	f7fe ff1f 	bl	80002f0 <strlen>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	491c      	ldr	r1, [pc, #112]	; (800152c <BootMessagePrint+0xcc>)
 80014bc:	481c      	ldr	r0, [pc, #112]	; (8001530 <BootMessagePrint+0xd0>)
 80014be:	f004 fdc3 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <BootMessagePrint+0xe4>)
 80014c4:	4920      	ldr	r1, [pc, #128]	; (8001548 <BootMessagePrint+0xe8>)
 80014c6:	4819      	ldr	r0, [pc, #100]	; (800152c <BootMessagePrint+0xcc>)
 80014c8:	f006 f80e 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014cc:	4817      	ldr	r0, [pc, #92]	; (800152c <BootMessagePrint+0xcc>)
 80014ce:	f7fe ff0f 	bl	80002f0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	4914      	ldr	r1, [pc, #80]	; (800152c <BootMessagePrint+0xcc>)
 80014dc:	4814      	ldr	r0, [pc, #80]	; (8001530 <BootMessagePrint+0xd0>)
 80014de:	f004 fdb3 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <BootMessagePrint+0xec>)
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <BootMessagePrint+0xf0>)
 80014e6:	491b      	ldr	r1, [pc, #108]	; (8001554 <BootMessagePrint+0xf4>)
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <BootMessagePrint+0xcc>)
 80014ea:	f005 fffd 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <BootMessagePrint+0xcc>)
 80014f0:	f7fe fefe 	bl	80002f0 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	490b      	ldr	r1, [pc, #44]	; (800152c <BootMessagePrint+0xcc>)
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <BootMessagePrint+0xd0>)
 8001500:	f004 fda2 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 8001504:	4908      	ldr	r1, [pc, #32]	; (8001528 <BootMessagePrint+0xc8>)
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <BootMessagePrint+0xcc>)
 8001508:	f005 ffee 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800150c:	4807      	ldr	r0, [pc, #28]	; (800152c <BootMessagePrint+0xcc>)
 800150e:	f7fe feef 	bl	80002f0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	4904      	ldr	r1, [pc, #16]	; (800152c <BootMessagePrint+0xcc>)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <BootMessagePrint+0xd0>)
 800151e:	f004 fd93 	bl	8006048 <HAL_UART_Transmit>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	08007e0c 	.word	0x08007e0c
 800152c:	24000268 	.word	0x24000268
 8001530:	240001c4 	.word	0x240001c4
 8001534:	08007e3c 	.word	0x08007e3c
 8001538:	08007e4c 	.word	0x08007e4c
 800153c:	08007e68 	.word	0x08007e68
 8001540:	08007e70 	.word	0x08007e70
 8001544:	08007e8c 	.word	0x08007e8c
 8001548:	08007ea0 	.word	0x08007ea0
 800154c:	08007ebc 	.word	0x08007ebc
 8001550:	08007ec8 	.word	0x08007ec8
 8001554:	08007ed4 	.word	0x08007ed4

08001558 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 800155c:	493d      	ldr	r1, [pc, #244]	; (8001654 <GetClockSourcePrint+0xfc>)
 800155e:	483e      	ldr	r0, [pc, #248]	; (8001658 <GetClockSourcePrint+0x100>)
 8001560:	f005 ffc2 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001564:	483c      	ldr	r0, [pc, #240]	; (8001658 <GetClockSourcePrint+0x100>)
 8001566:	f7fe fec3 	bl	80002f0 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	4939      	ldr	r1, [pc, #228]	; (8001658 <GetClockSourcePrint+0x100>)
 8001574:	4839      	ldr	r0, [pc, #228]	; (800165c <GetClockSourcePrint+0x104>)
 8001576:	f004 fd67 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800157a:	f001 faab 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 800157e:	4603      	mov	r3, r0
 8001580:	4a37      	ldr	r2, [pc, #220]	; (8001660 <GetClockSourcePrint+0x108>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	461a      	mov	r2, r3
 800158a:	4936      	ldr	r1, [pc, #216]	; (8001664 <GetClockSourcePrint+0x10c>)
 800158c:	4832      	ldr	r0, [pc, #200]	; (8001658 <GetClockSourcePrint+0x100>)
 800158e:	f005 ffab 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001592:	4831      	ldr	r0, [pc, #196]	; (8001658 <GetClockSourcePrint+0x100>)
 8001594:	f7fe feac 	bl	80002f0 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	492d      	ldr	r1, [pc, #180]	; (8001658 <GetClockSourcePrint+0x100>)
 80015a2:	482e      	ldr	r0, [pc, #184]	; (800165c <GetClockSourcePrint+0x104>)
 80015a4:	f004 fd50 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80015a8:	f001 fc0e 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <GetClockSourcePrint+0x108>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	0c9b      	lsrs	r3, r3, #18
 80015b6:	461a      	mov	r2, r3
 80015b8:	492b      	ldr	r1, [pc, #172]	; (8001668 <GetClockSourcePrint+0x110>)
 80015ba:	4827      	ldr	r0, [pc, #156]	; (8001658 <GetClockSourcePrint+0x100>)
 80015bc:	f005 ff94 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80015c0:	4825      	ldr	r0, [pc, #148]	; (8001658 <GetClockSourcePrint+0x100>)
 80015c2:	f7fe fe95 	bl	80002f0 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	4922      	ldr	r1, [pc, #136]	; (8001658 <GetClockSourcePrint+0x100>)
 80015d0:	4822      	ldr	r0, [pc, #136]	; (800165c <GetClockSourcePrint+0x104>)
 80015d2:	f004 fd39 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80015d6:	f001 fc27 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <GetClockSourcePrint+0x108>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0c9b      	lsrs	r3, r3, #18
 80015e4:	461a      	mov	r2, r3
 80015e6:	4921      	ldr	r1, [pc, #132]	; (800166c <GetClockSourcePrint+0x114>)
 80015e8:	481b      	ldr	r0, [pc, #108]	; (8001658 <GetClockSourcePrint+0x100>)
 80015ea:	f005 ff7d 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80015ee:	481a      	ldr	r0, [pc, #104]	; (8001658 <GetClockSourcePrint+0x100>)
 80015f0:	f7fe fe7e 	bl	80002f0 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	4916      	ldr	r1, [pc, #88]	; (8001658 <GetClockSourcePrint+0x100>)
 80015fe:	4817      	ldr	r0, [pc, #92]	; (800165c <GetClockSourcePrint+0x104>)
 8001600:	f004 fd22 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001604:	f001 fc26 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 8001608:	4603      	mov	r3, r0
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <GetClockSourcePrint+0x108>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	461a      	mov	r2, r3
 8001614:	4916      	ldr	r1, [pc, #88]	; (8001670 <GetClockSourcePrint+0x118>)
 8001616:	4810      	ldr	r0, [pc, #64]	; (8001658 <GetClockSourcePrint+0x100>)
 8001618:	f005 ff66 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800161c:	480e      	ldr	r0, [pc, #56]	; (8001658 <GetClockSourcePrint+0x100>)
 800161e:	f7fe fe67 	bl	80002f0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	b29a      	uxth	r2, r3
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	490b      	ldr	r1, [pc, #44]	; (8001658 <GetClockSourcePrint+0x100>)
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <GetClockSourcePrint+0x104>)
 800162e:	f004 fd0b 	bl	8006048 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <GetClockSourcePrint+0xfc>)
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <GetClockSourcePrint+0x100>)
 8001636:	f005 ff57 	bl	80074e8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <GetClockSourcePrint+0x100>)
 800163c:	f7fe fe58 	bl	80002f0 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <GetClockSourcePrint+0x100>)
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <GetClockSourcePrint+0x104>)
 800164c:	f004 fcfc 	bl	8006048 <HAL_UART_Transmit>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	08007e0c 	.word	0x08007e0c
 8001658:	24000268 	.word	0x24000268
 800165c:	240001c4 	.word	0x240001c4
 8001660:	431bde83 	.word	0x431bde83
 8001664:	08007ef4 	.word	0x08007ef4
 8001668:	08007f24 	.word	0x08007f24
 800166c:	08007f54 	.word	0x08007f54
 8001670:	08007f84 	.word	0x08007f84

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001678:	f7ff fb84 	bl	8000d84 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	; (80016b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	; (80016c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f005 fef5 	bl	8007490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7ff f9b9 	bl	8000a1c <main>
  bx  lr
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80016b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016b4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80016b8:	08008030 	.word	0x08008030
  ldr r2, =_sbss
 80016bc:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80016c0:	24000680 	.word	0x24000680

080016c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f000 f980 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80016d4:	f001 f9fe 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_Init+0x68>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	4913      	ldr	r1, [pc, #76]	; (8001734 <HAL_Init+0x6c>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
 80016f0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_Init+0x68>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_Init+0x6c>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_Init+0x70>)
 800170a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_Init+0x74>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f814 	bl	8001740 <HAL_InitTick>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e002      	b.n	8001728 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001722:	f7ff fa29 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	58024400 	.word	0x58024400
 8001734:	08007fb4 	.word	0x08007fb4
 8001738:	24000004 	.word	0x24000004
 800173c:	24000000 	.word	0x24000000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_InitTick+0x60>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e021      	b.n	8001798 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_InitTick+0x64>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_InitTick+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f965 	bl	8001a3a <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 f92f 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x68>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2400000c 	.word	0x2400000c
 80017a4:	24000000 	.word	0x24000000
 80017a8:	24000008 	.word	0x24000008

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2400000c 	.word	0x2400000c
 80017d0:	2400066c 	.word	0x2400066c

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2400066c 	.word	0x2400066c

080017ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff ffee 	bl	80017d4 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d005      	beq.n	8001812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_Delay+0x44>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001812:	bf00      	nop
 8001814:	f7ff ffde 	bl	80017d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f7      	bhi.n	8001814 <HAL_Delay+0x28>
  {
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2400000c 	.word	0x2400000c

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	4313      	orrs	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00
 8001878:	05fa0000 	.word	0x05fa0000

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff40 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff90 	bl	8001928 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5f 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff33 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa4 	bl	8001990 <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_GPIO_Init+0x234>)
 8001a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a66:	e194      	b.n	8001d92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8186 	beq.w	8001d8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d005      	beq.n	8001a98 <HAL_GPIO_Init+0x44>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d130      	bne.n	8001afa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 0201 	and.w	r2, r3, #1
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d017      	beq.n	8001b36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d123      	bne.n	8001b8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	69b9      	ldr	r1, [r7, #24]
 8001b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0203 	and.w	r2, r3, #3
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80e0 	beq.w	8001d8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x238>)
 8001bce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001bd2:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <HAL_GPIO_Init+0x238>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_GPIO_Init+0x238>)
 8001bde:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_GPIO_Init+0x23c>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <HAL_GPIO_Init+0x240>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d052      	beq.n	8001cbc <HAL_GPIO_Init+0x268>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_GPIO_Init+0x244>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d031      	beq.n	8001c82 <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_GPIO_Init+0x248>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <HAL_GPIO_Init+0x22a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_GPIO_Init+0x24c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_GPIO_Init+0x250>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_GPIO_Init+0x254>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_GPIO_Init+0x258>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x21a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x25c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x216>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x260>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x212>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <HAL_GPIO_Init+0x264>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x20e>
 8001c5e:	2309      	movs	r3, #9
 8001c60:	e02d      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c62:	230a      	movs	r3, #10
 8001c64:	e02b      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c66:	2308      	movs	r3, #8
 8001c68:	e029      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e027      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c6e:	2306      	movs	r3, #6
 8001c70:	e025      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c72:	2305      	movs	r3, #5
 8001c74:	e023      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e021      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e01f      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e01d      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01b      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c86:	bf00      	nop
 8001c88:	58000080 	.word	0x58000080
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58000400 	.word	0x58000400
 8001c94:	58020000 	.word	0x58020000
 8001c98:	58020400 	.word	0x58020400
 8001c9c:	58020800 	.word	0x58020800
 8001ca0:	58020c00 	.word	0x58020c00
 8001ca4:	58021000 	.word	0x58021000
 8001ca8:	58021400 	.word	0x58021400
 8001cac:	58021800 	.word	0x58021800
 8001cb0:	58021c00 	.word	0x58021c00
 8001cb4:	58022000 	.word	0x58022000
 8001cb8:	58022400 	.word	0x58022400
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	f002 0203 	and.w	r2, r2, #3
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	4093      	lsls	r3, r2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cce:	4938      	ldr	r1, [pc, #224]	; (8001db0 <HAL_GPIO_Init+0x35c>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f ae63 	bne.w	8001a68 <HAL_GPIO_Init+0x14>
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	3724      	adds	r7, #36	; 0x24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	58000400 	.word	0x58000400

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001df8:	887a      	ldrh	r2, [r7, #2]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	041a      	lsls	r2, r3, #16
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	400b      	ands	r3, r1
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe ff51 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d00a      	beq.n	8001e7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e64:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e040      	b.n	8001ef8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e03e      	b.n	8001ef8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e82:	491f      	ldr	r1, [pc, #124]	; (8001f00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e8a:	f7ff fca3 	bl	80017d4 <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e90:	e009      	b.n	8001ea6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e92:	f7ff fc9f 	bl	80017d4 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea0:	d901      	bls.n	8001ea6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e028      	b.n	8001ef8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b1e      	cmp	r3, #30
 8001eb8:	d008      	beq.n	8001ecc <HAL_PWREx_ConfigSupply+0x7c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8001ebe:	d005      	beq.n	8001ecc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b1d      	cmp	r3, #29
 8001ec4:	d002      	beq.n	8001ecc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b2d      	cmp	r3, #45	; 0x2d
 8001eca:	d114      	bne.n	8001ef6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ecc:	f7ff fc82 	bl	80017d4 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ed2:	e009      	b.n	8001ee8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ed4:	f7ff fc7e 	bl	80017d4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee2:	d901      	bls.n	8001ee8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d1ee      	bne.n	8001ed4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	58024800 	.word	0x58024800

08001f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f000 bc1f 	b.w	8002756 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80b3 	beq.w	800208c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b95      	ldr	r3, [pc, #596]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f30:	4b92      	ldr	r3, [pc, #584]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d007      	beq.n	8001f4c <HAL_RCC_OscConfig+0x48>
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2b18      	cmp	r3, #24
 8001f40:	d112      	bne.n	8001f68 <HAL_RCC_OscConfig+0x64>
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8098 	beq.w	800208a <HAL_RCC_OscConfig+0x186>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 8093 	bne.w	800208a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e3f6      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d106      	bne.n	8001f80 <HAL_RCC_OscConfig+0x7c>
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a81      	ldr	r2, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e058      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0xaa>
 8001f88:	4b7c      	ldr	r3, [pc, #496]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7b      	ldr	r2, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a78      	ldr	r2, [pc, #480]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a75      	ldr	r2, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e041      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb6:	d112      	bne.n	8001fde <HAL_RCC_OscConfig+0xda>
 8001fb8:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6f      	ldr	r2, [pc, #444]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e029      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001fe6:	d112      	bne.n	800200e <HAL_RCC_OscConfig+0x10a>
 8001fe8:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a63      	ldr	r2, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b61      	ldr	r3, [pc, #388]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a60      	ldr	r2, [pc, #384]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8001ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5d      	ldr	r2, [pc, #372]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e011      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
 800200e:	4b5b      	ldr	r3, [pc, #364]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b58      	ldr	r3, [pc, #352]	; (800217c <HAL_RCC_OscConfig+0x278>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b55      	ldr	r3, [pc, #340]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a54      	ldr	r2, [pc, #336]	; (800217c <HAL_RCC_OscConfig+0x278>)
 800202c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002030:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d013      	beq.n	8002062 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff fbcb 	bl	80017d4 <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002042:	f7ff fbc7 	bl	80017d4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e380      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002054:	4b49      	ldr	r3, [pc, #292]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x13e>
 8002060:	e014      	b.n	800208c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff fbb7 	bl	80017d4 <HAL_GetTick>
 8002066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206a:	f7ff fbb3 	bl	80017d4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e36c      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800207c:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_RCC_OscConfig+0x278>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x166>
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 808c 	beq.w	80021b2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209a:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_RCC_OscConfig+0x278>)
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCC_OscConfig+0x278>)
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_RCC_OscConfig+0x1bc>
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b18      	cmp	r3, #24
 80020b4:	d137      	bne.n	8002126 <HAL_RCC_OscConfig+0x222>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d132      	bne.n	8002126 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_RCC_OscConfig+0x278>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_OscConfig+0x1d4>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e33e      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_RCC_OscConfig+0x278>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 0219 	bic.w	r2, r3, #25
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4925      	ldr	r1, [pc, #148]	; (800217c <HAL_RCC_OscConfig+0x278>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff fb73 	bl	80017d4 <HAL_GetTick>
 80020ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fb6f 	bl	80017d4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e328      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	4917      	ldr	r1, [pc, #92]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002124:	e045      	b.n	80021b2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d028      	beq.n	8002180 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0219 	bic.w	r2, r3, #25
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4910      	ldr	r1, [pc, #64]	; (800217c <HAL_RCC_OscConfig+0x278>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff fb48 	bl	80017d4 <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff fb44 	bl	80017d4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e2fd      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_RCC_OscConfig+0x278>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	061b      	lsls	r3, r3, #24
 8002174:	4901      	ldr	r1, [pc, #4]	; (800217c <HAL_RCC_OscConfig+0x278>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
 800217a:	e01a      	b.n	80021b2 <HAL_RCC_OscConfig+0x2ae>
 800217c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002180:	4b97      	ldr	r3, [pc, #604]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a96      	ldr	r2, [pc, #600]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fb22 	bl	80017d4 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff fb1e 	bl	80017d4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e2d7      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021a6:	4b8e      	ldr	r3, [pc, #568]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06a      	beq.n	8002294 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021be:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021c8:	4b85      	ldr	r3, [pc, #532]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d007      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2e0>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b18      	cmp	r3, #24
 80021d8:	d11b      	bne.n	8002212 <HAL_RCC_OscConfig+0x30e>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d116      	bne.n	8002212 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021e4:	4b7e      	ldr	r3, [pc, #504]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x2f8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e2ac      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021fc:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	4975      	ldr	r1, [pc, #468]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002210:	e040      	b.n	8002294 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d023      	beq.n	8002262 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800221a:	4b71      	ldr	r3, [pc, #452]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a70      	ldr	r2, [pc, #448]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff fad5 	bl	80017d4 <HAL_GetTick>
 800222a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800222e:	f7ff fad1 	bl	80017d4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e28a      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002240:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	4961      	ldr	r1, [pc, #388]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
 8002260:	e018      	b.n	8002294 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800226c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff fab1 	bl	80017d4 <HAL_GetTick>
 8002272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002276:	f7ff faad 	bl	80017d4 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e266      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d036      	beq.n	800230e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d019      	beq.n	80022dc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80022aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ac:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7ff fa8e 	bl	80017d4 <HAL_GetTick>
 80022b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fa8a 	bl	80017d4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e243      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80022d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x3b8>
 80022da:	e018      	b.n	800230e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022dc:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e0:	4a3f      	ldr	r2, [pc, #252]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff fa74 	bl	80017d4 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff fa70 	bl	80017d4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e229      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	d036      	beq.n	8002388 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d019      	beq.n	8002356 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002322:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2e      	ldr	r2, [pc, #184]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800232e:	f7ff fa51 	bl	80017d4 <HAL_GetTick>
 8002332:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002336:	f7ff fa4d 	bl	80017d4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e206      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x432>
 8002354:	e018      	b.n	8002388 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800235c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002360:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002362:	f7ff fa37 	bl	80017d4 <HAL_GetTick>
 8002366:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800236a:	f7ff fa33 	bl	80017d4 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1ec      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80af 	beq.w	80024f4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCC_OscConfig+0x4e0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_RCC_OscConfig+0x4e0>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a2:	f7ff fa17 	bl	80017d4 <HAL_GetTick>
 80023a6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff fa13 	bl	80017d4 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	; 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e1cc      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_OscConfig+0x4e0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4e4>
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a02      	ldr	r2, [pc, #8]	; (80023e0 <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	e05b      	b.n	8002496 <HAL_RCC_OscConfig+0x592>
 80023de:	bf00      	nop
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58024800 	.word	0x58024800
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d112      	bne.n	8002416 <HAL_RCC_OscConfig+0x512>
 80023f0:	4b9d      	ldr	r3, [pc, #628]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a9c      	ldr	r2, [pc, #624]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	4b9a      	ldr	r3, [pc, #616]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a99      	ldr	r2, [pc, #612]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	4b97      	ldr	r3, [pc, #604]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	4a96      	ldr	r2, [pc, #600]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	6713      	str	r3, [r2, #112]	; 0x70
 8002414:	e03f      	b.n	8002496 <HAL_RCC_OscConfig+0x592>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d112      	bne.n	8002444 <HAL_RCC_OscConfig+0x540>
 800241e:	4b92      	ldr	r3, [pc, #584]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a91      	ldr	r2, [pc, #580]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	4b8f      	ldr	r3, [pc, #572]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a8e      	ldr	r2, [pc, #568]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	4b8c      	ldr	r3, [pc, #560]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a8b      	ldr	r2, [pc, #556]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	e028      	b.n	8002496 <HAL_RCC_OscConfig+0x592>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b85      	cmp	r3, #133	; 0x85
 800244a:	d112      	bne.n	8002472 <HAL_RCC_OscConfig+0x56e>
 800244c:	4b86      	ldr	r3, [pc, #536]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a85      	ldr	r2, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
 8002458:	4b83      	ldr	r3, [pc, #524]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a82      	ldr	r2, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800245e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b80      	ldr	r3, [pc, #512]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a7f      	ldr	r2, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e011      	b.n	8002496 <HAL_RCC_OscConfig+0x592>
 8002472:	4b7d      	ldr	r3, [pc, #500]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a7c      	ldr	r2, [pc, #496]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b7a      	ldr	r3, [pc, #488]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a79      	ldr	r2, [pc, #484]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	4b77      	ldr	r3, [pc, #476]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a76      	ldr	r2, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d015      	beq.n	80024ca <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff f999 	bl	80017d4 <HAL_GetTick>
 80024a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff f995 	bl	80017d4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e14c      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024bc:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ee      	beq.n	80024a6 <HAL_RCC_OscConfig+0x5a2>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7ff f983 	bl	80017d4 <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff f97f 	bl	80017d4 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e136      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024e8:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 812b 	beq.w	8002754 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024fe:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002506:	2b18      	cmp	r3, #24
 8002508:	f000 80bb 	beq.w	8002682 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2b02      	cmp	r3, #2
 8002512:	f040 8095 	bne.w	8002640 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b54      	ldr	r3, [pc, #336]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800251c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff f957 	bl	80017d4 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff f953 	bl	80017d4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e10c      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800253c:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800254a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254c:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_OscConfig+0x768>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	430a      	orrs	r2, r1
 800255c:	4942      	ldr	r1, [pc, #264]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800255e:	4313      	orrs	r3, r2
 8002560:	628b      	str	r3, [r1, #40]	; 0x28
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	3b01      	subs	r3, #1
 8002568:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	3b01      	subs	r3, #1
 8002572:	025b      	lsls	r3, r3, #9
 8002574:	b29b      	uxth	r3, r3
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	3b01      	subs	r3, #1
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	3b01      	subs	r3, #1
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002592:	4935      	ldr	r1, [pc, #212]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002594:	4313      	orrs	r3, r2
 8002596:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	4a32      	ldr	r2, [pc, #200]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025a4:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <HAL_RCC_OscConfig+0x76c>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	492d      	ldr	r1, [pc, #180]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f023 020c 	bic.w	r2, r3, #12
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4928      	ldr	r1, [pc, #160]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025ca:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f023 0202 	bic.w	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4924      	ldr	r1, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	4a21      	ldr	r2, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 80025fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff f8dc 	bl	80017d4 <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f8d8 	bl	80017d4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e091      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x71c>
 800263e:	e089      	b.n	8002754 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_RCC_OscConfig+0x764>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff f8c2 	bl	80017d4 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002652:	e00f      	b.n	8002674 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff f8be 	bl	80017d4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d908      	bls.n	8002674 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e077      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
 8002666:	bf00      	nop
 8002668:	58024400 	.word	0x58024400
 800266c:	fffffc0c 	.word	0xfffffc0c
 8002670:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e9      	bne.n	8002654 <HAL_RCC_OscConfig+0x750>
 8002680:	e068      	b.n	8002754 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b01      	cmp	r3, #1
 8002694:	d031      	beq.n	80026fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d12a      	bne.n	80026fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d122      	bne.n	80026fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d11a      	bne.n	80026fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	0a5b      	lsrs	r3, r3, #9
 80026c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d111      	bne.n	80026fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d108      	bne.n	80026fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	0e1b      	lsrs	r3, r3, #24
 80026ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e02b      	b.n	8002756 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002708:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d01f      	beq.n	8002754 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002720:	f7ff f858 	bl	80017d4 <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002726:	bf00      	nop
 8002728:	f7ff f854 	bl	80017d4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	4293      	cmp	r3, r2
 8002732:	d0f9      	beq.n	8002728 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 8002736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_RCC_OscConfig+0x860>)
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002740:	00d2      	lsls	r2, r2, #3
 8002742:	4907      	ldr	r1, [pc, #28]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 8002744:	4313      	orrs	r3, r2
 8002746:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_RCC_OscConfig+0x85c>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3730      	adds	r7, #48	; 0x30
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	58024400 	.word	0x58024400
 8002764:	ffff0007 	.word	0xffff0007

08002768 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e19c      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b8a      	ldr	r3, [pc, #552]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b87      	ldr	r3, [pc, #540]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 020f 	bic.w	r2, r3, #15
 8002792:	4985      	ldr	r1, [pc, #532]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b83      	ldr	r3, [pc, #524]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e184      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	4b7b      	ldr	r3, [pc, #492]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d908      	bls.n	80027da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027c8:	4b78      	ldr	r3, [pc, #480]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	4975      	ldr	r1, [pc, #468]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d908      	bls.n	8002808 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027f6:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	496a      	ldr	r1, [pc, #424]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002804:	4313      	orrs	r3, r2
 8002806:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d010      	beq.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	4b64      	ldr	r3, [pc, #400]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002820:	429a      	cmp	r2, r3
 8002822:	d908      	bls.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002824:	4b61      	ldr	r3, [pc, #388]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	495e      	ldr	r1, [pc, #376]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002832:	4313      	orrs	r3, r2
 8002834:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800284e:	429a      	cmp	r2, r3
 8002850:	d908      	bls.n	8002864 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002852:	4b56      	ldr	r3, [pc, #344]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4953      	ldr	r1, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002860:	4313      	orrs	r3, r2
 8002862:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	429a      	cmp	r2, r3
 800287e:	d908      	bls.n	8002892 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f023 020f 	bic.w	r2, r3, #15
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4947      	ldr	r1, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 800288e:	4313      	orrs	r3, r2
 8002890:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d055      	beq.n	800294a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4940      	ldr	r1, [pc, #256]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b8:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d121      	bne.n	8002908 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0f6      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d0:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d115      	bne.n	8002908 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0ea      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028e8:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0de      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0d6      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f023 0207 	bic.w	r2, r3, #7
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4925      	ldr	r1, [pc, #148]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291a:	f7fe ff5b 	bl	80017d4 <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002920:	e00a      	b.n	8002938 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002922:	f7fe ff57 	bl	80017d4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0be      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	429a      	cmp	r2, r3
 8002948:	d1eb      	bne.n	8002922 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	429a      	cmp	r2, r3
 8002964:	d208      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f023 020f 	bic.w	r2, r3, #15
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x244>)
 8002974:	4313      	orrs	r3, r2
 8002976:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d214      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 020f 	bic.w	r2, r3, #15
 800298e:	4906      	ldr	r1, [pc, #24]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_RCC_ClockConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e086      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x34e>
 80029a8:	52002000 	.word	0x52002000
 80029ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d010      	beq.n	80029de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d208      	bcs.n	80029de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029cc:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4939      	ldr	r1, [pc, #228]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d208      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	492e      	ldr	r1, [pc, #184]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d208      	bcs.n	8002a3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4922      	ldr	r1, [pc, #136]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d010      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d208      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4917      	ldr	r1, [pc, #92]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002a68:	f000 f834 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	4912      	ldr	r1, [pc, #72]	; (8002ac4 <HAL_RCC_ClockConfig+0x35c>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
 8002a84:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_RCC_ClockConfig+0x358>)
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_RCC_ClockConfig+0x35c>)
 8002a90:	5cd3      	ldrb	r3, [r2, r3]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x360>)
 8002a9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x364>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_RCC_ClockConfig+0x368>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fe48 	bl	8001740 <HAL_InitTick>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	08007fb4 	.word	0x08007fb4
 8002ac8:	24000004 	.word	0x24000004
 8002acc:	24000000 	.word	0x24000000
 8002ad0:	24000008 	.word	0x24000008

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ada:	4bb3      	ldr	r3, [pc, #716]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae2:	2b18      	cmp	r3, #24
 8002ae4:	f200 8155 	bhi.w	8002d92 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002d93 	.word	0x08002d93
 8002af8:	08002d93 	.word	0x08002d93
 8002afc:	08002d93 	.word	0x08002d93
 8002b00:	08002d93 	.word	0x08002d93
 8002b04:	08002d93 	.word	0x08002d93
 8002b08:	08002d93 	.word	0x08002d93
 8002b0c:	08002d93 	.word	0x08002d93
 8002b10:	08002b7b 	.word	0x08002b7b
 8002b14:	08002d93 	.word	0x08002d93
 8002b18:	08002d93 	.word	0x08002d93
 8002b1c:	08002d93 	.word	0x08002d93
 8002b20:	08002d93 	.word	0x08002d93
 8002b24:	08002d93 	.word	0x08002d93
 8002b28:	08002d93 	.word	0x08002d93
 8002b2c:	08002d93 	.word	0x08002d93
 8002b30:	08002b81 	.word	0x08002b81
 8002b34:	08002d93 	.word	0x08002d93
 8002b38:	08002d93 	.word	0x08002d93
 8002b3c:	08002d93 	.word	0x08002d93
 8002b40:	08002d93 	.word	0x08002d93
 8002b44:	08002d93 	.word	0x08002d93
 8002b48:	08002d93 	.word	0x08002d93
 8002b4c:	08002d93 	.word	0x08002d93
 8002b50:	08002b87 	.word	0x08002b87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b54:	4b94      	ldr	r3, [pc, #592]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b60:	4b91      	ldr	r3, [pc, #580]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	4a90      	ldr	r2, [pc, #576]	; (8002dac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b72:	e111      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b74:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b76:	61bb      	str	r3, [r7, #24]
      break;
 8002b78:	e10e      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b7a:	4b8d      	ldr	r3, [pc, #564]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b7c:	61bb      	str	r3, [r7, #24]
      break;
 8002b7e:	e10b      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b80:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b82:	61bb      	str	r3, [r7, #24]
      break;
 8002b84:	e108      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b86:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b90:	4b85      	ldr	r3, [pc, #532]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b9c:	4b82      	ldr	r3, [pc, #520]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ba6:	4b80      	ldr	r3, [pc, #512]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80e1 	beq.w	8002d8c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	f000 8083 	beq.w	8002cd8 <HAL_RCC_GetSysClockFreq+0x204>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	f200 80a1 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x248>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x114>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d056      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002be6:	e099      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d02d      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	4a6b      	ldr	r2, [pc, #428]	; (8002dac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c1e:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c32:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002c4e:	e087      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002dbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c62:	4b51      	ldr	r3, [pc, #324]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c76:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c92:	e065      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cd6:	e043      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002dc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d1a:	e021      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	0a5b      	lsrs	r3, r3, #9
 8002d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	ee07 3a90 	vmov	s15, r3
 8002d74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d84:	ee17 3a90 	vmov	r3, s15
 8002d88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d8a:	e005      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
      break;
 8002d90:	e002      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d94:	61bb      	str	r3, [r7, #24]
      break;
 8002d96:	bf00      	nop
  }

  return sysclockfreq;
 8002d98:	69bb      	ldr	r3, [r7, #24]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	58024400 	.word	0x58024400
 8002dac:	03d09000 	.word	0x03d09000
 8002db0:	003d0900 	.word	0x003d0900
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	46000000 	.word	0x46000000
 8002dbc:	4c742400 	.word	0x4c742400
 8002dc0:	4a742400 	.word	0x4a742400
 8002dc4:	4af42400 	.word	0x4af42400

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002dce:	f7ff fe81 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	490f      	ldr	r1, [pc, #60]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	08007fb4 	.word	0x08007fb4
 8002e20:	24000004 	.word	0x24000004
 8002e24:	24000000 	.word	0x24000000

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002e2c:	f7ff ffcc 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4904      	ldr	r1, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	08007fb4 	.word	0x08007fb4

08002e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002e58:	f7ff ffb6 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4904      	ldr	r1, [pc, #16]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	08007fb4 	.word	0x08007fb4

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b0c8      	sub	sp, #288	; 0x120
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	ea54 0305 	orrs.w	r3, r4, r5
 8002eaa:	d049      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eb6:	d02f      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002eb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ebc:	d828      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ec2:	d01a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ec8:	d822      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed2:	d007      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed6:	4ba7      	ldr	r3, [pc, #668]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	4aa6      	ldr	r2, [pc, #664]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ee2:	e01a      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee8:	3308      	adds	r3, #8
 8002eea:	2102      	movs	r1, #2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 fc43 	bl	8004778 <RCCEx_PLL2_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ef8:	e00f      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002efe:	3328      	adds	r3, #40	; 0x28
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fcea 	bl	80048dc <RCCEx_PLL3_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f0e:	e004      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f22:	4b94      	ldr	r3, [pc, #592]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f30:	4a90      	ldr	r2, [pc, #576]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f32:	430b      	orrs	r3, r1
 8002f34:	6513      	str	r3, [r2, #80]	; 0x50
 8002f36:	e003      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002f4c:	f04f 0900 	mov.w	r9, #0
 8002f50:	ea58 0309 	orrs.w	r3, r8, r9
 8002f54:	d047      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d82a      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f7d 	.word	0x08002f7d
 8002f6c:	08002f8b 	.word	0x08002f8b
 8002f70:	08002fa1 	.word	0x08002fa1
 8002f74:	08002fbf 	.word	0x08002fbf
 8002f78:	08002fbf 	.word	0x08002fbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7c:	4b7d      	ldr	r3, [pc, #500]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4a7c      	ldr	r2, [pc, #496]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f88:	e01a      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f8e:	3308      	adds	r3, #8
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f001 fbf0 	bl	8004778 <RCCEx_PLL2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f9e:	e00f      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa4:	3328      	adds	r3, #40	; 0x28
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fc97 	bl	80048dc <RCCEx_PLL3_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	f023 0107 	bic.w	r1, r3, #7
 8002fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6513      	str	r3, [r2, #80]	; 0x50
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fe2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002ff2:	f04f 0b00 	mov.w	fp, #0
 8002ff6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ffa:	d054      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003006:	d036      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003008:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800300c:	d82f      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800300e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003012:	d032      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003018:	d829      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800301a:	2bc0      	cmp	r3, #192	; 0xc0
 800301c:	d02f      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800301e:	2bc0      	cmp	r3, #192	; 0xc0
 8003020:	d825      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d018      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d821      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d007      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003032:	e01c      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	4a4e      	ldr	r2, [pc, #312]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800303a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003040:	e01e      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003046:	3308      	adds	r3, #8
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f001 fb94 	bl	8004778 <RCCEx_PLL2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003056:	e013      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305c:	3328      	adds	r3, #40	; 0x28
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f001 fc3b 	bl	80048dc <RCCEx_PLL3_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800306c:	e008      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003074:	e004      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800307e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003080:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003088:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800308a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	4a37      	ldr	r2, [pc, #220]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003098:	430b      	orrs	r3, r1
 800309a:	6513      	str	r3, [r2, #80]	; 0x50
 800309c:	e003      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80030a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80030b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80030c0:	460b      	mov	r3, r1
 80030c2:	4313      	orrs	r3, r2
 80030c4:	d05c      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80030c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030d0:	d03b      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80030d2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030d6:	d834      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030dc:	d037      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80030de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e2:	d82e      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030e8:	d033      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030ee:	d828      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f4:	d01a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d822      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003104:	d007      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003106:	e01c      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003114:	e01e      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311a:	3308      	adds	r3, #8
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f001 fb2a 	bl	8004778 <RCCEx_PLL2_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800312a:	e013      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800312c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fbd1 	bl	80048dc <RCCEx_PLL3_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003140:	e008      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003148:	e004      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003154:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10d      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	4a02      	ldr	r2, [pc, #8]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800316c:	430b      	orrs	r3, r1
 800316e:	6513      	str	r3, [r2, #80]	; 0x50
 8003170:	e006      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003172:	bf00      	nop
 8003174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800317c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800318c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003196:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d03a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80031a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	2b30      	cmp	r3, #48	; 0x30
 80031a8:	d01f      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d819      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d00c      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d815      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d019      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d111      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031be:	4bae      	ldr	r3, [pc, #696]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4aad      	ldr	r2, [pc, #692]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031ca:	e011      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d0:	3308      	adds	r3, #8
 80031d2:	2102      	movs	r1, #2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 facf 	bl	8004778 <RCCEx_PLL2_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031e0:	e006      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80031ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031f8:	4b9f      	ldr	r3, [pc, #636]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	4a9c      	ldr	r2, [pc, #624]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003208:	430b      	orrs	r3, r1
 800320a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800320c:	e003      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003212:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003222:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800322c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003230:	460b      	mov	r3, r1
 8003232:	4313      	orrs	r3, r2
 8003234:	d051      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800323c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003240:	d035      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003246:	d82e      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003248:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800324c:	d031      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800324e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003252:	d828      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d01a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	d822      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d007      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800326a:	e01c      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326c:	4b82      	ldr	r3, [pc, #520]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	4a81      	ldr	r2, [pc, #516]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003278:	e01c      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327e:	3308      	adds	r3, #8
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f001 fa78 	bl	8004778 <RCCEx_PLL2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800328e:	e011      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003294:	3328      	adds	r3, #40	; 0x28
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f001 fb1f 	bl	80048dc <RCCEx_PLL3_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032a4:	e006      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032ac:	e002      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80032b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032bc:	4b6e      	ldr	r3, [pc, #440]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80032c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ca:	4a6b      	ldr	r2, [pc, #428]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6513      	str	r3, [r2, #80]	; 0x50
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80032e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80032f4:	460b      	mov	r3, r1
 80032f6:	4313      	orrs	r3, r2
 80032f8:	d053      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80032fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d033      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330a:	d82c      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800330c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003310:	d02f      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003316:	d826      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800331c:	d02b      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800331e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003322:	d820      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003328:	d012      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800332a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800332e:	d81a      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d022      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003338:	d115      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800333a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800333e:	3308      	adds	r3, #8
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fa18 	bl	8004778 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800334e:	e015      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003354:	3328      	adds	r3, #40	; 0x28
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fabf 	bl	80048dc <RCCEx_PLL3_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003364:	e00a      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800337a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003384:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003388:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800338c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003392:	4a39      	ldr	r2, [pc, #228]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003394:	430b      	orrs	r3, r1
 8003396:	6513      	str	r3, [r2, #80]	; 0x50
 8003398:	e003      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800339e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80033ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	d060      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033ca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80033ce:	d039      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80033d0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80033d4:	d832      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033da:	d035      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80033dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e0:	d82c      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e6:	d031      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d826      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033f2:	d02d      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80033f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033f8:	d820      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fe:	d012      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003404:	d81a      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d024      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800340a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800340e:	d115      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003414:	3308      	adds	r3, #8
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f001 f9ad 	bl	8004778 <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003424:	e017      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342a:	3328      	adds	r3, #40	; 0x28
 800342c:	2101      	movs	r1, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f001 fa54 	bl	80048dc <RCCEx_PLL3_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800343a:	e00c      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003442:	e008      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003444:	bf00      	nop
 8003446:	e006      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003448:	bf00      	nop
 800344a:	e004      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800344c:	bf00      	nop
 800344e:	e002      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003456:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800346e:	4a02      	ldr	r2, [pc, #8]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003470:	430b      	orrs	r3, r1
 8003472:	6593      	str	r3, [r2, #88]	; 0x58
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003480:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800349a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800349e:	460b      	mov	r3, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	d037      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ae:	d00e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80034b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b4:	d816      	bhi.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d018      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80034ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034be:	d111      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c0:	4bc4      	ldr	r3, [pc, #784]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	4ac3      	ldr	r2, [pc, #780]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034cc:	e00f      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d2:	3308      	adds	r3, #8
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 f94e 	bl	8004778 <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034e2:	e004      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80034ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034f6:	4bb7      	ldr	r3, [pc, #732]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80034fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003504:	4ab3      	ldr	r2, [pc, #716]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003506:	430b      	orrs	r3, r1
 8003508:	6513      	str	r3, [r2, #80]	; 0x50
 800350a:	e003      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003510:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800352a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800352e:	460b      	mov	r3, r1
 8003530:	4313      	orrs	r3, r2
 8003532:	d039      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353a:	2b03      	cmp	r3, #3
 800353c:	d81c      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003581 	.word	0x08003581
 8003548:	08003555 	.word	0x08003555
 800354c:	08003563 	.word	0x08003563
 8003550:	08003581 	.word	0x08003581
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003554:	4b9f      	ldr	r3, [pc, #636]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	4a9e      	ldr	r2, [pc, #632]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003560:	e00f      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003566:	3308      	adds	r3, #8
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f001 f904 	bl	8004778 <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003576:	e004      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800357e:	e000      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003582:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800358a:	4b92      	ldr	r3, [pc, #584]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	f023 0103 	bic.w	r1, r3, #3
 8003592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	4a8e      	ldr	r2, [pc, #568]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800359a:	430b      	orrs	r3, r1
 800359c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800359e:	e003      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80035b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f000 8099 	beq.w	80036fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ca:	4b83      	ldr	r3, [pc, #524]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a82      	ldr	r2, [pc, #520]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035d6:	f7fe f8fd 	bl	80017d4 <HAL_GetTick>
 80035da:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035de:	e00b      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fe f8f8 	bl	80017d4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b64      	cmp	r3, #100	; 0x64
 80035ee:	d903      	bls.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035f6:	e005      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035f8:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ed      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003608:	2b00      	cmp	r3, #0
 800360a:	d173      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800360c:	4b71      	ldr	r3, [pc, #452]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800360e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003618:	4053      	eors	r3, r2
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003622:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	4b69      	ldr	r3, [pc, #420]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800363a:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a65      	ldr	r2, [pc, #404]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003646:	4a63      	ldr	r2, [pc, #396]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365a:	d118      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe f8ba 	bl	80017d4 <HAL_GetTick>
 8003660:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003664:	e00d      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fe f8b5 	bl	80017d4 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003670:	1ad2      	subs	r2, r2, r3
 8003672:	f241 3388 	movw	r3, #5000	; 0x1388
 8003676:	429a      	cmp	r2, r3
 8003678:	d903      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003680:	e005      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003682:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0eb      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800368e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003692:	2b00      	cmp	r3, #0
 8003694:	d129      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a6:	d10e      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80036a8:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80036b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036b8:	091a      	lsrs	r2, r3, #4
 80036ba:	4b48      	ldr	r3, [pc, #288]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80036bc:	4013      	ands	r3, r2
 80036be:	4a45      	ldr	r2, [pc, #276]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6113      	str	r3, [r2, #16]
 80036c4:	e005      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80036c6:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	4a42      	ldr	r2, [pc, #264]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036d0:	6113      	str	r3, [r2, #16]
 80036d2:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80036d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e2:	4a3c      	ldr	r2, [pc, #240]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	e008      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80036f2:	e003      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f002 0301 	and.w	r3, r2, #1
 8003708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003712:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	f000 8090 	beq.w	800383e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800371e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003726:	2b28      	cmp	r3, #40	; 0x28
 8003728:	d870      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003815 	.word	0x08003815
 8003734:	0800380d 	.word	0x0800380d
 8003738:	0800380d 	.word	0x0800380d
 800373c:	0800380d 	.word	0x0800380d
 8003740:	0800380d 	.word	0x0800380d
 8003744:	0800380d 	.word	0x0800380d
 8003748:	0800380d 	.word	0x0800380d
 800374c:	0800380d 	.word	0x0800380d
 8003750:	080037e1 	.word	0x080037e1
 8003754:	0800380d 	.word	0x0800380d
 8003758:	0800380d 	.word	0x0800380d
 800375c:	0800380d 	.word	0x0800380d
 8003760:	0800380d 	.word	0x0800380d
 8003764:	0800380d 	.word	0x0800380d
 8003768:	0800380d 	.word	0x0800380d
 800376c:	0800380d 	.word	0x0800380d
 8003770:	080037f7 	.word	0x080037f7
 8003774:	0800380d 	.word	0x0800380d
 8003778:	0800380d 	.word	0x0800380d
 800377c:	0800380d 	.word	0x0800380d
 8003780:	0800380d 	.word	0x0800380d
 8003784:	0800380d 	.word	0x0800380d
 8003788:	0800380d 	.word	0x0800380d
 800378c:	0800380d 	.word	0x0800380d
 8003790:	08003815 	.word	0x08003815
 8003794:	0800380d 	.word	0x0800380d
 8003798:	0800380d 	.word	0x0800380d
 800379c:	0800380d 	.word	0x0800380d
 80037a0:	0800380d 	.word	0x0800380d
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	0800380d 	.word	0x0800380d
 80037ac:	0800380d 	.word	0x0800380d
 80037b0:	08003815 	.word	0x08003815
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	0800380d 	.word	0x0800380d
 80037c0:	0800380d 	.word	0x0800380d
 80037c4:	0800380d 	.word	0x0800380d
 80037c8:	0800380d 	.word	0x0800380d
 80037cc:	0800380d 	.word	0x0800380d
 80037d0:	08003815 	.word	0x08003815
 80037d4:	58024400 	.word	0x58024400
 80037d8:	58024800 	.word	0x58024800
 80037dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e4:	3308      	adds	r3, #8
 80037e6:	2101      	movs	r1, #1
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 ffc5 	bl	8004778 <RCCEx_PLL2_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037f4:	e00f      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fa:	3328      	adds	r3, #40	; 0x28
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f86c 	bl	80048dc <RCCEx_PLL3_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800380a:	e004      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003812:	e000      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003816:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800381e:	4bc0      	ldr	r3, [pc, #768]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	4abc      	ldr	r2, [pc, #752]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003830:	430b      	orrs	r3, r1
 8003832:	6553      	str	r3, [r2, #84]	; 0x54
 8003834:	e003      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003836:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800383a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f002 0302 	and.w	r3, r2, #2
 800384a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003854:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003858:	460b      	mov	r3, r1
 800385a:	4313      	orrs	r3, r2
 800385c:	d043      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800385e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003866:	2b05      	cmp	r3, #5
 8003868:	d824      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	080038bd 	.word	0x080038bd
 8003874:	08003889 	.word	0x08003889
 8003878:	0800389f 	.word	0x0800389f
 800387c:	080038bd 	.word	0x080038bd
 8003880:	080038bd 	.word	0x080038bd
 8003884:	080038bd 	.word	0x080038bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	3308      	adds	r3, #8
 800388e:	2101      	movs	r1, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f000 ff71 	bl	8004778 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800389c:	e00f      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a2:	3328      	adds	r3, #40	; 0x28
 80038a4:	2101      	movs	r1, #1
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 f818 	bl	80048dc <RCCEx_PLL3_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80038bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038c6:	4b96      	ldr	r3, [pc, #600]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	f023 0107 	bic.w	r1, r3, #7
 80038ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d6:	4a92      	ldr	r2, [pc, #584]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6553      	str	r3, [r2, #84]	; 0x54
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f002 0304 	and.w	r3, r2, #4
 80038f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d043      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800390a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800390e:	2b05      	cmp	r3, #5
 8003910:	d824      	bhi.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003965 	.word	0x08003965
 800391c:	08003931 	.word	0x08003931
 8003920:	08003947 	.word	0x08003947
 8003924:	08003965 	.word	0x08003965
 8003928:	08003965 	.word	0x08003965
 800392c:	08003965 	.word	0x08003965
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	3308      	adds	r3, #8
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f000 ff1d 	bl	8004778 <RCCEx_PLL2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003944:	e00f      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394a:	3328      	adds	r3, #40	; 0x28
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f000 ffc4 	bl	80048dc <RCCEx_PLL3_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800395a:	e004      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003966:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800396e:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	f023 0107 	bic.w	r1, r3, #7
 8003976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800397e:	4a68      	ldr	r2, [pc, #416]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003980:	430b      	orrs	r3, r1
 8003982:	6593      	str	r3, [r2, #88]	; 0x58
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800398a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f002 0320 	and.w	r3, r2, #32
 800399a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d055      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ba:	d033      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c0:	d82c      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d02f      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d826      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d2:	d02b      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80039d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d8:	d820      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039de:	d012      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80039e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e4:	d81a      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d022      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80039ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ee:	d115      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f4:	3308      	adds	r3, #8
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 febd 	bl	8004778 <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a04:	e015      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0a:	3328      	adds	r3, #40	; 0x28
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 ff64 	bl	80048dc <RCCEx_PLL3_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a22:	e006      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a24:	bf00      	nop
 8003a26:	e004      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a28:	bf00      	nop
 8003a2a:	e002      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a2c:	bf00      	nop
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3a:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a4a:	4a35      	ldr	r2, [pc, #212]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6553      	str	r3, [r2, #84]	; 0x54
 8003a50:	e003      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d058      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a86:	d033      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a8c:	d82c      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	d02f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d826      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9e:	d02b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa4:	d820      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aaa:	d012      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab0:	d81a      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d022      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	d115      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fe57 	bl	8004778 <RCCEx_PLL2_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e015      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad6:	3328      	adds	r3, #40	; 0x28
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fefe 	bl	80048dc <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e00a      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003aee:	e006      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003af0:	bf00      	nop
 8003af2:	e004      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b16:	4a02      	ldr	r2, [pc, #8]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1c:	e006      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	d055      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b58:	d033      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003b5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b5e:	d82c      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b64:	d02f      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6a:	d826      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b70:	d02b      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003b72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b76:	d820      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b7c:	d012      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b82:	d81a      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8c:	d115      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b92:	3308      	adds	r3, #8
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fdee 	bl	8004778 <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ba2:	e015      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	3328      	adds	r3, #40	; 0x28
 8003baa:	2102      	movs	r1, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fe95 	bl	80048dc <RCCEx_PLL3_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bd8:	4ba1      	ldr	r3, [pc, #644]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003be8:	4a9d      	ldr	r2, [pc, #628]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
 8003bee:	e003      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bf4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f002 0308 	and.w	r3, r2, #8
 8003c04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	d01e      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2a:	3328      	adds	r3, #40	; 0x28
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fe54 	bl	80048dc <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c40:	4b87      	ldr	r3, [pc, #540]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c50:	4a83      	ldr	r2, [pc, #524]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f002 0310 	and.w	r3, r2, #16
 8003c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d01e      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c88:	3328      	adds	r3, #40	; 0x28
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fe25 	bl	80048dc <RCCEx_PLL3_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c9e:	4b70      	ldr	r3, [pc, #448]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cae:	4a6c      	ldr	r2, [pc, #432]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	d03e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce0:	d022      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce6:	d81b      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003cf2:	e015      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fd3b 	bl	8004778 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d08:	e00f      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0e:	3328      	adds	r3, #40	; 0x28
 8003d10:	2102      	movs	r1, #2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fde2 	bl	80048dc <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d1e:	e004      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d32:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d42:	4a47      	ldr	r2, [pc, #284]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6593      	str	r3, [r2, #88]	; 0x58
 8003d48:	e003      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003d5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d60:	2300      	movs	r3, #0
 8003d62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d7a:	d01f      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003d7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d80:	d818      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d86:	d003      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d8c:	d007      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003d8e:	e011      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00f      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da2:	3328      	adds	r3, #40	; 0x28
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fd98 	bl	80048dc <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6553      	str	r3, [r2, #84]	; 0x54
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003de2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003df2:	673b      	str	r3, [r7, #112]	; 0x70
 8003df4:	2300      	movs	r3, #0
 8003df6:	677b      	str	r3, [r7, #116]	; 0x74
 8003df8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	d034      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e10:	d007      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003e12:	e011      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e20:	e00e      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e26:	3308      	adds	r3, #8
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fca4 	bl	8004778 <RCCEx_PLL2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e36:	e003      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10d      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e56:	4a02      	ldr	r2, [pc, #8]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e5c:	e006      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003e78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d00c      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8c:	3328      	adds	r3, #40	; 0x28
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fd23 	bl	80048dc <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003eae:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d038      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eca:	d018      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed0:	d811      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed6:	d014      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003edc:	d80b      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d011      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee8:	4bc3      	ldr	r3, [pc, #780]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4ac2      	ldr	r2, [pc, #776]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ef4:	e008      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f10:	4bb9      	ldr	r3, [pc, #740]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	4ab5      	ldr	r2, [pc, #724]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f22:	430b      	orrs	r3, r1
 8003f24:	6553      	str	r3, [r2, #84]	; 0x54
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f3e:	2300      	movs	r3, #0
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f46:	460b      	mov	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	d009      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f4c:	4baa      	ldr	r3, [pc, #680]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5a:	4aa7      	ldr	r2, [pc, #668]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003f6c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f6e:	2300      	movs	r3, #0
 8003f70:	657b      	str	r3, [r7, #84]	; 0x54
 8003f72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f7c:	4b9e      	ldr	r3, [pc, #632]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f80:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a9b      	ldr	r2, [pc, #620]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003fac:	4b92      	ldr	r3, [pc, #584]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	4a8f      	ldr	r2, [pc, #572]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8003fce:	2300      	movs	r3, #0
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fdc:	4b86      	ldr	r3, [pc, #536]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	4a85      	ldr	r2, [pc, #532]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fe2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fe6:	6113      	str	r3, [r2, #16]
 8003fe8:	4b83      	ldr	r3, [pc, #524]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fea:	6919      	ldr	r1, [r3, #16]
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ff4:	4a80      	ldr	r2, [pc, #512]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004006:	63bb      	str	r3, [r7, #56]	; 0x38
 8004008:	2300      	movs	r3, #0
 800400a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800400c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004010:	460b      	mov	r3, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004016:	4b78      	ldr	r3, [pc, #480]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800401e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	4a74      	ldr	r2, [pc, #464]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004026:	430b      	orrs	r3, r1
 8004028:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
 8004038:	2300      	movs	r3, #0
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
 800403c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004046:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800404e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004056:	4a68      	ldr	r2, [pc, #416]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800405c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	2100      	movs	r1, #0
 8004066:	62b9      	str	r1, [r7, #40]	; 0x28
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800406e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d011      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407c:	3308      	adds	r3, #8
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fb79 	bl	8004778 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800408c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004098:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800409c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	2100      	movs	r1, #0
 80040a6:	6239      	str	r1, [r7, #32]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040b2:	460b      	mov	r3, r1
 80040b4:	4313      	orrs	r3, r2
 80040b6:	d011      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040bc:	3308      	adds	r3, #8
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fb59 	bl	8004778 <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80040cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	2100      	movs	r1, #0
 80040e6:	61b9      	str	r1, [r7, #24]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d011      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fc:	3308      	adds	r3, #8
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fb39 	bl	8004778 <RCCEx_PLL2_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800410c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004118:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800411c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	2100      	movs	r1, #0
 8004126:	6139      	str	r1, [r7, #16]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004132:	460b      	mov	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	d011      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413c:	3328      	adds	r3, #40	; 0x28
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fbcb 	bl	80048dc <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800414c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004158:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	2100      	movs	r1, #0
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d011      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417c:	3328      	adds	r3, #40	; 0x28
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fbab 	bl	80048dc <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800418c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004198:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800419c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	2100      	movs	r1, #0
 80041a6:	6039      	str	r1, [r7, #0]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d011      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041bc:	3328      	adds	r3, #40	; 0x28
 80041be:	2102      	movs	r1, #2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fb8b 	bl	80048dc <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80041cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80041dc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400

080041fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004200:	f7fe fde2 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4904      	ldr	r1, [pc, #16]	; (8004224 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	58024400 	.word	0x58024400
 8004224:	08007fb4 	.word	0x08007fb4

08004228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004230:	4ba1      	ldr	r3, [pc, #644]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800423a:	4b9f      	ldr	r3, [pc, #636]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	0b1b      	lsrs	r3, r3, #12
 8004240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004244:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004246:	4b9c      	ldr	r3, [pc, #624]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004252:	4b99      	ldr	r3, [pc, #612]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8111 	beq.w	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b02      	cmp	r3, #2
 800427a:	f000 8083 	beq.w	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f200 80a1 	bhi.w	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d056      	beq.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004292:	e099      	b.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004294:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02d      	beq.n	80042fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a84      	ldr	r2, [pc, #528]	; (80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	ee07 3a90 	vmov	s15, r3
 80042b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a03 	vldr	s12, [r7, #12]
 80042de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042fa:	e087      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800433e:	e065      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004382:	e043      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b48      	ldr	r3, [pc, #288]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	e021      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	0a5b      	lsrs	r3, r3, #9
 8004412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004426:	edd7 6a07 	vldr	s13, [r7, #28]
 800442a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004432:	ee17 2a90 	vmov	r2, s15
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800443a:	4b1f      	ldr	r3, [pc, #124]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004444:	ee07 3a90 	vmov	s15, r3
 8004448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004454:	edd7 6a07 	vldr	s13, [r7, #28]
 8004458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004460:	ee17 2a90 	vmov	r2, s15
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800447e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004482:	edd7 6a07 	vldr	s13, [r7, #28]
 8004486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800448a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448e:	ee17 2a90 	vmov	r2, s15
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004496:	e008      	b.n	80044aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
}
 80044aa:	bf00      	nop
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	58024400 	.word	0x58024400
 80044bc:	03d09000 	.word	0x03d09000
 80044c0:	46000000 	.word	0x46000000
 80044c4:	4c742400 	.word	0x4c742400
 80044c8:	4a742400 	.word	0x4a742400
 80044cc:	4af42400 	.word	0x4af42400

080044d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d8:	4ba1      	ldr	r3, [pc, #644]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80044e2:	4b9f      	ldr	r3, [pc, #636]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	0d1b      	lsrs	r3, r3, #20
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044ee:	4b9c      	ldr	r3, [pc, #624]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80044fa:	4b99      	ldr	r3, [pc, #612]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8111 	beq.w	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b02      	cmp	r3, #2
 8004522:	f000 8083 	beq.w	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f200 80a1 	bhi.w	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d056      	beq.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800453a:	e099      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800453c:	4b88      	ldr	r3, [pc, #544]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02d      	beq.n	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004548:	4b85      	ldr	r3, [pc, #532]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	4a84      	ldr	r2, [pc, #528]	; (8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b7b      	ldr	r3, [pc, #492]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a03 	vldr	s12, [r7, #12]
 8004586:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045a2:	e087      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800476c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e6:	e065      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b59      	ldr	r3, [pc, #356]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462a:	e043      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b48      	ldr	r3, [pc, #288]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800466e:	e021      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046b4:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	0a5b      	lsrs	r3, r3, #9
 80046ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046da:	ee17 2a90 	vmov	r2, s15
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004708:	ee17 2a90 	vmov	r2, s15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800472a:	edd7 6a07 	vldr	s13, [r7, #28]
 800472e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004736:	ee17 2a90 	vmov	r2, s15
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800473e:	e008      	b.n	8004752 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	bf00      	nop
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	46000000 	.word	0x46000000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4a742400 	.word	0x4a742400
 8004774:	4af42400 	.word	0x4af42400

08004778 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004786:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d101      	bne.n	8004796 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e099      	b.n	80048ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004796:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a4e      	ldr	r2, [pc, #312]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800479c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a2:	f7fd f817 	bl	80017d4 <HAL_GetTick>
 80047a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047a8:	e008      	b.n	80047bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047aa:	f7fd f813 	bl	80017d4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e086      	b.n	80048ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047bc:	4b45      	ldr	r3, [pc, #276]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	493f      	ldr	r1, [pc, #252]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	628b      	str	r3, [r1, #40]	; 0x28
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	025b      	lsls	r3, r3, #9
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	3b01      	subs	r3, #1
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800480c:	4931      	ldr	r1, [pc, #196]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004812:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	492d      	ldr	r1, [pc, #180]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	f023 0220 	bic.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	4928      	ldr	r1, [pc, #160]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004836:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800483c:	f023 0310 	bic.w	r3, r3, #16
 8004840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <RCCEx_PLL2_Config+0x160>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	69d2      	ldr	r2, [r2, #28]
 800484e:	00d2      	lsls	r2, r2, #3
 8004850:	4920      	ldr	r1, [pc, #128]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004856:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800485c:	f043 0310 	orr.w	r3, r3, #16
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800486e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004874:	e00f      	b.n	8004896 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004888:	e005      	b.n	8004896 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800489c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fc ff97 	bl	80017d4 <HAL_GetTick>
 80048a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048a8:	e008      	b.n	80048bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048aa:	f7fc ff93 	bl	80017d4 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	ffff0007 	.word	0xffff0007

080048dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048ea:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d101      	bne.n	80048fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e099      	b.n	8004a2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048fa:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4e      	ldr	r2, [pc, #312]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004906:	f7fc ff65 	bl	80017d4 <HAL_GetTick>
 800490a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800490c:	e008      	b.n	8004920 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800490e:	f7fc ff61 	bl	80017d4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e086      	b.n	8004a2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004920:	4b45      	ldr	r3, [pc, #276]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800492c:	4b42      	ldr	r3, [pc, #264]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	493f      	ldr	r1, [pc, #252]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	628b      	str	r3, [r1, #40]	; 0x28
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	3b01      	subs	r3, #1
 8004946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	3b01      	subs	r3, #1
 8004950:	025b      	lsls	r3, r3, #9
 8004952:	b29b      	uxth	r3, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	3b01      	subs	r3, #1
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004970:	4931      	ldr	r1, [pc, #196]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	492d      	ldr	r1, [pc, #180]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004988:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	4928      	ldr	r1, [pc, #160]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800499a:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049aa:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <RCCEx_PLL3_Config+0x160>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	69d2      	ldr	r2, [r2, #28]
 80049b2:	00d2      	lsls	r2, r2, #3
 80049b4:	4920      	ldr	r1, [pc, #128]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049d8:	e00f      	b.n	80049fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a14      	ldr	r2, [pc, #80]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049ec:	e005      	b.n	80049fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a06:	f7fc fee5 	bl	80017d4 <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a0c:	e008      	b.n	8004a20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a0e:	f7fc fee1 	bl	80017d4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	ffff0007 	.word	0xffff0007

08004a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e049      	b.n	8004ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fc fb74 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 fda6 	bl	80055d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d001      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e054      	b.n	8004bb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a26      	ldr	r2, [pc, #152]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d022      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x80>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b32:	d01d      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x80>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d018      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x80>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d013      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x80>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00e      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x80>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x80>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d115      	bne.n	8004b9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <HAL_TIM_Base_Start_IT+0xec>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d015      	beq.n	8004bae <HAL_TIM_Base_Start_IT+0xbe>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d011      	beq.n	8004bae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	e008      	b.n	8004bae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e000      	b.n	8004bb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40010400 	.word	0x40010400
 8004bd4:	40001800 	.word	0x40001800
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	00010007 	.word	0x00010007

08004be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e049      	b.n	8004c86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f841 	bl	8004c8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fcd6 	bl	80055d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIM_PWM_Start_IT+0x28>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e03c      	b.n	8004d46 <HAL_TIM_PWM_Start_IT+0xa2>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d109      	bne.n	8004ce6 <HAL_TIM_PWM_Start_IT+0x42>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	e02f      	b.n	8004d46 <HAL_TIM_PWM_Start_IT+0xa2>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d109      	bne.n	8004d00 <HAL_TIM_PWM_Start_IT+0x5c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e022      	b.n	8004d46 <HAL_TIM_PWM_Start_IT+0xa2>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d109      	bne.n	8004d1a <HAL_TIM_PWM_Start_IT+0x76>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	bf14      	ite	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	2300      	moveq	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	e015      	b.n	8004d46 <HAL_TIM_PWM_Start_IT+0xa2>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d109      	bne.n	8004d34 <HAL_TIM_PWM_Start_IT+0x90>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e008      	b.n	8004d46 <HAL_TIM_PWM_Start_IT+0xa2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0ec      	b.n	8004f28 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start_IT+0xba>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d5c:	e023      	b.n	8004da6 <HAL_TIM_PWM_Start_IT+0x102>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start_IT+0xca>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6c:	e01b      	b.n	8004da6 <HAL_TIM_PWM_Start_IT+0x102>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_PWM_Start_IT+0xda>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7c:	e013      	b.n	8004da6 <HAL_TIM_PWM_Start_IT+0x102>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_PWM_Start_IT+0xea>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d8c:	e00b      	b.n	8004da6 <HAL_TIM_PWM_Start_IT+0x102>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d104      	bne.n	8004d9e <HAL_TIM_PWM_Start_IT+0xfa>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d9c:	e003      	b.n	8004da6 <HAL_TIM_PWM_Start_IT+0x102>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d841      	bhi.n	8004e30 <HAL_TIM_PWM_Start_IT+0x18c>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <HAL_TIM_PWM_Start_IT+0x110>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e31 	.word	0x08004e31
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004dfb 	.word	0x08004dfb
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e0d 	.word	0x08004e0d
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e1f 	.word	0x08004e1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0202 	orr.w	r2, r2, #2
 8004df6:	60da      	str	r2, [r3, #12]
      break;
 8004df8:	e01d      	b.n	8004e36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0204 	orr.w	r2, r2, #4
 8004e08:	60da      	str	r2, [r3, #12]
      break;
 8004e0a:	e014      	b.n	8004e36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0208 	orr.w	r2, r2, #8
 8004e1a:	60da      	str	r2, [r3, #12]
      break;
 8004e1c:	e00b      	b.n	8004e36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0210 	orr.w	r2, r2, #16
 8004e2c:	60da      	str	r2, [r3, #12]
      break;
 8004e2e:	e002      	b.n	8004e36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      break;
 8004e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d174      	bne.n	8004f26 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 ffdd 	bl	8005e04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a38      	ldr	r2, [pc, #224]	; (8004f30 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a36      	ldr	r2, [pc, #216]	; (8004f34 <HAL_TIM_PWM_Start_IT+0x290>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a35      	ldr	r2, [pc, #212]	; (8004f38 <HAL_TIM_PWM_Start_IT+0x294>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a33      	ldr	r2, [pc, #204]	; (8004f3c <HAL_TIM_PWM_Start_IT+0x298>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_PWM_Start_IT+0x1d8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a32      	ldr	r2, [pc, #200]	; (8004f40 <HAL_TIM_PWM_Start_IT+0x29c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIM_PWM_Start_IT+0x1dc>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_TIM_PWM_Start_IT+0x1de>
 8004e80:	2300      	movs	r3, #0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d022      	beq.n	8004ee6 <HAL_TIM_PWM_Start_IT+0x242>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_TIM_PWM_Start_IT+0x242>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d018      	beq.n	8004ee6 <HAL_TIM_PWM_Start_IT+0x242>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_TIM_PWM_Start_IT+0x242>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <HAL_TIM_PWM_Start_IT+0x2a8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_TIM_PWM_Start_IT+0x242>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_TIM_PWM_Start_IT+0x290>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_TIM_PWM_Start_IT+0x242>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_TIM_PWM_Start_IT+0x242>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_TIM_PWM_Start_IT+0x294>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d115      	bne.n	8004f12 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b06      	cmp	r3, #6
 8004ef6:	d015      	beq.n	8004f24 <HAL_TIM_PWM_Start_IT+0x280>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efe:	d011      	beq.n	8004f24 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	e008      	b.n	8004f24 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e000      	b.n	8004f26 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40010400 	.word	0x40010400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	40014400 	.word	0x40014400
 8004f40:	40014800 	.word	0x40014800
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40001800 	.word	0x40001800
 8004f54:	00010007 	.word	0x00010007

08004f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0202 	mvn.w	r2, #2
 8004f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 faf6 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fae8 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 faf9 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d020      	beq.n	8005008 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0204 	mvn.w	r2, #4
 8004fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fad0 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fac2 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fad3 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d020      	beq.n	8005054 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01b      	beq.n	8005054 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0208 	mvn.w	r2, #8
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 faaa 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa9c 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 faad 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	d020      	beq.n	80050a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01b      	beq.n	80050a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0210 	mvn.w	r2, #16
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2208      	movs	r2, #8
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa84 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa76 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa87 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0201 	mvn.w	r2, #1
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fb fdd6 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 ff47 	bl	8005f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00c      	beq.n	8005116 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800510e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 ff3f 	bl	8005f94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00c      	beq.n	800513a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa41 	bl	80055bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00c      	beq.n	800515e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f06f 0220 	mvn.w	r2, #32
 8005156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 ff07 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e0ff      	b.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b14      	cmp	r3, #20
 8005192:	f200 80f0 	bhi.w	8005376 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	08005377 	.word	0x08005377
 80051a4:	08005377 	.word	0x08005377
 80051a8:	08005377 	.word	0x08005377
 80051ac:	08005231 	.word	0x08005231
 80051b0:	08005377 	.word	0x08005377
 80051b4:	08005377 	.word	0x08005377
 80051b8:	08005377 	.word	0x08005377
 80051bc:	08005273 	.word	0x08005273
 80051c0:	08005377 	.word	0x08005377
 80051c4:	08005377 	.word	0x08005377
 80051c8:	08005377 	.word	0x08005377
 80051cc:	080052b3 	.word	0x080052b3
 80051d0:	08005377 	.word	0x08005377
 80051d4:	08005377 	.word	0x08005377
 80051d8:	08005377 	.word	0x08005377
 80051dc:	080052f5 	.word	0x080052f5
 80051e0:	08005377 	.word	0x08005377
 80051e4:	08005377 	.word	0x08005377
 80051e8:	08005377 	.word	0x08005377
 80051ec:	08005335 	.word	0x08005335
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fa90 	bl	800571c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
      break;
 800522e:	e0a5      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fb00 	bl	800583c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
      break;
 8005270:	e084      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fb69 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0208 	orr.w	r2, r2, #8
 800528c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0204 	bic.w	r2, r2, #4
 800529c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69d9      	ldr	r1, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	61da      	str	r2, [r3, #28]
      break;
 80052b0:	e064      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fbd1 	bl	8005a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69d9      	ldr	r1, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	021a      	lsls	r2, r3, #8
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	61da      	str	r2, [r3, #28]
      break;
 80052f2:	e043      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fc1a 	bl	8005b34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0204 	bic.w	r2, r2, #4
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005332:	e023      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fc5e 	bl	8005bfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800534e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005374:	e002      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]
      break;
 800537a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005384:	7dfb      	ldrb	r3, [r7, #23]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop

08005390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_ConfigClockSource+0x1c>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0dc      	b.n	8005566 <HAL_TIM_ConfigClockSource+0x1d6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4b6a      	ldr	r3, [pc, #424]	; (8005570 <HAL_TIM_ConfigClockSource+0x1e0>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a64      	ldr	r2, [pc, #400]	; (8005574 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	f000 80a9 	beq.w	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 80053e8:	4a62      	ldr	r2, [pc, #392]	; (8005574 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	f200 80ae 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 80053f0:	4a61      	ldr	r2, [pc, #388]	; (8005578 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	f000 80a1 	beq.w	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 80053f8:	4a5f      	ldr	r2, [pc, #380]	; (8005578 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f200 80a6 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 8005400:	4a5e      	ldr	r2, [pc, #376]	; (800557c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f000 8099 	beq.w	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 8005408:	4a5c      	ldr	r2, [pc, #368]	; (800557c <HAL_TIM_ConfigClockSource+0x1ec>)
 800540a:	4293      	cmp	r3, r2
 800540c:	f200 809e 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 8005410:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005414:	f000 8091 	beq.w	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 8005418:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800541c:	f200 8096 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 8005420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005424:	f000 8089 	beq.w	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 8005428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542c:	f200 808e 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005434:	d03e      	beq.n	80054b4 <HAL_TIM_ConfigClockSource+0x124>
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543a:	f200 8087 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	f000 8086 	beq.w	8005552 <HAL_TIM_ConfigClockSource+0x1c2>
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d87f      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 800544c:	2b70      	cmp	r3, #112	; 0x70
 800544e:	d01a      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0xf6>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d87b      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 8005454:	2b60      	cmp	r3, #96	; 0x60
 8005456:	d050      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x16a>
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d877      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 800545c:	2b50      	cmp	r3, #80	; 0x50
 800545e:	d03c      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x14a>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d873      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d058      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x18a>
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d86f      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 800546c:	2b30      	cmp	r3, #48	; 0x30
 800546e:	d064      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d86b      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 8005474:	2b20      	cmp	r3, #32
 8005476:	d060      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d867      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d05c      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 8005480:	2b10      	cmp	r3, #16
 8005482:	d05a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x1aa>
 8005484:	e062      	b.n	800554c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6899      	ldr	r1, [r3, #8]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f000 fc95 	bl	8005dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	609a      	str	r2, [r3, #8]
      break;
 80054b2:	e04f      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6899      	ldr	r1, [r3, #8]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f000 fc7e 	bl	8005dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d6:	609a      	str	r2, [r3, #8]
      break;
 80054d8:	e03c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 fbee 	bl	8005cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2150      	movs	r1, #80	; 0x50
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fc48 	bl	8005d88 <TIM_ITRx_SetConfig>
      break;
 80054f8:	e02c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	461a      	mov	r2, r3
 8005508:	f000 fc0d 	bl	8005d26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2160      	movs	r1, #96	; 0x60
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fc38 	bl	8005d88 <TIM_ITRx_SetConfig>
      break;
 8005518:	e01c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6859      	ldr	r1, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	461a      	mov	r2, r3
 8005528:	f000 fbce 	bl	8005cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fc28 	bl	8005d88 <TIM_ITRx_SetConfig>
      break;
 8005538:	e00c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 fc1f 	bl	8005d88 <TIM_ITRx_SetConfig>
      break;
 800554a:	e003      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      break;
 8005550:	e000      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	ffceff88 	.word	0xffceff88
 8005574:	00100040 	.word	0x00100040
 8005578:	00100030 	.word	0x00100030
 800557c:	00100020 	.word	0x00100020

08005580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a46      	ldr	r2, [pc, #280]	; (80056fc <TIM_Base_SetConfig+0x12c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d00f      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a43      	ldr	r2, [pc, #268]	; (8005700 <TIM_Base_SetConfig+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a42      	ldr	r2, [pc, #264]	; (8005704 <TIM_Base_SetConfig+0x134>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a41      	ldr	r2, [pc, #260]	; (8005708 <TIM_Base_SetConfig+0x138>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a40      	ldr	r2, [pc, #256]	; (800570c <TIM_Base_SetConfig+0x13c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d108      	bne.n	8005622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a35      	ldr	r2, [pc, #212]	; (80056fc <TIM_Base_SetConfig+0x12c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d01b      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a32      	ldr	r2, [pc, #200]	; (8005700 <TIM_Base_SetConfig+0x130>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d017      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a31      	ldr	r2, [pc, #196]	; (8005704 <TIM_Base_SetConfig+0x134>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a30      	ldr	r2, [pc, #192]	; (8005708 <TIM_Base_SetConfig+0x138>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2f      	ldr	r2, [pc, #188]	; (800570c <TIM_Base_SetConfig+0x13c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2e      	ldr	r2, [pc, #184]	; (8005710 <TIM_Base_SetConfig+0x140>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2d      	ldr	r2, [pc, #180]	; (8005714 <TIM_Base_SetConfig+0x144>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0x9a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2c      	ldr	r2, [pc, #176]	; (8005718 <TIM_Base_SetConfig+0x148>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <TIM_Base_SetConfig+0x12c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0xf8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a18      	ldr	r2, [pc, #96]	; (800570c <TIM_Base_SetConfig+0x13c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0xf8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a17      	ldr	r2, [pc, #92]	; (8005710 <TIM_Base_SetConfig+0x140>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0xf8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a16      	ldr	r2, [pc, #88]	; (8005714 <TIM_Base_SetConfig+0x144>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0xf8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a15      	ldr	r2, [pc, #84]	; (8005718 <TIM_Base_SetConfig+0x148>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d103      	bne.n	80056d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	611a      	str	r2, [r3, #16]
  }
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800

0800571c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f023 0201 	bic.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4b37      	ldr	r3, [pc, #220]	; (8005824 <TIM_OC1_SetConfig+0x108>)
 8005748:	4013      	ands	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 0302 	bic.w	r3, r3, #2
 8005764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a2d      	ldr	r2, [pc, #180]	; (8005828 <TIM_OC1_SetConfig+0x10c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00f      	beq.n	8005798 <TIM_OC1_SetConfig+0x7c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a2c      	ldr	r2, [pc, #176]	; (800582c <TIM_OC1_SetConfig+0x110>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_OC1_SetConfig+0x7c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <TIM_OC1_SetConfig+0x114>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_OC1_SetConfig+0x7c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <TIM_OC1_SetConfig+0x118>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC1_SetConfig+0x7c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a29      	ldr	r2, [pc, #164]	; (8005838 <TIM_OC1_SetConfig+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d10c      	bne.n	80057b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0308 	bic.w	r3, r3, #8
 800579e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <TIM_OC1_SetConfig+0x10c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00f      	beq.n	80057da <TIM_OC1_SetConfig+0xbe>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <TIM_OC1_SetConfig+0x110>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00b      	beq.n	80057da <TIM_OC1_SetConfig+0xbe>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <TIM_OC1_SetConfig+0x114>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <TIM_OC1_SetConfig+0xbe>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <TIM_OC1_SetConfig+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d003      	beq.n	80057da <TIM_OC1_SetConfig+0xbe>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <TIM_OC1_SetConfig+0x11c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d111      	bne.n	80057fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	621a      	str	r2, [r3, #32]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	fffeff8f 	.word	0xfffeff8f
 8005828:	40010000 	.word	0x40010000
 800582c:	40010400 	.word	0x40010400
 8005830:	40014000 	.word	0x40014000
 8005834:	40014400 	.word	0x40014400
 8005838:	40014800 	.word	0x40014800

0800583c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f023 0210 	bic.w	r2, r3, #16
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4b34      	ldr	r3, [pc, #208]	; (8005938 <TIM_OC2_SetConfig+0xfc>)
 8005868:	4013      	ands	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0320 	bic.w	r3, r3, #32
 8005886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a29      	ldr	r2, [pc, #164]	; (800593c <TIM_OC2_SetConfig+0x100>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_OC2_SetConfig+0x68>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a28      	ldr	r2, [pc, #160]	; (8005940 <TIM_OC2_SetConfig+0x104>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d10d      	bne.n	80058c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1e      	ldr	r2, [pc, #120]	; (800593c <TIM_OC2_SetConfig+0x100>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_OC2_SetConfig+0xac>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <TIM_OC2_SetConfig+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_OC2_SetConfig+0xac>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <TIM_OC2_SetConfig+0x108>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC2_SetConfig+0xac>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <TIM_OC2_SetConfig+0x10c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0xac>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a1a      	ldr	r2, [pc, #104]	; (800594c <TIM_OC2_SetConfig+0x110>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d113      	bne.n	8005910 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	feff8fff 	.word	0xfeff8fff
 800593c:	40010000 	.word	0x40010000
 8005940:	40010400 	.word	0x40010400
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4b33      	ldr	r3, [pc, #204]	; (8005a48 <TIM_OC3_SetConfig+0xf8>)
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <TIM_OC3_SetConfig+0xfc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC3_SetConfig+0x66>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <TIM_OC3_SetConfig+0x100>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <TIM_OC3_SetConfig+0xfc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00f      	beq.n	80059fa <TIM_OC3_SetConfig+0xaa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1c      	ldr	r2, [pc, #112]	; (8005a50 <TIM_OC3_SetConfig+0x100>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00b      	beq.n	80059fa <TIM_OC3_SetConfig+0xaa>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <TIM_OC3_SetConfig+0x104>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <TIM_OC3_SetConfig+0xaa>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <TIM_OC3_SetConfig+0x108>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC3_SetConfig+0xaa>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <TIM_OC3_SetConfig+0x10c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d113      	bne.n	8005a22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	621a      	str	r2, [r3, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	fffeff8f 	.word	0xfffeff8f
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <TIM_OC4_SetConfig+0xbc>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	031b      	lsls	r3, r3, #12
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <TIM_OC4_SetConfig+0xc0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00f      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <TIM_OC4_SetConfig+0xc4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x80>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <TIM_OC4_SetConfig+0xc8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x80>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a16      	ldr	r2, [pc, #88]	; (8005b2c <TIM_OC4_SetConfig+0xcc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x80>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <TIM_OC4_SetConfig+0xd0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	feff8fff 	.word	0xfeff8fff
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800

08005b34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4b21      	ldr	r3, [pc, #132]	; (8005be4 <TIM_OC5_SetConfig+0xb0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <TIM_OC5_SetConfig+0xb4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00f      	beq.n	8005baa <TIM_OC5_SetConfig+0x76>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a17      	ldr	r2, [pc, #92]	; (8005bec <TIM_OC5_SetConfig+0xb8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00b      	beq.n	8005baa <TIM_OC5_SetConfig+0x76>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <TIM_OC5_SetConfig+0xbc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <TIM_OC5_SetConfig+0x76>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <TIM_OC5_SetConfig+0xc0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_OC5_SetConfig+0x76>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <TIM_OC5_SetConfig+0xc4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d109      	bne.n	8005bbe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	fffeff8f 	.word	0xfffeff8f
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800

08005bfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4b22      	ldr	r3, [pc, #136]	; (8005cb0 <TIM_OC6_SetConfig+0xb4>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	051b      	lsls	r3, r3, #20
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a19      	ldr	r2, [pc, #100]	; (8005cb4 <TIM_OC6_SetConfig+0xb8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00f      	beq.n	8005c74 <TIM_OC6_SetConfig+0x78>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <TIM_OC6_SetConfig+0xbc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <TIM_OC6_SetConfig+0x78>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <TIM_OC6_SetConfig+0xc0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_OC6_SetConfig+0x78>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a16      	ldr	r2, [pc, #88]	; (8005cc0 <TIM_OC6_SetConfig+0xc4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC6_SetConfig+0x78>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <TIM_OC6_SetConfig+0xc8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d109      	bne.n	8005c88 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	feff8fff 	.word	0xfeff8fff
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800

08005cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 030a 	bic.w	r3, r3, #10
 8005d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b087      	sub	sp, #28
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f023 0210 	bic.w	r2, r3, #16
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	031b      	lsls	r3, r3, #12
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <TIM_ITRx_SetConfig+0x38>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f043 0307 	orr.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	609a      	str	r2, [r3, #8]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	ffcfff8f 	.word	0xffcfff8f

08005dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2201      	movs	r2, #1
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	43db      	mvns	r3, r3
 8005e26:	401a      	ands	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e06d      	b.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a30      	ldr	r2, [pc, #192]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2f      	ldr	r2, [pc, #188]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ea2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a20      	ldr	r2, [pc, #128]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d01d      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1d      	ldr	r2, [pc, #116]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1a      	ldr	r2, [pc, #104]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d10c      	bne.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40010400 	.word	0x40010400
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40001800 	.word	0x40001800
 8005f68:	40014000 	.word	0x40014000

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e042      	b.n	8006040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fb f9d5 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2224      	movs	r2, #36	; 0x24
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 ff22 	bl	8006e3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f8b3 	bl	8006164 <UART_SetConfig>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e01b      	b.n	8006040 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 ffa1 	bl	8006f80 <UART_CheckIdleState>
 800603e:	4603      	mov	r3, r0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	2b20      	cmp	r3, #32
 8006060:	d17b      	bne.n	800615a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_Transmit+0x26>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e074      	b.n	800615c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2221      	movs	r2, #33	; 0x21
 800607e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006082:	f7fb fba7 	bl	80017d4 <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	d108      	bne.n	80060b4 <HAL_UART_Transmit+0x6c>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	e003      	b.n	80060bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060bc:	e030      	b.n	8006120 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 f803 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e03d      	b.n	800615c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	3302      	adds	r3, #2
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e007      	b.n	800610e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	781a      	ldrb	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	3301      	adds	r3, #1
 800610c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1c8      	bne.n	80060be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2200      	movs	r2, #0
 8006134:	2140      	movs	r1, #64	; 0x40
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 ffcc 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e006      	b.n	800615c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006168:	b092      	sub	sp, #72	; 0x48
 800616a:	af00      	add	r7, sp, #0
 800616c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	431a      	orrs	r2, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	431a      	orrs	r2, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4bbe      	ldr	r3, [pc, #760]	; (800648c <UART_SetConfig+0x328>)
 8006194:	4013      	ands	r3, r2
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800619c:	430b      	orrs	r3, r1
 800619e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4ab3      	ldr	r2, [pc, #716]	; (8006490 <UART_SetConfig+0x32c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061cc:	4313      	orrs	r3, r2
 80061ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	4baf      	ldr	r3, [pc, #700]	; (8006494 <UART_SetConfig+0x330>)
 80061d8:	4013      	ands	r3, r2
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f023 010f 	bic.w	r1, r3, #15
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4aa6      	ldr	r2, [pc, #664]	; (8006498 <UART_SetConfig+0x334>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d177      	bne.n	80062f4 <UART_SetConfig+0x190>
 8006204:	4ba5      	ldr	r3, [pc, #660]	; (800649c <UART_SetConfig+0x338>)
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800620c:	2b28      	cmp	r3, #40	; 0x28
 800620e:	d86d      	bhi.n	80062ec <UART_SetConfig+0x188>
 8006210:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0xb4>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	080062bd 	.word	0x080062bd
 800621c:	080062ed 	.word	0x080062ed
 8006220:	080062ed 	.word	0x080062ed
 8006224:	080062ed 	.word	0x080062ed
 8006228:	080062ed 	.word	0x080062ed
 800622c:	080062ed 	.word	0x080062ed
 8006230:	080062ed 	.word	0x080062ed
 8006234:	080062ed 	.word	0x080062ed
 8006238:	080062c5 	.word	0x080062c5
 800623c:	080062ed 	.word	0x080062ed
 8006240:	080062ed 	.word	0x080062ed
 8006244:	080062ed 	.word	0x080062ed
 8006248:	080062ed 	.word	0x080062ed
 800624c:	080062ed 	.word	0x080062ed
 8006250:	080062ed 	.word	0x080062ed
 8006254:	080062ed 	.word	0x080062ed
 8006258:	080062cd 	.word	0x080062cd
 800625c:	080062ed 	.word	0x080062ed
 8006260:	080062ed 	.word	0x080062ed
 8006264:	080062ed 	.word	0x080062ed
 8006268:	080062ed 	.word	0x080062ed
 800626c:	080062ed 	.word	0x080062ed
 8006270:	080062ed 	.word	0x080062ed
 8006274:	080062ed 	.word	0x080062ed
 8006278:	080062d5 	.word	0x080062d5
 800627c:	080062ed 	.word	0x080062ed
 8006280:	080062ed 	.word	0x080062ed
 8006284:	080062ed 	.word	0x080062ed
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080062ed 	.word	0x080062ed
 8006290:	080062ed 	.word	0x080062ed
 8006294:	080062ed 	.word	0x080062ed
 8006298:	080062dd 	.word	0x080062dd
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	080062ed 	.word	0x080062ed
 80062a4:	080062ed 	.word	0x080062ed
 80062a8:	080062ed 	.word	0x080062ed
 80062ac:	080062ed 	.word	0x080062ed
 80062b0:	080062ed 	.word	0x080062ed
 80062b4:	080062ed 	.word	0x080062ed
 80062b8:	080062e5 	.word	0x080062e5
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c2:	e326      	b.n	8006912 <UART_SetConfig+0x7ae>
 80062c4:	2304      	movs	r3, #4
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e322      	b.n	8006912 <UART_SetConfig+0x7ae>
 80062cc:	2308      	movs	r3, #8
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e31e      	b.n	8006912 <UART_SetConfig+0x7ae>
 80062d4:	2310      	movs	r3, #16
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e31a      	b.n	8006912 <UART_SetConfig+0x7ae>
 80062dc:	2320      	movs	r3, #32
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e316      	b.n	8006912 <UART_SetConfig+0x7ae>
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e312      	b.n	8006912 <UART_SetConfig+0x7ae>
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e30e      	b.n	8006912 <UART_SetConfig+0x7ae>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a69      	ldr	r2, [pc, #420]	; (80064a0 <UART_SetConfig+0x33c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d130      	bne.n	8006360 <UART_SetConfig+0x1fc>
 80062fe:	4b67      	ldr	r3, [pc, #412]	; (800649c <UART_SetConfig+0x338>)
 8006300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	2b05      	cmp	r3, #5
 8006308:	d826      	bhi.n	8006358 <UART_SetConfig+0x1f4>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x1ac>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006329 	.word	0x08006329
 8006314:	08006331 	.word	0x08006331
 8006318:	08006339 	.word	0x08006339
 800631c:	08006341 	.word	0x08006341
 8006320:	08006349 	.word	0x08006349
 8006324:	08006351 	.word	0x08006351
 8006328:	2300      	movs	r3, #0
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632e:	e2f0      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006330:	2304      	movs	r3, #4
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006336:	e2ec      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006338:	2308      	movs	r3, #8
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e2e8      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006340:	2310      	movs	r3, #16
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e2e4      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006348:	2320      	movs	r3, #32
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e2e0      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e2dc      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e2d8      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a4f      	ldr	r2, [pc, #316]	; (80064a4 <UART_SetConfig+0x340>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d130      	bne.n	80063cc <UART_SetConfig+0x268>
 800636a:	4b4c      	ldr	r3, [pc, #304]	; (800649c <UART_SetConfig+0x338>)
 800636c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	2b05      	cmp	r3, #5
 8006374:	d826      	bhi.n	80063c4 <UART_SetConfig+0x260>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0x218>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	08006395 	.word	0x08006395
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063a5 	.word	0x080063a5
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063bd 	.word	0x080063bd
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e2ba      	b.n	8006912 <UART_SetConfig+0x7ae>
 800639c:	2304      	movs	r3, #4
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e2b6      	b.n	8006912 <UART_SetConfig+0x7ae>
 80063a4:	2308      	movs	r3, #8
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063aa:	e2b2      	b.n	8006912 <UART_SetConfig+0x7ae>
 80063ac:	2310      	movs	r3, #16
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b2:	e2ae      	b.n	8006912 <UART_SetConfig+0x7ae>
 80063b4:	2320      	movs	r3, #32
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ba:	e2aa      	b.n	8006912 <UART_SetConfig+0x7ae>
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c2:	e2a6      	b.n	8006912 <UART_SetConfig+0x7ae>
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ca:	e2a2      	b.n	8006912 <UART_SetConfig+0x7ae>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a35      	ldr	r2, [pc, #212]	; (80064a8 <UART_SetConfig+0x344>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d130      	bne.n	8006438 <UART_SetConfig+0x2d4>
 80063d6:	4b31      	ldr	r3, [pc, #196]	; (800649c <UART_SetConfig+0x338>)
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d826      	bhi.n	8006430 <UART_SetConfig+0x2cc>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <UART_SetConfig+0x284>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	08006401 	.word	0x08006401
 80063ec:	08006409 	.word	0x08006409
 80063f0:	08006411 	.word	0x08006411
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006429 	.word	0x08006429
 8006400:	2300      	movs	r3, #0
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e284      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006408:	2304      	movs	r3, #4
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e280      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006410:	2308      	movs	r3, #8
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e27c      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006418:	2310      	movs	r3, #16
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641e:	e278      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006420:	2320      	movs	r3, #32
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006426:	e274      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642e:	e270      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006430:	2380      	movs	r3, #128	; 0x80
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006436:	e26c      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1b      	ldr	r2, [pc, #108]	; (80064ac <UART_SetConfig+0x348>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d142      	bne.n	80064c8 <UART_SetConfig+0x364>
 8006442:	4b16      	ldr	r3, [pc, #88]	; (800649c <UART_SetConfig+0x338>)
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b05      	cmp	r3, #5
 800644c:	d838      	bhi.n	80064c0 <UART_SetConfig+0x35c>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0x2f0>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	0800646d 	.word	0x0800646d
 8006458:	08006475 	.word	0x08006475
 800645c:	0800647d 	.word	0x0800647d
 8006460:	08006485 	.word	0x08006485
 8006464:	080064b1 	.word	0x080064b1
 8006468:	080064b9 	.word	0x080064b9
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e24e      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006474:	2304      	movs	r3, #4
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e24a      	b.n	8006912 <UART_SetConfig+0x7ae>
 800647c:	2308      	movs	r3, #8
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006482:	e246      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006484:	2310      	movs	r3, #16
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648a:	e242      	b.n	8006912 <UART_SetConfig+0x7ae>
 800648c:	cfff69f3 	.word	0xcfff69f3
 8006490:	58000c00 	.word	0x58000c00
 8006494:	11fff4ff 	.word	0x11fff4ff
 8006498:	40011000 	.word	0x40011000
 800649c:	58024400 	.word	0x58024400
 80064a0:	40004400 	.word	0x40004400
 80064a4:	40004800 	.word	0x40004800
 80064a8:	40004c00 	.word	0x40004c00
 80064ac:	40005000 	.word	0x40005000
 80064b0:	2320      	movs	r3, #32
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e22c      	b.n	8006912 <UART_SetConfig+0x7ae>
 80064b8:	2340      	movs	r3, #64	; 0x40
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e228      	b.n	8006912 <UART_SetConfig+0x7ae>
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e224      	b.n	8006912 <UART_SetConfig+0x7ae>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4ab1      	ldr	r2, [pc, #708]	; (8006794 <UART_SetConfig+0x630>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d176      	bne.n	80065c0 <UART_SetConfig+0x45c>
 80064d2:	4bb1      	ldr	r3, [pc, #708]	; (8006798 <UART_SetConfig+0x634>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064da:	2b28      	cmp	r3, #40	; 0x28
 80064dc:	d86c      	bhi.n	80065b8 <UART_SetConfig+0x454>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0x380>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006589 	.word	0x08006589
 80064e8:	080065b9 	.word	0x080065b9
 80064ec:	080065b9 	.word	0x080065b9
 80064f0:	080065b9 	.word	0x080065b9
 80064f4:	080065b9 	.word	0x080065b9
 80064f8:	080065b9 	.word	0x080065b9
 80064fc:	080065b9 	.word	0x080065b9
 8006500:	080065b9 	.word	0x080065b9
 8006504:	08006591 	.word	0x08006591
 8006508:	080065b9 	.word	0x080065b9
 800650c:	080065b9 	.word	0x080065b9
 8006510:	080065b9 	.word	0x080065b9
 8006514:	080065b9 	.word	0x080065b9
 8006518:	080065b9 	.word	0x080065b9
 800651c:	080065b9 	.word	0x080065b9
 8006520:	080065b9 	.word	0x080065b9
 8006524:	08006599 	.word	0x08006599
 8006528:	080065b9 	.word	0x080065b9
 800652c:	080065b9 	.word	0x080065b9
 8006530:	080065b9 	.word	0x080065b9
 8006534:	080065b9 	.word	0x080065b9
 8006538:	080065b9 	.word	0x080065b9
 800653c:	080065b9 	.word	0x080065b9
 8006540:	080065b9 	.word	0x080065b9
 8006544:	080065a1 	.word	0x080065a1
 8006548:	080065b9 	.word	0x080065b9
 800654c:	080065b9 	.word	0x080065b9
 8006550:	080065b9 	.word	0x080065b9
 8006554:	080065b9 	.word	0x080065b9
 8006558:	080065b9 	.word	0x080065b9
 800655c:	080065b9 	.word	0x080065b9
 8006560:	080065b9 	.word	0x080065b9
 8006564:	080065a9 	.word	0x080065a9
 8006568:	080065b9 	.word	0x080065b9
 800656c:	080065b9 	.word	0x080065b9
 8006570:	080065b9 	.word	0x080065b9
 8006574:	080065b9 	.word	0x080065b9
 8006578:	080065b9 	.word	0x080065b9
 800657c:	080065b9 	.word	0x080065b9
 8006580:	080065b9 	.word	0x080065b9
 8006584:	080065b1 	.word	0x080065b1
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e1c0      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e1bc      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e1b8      	b.n	8006912 <UART_SetConfig+0x7ae>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e1b4      	b.n	8006912 <UART_SetConfig+0x7ae>
 80065a8:	2320      	movs	r3, #32
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e1b0      	b.n	8006912 <UART_SetConfig+0x7ae>
 80065b0:	2340      	movs	r3, #64	; 0x40
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e1ac      	b.n	8006912 <UART_SetConfig+0x7ae>
 80065b8:	2380      	movs	r3, #128	; 0x80
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e1a8      	b.n	8006912 <UART_SetConfig+0x7ae>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a75      	ldr	r2, [pc, #468]	; (800679c <UART_SetConfig+0x638>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d130      	bne.n	800662c <UART_SetConfig+0x4c8>
 80065ca:	4b73      	ldr	r3, [pc, #460]	; (8006798 <UART_SetConfig+0x634>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	d826      	bhi.n	8006624 <UART_SetConfig+0x4c0>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <UART_SetConfig+0x478>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065f5 	.word	0x080065f5
 80065e0:	080065fd 	.word	0x080065fd
 80065e4:	08006605 	.word	0x08006605
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	08006615 	.word	0x08006615
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e18a      	b.n	8006912 <UART_SetConfig+0x7ae>
 80065fc:	2304      	movs	r3, #4
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e186      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006604:	2308      	movs	r3, #8
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e182      	b.n	8006912 <UART_SetConfig+0x7ae>
 800660c:	2310      	movs	r3, #16
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e17e      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006614:	2320      	movs	r3, #32
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e17a      	b.n	8006912 <UART_SetConfig+0x7ae>
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e176      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e172      	b.n	8006912 <UART_SetConfig+0x7ae>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a5b      	ldr	r2, [pc, #364]	; (80067a0 <UART_SetConfig+0x63c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d130      	bne.n	8006698 <UART_SetConfig+0x534>
 8006636:	4b58      	ldr	r3, [pc, #352]	; (8006798 <UART_SetConfig+0x634>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b05      	cmp	r3, #5
 8006640:	d826      	bhi.n	8006690 <UART_SetConfig+0x52c>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x4e4>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006661 	.word	0x08006661
 800664c:	08006669 	.word	0x08006669
 8006650:	08006671 	.word	0x08006671
 8006654:	08006679 	.word	0x08006679
 8006658:	08006681 	.word	0x08006681
 800665c:	08006689 	.word	0x08006689
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e154      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006668:	2304      	movs	r3, #4
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e150      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006670:	2308      	movs	r3, #8
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e14c      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006678:	2310      	movs	r3, #16
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e148      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006680:	2320      	movs	r3, #32
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e144      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e140      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e13c      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a41      	ldr	r2, [pc, #260]	; (80067a4 <UART_SetConfig+0x640>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	f040 8082 	bne.w	80067a8 <UART_SetConfig+0x644>
 80066a4:	4b3c      	ldr	r3, [pc, #240]	; (8006798 <UART_SetConfig+0x634>)
 80066a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ac:	2b28      	cmp	r3, #40	; 0x28
 80066ae:	d86d      	bhi.n	800678c <UART_SetConfig+0x628>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0x554>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	0800675d 	.word	0x0800675d
 80066bc:	0800678d 	.word	0x0800678d
 80066c0:	0800678d 	.word	0x0800678d
 80066c4:	0800678d 	.word	0x0800678d
 80066c8:	0800678d 	.word	0x0800678d
 80066cc:	0800678d 	.word	0x0800678d
 80066d0:	0800678d 	.word	0x0800678d
 80066d4:	0800678d 	.word	0x0800678d
 80066d8:	08006765 	.word	0x08006765
 80066dc:	0800678d 	.word	0x0800678d
 80066e0:	0800678d 	.word	0x0800678d
 80066e4:	0800678d 	.word	0x0800678d
 80066e8:	0800678d 	.word	0x0800678d
 80066ec:	0800678d 	.word	0x0800678d
 80066f0:	0800678d 	.word	0x0800678d
 80066f4:	0800678d 	.word	0x0800678d
 80066f8:	0800676d 	.word	0x0800676d
 80066fc:	0800678d 	.word	0x0800678d
 8006700:	0800678d 	.word	0x0800678d
 8006704:	0800678d 	.word	0x0800678d
 8006708:	0800678d 	.word	0x0800678d
 800670c:	0800678d 	.word	0x0800678d
 8006710:	0800678d 	.word	0x0800678d
 8006714:	0800678d 	.word	0x0800678d
 8006718:	08006775 	.word	0x08006775
 800671c:	0800678d 	.word	0x0800678d
 8006720:	0800678d 	.word	0x0800678d
 8006724:	0800678d 	.word	0x0800678d
 8006728:	0800678d 	.word	0x0800678d
 800672c:	0800678d 	.word	0x0800678d
 8006730:	0800678d 	.word	0x0800678d
 8006734:	0800678d 	.word	0x0800678d
 8006738:	0800677d 	.word	0x0800677d
 800673c:	0800678d 	.word	0x0800678d
 8006740:	0800678d 	.word	0x0800678d
 8006744:	0800678d 	.word	0x0800678d
 8006748:	0800678d 	.word	0x0800678d
 800674c:	0800678d 	.word	0x0800678d
 8006750:	0800678d 	.word	0x0800678d
 8006754:	0800678d 	.word	0x0800678d
 8006758:	08006785 	.word	0x08006785
 800675c:	2301      	movs	r3, #1
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e0d6      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006764:	2304      	movs	r3, #4
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e0d2      	b.n	8006912 <UART_SetConfig+0x7ae>
 800676c:	2308      	movs	r3, #8
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e0ce      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006774:	2310      	movs	r3, #16
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e0ca      	b.n	8006912 <UART_SetConfig+0x7ae>
 800677c:	2320      	movs	r3, #32
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e0c6      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006784:	2340      	movs	r3, #64	; 0x40
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e0c2      	b.n	8006912 <UART_SetConfig+0x7ae>
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e0be      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006794:	40011400 	.word	0x40011400
 8006798:	58024400 	.word	0x58024400
 800679c:	40007800 	.word	0x40007800
 80067a0:	40007c00 	.word	0x40007c00
 80067a4:	40011800 	.word	0x40011800
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4aad      	ldr	r2, [pc, #692]	; (8006a64 <UART_SetConfig+0x900>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d176      	bne.n	80068a0 <UART_SetConfig+0x73c>
 80067b2:	4bad      	ldr	r3, [pc, #692]	; (8006a68 <UART_SetConfig+0x904>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ba:	2b28      	cmp	r3, #40	; 0x28
 80067bc:	d86c      	bhi.n	8006898 <UART_SetConfig+0x734>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <UART_SetConfig+0x660>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	08006869 	.word	0x08006869
 80067c8:	08006899 	.word	0x08006899
 80067cc:	08006899 	.word	0x08006899
 80067d0:	08006899 	.word	0x08006899
 80067d4:	08006899 	.word	0x08006899
 80067d8:	08006899 	.word	0x08006899
 80067dc:	08006899 	.word	0x08006899
 80067e0:	08006899 	.word	0x08006899
 80067e4:	08006871 	.word	0x08006871
 80067e8:	08006899 	.word	0x08006899
 80067ec:	08006899 	.word	0x08006899
 80067f0:	08006899 	.word	0x08006899
 80067f4:	08006899 	.word	0x08006899
 80067f8:	08006899 	.word	0x08006899
 80067fc:	08006899 	.word	0x08006899
 8006800:	08006899 	.word	0x08006899
 8006804:	08006879 	.word	0x08006879
 8006808:	08006899 	.word	0x08006899
 800680c:	08006899 	.word	0x08006899
 8006810:	08006899 	.word	0x08006899
 8006814:	08006899 	.word	0x08006899
 8006818:	08006899 	.word	0x08006899
 800681c:	08006899 	.word	0x08006899
 8006820:	08006899 	.word	0x08006899
 8006824:	08006881 	.word	0x08006881
 8006828:	08006899 	.word	0x08006899
 800682c:	08006899 	.word	0x08006899
 8006830:	08006899 	.word	0x08006899
 8006834:	08006899 	.word	0x08006899
 8006838:	08006899 	.word	0x08006899
 800683c:	08006899 	.word	0x08006899
 8006840:	08006899 	.word	0x08006899
 8006844:	08006889 	.word	0x08006889
 8006848:	08006899 	.word	0x08006899
 800684c:	08006899 	.word	0x08006899
 8006850:	08006899 	.word	0x08006899
 8006854:	08006899 	.word	0x08006899
 8006858:	08006899 	.word	0x08006899
 800685c:	08006899 	.word	0x08006899
 8006860:	08006899 	.word	0x08006899
 8006864:	08006891 	.word	0x08006891
 8006868:	2301      	movs	r3, #1
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686e:	e050      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006870:	2304      	movs	r3, #4
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006876:	e04c      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006878:	2308      	movs	r3, #8
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687e:	e048      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006880:	2310      	movs	r3, #16
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006886:	e044      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006888:	2320      	movs	r3, #32
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688e:	e040      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006890:	2340      	movs	r3, #64	; 0x40
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006896:	e03c      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689e:	e038      	b.n	8006912 <UART_SetConfig+0x7ae>
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a71      	ldr	r2, [pc, #452]	; (8006a6c <UART_SetConfig+0x908>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d130      	bne.n	800690c <UART_SetConfig+0x7a8>
 80068aa:	4b6f      	ldr	r3, [pc, #444]	; (8006a68 <UART_SetConfig+0x904>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	2b05      	cmp	r3, #5
 80068b4:	d826      	bhi.n	8006904 <UART_SetConfig+0x7a0>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x758>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068d5 	.word	0x080068d5
 80068c0:	080068dd 	.word	0x080068dd
 80068c4:	080068e5 	.word	0x080068e5
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	2302      	movs	r3, #2
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068da:	e01a      	b.n	8006912 <UART_SetConfig+0x7ae>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e2:	e016      	b.n	8006912 <UART_SetConfig+0x7ae>
 80068e4:	2308      	movs	r3, #8
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ea:	e012      	b.n	8006912 <UART_SetConfig+0x7ae>
 80068ec:	2310      	movs	r3, #16
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f2:	e00e      	b.n	8006912 <UART_SetConfig+0x7ae>
 80068f4:	2320      	movs	r3, #32
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fa:	e00a      	b.n	8006912 <UART_SetConfig+0x7ae>
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006902:	e006      	b.n	8006912 <UART_SetConfig+0x7ae>
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690a:	e002      	b.n	8006912 <UART_SetConfig+0x7ae>
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a55      	ldr	r2, [pc, #340]	; (8006a6c <UART_SetConfig+0x908>)
 8006918:	4293      	cmp	r3, r2
 800691a:	f040 80f8 	bne.w	8006b0e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800691e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006922:	2b20      	cmp	r3, #32
 8006924:	dc46      	bgt.n	80069b4 <UART_SetConfig+0x850>
 8006926:	2b02      	cmp	r3, #2
 8006928:	db75      	blt.n	8006a16 <UART_SetConfig+0x8b2>
 800692a:	3b02      	subs	r3, #2
 800692c:	2b1e      	cmp	r3, #30
 800692e:	d872      	bhi.n	8006a16 <UART_SetConfig+0x8b2>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x7d4>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	080069bb 	.word	0x080069bb
 800693c:	08006a17 	.word	0x08006a17
 8006940:	080069c3 	.word	0x080069c3
 8006944:	08006a17 	.word	0x08006a17
 8006948:	08006a17 	.word	0x08006a17
 800694c:	08006a17 	.word	0x08006a17
 8006950:	080069d3 	.word	0x080069d3
 8006954:	08006a17 	.word	0x08006a17
 8006958:	08006a17 	.word	0x08006a17
 800695c:	08006a17 	.word	0x08006a17
 8006960:	08006a17 	.word	0x08006a17
 8006964:	08006a17 	.word	0x08006a17
 8006968:	08006a17 	.word	0x08006a17
 800696c:	08006a17 	.word	0x08006a17
 8006970:	080069e3 	.word	0x080069e3
 8006974:	08006a17 	.word	0x08006a17
 8006978:	08006a17 	.word	0x08006a17
 800697c:	08006a17 	.word	0x08006a17
 8006980:	08006a17 	.word	0x08006a17
 8006984:	08006a17 	.word	0x08006a17
 8006988:	08006a17 	.word	0x08006a17
 800698c:	08006a17 	.word	0x08006a17
 8006990:	08006a17 	.word	0x08006a17
 8006994:	08006a17 	.word	0x08006a17
 8006998:	08006a17 	.word	0x08006a17
 800699c:	08006a17 	.word	0x08006a17
 80069a0:	08006a17 	.word	0x08006a17
 80069a4:	08006a17 	.word	0x08006a17
 80069a8:	08006a17 	.word	0x08006a17
 80069ac:	08006a17 	.word	0x08006a17
 80069b0:	08006a09 	.word	0x08006a09
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d02a      	beq.n	8006a0e <UART_SetConfig+0x8aa>
 80069b8:	e02d      	b.n	8006a16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069ba:	f7fd fc1f 	bl	80041fc <HAL_RCCEx_GetD3PCLK1Freq>
 80069be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069c0:	e02f      	b.n	8006a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fd fc2e 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d0:	e027      	b.n	8006a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d2:	f107 0318 	add.w	r3, r7, #24
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fd fd7a 	bl	80044d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e0:	e01f      	b.n	8006a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069e2:	4b21      	ldr	r3, [pc, #132]	; (8006a68 <UART_SetConfig+0x904>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ee:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <UART_SetConfig+0x904>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	08db      	lsrs	r3, r3, #3
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	4a1d      	ldr	r2, [pc, #116]	; (8006a70 <UART_SetConfig+0x90c>)
 80069fa:	fa22 f303 	lsr.w	r3, r2, r3
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a00:	e00f      	b.n	8006a22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006a02:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <UART_SetConfig+0x90c>)
 8006a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a06:	e00c      	b.n	8006a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <UART_SetConfig+0x910>)
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a0c:	e009      	b.n	8006a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a14:	e005      	b.n	8006a22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 81ee 	beq.w	8006e06 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <UART_SetConfig+0x914>)
 8006a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d305      	bcc.n	8006a5a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d910      	bls.n	8006a7c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a60:	e1d1      	b.n	8006e06 <UART_SetConfig+0xca2>
 8006a62:	bf00      	nop
 8006a64:	40011c00 	.word	0x40011c00
 8006a68:	58024400 	.word	0x58024400
 8006a6c:	58000c00 	.word	0x58000c00
 8006a70:	03d09000 	.word	0x03d09000
 8006a74:	003d0900 	.word	0x003d0900
 8006a78:	08007fc4 	.word	0x08007fc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7e:	2200      	movs	r2, #0
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	60fa      	str	r2, [r7, #12]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	4ac0      	ldr	r2, [pc, #768]	; (8006d8c <UART_SetConfig+0xc28>)
 8006a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2200      	movs	r2, #0
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a9e:	f7f9 fc7f 	bl	80003a0 <__aeabi_uldivmod>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	020b      	lsls	r3, r1, #8
 8006ab4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ab8:	0202      	lsls	r2, r0, #8
 8006aba:	6979      	ldr	r1, [r7, #20]
 8006abc:	6849      	ldr	r1, [r1, #4]
 8006abe:	0849      	lsrs	r1, r1, #1
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	eb12 0804 	adds.w	r8, r2, r4
 8006aca:	eb43 0905 	adc.w	r9, r3, r5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	469a      	mov	sl, r3
 8006ad6:	4693      	mov	fp, r2
 8006ad8:	4652      	mov	r2, sl
 8006ada:	465b      	mov	r3, fp
 8006adc:	4640      	mov	r0, r8
 8006ade:	4649      	mov	r1, r9
 8006ae0:	f7f9 fc5e 	bl	80003a0 <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4613      	mov	r3, r2
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006af2:	d308      	bcc.n	8006b06 <UART_SetConfig+0x9a2>
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afa:	d204      	bcs.n	8006b06 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b02:	60da      	str	r2, [r3, #12]
 8006b04:	e17f      	b.n	8006e06 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b0c:	e17b      	b.n	8006e06 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b16:	f040 80bd 	bne.w	8006c94 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006b1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	dc48      	bgt.n	8006bb4 <UART_SetConfig+0xa50>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	db7b      	blt.n	8006c1e <UART_SetConfig+0xaba>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d879      	bhi.n	8006c1e <UART_SetConfig+0xaba>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <UART_SetConfig+0x9cc>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006bbb 	.word	0x08006bbb
 8006b34:	08006bc3 	.word	0x08006bc3
 8006b38:	08006c1f 	.word	0x08006c1f
 8006b3c:	08006c1f 	.word	0x08006c1f
 8006b40:	08006bcb 	.word	0x08006bcb
 8006b44:	08006c1f 	.word	0x08006c1f
 8006b48:	08006c1f 	.word	0x08006c1f
 8006b4c:	08006c1f 	.word	0x08006c1f
 8006b50:	08006bdb 	.word	0x08006bdb
 8006b54:	08006c1f 	.word	0x08006c1f
 8006b58:	08006c1f 	.word	0x08006c1f
 8006b5c:	08006c1f 	.word	0x08006c1f
 8006b60:	08006c1f 	.word	0x08006c1f
 8006b64:	08006c1f 	.word	0x08006c1f
 8006b68:	08006c1f 	.word	0x08006c1f
 8006b6c:	08006c1f 	.word	0x08006c1f
 8006b70:	08006beb 	.word	0x08006beb
 8006b74:	08006c1f 	.word	0x08006c1f
 8006b78:	08006c1f 	.word	0x08006c1f
 8006b7c:	08006c1f 	.word	0x08006c1f
 8006b80:	08006c1f 	.word	0x08006c1f
 8006b84:	08006c1f 	.word	0x08006c1f
 8006b88:	08006c1f 	.word	0x08006c1f
 8006b8c:	08006c1f 	.word	0x08006c1f
 8006b90:	08006c1f 	.word	0x08006c1f
 8006b94:	08006c1f 	.word	0x08006c1f
 8006b98:	08006c1f 	.word	0x08006c1f
 8006b9c:	08006c1f 	.word	0x08006c1f
 8006ba0:	08006c1f 	.word	0x08006c1f
 8006ba4:	08006c1f 	.word	0x08006c1f
 8006ba8:	08006c1f 	.word	0x08006c1f
 8006bac:	08006c1f 	.word	0x08006c1f
 8006bb0:	08006c11 	.word	0x08006c11
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d02e      	beq.n	8006c16 <UART_SetConfig+0xab2>
 8006bb8:	e031      	b.n	8006c1e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bba:	f7fc f935 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8006bbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bc0:	e033      	b.n	8006c2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc2:	f7fc f947 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 8006bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bc8:	e02f      	b.n	8006c2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fd fb2a 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd8:	e027      	b.n	8006c2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bda:	f107 0318 	add.w	r3, r7, #24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fc76 	bl	80044d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be8:	e01f      	b.n	8006c2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bea:	4b69      	ldr	r3, [pc, #420]	; (8006d90 <UART_SetConfig+0xc2c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bf6:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <UART_SetConfig+0xc2c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	08db      	lsrs	r3, r3, #3
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	4a64      	ldr	r2, [pc, #400]	; (8006d94 <UART_SetConfig+0xc30>)
 8006c02:	fa22 f303 	lsr.w	r3, r2, r3
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c08:	e00f      	b.n	8006c2a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006c0a:	4b62      	ldr	r3, [pc, #392]	; (8006d94 <UART_SetConfig+0xc30>)
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0e:	e00c      	b.n	8006c2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c10:	4b61      	ldr	r3, [pc, #388]	; (8006d98 <UART_SetConfig+0xc34>)
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c14:	e009      	b.n	8006c2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1c:	e005      	b.n	8006c2a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80ea 	beq.w	8006e06 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	4a55      	ldr	r2, [pc, #340]	; (8006d8c <UART_SetConfig+0xc28>)
 8006c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c44:	005a      	lsls	r2, r3, #1
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	441a      	add	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	d916      	bls.n	8006c8c <UART_SetConfig+0xb28>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d212      	bcs.n	8006c8c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f023 030f 	bic.w	r3, r3, #15
 8006c6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e0bc      	b.n	8006e06 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c92:	e0b8      	b.n	8006e06 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	dc4b      	bgt.n	8006d34 <UART_SetConfig+0xbd0>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f2c0 8087 	blt.w	8006db0 <UART_SetConfig+0xc4c>
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	f200 8084 	bhi.w	8006db0 <UART_SetConfig+0xc4c>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <UART_SetConfig+0xb4c>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006d3b 	.word	0x08006d3b
 8006cb4:	08006d43 	.word	0x08006d43
 8006cb8:	08006db1 	.word	0x08006db1
 8006cbc:	08006db1 	.word	0x08006db1
 8006cc0:	08006d4b 	.word	0x08006d4b
 8006cc4:	08006db1 	.word	0x08006db1
 8006cc8:	08006db1 	.word	0x08006db1
 8006ccc:	08006db1 	.word	0x08006db1
 8006cd0:	08006d5b 	.word	0x08006d5b
 8006cd4:	08006db1 	.word	0x08006db1
 8006cd8:	08006db1 	.word	0x08006db1
 8006cdc:	08006db1 	.word	0x08006db1
 8006ce0:	08006db1 	.word	0x08006db1
 8006ce4:	08006db1 	.word	0x08006db1
 8006ce8:	08006db1 	.word	0x08006db1
 8006cec:	08006db1 	.word	0x08006db1
 8006cf0:	08006d6b 	.word	0x08006d6b
 8006cf4:	08006db1 	.word	0x08006db1
 8006cf8:	08006db1 	.word	0x08006db1
 8006cfc:	08006db1 	.word	0x08006db1
 8006d00:	08006db1 	.word	0x08006db1
 8006d04:	08006db1 	.word	0x08006db1
 8006d08:	08006db1 	.word	0x08006db1
 8006d0c:	08006db1 	.word	0x08006db1
 8006d10:	08006db1 	.word	0x08006db1
 8006d14:	08006db1 	.word	0x08006db1
 8006d18:	08006db1 	.word	0x08006db1
 8006d1c:	08006db1 	.word	0x08006db1
 8006d20:	08006db1 	.word	0x08006db1
 8006d24:	08006db1 	.word	0x08006db1
 8006d28:	08006db1 	.word	0x08006db1
 8006d2c:	08006db1 	.word	0x08006db1
 8006d30:	08006da3 	.word	0x08006da3
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d037      	beq.n	8006da8 <UART_SetConfig+0xc44>
 8006d38:	e03a      	b.n	8006db0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d3a:	f7fc f875 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8006d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d40:	e03c      	b.n	8006dbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d42:	f7fc f887 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 8006d46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d48:	e038      	b.n	8006dbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fd fa6a 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d58:	e030      	b.n	8006dbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5a:	f107 0318 	add.w	r3, r7, #24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fd fbb6 	bl	80044d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d68:	e028      	b.n	8006dbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <UART_SetConfig+0xc2c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d012      	beq.n	8006d9c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d76:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <UART_SetConfig+0xc2c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	08db      	lsrs	r3, r3, #3
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <UART_SetConfig+0xc30>)
 8006d82:	fa22 f303 	lsr.w	r3, r2, r3
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d88:	e018      	b.n	8006dbc <UART_SetConfig+0xc58>
 8006d8a:	bf00      	nop
 8006d8c:	08007fc4 	.word	0x08007fc4
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <UART_SetConfig+0xccc>)
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da0:	e00c      	b.n	8006dbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006da2:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <UART_SetConfig+0xcd0>)
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da6:	e009      	b.n	8006dbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dae:	e005      	b.n	8006dbc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006dba:	bf00      	nop
    }

    if (pclk != 0U)
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d021      	beq.n	8006e06 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <UART_SetConfig+0xcd4>)
 8006dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	441a      	add	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	2b0f      	cmp	r3, #15
 8006dea:	d909      	bls.n	8006e00 <UART_SetConfig+0xc9c>
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df2:	d205      	bcs.n	8006e00 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60da      	str	r2, [r3, #12]
 8006dfe:	e002      	b.n	8006e06 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006e22:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3748      	adds	r7, #72	; 0x48
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	003d0900 	.word	0x003d0900
 8006e38:	08007fc4 	.word	0x08007fc4

08006e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3a:	d10a      	bne.n	8006f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b098      	sub	sp, #96	; 0x60
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f90:	f7fa fc20 	bl	80017d4 <HAL_GetTick>
 8006f94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d12f      	bne.n	8007004 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fac:	2200      	movs	r2, #0
 8006fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f88e 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d022      	beq.n	8007004 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fde:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e6      	bne.n	8006fbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e063      	b.n	80070cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b04      	cmp	r3, #4
 8007010:	d149      	bne.n	80070a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007012:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800701a:	2200      	movs	r2, #0
 800701c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f857 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d03c      	beq.n	80070a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	623b      	str	r3, [r7, #32]
   return(result);
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704a:	633b      	str	r3, [r7, #48]	; 0x30
 800704c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e6      	bne.n	800702c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	60fb      	str	r3, [r7, #12]
   return(result);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	64bb      	str	r3, [r7, #72]	; 0x48
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707e:	61fa      	str	r2, [r7, #28]
 8007080:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	69b9      	ldr	r1, [r7, #24]
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	617b      	str	r3, [r7, #20]
   return(result);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e012      	b.n	80070cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3758      	adds	r7, #88	; 0x58
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	4613      	mov	r3, r2
 80070e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e4:	e04f      	b.n	8007186 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d04b      	beq.n	8007186 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fa fb71 	bl	80017d4 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <UART_WaitOnFlagUntilTimeout+0x30>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e04e      	b.n	80071a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d037      	beq.n	8007186 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b80      	cmp	r3, #128	; 0x80
 800711a:	d034      	beq.n	8007186 <UART_WaitOnFlagUntilTimeout+0xb2>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b40      	cmp	r3, #64	; 0x40
 8007120:	d031      	beq.n	8007186 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b08      	cmp	r3, #8
 800712e:	d110      	bne.n	8007152 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2208      	movs	r2, #8
 8007136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f839 	bl	80071b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2208      	movs	r2, #8
 8007142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e029      	b.n	80071a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007160:	d111      	bne.n	8007186 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800716a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f81f 	bl	80071b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e00f      	b.n	80071a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4013      	ands	r3, r2
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	429a      	cmp	r2, r3
 8007194:	bf0c      	ite	eq
 8007196:	2301      	moveq	r3, #1
 8007198:	2300      	movne	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d0a0      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b095      	sub	sp, #84	; 0x54
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d6:	643b      	str	r3, [r7, #64]	; 0x40
 80071d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <UART_EndRxTransfer+0xc8>)
 80071fe:	4013      	ands	r3, r2
 8007200:	64bb      	str	r3, [r7, #72]	; 0x48
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007222:	2b01      	cmp	r3, #1
 8007224:	d118      	bne.n	8007258 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60bb      	str	r3, [r7, #8]
   return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	647b      	str	r3, [r7, #68]	; 0x44
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6979      	ldr	r1, [r7, #20]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e6      	bne.n	8007226 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800726c:	bf00      	nop
 800726e:	3754      	adds	r7, #84	; 0x54
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	effffffe 	.word	0xeffffffe

0800727c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_UARTEx_DisableFifoMode+0x16>
 800728e:	2302      	movs	r3, #2
 8007290:	e027      	b.n	80072e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2224      	movs	r2, #36	; 0x24
 800729e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0201 	bic.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007302:	2302      	movs	r3, #2
 8007304:	e02d      	b.n	8007362 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2224      	movs	r2, #36	; 0x24
 8007312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0201 	bic.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f850 	bl	80073e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800737e:	2302      	movs	r3, #2
 8007380:	e02d      	b.n	80073de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2224      	movs	r2, #36	; 0x24
 800738e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f812 	bl	80073e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d108      	bne.n	800740a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007408:	e031      	b.n	800746e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800740a:	2310      	movs	r3, #16
 800740c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800740e:	2310      	movs	r3, #16
 8007410:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	0e5b      	lsrs	r3, r3, #25
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	0f5b      	lsrs	r3, r3, #29
 800742a:	b2db      	uxtb	r3, r3
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	7b3a      	ldrb	r2, [r7, #12]
 8007436:	4911      	ldr	r1, [pc, #68]	; (800747c <UARTEx_SetNbDataToProcess+0x94>)
 8007438:	5c8a      	ldrb	r2, [r1, r2]
 800743a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800743e:	7b3a      	ldrb	r2, [r7, #12]
 8007440:	490f      	ldr	r1, [pc, #60]	; (8007480 <UARTEx_SetNbDataToProcess+0x98>)
 8007442:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007444:	fb93 f3f2 	sdiv	r3, r3, r2
 8007448:	b29a      	uxth	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	7b7a      	ldrb	r2, [r7, #13]
 8007454:	4909      	ldr	r1, [pc, #36]	; (800747c <UARTEx_SetNbDataToProcess+0x94>)
 8007456:	5c8a      	ldrb	r2, [r1, r2]
 8007458:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800745c:	7b7a      	ldrb	r2, [r7, #13]
 800745e:	4908      	ldr	r1, [pc, #32]	; (8007480 <UARTEx_SetNbDataToProcess+0x98>)
 8007460:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007462:	fb93 f3f2 	sdiv	r3, r3, r2
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	08007fdc 	.word	0x08007fdc
 8007480:	08007fe4 	.word	0x08007fe4

08007484 <__errno>:
 8007484:	4b01      	ldr	r3, [pc, #4]	; (800748c <__errno+0x8>)
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	24000010 	.word	0x24000010

08007490 <__libc_init_array>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	4d0d      	ldr	r5, [pc, #52]	; (80074c8 <__libc_init_array+0x38>)
 8007494:	4c0d      	ldr	r4, [pc, #52]	; (80074cc <__libc_init_array+0x3c>)
 8007496:	1b64      	subs	r4, r4, r5
 8007498:	10a4      	asrs	r4, r4, #2
 800749a:	2600      	movs	r6, #0
 800749c:	42a6      	cmp	r6, r4
 800749e:	d109      	bne.n	80074b4 <__libc_init_array+0x24>
 80074a0:	4d0b      	ldr	r5, [pc, #44]	; (80074d0 <__libc_init_array+0x40>)
 80074a2:	4c0c      	ldr	r4, [pc, #48]	; (80074d4 <__libc_init_array+0x44>)
 80074a4:	f000 fc8e 	bl	8007dc4 <_init>
 80074a8:	1b64      	subs	r4, r4, r5
 80074aa:	10a4      	asrs	r4, r4, #2
 80074ac:	2600      	movs	r6, #0
 80074ae:	42a6      	cmp	r6, r4
 80074b0:	d105      	bne.n	80074be <__libc_init_array+0x2e>
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b8:	4798      	blx	r3
 80074ba:	3601      	adds	r6, #1
 80074bc:	e7ee      	b.n	800749c <__libc_init_array+0xc>
 80074be:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c2:	4798      	blx	r3
 80074c4:	3601      	adds	r6, #1
 80074c6:	e7f2      	b.n	80074ae <__libc_init_array+0x1e>
 80074c8:	08008028 	.word	0x08008028
 80074cc:	08008028 	.word	0x08008028
 80074d0:	08008028 	.word	0x08008028
 80074d4:	0800802c 	.word	0x0800802c

080074d8 <memset>:
 80074d8:	4402      	add	r2, r0
 80074da:	4603      	mov	r3, r0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d100      	bne.n	80074e2 <memset+0xa>
 80074e0:	4770      	bx	lr
 80074e2:	f803 1b01 	strb.w	r1, [r3], #1
 80074e6:	e7f9      	b.n	80074dc <memset+0x4>

080074e8 <siprintf>:
 80074e8:	b40e      	push	{r1, r2, r3}
 80074ea:	b500      	push	{lr}
 80074ec:	b09c      	sub	sp, #112	; 0x70
 80074ee:	ab1d      	add	r3, sp, #116	; 0x74
 80074f0:	9002      	str	r0, [sp, #8]
 80074f2:	9006      	str	r0, [sp, #24]
 80074f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074f8:	4809      	ldr	r0, [pc, #36]	; (8007520 <siprintf+0x38>)
 80074fa:	9107      	str	r1, [sp, #28]
 80074fc:	9104      	str	r1, [sp, #16]
 80074fe:	4909      	ldr	r1, [pc, #36]	; (8007524 <siprintf+0x3c>)
 8007500:	f853 2b04 	ldr.w	r2, [r3], #4
 8007504:	9105      	str	r1, [sp, #20]
 8007506:	6800      	ldr	r0, [r0, #0]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	a902      	add	r1, sp, #8
 800750c:	f000 f868 	bl	80075e0 <_svfiprintf_r>
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	b01c      	add	sp, #112	; 0x70
 8007518:	f85d eb04 	ldr.w	lr, [sp], #4
 800751c:	b003      	add	sp, #12
 800751e:	4770      	bx	lr
 8007520:	24000010 	.word	0x24000010
 8007524:	ffff0208 	.word	0xffff0208

08007528 <__ssputs_r>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	688e      	ldr	r6, [r1, #8]
 800752e:	429e      	cmp	r6, r3
 8007530:	4682      	mov	sl, r0
 8007532:	460c      	mov	r4, r1
 8007534:	4690      	mov	r8, r2
 8007536:	461f      	mov	r7, r3
 8007538:	d838      	bhi.n	80075ac <__ssputs_r+0x84>
 800753a:	898a      	ldrh	r2, [r1, #12]
 800753c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007540:	d032      	beq.n	80075a8 <__ssputs_r+0x80>
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	6909      	ldr	r1, [r1, #16]
 8007546:	eba5 0901 	sub.w	r9, r5, r1
 800754a:	6965      	ldr	r5, [r4, #20]
 800754c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007554:	3301      	adds	r3, #1
 8007556:	444b      	add	r3, r9
 8007558:	106d      	asrs	r5, r5, #1
 800755a:	429d      	cmp	r5, r3
 800755c:	bf38      	it	cc
 800755e:	461d      	movcc	r5, r3
 8007560:	0553      	lsls	r3, r2, #21
 8007562:	d531      	bpl.n	80075c8 <__ssputs_r+0xa0>
 8007564:	4629      	mov	r1, r5
 8007566:	f000 fb63 	bl	8007c30 <_malloc_r>
 800756a:	4606      	mov	r6, r0
 800756c:	b950      	cbnz	r0, 8007584 <__ssputs_r+0x5c>
 800756e:	230c      	movs	r3, #12
 8007570:	f8ca 3000 	str.w	r3, [sl]
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	6921      	ldr	r1, [r4, #16]
 8007586:	464a      	mov	r2, r9
 8007588:	f000 fabe 	bl	8007b08 <memcpy>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	6126      	str	r6, [r4, #16]
 800759a:	6165      	str	r5, [r4, #20]
 800759c:	444e      	add	r6, r9
 800759e:	eba5 0509 	sub.w	r5, r5, r9
 80075a2:	6026      	str	r6, [r4, #0]
 80075a4:	60a5      	str	r5, [r4, #8]
 80075a6:	463e      	mov	r6, r7
 80075a8:	42be      	cmp	r6, r7
 80075aa:	d900      	bls.n	80075ae <__ssputs_r+0x86>
 80075ac:	463e      	mov	r6, r7
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	4632      	mov	r2, r6
 80075b2:	4641      	mov	r1, r8
 80075b4:	f000 fab6 	bl	8007b24 <memmove>
 80075b8:	68a3      	ldr	r3, [r4, #8]
 80075ba:	1b9b      	subs	r3, r3, r6
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	4433      	add	r3, r6
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	2000      	movs	r0, #0
 80075c6:	e7db      	b.n	8007580 <__ssputs_r+0x58>
 80075c8:	462a      	mov	r2, r5
 80075ca:	f000 fba5 	bl	8007d18 <_realloc_r>
 80075ce:	4606      	mov	r6, r0
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d1e1      	bne.n	8007598 <__ssputs_r+0x70>
 80075d4:	6921      	ldr	r1, [r4, #16]
 80075d6:	4650      	mov	r0, sl
 80075d8:	f000 fabe 	bl	8007b58 <_free_r>
 80075dc:	e7c7      	b.n	800756e <__ssputs_r+0x46>
	...

080075e0 <_svfiprintf_r>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	4698      	mov	r8, r3
 80075e6:	898b      	ldrh	r3, [r1, #12]
 80075e8:	061b      	lsls	r3, r3, #24
 80075ea:	b09d      	sub	sp, #116	; 0x74
 80075ec:	4607      	mov	r7, r0
 80075ee:	460d      	mov	r5, r1
 80075f0:	4614      	mov	r4, r2
 80075f2:	d50e      	bpl.n	8007612 <_svfiprintf_r+0x32>
 80075f4:	690b      	ldr	r3, [r1, #16]
 80075f6:	b963      	cbnz	r3, 8007612 <_svfiprintf_r+0x32>
 80075f8:	2140      	movs	r1, #64	; 0x40
 80075fa:	f000 fb19 	bl	8007c30 <_malloc_r>
 80075fe:	6028      	str	r0, [r5, #0]
 8007600:	6128      	str	r0, [r5, #16]
 8007602:	b920      	cbnz	r0, 800760e <_svfiprintf_r+0x2e>
 8007604:	230c      	movs	r3, #12
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	e0d1      	b.n	80077b2 <_svfiprintf_r+0x1d2>
 800760e:	2340      	movs	r3, #64	; 0x40
 8007610:	616b      	str	r3, [r5, #20]
 8007612:	2300      	movs	r3, #0
 8007614:	9309      	str	r3, [sp, #36]	; 0x24
 8007616:	2320      	movs	r3, #32
 8007618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800761c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007620:	2330      	movs	r3, #48	; 0x30
 8007622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077cc <_svfiprintf_r+0x1ec>
 8007626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800762a:	f04f 0901 	mov.w	r9, #1
 800762e:	4623      	mov	r3, r4
 8007630:	469a      	mov	sl, r3
 8007632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007636:	b10a      	cbz	r2, 800763c <_svfiprintf_r+0x5c>
 8007638:	2a25      	cmp	r2, #37	; 0x25
 800763a:	d1f9      	bne.n	8007630 <_svfiprintf_r+0x50>
 800763c:	ebba 0b04 	subs.w	fp, sl, r4
 8007640:	d00b      	beq.n	800765a <_svfiprintf_r+0x7a>
 8007642:	465b      	mov	r3, fp
 8007644:	4622      	mov	r2, r4
 8007646:	4629      	mov	r1, r5
 8007648:	4638      	mov	r0, r7
 800764a:	f7ff ff6d 	bl	8007528 <__ssputs_r>
 800764e:	3001      	adds	r0, #1
 8007650:	f000 80aa 	beq.w	80077a8 <_svfiprintf_r+0x1c8>
 8007654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007656:	445a      	add	r2, fp
 8007658:	9209      	str	r2, [sp, #36]	; 0x24
 800765a:	f89a 3000 	ldrb.w	r3, [sl]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80a2 	beq.w	80077a8 <_svfiprintf_r+0x1c8>
 8007664:	2300      	movs	r3, #0
 8007666:	f04f 32ff 	mov.w	r2, #4294967295
 800766a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800766e:	f10a 0a01 	add.w	sl, sl, #1
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	9307      	str	r3, [sp, #28]
 8007676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800767a:	931a      	str	r3, [sp, #104]	; 0x68
 800767c:	4654      	mov	r4, sl
 800767e:	2205      	movs	r2, #5
 8007680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007684:	4851      	ldr	r0, [pc, #324]	; (80077cc <_svfiprintf_r+0x1ec>)
 8007686:	f7f8 fe3b 	bl	8000300 <memchr>
 800768a:	9a04      	ldr	r2, [sp, #16]
 800768c:	b9d8      	cbnz	r0, 80076c6 <_svfiprintf_r+0xe6>
 800768e:	06d0      	lsls	r0, r2, #27
 8007690:	bf44      	itt	mi
 8007692:	2320      	movmi	r3, #32
 8007694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007698:	0711      	lsls	r1, r2, #28
 800769a:	bf44      	itt	mi
 800769c:	232b      	movmi	r3, #43	; 0x2b
 800769e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a2:	f89a 3000 	ldrb.w	r3, [sl]
 80076a6:	2b2a      	cmp	r3, #42	; 0x2a
 80076a8:	d015      	beq.n	80076d6 <_svfiprintf_r+0xf6>
 80076aa:	9a07      	ldr	r2, [sp, #28]
 80076ac:	4654      	mov	r4, sl
 80076ae:	2000      	movs	r0, #0
 80076b0:	f04f 0c0a 	mov.w	ip, #10
 80076b4:	4621      	mov	r1, r4
 80076b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ba:	3b30      	subs	r3, #48	; 0x30
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d94e      	bls.n	800775e <_svfiprintf_r+0x17e>
 80076c0:	b1b0      	cbz	r0, 80076f0 <_svfiprintf_r+0x110>
 80076c2:	9207      	str	r2, [sp, #28]
 80076c4:	e014      	b.n	80076f0 <_svfiprintf_r+0x110>
 80076c6:	eba0 0308 	sub.w	r3, r0, r8
 80076ca:	fa09 f303 	lsl.w	r3, r9, r3
 80076ce:	4313      	orrs	r3, r2
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	46a2      	mov	sl, r4
 80076d4:	e7d2      	b.n	800767c <_svfiprintf_r+0x9c>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	1d19      	adds	r1, r3, #4
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	9103      	str	r1, [sp, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfbb      	ittet	lt
 80076e2:	425b      	neglt	r3, r3
 80076e4:	f042 0202 	orrlt.w	r2, r2, #2
 80076e8:	9307      	strge	r3, [sp, #28]
 80076ea:	9307      	strlt	r3, [sp, #28]
 80076ec:	bfb8      	it	lt
 80076ee:	9204      	strlt	r2, [sp, #16]
 80076f0:	7823      	ldrb	r3, [r4, #0]
 80076f2:	2b2e      	cmp	r3, #46	; 0x2e
 80076f4:	d10c      	bne.n	8007710 <_svfiprintf_r+0x130>
 80076f6:	7863      	ldrb	r3, [r4, #1]
 80076f8:	2b2a      	cmp	r3, #42	; 0x2a
 80076fa:	d135      	bne.n	8007768 <_svfiprintf_r+0x188>
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	1d1a      	adds	r2, r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	9203      	str	r2, [sp, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfb8      	it	lt
 8007708:	f04f 33ff 	movlt.w	r3, #4294967295
 800770c:	3402      	adds	r4, #2
 800770e:	9305      	str	r3, [sp, #20]
 8007710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077dc <_svfiprintf_r+0x1fc>
 8007714:	7821      	ldrb	r1, [r4, #0]
 8007716:	2203      	movs	r2, #3
 8007718:	4650      	mov	r0, sl
 800771a:	f7f8 fdf1 	bl	8000300 <memchr>
 800771e:	b140      	cbz	r0, 8007732 <_svfiprintf_r+0x152>
 8007720:	2340      	movs	r3, #64	; 0x40
 8007722:	eba0 000a 	sub.w	r0, r0, sl
 8007726:	fa03 f000 	lsl.w	r0, r3, r0
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	4303      	orrs	r3, r0
 800772e:	3401      	adds	r4, #1
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007736:	4826      	ldr	r0, [pc, #152]	; (80077d0 <_svfiprintf_r+0x1f0>)
 8007738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800773c:	2206      	movs	r2, #6
 800773e:	f7f8 fddf 	bl	8000300 <memchr>
 8007742:	2800      	cmp	r0, #0
 8007744:	d038      	beq.n	80077b8 <_svfiprintf_r+0x1d8>
 8007746:	4b23      	ldr	r3, [pc, #140]	; (80077d4 <_svfiprintf_r+0x1f4>)
 8007748:	bb1b      	cbnz	r3, 8007792 <_svfiprintf_r+0x1b2>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	3307      	adds	r3, #7
 800774e:	f023 0307 	bic.w	r3, r3, #7
 8007752:	3308      	adds	r3, #8
 8007754:	9303      	str	r3, [sp, #12]
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	4433      	add	r3, r6
 800775a:	9309      	str	r3, [sp, #36]	; 0x24
 800775c:	e767      	b.n	800762e <_svfiprintf_r+0x4e>
 800775e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007762:	460c      	mov	r4, r1
 8007764:	2001      	movs	r0, #1
 8007766:	e7a5      	b.n	80076b4 <_svfiprintf_r+0xd4>
 8007768:	2300      	movs	r3, #0
 800776a:	3401      	adds	r4, #1
 800776c:	9305      	str	r3, [sp, #20]
 800776e:	4619      	mov	r1, r3
 8007770:	f04f 0c0a 	mov.w	ip, #10
 8007774:	4620      	mov	r0, r4
 8007776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800777a:	3a30      	subs	r2, #48	; 0x30
 800777c:	2a09      	cmp	r2, #9
 800777e:	d903      	bls.n	8007788 <_svfiprintf_r+0x1a8>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0c5      	beq.n	8007710 <_svfiprintf_r+0x130>
 8007784:	9105      	str	r1, [sp, #20]
 8007786:	e7c3      	b.n	8007710 <_svfiprintf_r+0x130>
 8007788:	fb0c 2101 	mla	r1, ip, r1, r2
 800778c:	4604      	mov	r4, r0
 800778e:	2301      	movs	r3, #1
 8007790:	e7f0      	b.n	8007774 <_svfiprintf_r+0x194>
 8007792:	ab03      	add	r3, sp, #12
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	462a      	mov	r2, r5
 8007798:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <_svfiprintf_r+0x1f8>)
 800779a:	a904      	add	r1, sp, #16
 800779c:	4638      	mov	r0, r7
 800779e:	f3af 8000 	nop.w
 80077a2:	1c42      	adds	r2, r0, #1
 80077a4:	4606      	mov	r6, r0
 80077a6:	d1d6      	bne.n	8007756 <_svfiprintf_r+0x176>
 80077a8:	89ab      	ldrh	r3, [r5, #12]
 80077aa:	065b      	lsls	r3, r3, #25
 80077ac:	f53f af2c 	bmi.w	8007608 <_svfiprintf_r+0x28>
 80077b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b2:	b01d      	add	sp, #116	; 0x74
 80077b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b8:	ab03      	add	r3, sp, #12
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	462a      	mov	r2, r5
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <_svfiprintf_r+0x1f8>)
 80077c0:	a904      	add	r1, sp, #16
 80077c2:	4638      	mov	r0, r7
 80077c4:	f000 f87a 	bl	80078bc <_printf_i>
 80077c8:	e7eb      	b.n	80077a2 <_svfiprintf_r+0x1c2>
 80077ca:	bf00      	nop
 80077cc:	08007fec 	.word	0x08007fec
 80077d0:	08007ff6 	.word	0x08007ff6
 80077d4:	00000000 	.word	0x00000000
 80077d8:	08007529 	.word	0x08007529
 80077dc:	08007ff2 	.word	0x08007ff2

080077e0 <_printf_common>:
 80077e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	4616      	mov	r6, r2
 80077e6:	4699      	mov	r9, r3
 80077e8:	688a      	ldr	r2, [r1, #8]
 80077ea:	690b      	ldr	r3, [r1, #16]
 80077ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077f0:	4293      	cmp	r3, r2
 80077f2:	bfb8      	it	lt
 80077f4:	4613      	movlt	r3, r2
 80077f6:	6033      	str	r3, [r6, #0]
 80077f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077fc:	4607      	mov	r7, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	b10a      	cbz	r2, 8007806 <_printf_common+0x26>
 8007802:	3301      	adds	r3, #1
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	0699      	lsls	r1, r3, #26
 800780a:	bf42      	ittt	mi
 800780c:	6833      	ldrmi	r3, [r6, #0]
 800780e:	3302      	addmi	r3, #2
 8007810:	6033      	strmi	r3, [r6, #0]
 8007812:	6825      	ldr	r5, [r4, #0]
 8007814:	f015 0506 	ands.w	r5, r5, #6
 8007818:	d106      	bne.n	8007828 <_printf_common+0x48>
 800781a:	f104 0a19 	add.w	sl, r4, #25
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	6832      	ldr	r2, [r6, #0]
 8007822:	1a9b      	subs	r3, r3, r2
 8007824:	42ab      	cmp	r3, r5
 8007826:	dc26      	bgt.n	8007876 <_printf_common+0x96>
 8007828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800782c:	1e13      	subs	r3, r2, #0
 800782e:	6822      	ldr	r2, [r4, #0]
 8007830:	bf18      	it	ne
 8007832:	2301      	movne	r3, #1
 8007834:	0692      	lsls	r2, r2, #26
 8007836:	d42b      	bmi.n	8007890 <_printf_common+0xb0>
 8007838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800783c:	4649      	mov	r1, r9
 800783e:	4638      	mov	r0, r7
 8007840:	47c0      	blx	r8
 8007842:	3001      	adds	r0, #1
 8007844:	d01e      	beq.n	8007884 <_printf_common+0xa4>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	68e5      	ldr	r5, [r4, #12]
 800784a:	6832      	ldr	r2, [r6, #0]
 800784c:	f003 0306 	and.w	r3, r3, #6
 8007850:	2b04      	cmp	r3, #4
 8007852:	bf08      	it	eq
 8007854:	1aad      	subeq	r5, r5, r2
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	6922      	ldr	r2, [r4, #16]
 800785a:	bf0c      	ite	eq
 800785c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007860:	2500      	movne	r5, #0
 8007862:	4293      	cmp	r3, r2
 8007864:	bfc4      	itt	gt
 8007866:	1a9b      	subgt	r3, r3, r2
 8007868:	18ed      	addgt	r5, r5, r3
 800786a:	2600      	movs	r6, #0
 800786c:	341a      	adds	r4, #26
 800786e:	42b5      	cmp	r5, r6
 8007870:	d11a      	bne.n	80078a8 <_printf_common+0xc8>
 8007872:	2000      	movs	r0, #0
 8007874:	e008      	b.n	8007888 <_printf_common+0xa8>
 8007876:	2301      	movs	r3, #1
 8007878:	4652      	mov	r2, sl
 800787a:	4649      	mov	r1, r9
 800787c:	4638      	mov	r0, r7
 800787e:	47c0      	blx	r8
 8007880:	3001      	adds	r0, #1
 8007882:	d103      	bne.n	800788c <_printf_common+0xac>
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788c:	3501      	adds	r5, #1
 800788e:	e7c6      	b.n	800781e <_printf_common+0x3e>
 8007890:	18e1      	adds	r1, r4, r3
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	2030      	movs	r0, #48	; 0x30
 8007896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800789a:	4422      	add	r2, r4
 800789c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078a4:	3302      	adds	r3, #2
 80078a6:	e7c7      	b.n	8007838 <_printf_common+0x58>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4622      	mov	r2, r4
 80078ac:	4649      	mov	r1, r9
 80078ae:	4638      	mov	r0, r7
 80078b0:	47c0      	blx	r8
 80078b2:	3001      	adds	r0, #1
 80078b4:	d0e6      	beq.n	8007884 <_printf_common+0xa4>
 80078b6:	3601      	adds	r6, #1
 80078b8:	e7d9      	b.n	800786e <_printf_common+0x8e>
	...

080078bc <_printf_i>:
 80078bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c0:	7e0f      	ldrb	r7, [r1, #24]
 80078c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078c4:	2f78      	cmp	r7, #120	; 0x78
 80078c6:	4691      	mov	r9, r2
 80078c8:	4680      	mov	r8, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	469a      	mov	sl, r3
 80078ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078d2:	d807      	bhi.n	80078e4 <_printf_i+0x28>
 80078d4:	2f62      	cmp	r7, #98	; 0x62
 80078d6:	d80a      	bhi.n	80078ee <_printf_i+0x32>
 80078d8:	2f00      	cmp	r7, #0
 80078da:	f000 80d8 	beq.w	8007a8e <_printf_i+0x1d2>
 80078de:	2f58      	cmp	r7, #88	; 0x58
 80078e0:	f000 80a3 	beq.w	8007a2a <_printf_i+0x16e>
 80078e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078ec:	e03a      	b.n	8007964 <_printf_i+0xa8>
 80078ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078f2:	2b15      	cmp	r3, #21
 80078f4:	d8f6      	bhi.n	80078e4 <_printf_i+0x28>
 80078f6:	a101      	add	r1, pc, #4	; (adr r1, 80078fc <_printf_i+0x40>)
 80078f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007969 	.word	0x08007969
 8007904:	080078e5 	.word	0x080078e5
 8007908:	080078e5 	.word	0x080078e5
 800790c:	080078e5 	.word	0x080078e5
 8007910:	080078e5 	.word	0x080078e5
 8007914:	08007969 	.word	0x08007969
 8007918:	080078e5 	.word	0x080078e5
 800791c:	080078e5 	.word	0x080078e5
 8007920:	080078e5 	.word	0x080078e5
 8007924:	080078e5 	.word	0x080078e5
 8007928:	08007a75 	.word	0x08007a75
 800792c:	08007999 	.word	0x08007999
 8007930:	08007a57 	.word	0x08007a57
 8007934:	080078e5 	.word	0x080078e5
 8007938:	080078e5 	.word	0x080078e5
 800793c:	08007a97 	.word	0x08007a97
 8007940:	080078e5 	.word	0x080078e5
 8007944:	08007999 	.word	0x08007999
 8007948:	080078e5 	.word	0x080078e5
 800794c:	080078e5 	.word	0x080078e5
 8007950:	08007a5f 	.word	0x08007a5f
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	1d1a      	adds	r2, r3, #4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	602a      	str	r2, [r5, #0]
 800795c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007964:	2301      	movs	r3, #1
 8007966:	e0a3      	b.n	8007ab0 <_printf_i+0x1f4>
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	6829      	ldr	r1, [r5, #0]
 800796c:	0606      	lsls	r6, r0, #24
 800796e:	f101 0304 	add.w	r3, r1, #4
 8007972:	d50a      	bpl.n	800798a <_printf_i+0xce>
 8007974:	680e      	ldr	r6, [r1, #0]
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	2e00      	cmp	r6, #0
 800797a:	da03      	bge.n	8007984 <_printf_i+0xc8>
 800797c:	232d      	movs	r3, #45	; 0x2d
 800797e:	4276      	negs	r6, r6
 8007980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007984:	485e      	ldr	r0, [pc, #376]	; (8007b00 <_printf_i+0x244>)
 8007986:	230a      	movs	r3, #10
 8007988:	e019      	b.n	80079be <_printf_i+0x102>
 800798a:	680e      	ldr	r6, [r1, #0]
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007992:	bf18      	it	ne
 8007994:	b236      	sxthne	r6, r6
 8007996:	e7ef      	b.n	8007978 <_printf_i+0xbc>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	6820      	ldr	r0, [r4, #0]
 800799c:	1d19      	adds	r1, r3, #4
 800799e:	6029      	str	r1, [r5, #0]
 80079a0:	0601      	lsls	r1, r0, #24
 80079a2:	d501      	bpl.n	80079a8 <_printf_i+0xec>
 80079a4:	681e      	ldr	r6, [r3, #0]
 80079a6:	e002      	b.n	80079ae <_printf_i+0xf2>
 80079a8:	0646      	lsls	r6, r0, #25
 80079aa:	d5fb      	bpl.n	80079a4 <_printf_i+0xe8>
 80079ac:	881e      	ldrh	r6, [r3, #0]
 80079ae:	4854      	ldr	r0, [pc, #336]	; (8007b00 <_printf_i+0x244>)
 80079b0:	2f6f      	cmp	r7, #111	; 0x6f
 80079b2:	bf0c      	ite	eq
 80079b4:	2308      	moveq	r3, #8
 80079b6:	230a      	movne	r3, #10
 80079b8:	2100      	movs	r1, #0
 80079ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079be:	6865      	ldr	r5, [r4, #4]
 80079c0:	60a5      	str	r5, [r4, #8]
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	bfa2      	ittt	ge
 80079c6:	6821      	ldrge	r1, [r4, #0]
 80079c8:	f021 0104 	bicge.w	r1, r1, #4
 80079cc:	6021      	strge	r1, [r4, #0]
 80079ce:	b90e      	cbnz	r6, 80079d4 <_printf_i+0x118>
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	d04d      	beq.n	8007a70 <_printf_i+0x1b4>
 80079d4:	4615      	mov	r5, r2
 80079d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80079da:	fb03 6711 	mls	r7, r3, r1, r6
 80079de:	5dc7      	ldrb	r7, [r0, r7]
 80079e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079e4:	4637      	mov	r7, r6
 80079e6:	42bb      	cmp	r3, r7
 80079e8:	460e      	mov	r6, r1
 80079ea:	d9f4      	bls.n	80079d6 <_printf_i+0x11a>
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d10b      	bne.n	8007a08 <_printf_i+0x14c>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	07de      	lsls	r6, r3, #31
 80079f4:	d508      	bpl.n	8007a08 <_printf_i+0x14c>
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	6861      	ldr	r1, [r4, #4]
 80079fa:	4299      	cmp	r1, r3
 80079fc:	bfde      	ittt	le
 80079fe:	2330      	movle	r3, #48	; 0x30
 8007a00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a08:	1b52      	subs	r2, r2, r5
 8007a0a:	6122      	str	r2, [r4, #16]
 8007a0c:	f8cd a000 	str.w	sl, [sp]
 8007a10:	464b      	mov	r3, r9
 8007a12:	aa03      	add	r2, sp, #12
 8007a14:	4621      	mov	r1, r4
 8007a16:	4640      	mov	r0, r8
 8007a18:	f7ff fee2 	bl	80077e0 <_printf_common>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d14c      	bne.n	8007aba <_printf_i+0x1fe>
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	b004      	add	sp, #16
 8007a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2a:	4835      	ldr	r0, [pc, #212]	; (8007b00 <_printf_i+0x244>)
 8007a2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a30:	6829      	ldr	r1, [r5, #0]
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a38:	6029      	str	r1, [r5, #0]
 8007a3a:	061d      	lsls	r5, r3, #24
 8007a3c:	d514      	bpl.n	8007a68 <_printf_i+0x1ac>
 8007a3e:	07df      	lsls	r7, r3, #31
 8007a40:	bf44      	itt	mi
 8007a42:	f043 0320 	orrmi.w	r3, r3, #32
 8007a46:	6023      	strmi	r3, [r4, #0]
 8007a48:	b91e      	cbnz	r6, 8007a52 <_printf_i+0x196>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	f023 0320 	bic.w	r3, r3, #32
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	2310      	movs	r3, #16
 8007a54:	e7b0      	b.n	80079b8 <_printf_i+0xfc>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	f043 0320 	orr.w	r3, r3, #32
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	2378      	movs	r3, #120	; 0x78
 8007a60:	4828      	ldr	r0, [pc, #160]	; (8007b04 <_printf_i+0x248>)
 8007a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a66:	e7e3      	b.n	8007a30 <_printf_i+0x174>
 8007a68:	0659      	lsls	r1, r3, #25
 8007a6a:	bf48      	it	mi
 8007a6c:	b2b6      	uxthmi	r6, r6
 8007a6e:	e7e6      	b.n	8007a3e <_printf_i+0x182>
 8007a70:	4615      	mov	r5, r2
 8007a72:	e7bb      	b.n	80079ec <_printf_i+0x130>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	6826      	ldr	r6, [r4, #0]
 8007a78:	6961      	ldr	r1, [r4, #20]
 8007a7a:	1d18      	adds	r0, r3, #4
 8007a7c:	6028      	str	r0, [r5, #0]
 8007a7e:	0635      	lsls	r5, r6, #24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0x1cc>
 8007a84:	6019      	str	r1, [r3, #0]
 8007a86:	e002      	b.n	8007a8e <_printf_i+0x1d2>
 8007a88:	0670      	lsls	r0, r6, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0x1c8>
 8007a8c:	8019      	strh	r1, [r3, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6123      	str	r3, [r4, #16]
 8007a92:	4615      	mov	r5, r2
 8007a94:	e7ba      	b.n	8007a0c <_printf_i+0x150>
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	602a      	str	r2, [r5, #0]
 8007a9c:	681d      	ldr	r5, [r3, #0]
 8007a9e:	6862      	ldr	r2, [r4, #4]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7f8 fc2c 	bl	8000300 <memchr>
 8007aa8:	b108      	cbz	r0, 8007aae <_printf_i+0x1f2>
 8007aaa:	1b40      	subs	r0, r0, r5
 8007aac:	6060      	str	r0, [r4, #4]
 8007aae:	6863      	ldr	r3, [r4, #4]
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab8:	e7a8      	b.n	8007a0c <_printf_i+0x150>
 8007aba:	6923      	ldr	r3, [r4, #16]
 8007abc:	462a      	mov	r2, r5
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	47d0      	blx	sl
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d0ab      	beq.n	8007a20 <_printf_i+0x164>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	079b      	lsls	r3, r3, #30
 8007acc:	d413      	bmi.n	8007af6 <_printf_i+0x23a>
 8007ace:	68e0      	ldr	r0, [r4, #12]
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	4298      	cmp	r0, r3
 8007ad4:	bfb8      	it	lt
 8007ad6:	4618      	movlt	r0, r3
 8007ad8:	e7a4      	b.n	8007a24 <_printf_i+0x168>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4632      	mov	r2, r6
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	47d0      	blx	sl
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d09b      	beq.n	8007a20 <_printf_i+0x164>
 8007ae8:	3501      	adds	r5, #1
 8007aea:	68e3      	ldr	r3, [r4, #12]
 8007aec:	9903      	ldr	r1, [sp, #12]
 8007aee:	1a5b      	subs	r3, r3, r1
 8007af0:	42ab      	cmp	r3, r5
 8007af2:	dcf2      	bgt.n	8007ada <_printf_i+0x21e>
 8007af4:	e7eb      	b.n	8007ace <_printf_i+0x212>
 8007af6:	2500      	movs	r5, #0
 8007af8:	f104 0619 	add.w	r6, r4, #25
 8007afc:	e7f5      	b.n	8007aea <_printf_i+0x22e>
 8007afe:	bf00      	nop
 8007b00:	08007ffd 	.word	0x08007ffd
 8007b04:	0800800e 	.word	0x0800800e

08007b08 <memcpy>:
 8007b08:	440a      	add	r2, r1
 8007b0a:	4291      	cmp	r1, r2
 8007b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b10:	d100      	bne.n	8007b14 <memcpy+0xc>
 8007b12:	4770      	bx	lr
 8007b14:	b510      	push	{r4, lr}
 8007b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	d1f9      	bne.n	8007b16 <memcpy+0xe>
 8007b22:	bd10      	pop	{r4, pc}

08007b24 <memmove>:
 8007b24:	4288      	cmp	r0, r1
 8007b26:	b510      	push	{r4, lr}
 8007b28:	eb01 0402 	add.w	r4, r1, r2
 8007b2c:	d902      	bls.n	8007b34 <memmove+0x10>
 8007b2e:	4284      	cmp	r4, r0
 8007b30:	4623      	mov	r3, r4
 8007b32:	d807      	bhi.n	8007b44 <memmove+0x20>
 8007b34:	1e43      	subs	r3, r0, #1
 8007b36:	42a1      	cmp	r1, r4
 8007b38:	d008      	beq.n	8007b4c <memmove+0x28>
 8007b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b42:	e7f8      	b.n	8007b36 <memmove+0x12>
 8007b44:	4402      	add	r2, r0
 8007b46:	4601      	mov	r1, r0
 8007b48:	428a      	cmp	r2, r1
 8007b4a:	d100      	bne.n	8007b4e <memmove+0x2a>
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b56:	e7f7      	b.n	8007b48 <memmove+0x24>

08007b58 <_free_r>:
 8007b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b5a:	2900      	cmp	r1, #0
 8007b5c:	d044      	beq.n	8007be8 <_free_r+0x90>
 8007b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b62:	9001      	str	r0, [sp, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f1a1 0404 	sub.w	r4, r1, #4
 8007b6a:	bfb8      	it	lt
 8007b6c:	18e4      	addlt	r4, r4, r3
 8007b6e:	f000 f913 	bl	8007d98 <__malloc_lock>
 8007b72:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <_free_r+0x94>)
 8007b74:	9801      	ldr	r0, [sp, #4]
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	b933      	cbnz	r3, 8007b88 <_free_r+0x30>
 8007b7a:	6063      	str	r3, [r4, #4]
 8007b7c:	6014      	str	r4, [r2, #0]
 8007b7e:	b003      	add	sp, #12
 8007b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b84:	f000 b90e 	b.w	8007da4 <__malloc_unlock>
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	d908      	bls.n	8007b9e <_free_r+0x46>
 8007b8c:	6825      	ldr	r5, [r4, #0]
 8007b8e:	1961      	adds	r1, r4, r5
 8007b90:	428b      	cmp	r3, r1
 8007b92:	bf01      	itttt	eq
 8007b94:	6819      	ldreq	r1, [r3, #0]
 8007b96:	685b      	ldreq	r3, [r3, #4]
 8007b98:	1949      	addeq	r1, r1, r5
 8007b9a:	6021      	streq	r1, [r4, #0]
 8007b9c:	e7ed      	b.n	8007b7a <_free_r+0x22>
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	b10b      	cbz	r3, 8007ba8 <_free_r+0x50>
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	d9fa      	bls.n	8007b9e <_free_r+0x46>
 8007ba8:	6811      	ldr	r1, [r2, #0]
 8007baa:	1855      	adds	r5, r2, r1
 8007bac:	42a5      	cmp	r5, r4
 8007bae:	d10b      	bne.n	8007bc8 <_free_r+0x70>
 8007bb0:	6824      	ldr	r4, [r4, #0]
 8007bb2:	4421      	add	r1, r4
 8007bb4:	1854      	adds	r4, r2, r1
 8007bb6:	42a3      	cmp	r3, r4
 8007bb8:	6011      	str	r1, [r2, #0]
 8007bba:	d1e0      	bne.n	8007b7e <_free_r+0x26>
 8007bbc:	681c      	ldr	r4, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	6053      	str	r3, [r2, #4]
 8007bc2:	4421      	add	r1, r4
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	e7da      	b.n	8007b7e <_free_r+0x26>
 8007bc8:	d902      	bls.n	8007bd0 <_free_r+0x78>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	6003      	str	r3, [r0, #0]
 8007bce:	e7d6      	b.n	8007b7e <_free_r+0x26>
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	1961      	adds	r1, r4, r5
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	bf04      	itt	eq
 8007bd8:	6819      	ldreq	r1, [r3, #0]
 8007bda:	685b      	ldreq	r3, [r3, #4]
 8007bdc:	6063      	str	r3, [r4, #4]
 8007bde:	bf04      	itt	eq
 8007be0:	1949      	addeq	r1, r1, r5
 8007be2:	6021      	streq	r1, [r4, #0]
 8007be4:	6054      	str	r4, [r2, #4]
 8007be6:	e7ca      	b.n	8007b7e <_free_r+0x26>
 8007be8:	b003      	add	sp, #12
 8007bea:	bd30      	pop	{r4, r5, pc}
 8007bec:	24000670 	.word	0x24000670

08007bf0 <sbrk_aligned>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	4e0e      	ldr	r6, [pc, #56]	; (8007c2c <sbrk_aligned+0x3c>)
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	6831      	ldr	r1, [r6, #0]
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	b911      	cbnz	r1, 8007c02 <sbrk_aligned+0x12>
 8007bfc:	f000 f8bc 	bl	8007d78 <_sbrk_r>
 8007c00:	6030      	str	r0, [r6, #0]
 8007c02:	4621      	mov	r1, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 f8b7 	bl	8007d78 <_sbrk_r>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d00a      	beq.n	8007c24 <sbrk_aligned+0x34>
 8007c0e:	1cc4      	adds	r4, r0, #3
 8007c10:	f024 0403 	bic.w	r4, r4, #3
 8007c14:	42a0      	cmp	r0, r4
 8007c16:	d007      	beq.n	8007c28 <sbrk_aligned+0x38>
 8007c18:	1a21      	subs	r1, r4, r0
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f000 f8ac 	bl	8007d78 <_sbrk_r>
 8007c20:	3001      	adds	r0, #1
 8007c22:	d101      	bne.n	8007c28 <sbrk_aligned+0x38>
 8007c24:	f04f 34ff 	mov.w	r4, #4294967295
 8007c28:	4620      	mov	r0, r4
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	24000674 	.word	0x24000674

08007c30 <_malloc_r>:
 8007c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c34:	1ccd      	adds	r5, r1, #3
 8007c36:	f025 0503 	bic.w	r5, r5, #3
 8007c3a:	3508      	adds	r5, #8
 8007c3c:	2d0c      	cmp	r5, #12
 8007c3e:	bf38      	it	cc
 8007c40:	250c      	movcc	r5, #12
 8007c42:	2d00      	cmp	r5, #0
 8007c44:	4607      	mov	r7, r0
 8007c46:	db01      	blt.n	8007c4c <_malloc_r+0x1c>
 8007c48:	42a9      	cmp	r1, r5
 8007c4a:	d905      	bls.n	8007c58 <_malloc_r+0x28>
 8007c4c:	230c      	movs	r3, #12
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	2600      	movs	r6, #0
 8007c52:	4630      	mov	r0, r6
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	4e2e      	ldr	r6, [pc, #184]	; (8007d14 <_malloc_r+0xe4>)
 8007c5a:	f000 f89d 	bl	8007d98 <__malloc_lock>
 8007c5e:	6833      	ldr	r3, [r6, #0]
 8007c60:	461c      	mov	r4, r3
 8007c62:	bb34      	cbnz	r4, 8007cb2 <_malloc_r+0x82>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4638      	mov	r0, r7
 8007c68:	f7ff ffc2 	bl	8007bf0 <sbrk_aligned>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	4604      	mov	r4, r0
 8007c70:	d14d      	bne.n	8007d0e <_malloc_r+0xde>
 8007c72:	6834      	ldr	r4, [r6, #0]
 8007c74:	4626      	mov	r6, r4
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	d140      	bne.n	8007cfc <_malloc_r+0xcc>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4638      	mov	r0, r7
 8007c80:	eb04 0803 	add.w	r8, r4, r3
 8007c84:	f000 f878 	bl	8007d78 <_sbrk_r>
 8007c88:	4580      	cmp	r8, r0
 8007c8a:	d13a      	bne.n	8007d02 <_malloc_r+0xd2>
 8007c8c:	6821      	ldr	r1, [r4, #0]
 8007c8e:	3503      	adds	r5, #3
 8007c90:	1a6d      	subs	r5, r5, r1
 8007c92:	f025 0503 	bic.w	r5, r5, #3
 8007c96:	3508      	adds	r5, #8
 8007c98:	2d0c      	cmp	r5, #12
 8007c9a:	bf38      	it	cc
 8007c9c:	250c      	movcc	r5, #12
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7ff ffa5 	bl	8007bf0 <sbrk_aligned>
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d02b      	beq.n	8007d02 <_malloc_r+0xd2>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	442b      	add	r3, r5
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	e00e      	b.n	8007cd0 <_malloc_r+0xa0>
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	1b52      	subs	r2, r2, r5
 8007cb6:	d41e      	bmi.n	8007cf6 <_malloc_r+0xc6>
 8007cb8:	2a0b      	cmp	r2, #11
 8007cba:	d916      	bls.n	8007cea <_malloc_r+0xba>
 8007cbc:	1961      	adds	r1, r4, r5
 8007cbe:	42a3      	cmp	r3, r4
 8007cc0:	6025      	str	r5, [r4, #0]
 8007cc2:	bf18      	it	ne
 8007cc4:	6059      	strne	r1, [r3, #4]
 8007cc6:	6863      	ldr	r3, [r4, #4]
 8007cc8:	bf08      	it	eq
 8007cca:	6031      	streq	r1, [r6, #0]
 8007ccc:	5162      	str	r2, [r4, r5]
 8007cce:	604b      	str	r3, [r1, #4]
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f104 060b 	add.w	r6, r4, #11
 8007cd6:	f000 f865 	bl	8007da4 <__malloc_unlock>
 8007cda:	f026 0607 	bic.w	r6, r6, #7
 8007cde:	1d23      	adds	r3, r4, #4
 8007ce0:	1af2      	subs	r2, r6, r3
 8007ce2:	d0b6      	beq.n	8007c52 <_malloc_r+0x22>
 8007ce4:	1b9b      	subs	r3, r3, r6
 8007ce6:	50a3      	str	r3, [r4, r2]
 8007ce8:	e7b3      	b.n	8007c52 <_malloc_r+0x22>
 8007cea:	6862      	ldr	r2, [r4, #4]
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	bf0c      	ite	eq
 8007cf0:	6032      	streq	r2, [r6, #0]
 8007cf2:	605a      	strne	r2, [r3, #4]
 8007cf4:	e7ec      	b.n	8007cd0 <_malloc_r+0xa0>
 8007cf6:	4623      	mov	r3, r4
 8007cf8:	6864      	ldr	r4, [r4, #4]
 8007cfa:	e7b2      	b.n	8007c62 <_malloc_r+0x32>
 8007cfc:	4634      	mov	r4, r6
 8007cfe:	6876      	ldr	r6, [r6, #4]
 8007d00:	e7b9      	b.n	8007c76 <_malloc_r+0x46>
 8007d02:	230c      	movs	r3, #12
 8007d04:	603b      	str	r3, [r7, #0]
 8007d06:	4638      	mov	r0, r7
 8007d08:	f000 f84c 	bl	8007da4 <__malloc_unlock>
 8007d0c:	e7a1      	b.n	8007c52 <_malloc_r+0x22>
 8007d0e:	6025      	str	r5, [r4, #0]
 8007d10:	e7de      	b.n	8007cd0 <_malloc_r+0xa0>
 8007d12:	bf00      	nop
 8007d14:	24000670 	.word	0x24000670

08007d18 <_realloc_r>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	4614      	mov	r4, r2
 8007d20:	460e      	mov	r6, r1
 8007d22:	b921      	cbnz	r1, 8007d2e <_realloc_r+0x16>
 8007d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	4611      	mov	r1, r2
 8007d2a:	f7ff bf81 	b.w	8007c30 <_malloc_r>
 8007d2e:	b92a      	cbnz	r2, 8007d3c <_realloc_r+0x24>
 8007d30:	f7ff ff12 	bl	8007b58 <_free_r>
 8007d34:	4625      	mov	r5, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	f000 f838 	bl	8007db0 <_malloc_usable_size_r>
 8007d40:	4284      	cmp	r4, r0
 8007d42:	4607      	mov	r7, r0
 8007d44:	d802      	bhi.n	8007d4c <_realloc_r+0x34>
 8007d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d4a:	d812      	bhi.n	8007d72 <_realloc_r+0x5a>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f7ff ff6e 	bl	8007c30 <_malloc_r>
 8007d54:	4605      	mov	r5, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0ed      	beq.n	8007d36 <_realloc_r+0x1e>
 8007d5a:	42bc      	cmp	r4, r7
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4631      	mov	r1, r6
 8007d60:	bf28      	it	cs
 8007d62:	463a      	movcs	r2, r7
 8007d64:	f7ff fed0 	bl	8007b08 <memcpy>
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f7ff fef4 	bl	8007b58 <_free_r>
 8007d70:	e7e1      	b.n	8007d36 <_realloc_r+0x1e>
 8007d72:	4635      	mov	r5, r6
 8007d74:	e7df      	b.n	8007d36 <_realloc_r+0x1e>
	...

08007d78 <_sbrk_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d06      	ldr	r5, [pc, #24]	; (8007d94 <_sbrk_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7f8 ffc8 	bl	8000d18 <_sbrk>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_sbrk_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_sbrk_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	24000678 	.word	0x24000678

08007d98 <__malloc_lock>:
 8007d98:	4801      	ldr	r0, [pc, #4]	; (8007da0 <__malloc_lock+0x8>)
 8007d9a:	f000 b811 	b.w	8007dc0 <__retarget_lock_acquire_recursive>
 8007d9e:	bf00      	nop
 8007da0:	2400067c 	.word	0x2400067c

08007da4 <__malloc_unlock>:
 8007da4:	4801      	ldr	r0, [pc, #4]	; (8007dac <__malloc_unlock+0x8>)
 8007da6:	f000 b80c 	b.w	8007dc2 <__retarget_lock_release_recursive>
 8007daa:	bf00      	nop
 8007dac:	2400067c 	.word	0x2400067c

08007db0 <_malloc_usable_size_r>:
 8007db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db4:	1f18      	subs	r0, r3, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bfbc      	itt	lt
 8007dba:	580b      	ldrlt	r3, [r1, r0]
 8007dbc:	18c0      	addlt	r0, r0, r3
 8007dbe:	4770      	bx	lr

08007dc0 <__retarget_lock_acquire_recursive>:
 8007dc0:	4770      	bx	lr

08007dc2 <__retarget_lock_release_recursive>:
 8007dc2:	4770      	bx	lr

08007dc4 <_init>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	bf00      	nop
 8007dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dca:	bc08      	pop	{r3}
 8007dcc:	469e      	mov	lr, r3
 8007dce:	4770      	bx	lr

08007dd0 <_fini>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr
