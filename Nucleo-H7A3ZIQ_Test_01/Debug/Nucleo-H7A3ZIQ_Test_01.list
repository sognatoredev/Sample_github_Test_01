
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d50  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000060c  24000074  080082c8  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000680  080082c8  00020680  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000183d5  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c98  00000000  00000000  00038477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001118  00000000  00000000  0003b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fe0  00000000  00000000  0003c228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031df5  00000000  00000000  0003d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000180b2  00000000  00000000  0006effd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140092  00000000  00000000  000870af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c7141  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a54  00000000  00000000  001c7194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007fe8 	.word	0x08007fe8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08007fe8 	.word	0x08007fe8

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <LED_Dimming>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
static void LED_Dimming (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
    if (dutycontrol_flag == 0x00)
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <LED_Dimming+0x74>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d116      	bne.n	80006de <LED_Dimming+0x3a>
    {
        if (TIM1_DutyControl_cnt > 20)
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <LED_Dimming+0x78>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b14      	cmp	r3, #20
 80006b6:	d907      	bls.n	80006c8 <LED_Dimming+0x24>
        {
            TIM1_DutyControl_cnt = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <LED_Dimming+0x78>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

            htim12.Instance->CCR1++;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <LED_Dimming+0x7c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c4:	3201      	adds	r2, #1
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (htim12.Instance->CCR1 >= htim12.Init.Period)
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <LED_Dimming+0x7c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <LED_Dimming+0x7c>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d31b      	bcc.n	800070e <LED_Dimming+0x6a>
        {
            dutycontrol_flag = 0x01;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <LED_Dimming+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]

            // sprintf(uart3_tx_buf, " TIM12 CCR1 : %d\r\n", );
            // HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
        }
    }
}
 80006dc:	e017      	b.n	800070e <LED_Dimming+0x6a>
    else if (dutycontrol_flag == 0x01)
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <LED_Dimming+0x74>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d113      	bne.n	800070e <LED_Dimming+0x6a>
        if (TIM1_DutyControl_cnt > 20)
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <LED_Dimming+0x78>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d907      	bls.n	80006fe <LED_Dimming+0x5a>
            TIM1_DutyControl_cnt = 0;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <LED_Dimming+0x78>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
            htim12.Instance->CCR1--;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <LED_Dimming+0x7c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fa:	3a01      	subs	r2, #1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
        if (htim12.Instance->CCR1 == 0)
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <LED_Dimming+0x7c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <LED_Dimming+0x6a>
            dutycontrol_flag = 0x00;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <LED_Dimming+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	2400066b 	.word	0x2400066b
 800071c:	2400025c 	.word	0x2400025c
 8000720:	24000178 	.word	0x24000178

08000724 <LED_Process>:

void LED_Process (void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    //if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
    if (TIM1_CNT >= 500) // 1ms period Timer2 Counter.
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <LED_Process+0x50>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000730:	d307      	bcc.n	8000742 <LED_Process+0x1e>
    {
        TIM1_CNT = 0;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <LED_Process+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]

        HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000738:	2101      	movs	r1, #1
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <LED_Process+0x54>)
 800073c:	f001 fb57 	bl	8001dee <HAL_GPIO_TogglePin>
 8000740:	e013      	b.n	800076a <LED_Process+0x46>
        // HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
        //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    }
    else if (TIM2_CNT >= 10) // 100ms * 9 period Timer2 Counter.
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <LED_Process+0x58>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b09      	cmp	r3, #9
 8000748:	d907      	bls.n	800075a <LED_Process+0x36>
    {
        TIM2_CNT = 0;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <LED_Process+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000750:	2102      	movs	r1, #2
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LED_Process+0x5c>)
 8000754:	f001 fb4b 	bl	8001dee <HAL_GPIO_TogglePin>
 8000758:	e007      	b.n	800076a <LED_Process+0x46>
    }
    else if (TIM8_CNT >= 100000) // 10us * 99999 period Timer8 Counter.
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <LED_Process+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LED_Process+0x64>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d902      	bls.n	800076a <LED_Process+0x46>
    {
        TIM8_CNT = 0;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LED_Process+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
        //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    }

    LED_Dimming();
 800076a:	f7ff ff9b 	bl	80006a4 <LED_Dimming>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	24000258 	.word	0x24000258
 8000778:	58020400 	.word	0x58020400
 800077c:	24000260 	.word	0x24000260
 8000780:	58021000 	.word	0x58021000
 8000784:	24000264 	.word	0x24000264
 8000788:	0001869f 	.word	0x0001869f

0800078c <Button_Process>:
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
    }
}
#else
void Button_Process (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  if (userButton_state == 0x01)
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <Button_Process+0x3c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d114      	bne.n	80007c2 <Button_Process+0x36>
  {
    userButton_state = 0x00;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <Button_Process+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
    sprintf(uart3_tx_buf, " Button Interrupt callback. Input Count : %d\r\n", userButton_cnt);
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <Button_Process+0x40>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	490a      	ldr	r1, [pc, #40]	; (80007d0 <Button_Process+0x44>)
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <Button_Process+0x48>)
 80007a8:	f006 ffb0 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <Button_Process+0x48>)
 80007ae:	f7ff fd9f 	bl	80002f0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	4906      	ldr	r1, [pc, #24]	; (80007d4 <Button_Process+0x48>)
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <Button_Process+0x4c>)
 80007be:	f005 fd55 	bl	800626c <HAL_UART_Transmit>
  }
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2400066a 	.word	0x2400066a
 80007cc:	24000668 	.word	0x24000668
 80007d0:	08008000 	.word	0x08008000
 80007d4:	24000268 	.word	0x24000268
 80007d8:	240001c4 	.word	0x240001c4

080007dc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b83      	ldr	r3, [pc, #524]	; (8000a00 <MX_GPIO_Init+0x224>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	4a81      	ldr	r2, [pc, #516]	; (8000a00 <MX_GPIO_Init+0x224>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000802:	4b7f      	ldr	r3, [pc, #508]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	623b      	str	r3, [r7, #32]
 800080e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000810:	4b7b      	ldr	r3, [pc, #492]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	4a7a      	ldr	r2, [pc, #488]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000820:	4b77      	ldr	r3, [pc, #476]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000826:	f003 0320 	and.w	r3, r3, #32
 800082a:	61fb      	str	r3, [r7, #28]
 800082c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b74      	ldr	r3, [pc, #464]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	4a72      	ldr	r2, [pc, #456]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083e:	4b70      	ldr	r3, [pc, #448]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	4b6c      	ldr	r3, [pc, #432]	; (8000a00 <MX_GPIO_Init+0x224>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	4a6b      	ldr	r2, [pc, #428]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085c:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <MX_GPIO_Init+0x224>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b65      	ldr	r3, [pc, #404]	; (8000a00 <MX_GPIO_Init+0x224>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	4a63      	ldr	r2, [pc, #396]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <MX_GPIO_Init+0x224>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000888:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <MX_GPIO_Init+0x224>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	4a5c      	ldr	r2, [pc, #368]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000898:	4b59      	ldr	r3, [pc, #356]	; (8000a00 <MX_GPIO_Init+0x224>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <MX_GPIO_Init+0x224>)
 80008a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ac:	4a54      	ldr	r2, [pc, #336]	; (8000a00 <MX_GPIO_Init+0x224>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b6:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <MX_GPIO_Init+0x224>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <MX_GPIO_Init+0x224>)
 80008c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ca:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <MX_GPIO_Init+0x224>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <MX_GPIO_Init+0x224>)
 80008d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e8:	4846      	ldr	r0, [pc, #280]	; (8000a04 <MX_GPIO_Init+0x228>)
 80008ea:	f001 fa67 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	4845      	ldr	r0, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80008f4:	f001 fa62 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2102      	movs	r1, #2
 80008fc:	4843      	ldr	r0, [pc, #268]	; (8000a0c <MX_GPIO_Init+0x230>)
 80008fe:	f001 fa5d 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	483d      	ldr	r0, [pc, #244]	; (8000a10 <MX_GPIO_Init+0x234>)
 800091a:	f001 f89f 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4833      	ldr	r0, [pc, #204]	; (8000a04 <MX_GPIO_Init+0x228>)
 8000938:	f001 f890 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800093c:	2301      	movs	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	482d      	ldr	r0, [pc, #180]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000954:	f001 f882 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x238>)
 800096e:	f001 f875 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4824      	ldr	r0, [pc, #144]	; (8000a18 <MX_GPIO_Init+0x23c>)
 8000988:	f001 f868 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800099e:	230a      	movs	r3, #10
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <MX_GPIO_Init+0x23c>)
 80009aa:	f001 f857 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_GPIO_Init+0x23c>)
 80009c8:	f001 f848 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009cc:	2302      	movs	r3, #2
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <MX_GPIO_Init+0x230>)
 80009e4:	f001 f83a 	bl	8001a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2028      	movs	r0, #40	; 0x28
 80009ee:	f001 f800 	bl	80019f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f2:	2028      	movs	r0, #40	; 0x28
 80009f4:	f001 f817 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 80009f8:	bf00      	nop
 80009fa:	3738      	adds	r7, #56	; 0x38
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	58024400 	.word	0x58024400
 8000a04:	58021400 	.word	0x58021400
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	58021000 	.word	0x58021000
 8000a10:	58020800 	.word	0x58020800
 8000a14:	58021800 	.word	0x58021800
 8000a18:	58020000 	.word	0x58020000

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 fe56 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f830 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f7ff fed8 	bl	80007dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a2c:	f000 fc5e 	bl	80012ec <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a30:	f000 fd12 	bl	8001458 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000a34:	f000 fa22 	bl	8000e7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a38:	f000 fa74 	bl	8000f24 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a3c:	f000 fac2 	bl	8000fc4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a40:	f000 fb14 	bl	800106c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  BootMessagePrint();
 8000a44:	f000 fd10 	bl	8001468 <BootMessagePrint>
  GetClockSourcePrint();
 8000a48:	f000 fd8a 	bl	8001560 <GetClockSourcePrint>

  HAL_TIM_Base_Start_IT(&htim1);
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <main+0x5c>)
 8000a4e:	f004 f853 	bl	8004af8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <main+0x60>)
 8000a54:	f004 f850 	bl	8004af8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <main+0x64>)
 8000a5a:	f004 f84d 	bl	8004af8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <main+0x68>)
 8000a62:	f004 f923 	bl	8004cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000a66:	2100      	movs	r1, #0
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <main+0x68>)
 8000a6a:	f004 fa2d 	bl	8004ec8 <HAL_TIM_PWM_Start_IT>
    // {
    //   htim12.Instance->CCR1 = i;
    //   //HAL_Delay(20);  // 
    // }

    LED_Process();
 8000a6e:	f7ff fe59 	bl	8000724 <LED_Process>
    Button_Process();
 8000a72:	f7ff fe8b 	bl	800078c <Button_Process>
    LED_Process();
 8000a76:	e7fa      	b.n	8000a6e <main+0x52>
 8000a78:	24000094 	.word	0x24000094
 8000a7c:	240000e0 	.word	0x240000e0
 8000a80:	2400012c 	.word	0x2400012c
 8000a84:	24000178 	.word	0x24000178

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09c      	sub	sp, #112	; 0x70
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	224c      	movs	r2, #76	; 0x4c
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f006 fe30 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 fe2a 	bl	80076fc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <SystemClock_Config+0xe4>)
 8000aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8000aae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f001 f9d0 	bl	8001e58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <SystemClock_Config+0xe8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a2b      	ldr	r2, [pc, #172]	; (8000b70 <SystemClock_Config+0xe8>)
 8000ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <SystemClock_Config+0xe8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad4:	bf00      	nop
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <SystemClock_Config+0xe8>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae2:	d1f8      	bne.n	8000ad6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2321      	movs	r3, #33	; 0x21
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000afe:	2346      	movs	r3, #70	; 0x46
 8000b00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b06:	2304      	movs	r3, #4
 8000b08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f9f4 	bl	8001f0c <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b2a:	f000 f823 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	233f      	movs	r3, #63	; 0x3f
 8000b30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2303      	movs	r3, #3
 8000b34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b4c:	2340      	movs	r3, #64	; 0x40
 8000b4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2107      	movs	r1, #7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fe0b 	bl	8002770 <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000b60:	f000 f808 	bl	8000b74 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3770      	adds	r7, #112	; 0x70
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	58024800 	.word	0x58024800

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b8c:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f000 fe17 	bl	80017f4 <HAL_Delay>
 8000bc6:	e7fa      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 fdd4 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <TIM1_UP_IRQHandler+0x10>)
 8000c16:	f004 fab1 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	24000094 	.word	0x24000094

08000c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM2_IRQHandler+0x10>)
 8000c2a:	f004 faa7 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	240000e0 	.word	0x240000e0

08000c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c40:	f001 f8ef 	bl	8001e22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000c4e:	f004 fa95 	bl	800517c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000c54:	f004 fa92 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2400012c 	.word	0x2400012c
 8000c60:	24000178 	.word	0x24000178

08000c64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000c6a:	f004 fa87 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2400012c 	.word	0x2400012c

08000c78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10a      	bne.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
    TIM1_CNT++;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c92:	6013      	str	r3, [r2, #0]
    TIM1_DutyControl_cnt++;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c9c:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
  {
    TIM8_CNT++;
  }
}
 8000c9e:	e014      	b.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d105      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x3e>
    TIM2_CNT++;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	e009      	b.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d104      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x52>
    TIM8_CNT++;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cc8:	6013      	str	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	24000258 	.word	0x24000258
 8000ce0:	2400025c 	.word	0x2400025c
 8000ce4:	24000260 	.word	0x24000260
 8000ce8:	40010400 	.word	0x40010400
 8000cec:	24000264 	.word	0x24000264

08000cf0 <HAL_GPIO_EXTI_Callback>:
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
  userButton_state = 0x01;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
  userButton_cnt++;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d0a:	801a      	strh	r2, [r3, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	2400066a 	.word	0x2400066a
 8000d1c:	24000668 	.word	0x24000668

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f006 fcaa 	bl	80076a8 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24100000 	.word	0x24100000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	24000090 	.word	0x24000090
 8000d88:	24000680 	.word	0x24000680

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <SystemInit+0xd0>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <SystemInit+0xd0>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <SystemInit+0xd4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d807      	bhi.n	8000dbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <SystemInit+0xd4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 030f 	bic.w	r3, r3, #15
 8000db4:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <SystemInit+0xd4>)
 8000db6:	f043 0303 	orr.w	r3, r3, #3
 8000dba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <SystemInit+0xd8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <SystemInit+0xd8>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <SystemInit+0xd8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <SystemInit+0xd8>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4924      	ldr	r1, [pc, #144]	; (8000e64 <SystemInit+0xd8>)
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <SystemInit+0xdc>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <SystemInit+0xd4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <SystemInit+0xd4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 030f 	bic.w	r3, r3, #15
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <SystemInit+0xd4>)
 8000df0:	f043 0303 	orr.w	r3, r3, #3
 8000df4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <SystemInit+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <SystemInit+0xd8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <SystemInit+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <SystemInit+0xd8>)
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <SystemInit+0xe0>)
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <SystemInit+0xd8>)
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <SystemInit+0xe4>)
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <SystemInit+0xd8>)
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <SystemInit+0xe8>)
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <SystemInit+0xd8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <SystemInit+0xd8>)
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <SystemInit+0xe8>)
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <SystemInit+0xd8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <SystemInit+0xd8>)
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <SystemInit+0xe8>)
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <SystemInit+0xd8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <SystemInit+0xd8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <SystemInit+0xd8>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <SystemInit+0xd8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <SystemInit+0xec>)
 8000e4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	52002000 	.word	0x52002000
 8000e64:	58024400 	.word	0x58024400
 8000e68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e6c:	02020200 	.word	0x02020200
 8000e70:	01ff0000 	.word	0x01ff0000
 8000e74:	01010280 	.word	0x01010280
 8000e78:	52004000 	.word	0x52004000

08000e7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000e9c:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <MX_TIM1_Init+0xa4>)
 8000e9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000ea2:	f240 1217 	movw	r2, #279	; 0x117
 8000ea6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000eb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000eca:	f003 fdbd 	bl	8004a48 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f7ff fe4e 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000ee6:	f004 fb65 	bl	80055b4 <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ef0:	f7ff fe40 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_TIM1_Init+0xa0>)
 8000f06:	f005 f8b5 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f10:	f7ff fe30 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	24000094 	.word	0x24000094
 8000f20:	40010000 	.word	0x40010000

08000f24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f4c:	f240 1217 	movw	r2, #279	; 0x117
 8000f50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f5a:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f6c:	f003 fd6c 	bl	8004a48 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f76:	f7ff fdfd 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f88:	f004 fb14 	bl	80055b4 <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f92:	f7ff fdef 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000fa4:	f005 f866 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fae:	f7ff fde1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	240000e0 	.word	0x240000e0
 8000fc0:	0001869f 	.word	0x0001869f

08000fc4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_TIM8_Init+0xa0>)
 8000fe4:	4a20      	ldr	r2, [pc, #128]	; (8001068 <MX_TIM8_Init+0xa4>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_TIM8_Init+0xa0>)
 8000fea:	f240 1217 	movw	r2, #279	; 0x117
 8000fee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_TIM8_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_TIM8_Init+0xa0>)
 8000ff8:	2209      	movs	r2, #9
 8000ffa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_TIM8_Init+0xa0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_TIM8_Init+0xa0>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_TIM8_Init+0xa0>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800100e:	4815      	ldr	r0, [pc, #84]	; (8001064 <MX_TIM8_Init+0xa0>)
 8001010:	f003 fd1a 	bl	8004a48 <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800101a:	f7ff fdab 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_TIM8_Init+0xa0>)
 800102c:	f004 fac2 	bl	80055b4 <HAL_TIM_ConfigClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001036:	f7ff fd9d 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_TIM8_Init+0xa0>)
 800104c:	f005 f812 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001056:	f7ff fd8d 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3720      	adds	r7, #32
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2400012c 	.word	0x2400012c
 8001068:	40010400 	.word	0x40010400

0800106c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010a0:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <MX_TIM12_Init+0xec>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 27999;
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010a6:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80010aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010b4:	2263      	movs	r2, #99	; 0x63
 80010b6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80010c4:	4823      	ldr	r0, [pc, #140]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010c6:	f003 fcbf 	bl	8004a48 <HAL_TIM_Base_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80010d0:	f7ff fd50 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80010da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010de:	4619      	mov	r1, r3
 80010e0:	481c      	ldr	r0, [pc, #112]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010e2:	f004 fa67 	bl	80055b4 <HAL_TIM_ConfigClockSource>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80010ec:	f7ff fd42 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM12_Init+0xe8>)
 80010f2:	f003 fd79 	bl	8004be8 <HAL_TIM_PWM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80010fc:	f7ff fd3a 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_TIM12_Init+0xe8>)
 8001110:	f004 ffb0 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800111a:	f7ff fd2b 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM12_Init+0xe8>)
 8001136:	f004 f929 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001140:	f7ff fd18 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM12_Init+0xe8>)
 8001146:	f000 f895 	bl	8001274 <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	; 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000178 	.word	0x24000178
 8001158:	40001800 	.word	0x40001800

0800115c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a3e      	ldr	r2, [pc, #248]	; (8001264 <HAL_TIM_Base_MspInit+0x108>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d117      	bne.n	800119e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 8001170:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001174:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 8001180:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2019      	movs	r0, #25
 8001192:	f000 fc2e 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001196:	2019      	movs	r0, #25
 8001198:	f000 fc45 	bl	8001a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800119c:	e05d      	b.n	800125a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a6:	d117      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 80011aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011ae:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 80011ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	201c      	movs	r0, #28
 80011cc:	f000 fc11 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d0:	201c      	movs	r0, #28
 80011d2:	f000 fc28 	bl	8001a26 <HAL_NVIC_EnableIRQ>
}
 80011d6:	e040      	b.n	800125a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM8)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_TIM_Base_MspInit+0x110>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d11f      	bne.n	8001222 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 80011e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 80011f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	202b      	movs	r0, #43	; 0x2b
 8001206:	f000 fbf4 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800120a:	202b      	movs	r0, #43	; 0x2b
 800120c:	f000 fc0b 	bl	8001a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	202c      	movs	r0, #44	; 0x2c
 8001216:	f000 fbec 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800121a:	202c      	movs	r0, #44	; 0x2c
 800121c:	f000 fc03 	bl	8001a26 <HAL_NVIC_EnableIRQ>
}
 8001220:	e01b      	b.n	800125a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM12)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <HAL_TIM_Base_MspInit+0x114>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d116      	bne.n	800125a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 800122e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_TIM_Base_MspInit+0x10c>)
 800123e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	202b      	movs	r0, #43	; 0x2b
 8001250:	f000 fbcf 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001254:	202b      	movs	r0, #43	; 0x2b
 8001256:	f000 fbe6 	bl	8001a26 <HAL_NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40010000 	.word	0x40010000
 8001268:	58024400 	.word	0x58024400
 800126c:	40010400 	.word	0x40010400
 8001270:	40001800 	.word	0x40001800

08001274 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_TIM_MspPostInit+0x6c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d11f      	bne.n	80012d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_TIM_MspPostInit+0x70>)
 8001298:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_TIM_MspPostInit+0x70>)
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_TIM_MspPostInit+0x70>)
 80012a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_TIM_MspPostInit+0x74>)
 80012d2:	f000 fbc3 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40001800 	.word	0x40001800
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020400 	.word	0x58020400

080012ec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <MX_USART3_UART_Init+0x94>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001336:	f004 ff49 	bl	80061cc <HAL_UART_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001340:	f7ff fc18 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001348:	f006 f8e3 	bl	8007512 <HAL_UARTEx_SetTxFifoThreshold>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001352:	f7ff fc0f 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <MX_USART3_UART_Init+0x90>)
 800135a:	f006 f918 	bl	800758e <HAL_UARTEx_SetRxFifoThreshold>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001364:	f7ff fc06 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_USART3_UART_Init+0x90>)
 800136a:	f006 f899 	bl	80074a0 <HAL_UARTEx_DisableFifoMode>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001374:	f7ff fbfe 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	240001c4 	.word	0x240001c4
 8001380:	40004800 	.word	0x40004800

08001384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0ba      	sub	sp, #232	; 0xe8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	22c0      	movs	r2, #192	; 0xc0
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 f9a9 	bl	80076fc <memset>
  if(uartHandle->Instance==USART3)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a27      	ldr	r2, [pc, #156]	; (800144c <HAL_UART_MspInit+0xc8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d146      	bne.n	8001442 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b4:	f04f 0202 	mov.w	r2, #2
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fd5c 	bl	8002e88 <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013d6:	f7ff fbcd 	bl	8000b74 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_UART_MspInit+0xcc>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_UART_MspInit+0xcc>)
 800140a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001430:	2307      	movs	r3, #7
 8001432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001436:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_UART_MspInit+0xd0>)
 800143e:	f000 fb0d 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001442:	bf00      	nop
 8001444:	37e8      	adds	r7, #232	; 0xe8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40004800 	.word	0x40004800
 8001450:	58024400 	.word	0x58024400
 8001454:	58020c00 	.word	0x58020c00

08001458 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 800146c:	4930      	ldr	r1, [pc, #192]	; (8001530 <BootMessagePrint+0xc8>)
 800146e:	4831      	ldr	r0, [pc, #196]	; (8001534 <BootMessagePrint+0xcc>)
 8001470:	f006 f94c 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001474:	482f      	ldr	r0, [pc, #188]	; (8001534 <BootMessagePrint+0xcc>)
 8001476:	f7fe ff3b 	bl	80002f0 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	492c      	ldr	r1, [pc, #176]	; (8001534 <BootMessagePrint+0xcc>)
 8001484:	482c      	ldr	r0, [pc, #176]	; (8001538 <BootMessagePrint+0xd0>)
 8001486:	f004 fef1 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 800148a:	4a2c      	ldr	r2, [pc, #176]	; (800153c <BootMessagePrint+0xd4>)
 800148c:	492c      	ldr	r1, [pc, #176]	; (8001540 <BootMessagePrint+0xd8>)
 800148e:	4829      	ldr	r0, [pc, #164]	; (8001534 <BootMessagePrint+0xcc>)
 8001490:	f006 f93c 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001494:	4827      	ldr	r0, [pc, #156]	; (8001534 <BootMessagePrint+0xcc>)
 8001496:	f7fe ff2b 	bl	80002f0 <strlen>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	4924      	ldr	r1, [pc, #144]	; (8001534 <BootMessagePrint+0xcc>)
 80014a4:	4824      	ldr	r0, [pc, #144]	; (8001538 <BootMessagePrint+0xd0>)
 80014a6:	f004 fee1 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <BootMessagePrint+0xdc>)
 80014ac:	4926      	ldr	r1, [pc, #152]	; (8001548 <BootMessagePrint+0xe0>)
 80014ae:	4821      	ldr	r0, [pc, #132]	; (8001534 <BootMessagePrint+0xcc>)
 80014b0:	f006 f92c 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <BootMessagePrint+0xcc>)
 80014b6:	f7fe ff1b 	bl	80002f0 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	491c      	ldr	r1, [pc, #112]	; (8001534 <BootMessagePrint+0xcc>)
 80014c4:	481c      	ldr	r0, [pc, #112]	; (8001538 <BootMessagePrint+0xd0>)
 80014c6:	f004 fed1 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 80014ca:	4a20      	ldr	r2, [pc, #128]	; (800154c <BootMessagePrint+0xe4>)
 80014cc:	4920      	ldr	r1, [pc, #128]	; (8001550 <BootMessagePrint+0xe8>)
 80014ce:	4819      	ldr	r0, [pc, #100]	; (8001534 <BootMessagePrint+0xcc>)
 80014d0:	f006 f91c 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014d4:	4817      	ldr	r0, [pc, #92]	; (8001534 <BootMessagePrint+0xcc>)
 80014d6:	f7fe ff0b 	bl	80002f0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	4914      	ldr	r1, [pc, #80]	; (8001534 <BootMessagePrint+0xcc>)
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <BootMessagePrint+0xd0>)
 80014e6:	f004 fec1 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <BootMessagePrint+0xec>)
 80014ec:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <BootMessagePrint+0xf0>)
 80014ee:	491b      	ldr	r1, [pc, #108]	; (800155c <BootMessagePrint+0xf4>)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <BootMessagePrint+0xcc>)
 80014f2:	f006 f90b 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014f6:	480f      	ldr	r0, [pc, #60]	; (8001534 <BootMessagePrint+0xcc>)
 80014f8:	f7fe fefa 	bl	80002f0 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	490b      	ldr	r1, [pc, #44]	; (8001534 <BootMessagePrint+0xcc>)
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <BootMessagePrint+0xd0>)
 8001508:	f004 feb0 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800150c:	4908      	ldr	r1, [pc, #32]	; (8001530 <BootMessagePrint+0xc8>)
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <BootMessagePrint+0xcc>)
 8001510:	f006 f8fc 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <BootMessagePrint+0xcc>)
 8001516:	f7fe feeb 	bl	80002f0 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	4904      	ldr	r1, [pc, #16]	; (8001534 <BootMessagePrint+0xcc>)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <BootMessagePrint+0xd0>)
 8001526:	f004 fea1 	bl	800626c <HAL_UART_Transmit>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	08008030 	.word	0x08008030
 8001534:	24000268 	.word	0x24000268
 8001538:	240001c4 	.word	0x240001c4
 800153c:	08008060 	.word	0x08008060
 8001540:	08008070 	.word	0x08008070
 8001544:	0800808c 	.word	0x0800808c
 8001548:	08008094 	.word	0x08008094
 800154c:	080080b0 	.word	0x080080b0
 8001550:	080080c4 	.word	0x080080c4
 8001554:	080080e0 	.word	0x080080e0
 8001558:	080080ec 	.word	0x080080ec
 800155c:	080080f8 	.word	0x080080f8

08001560 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 8001564:	493d      	ldr	r1, [pc, #244]	; (800165c <GetClockSourcePrint+0xfc>)
 8001566:	483e      	ldr	r0, [pc, #248]	; (8001660 <GetClockSourcePrint+0x100>)
 8001568:	f006 f8d0 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800156c:	483c      	ldr	r0, [pc, #240]	; (8001660 <GetClockSourcePrint+0x100>)
 800156e:	f7fe febf 	bl	80002f0 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	4939      	ldr	r1, [pc, #228]	; (8001660 <GetClockSourcePrint+0x100>)
 800157c:	4839      	ldr	r0, [pc, #228]	; (8001664 <GetClockSourcePrint+0x104>)
 800157e:	f004 fe75 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8001582:	f001 faab 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8001586:	4603      	mov	r3, r0
 8001588:	4a37      	ldr	r2, [pc, #220]	; (8001668 <GetClockSourcePrint+0x108>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	461a      	mov	r2, r3
 8001592:	4936      	ldr	r1, [pc, #216]	; (800166c <GetClockSourcePrint+0x10c>)
 8001594:	4832      	ldr	r0, [pc, #200]	; (8001660 <GetClockSourcePrint+0x100>)
 8001596:	f006 f8b9 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800159a:	4831      	ldr	r0, [pc, #196]	; (8001660 <GetClockSourcePrint+0x100>)
 800159c:	f7fe fea8 	bl	80002f0 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	492d      	ldr	r1, [pc, #180]	; (8001660 <GetClockSourcePrint+0x100>)
 80015aa:	482e      	ldr	r0, [pc, #184]	; (8001664 <GetClockSourcePrint+0x104>)
 80015ac:	f004 fe5e 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80015b0:	f001 fc0e 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a2c      	ldr	r2, [pc, #176]	; (8001668 <GetClockSourcePrint+0x108>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	461a      	mov	r2, r3
 80015c0:	492b      	ldr	r1, [pc, #172]	; (8001670 <GetClockSourcePrint+0x110>)
 80015c2:	4827      	ldr	r0, [pc, #156]	; (8001660 <GetClockSourcePrint+0x100>)
 80015c4:	f006 f8a2 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80015c8:	4825      	ldr	r0, [pc, #148]	; (8001660 <GetClockSourcePrint+0x100>)
 80015ca:	f7fe fe91 	bl	80002f0 <strlen>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	4922      	ldr	r1, [pc, #136]	; (8001660 <GetClockSourcePrint+0x100>)
 80015d8:	4822      	ldr	r0, [pc, #136]	; (8001664 <GetClockSourcePrint+0x104>)
 80015da:	f004 fe47 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80015de:	f001 fc27 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <GetClockSourcePrint+0x108>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0c9b      	lsrs	r3, r3, #18
 80015ec:	461a      	mov	r2, r3
 80015ee:	4921      	ldr	r1, [pc, #132]	; (8001674 <GetClockSourcePrint+0x114>)
 80015f0:	481b      	ldr	r0, [pc, #108]	; (8001660 <GetClockSourcePrint+0x100>)
 80015f2:	f006 f88b 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80015f6:	481a      	ldr	r0, [pc, #104]	; (8001660 <GetClockSourcePrint+0x100>)
 80015f8:	f7fe fe7a 	bl	80002f0 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	4916      	ldr	r1, [pc, #88]	; (8001660 <GetClockSourcePrint+0x100>)
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <GetClockSourcePrint+0x104>)
 8001608:	f004 fe30 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800160c:	f001 fc26 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8001610:	4603      	mov	r3, r0
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <GetClockSourcePrint+0x108>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	461a      	mov	r2, r3
 800161c:	4916      	ldr	r1, [pc, #88]	; (8001678 <GetClockSourcePrint+0x118>)
 800161e:	4810      	ldr	r0, [pc, #64]	; (8001660 <GetClockSourcePrint+0x100>)
 8001620:	f006 f874 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <GetClockSourcePrint+0x100>)
 8001626:	f7fe fe63 	bl	80002f0 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	490b      	ldr	r1, [pc, #44]	; (8001660 <GetClockSourcePrint+0x100>)
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <GetClockSourcePrint+0x104>)
 8001636:	f004 fe19 	bl	800626c <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <GetClockSourcePrint+0xfc>)
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <GetClockSourcePrint+0x100>)
 800163e:	f006 f865 	bl	800770c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <GetClockSourcePrint+0x100>)
 8001644:	f7fe fe54 	bl	80002f0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	4903      	ldr	r1, [pc, #12]	; (8001660 <GetClockSourcePrint+0x100>)
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <GetClockSourcePrint+0x104>)
 8001654:	f004 fe0a 	bl	800626c <HAL_UART_Transmit>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	08008030 	.word	0x08008030
 8001660:	24000268 	.word	0x24000268
 8001664:	240001c4 	.word	0x240001c4
 8001668:	431bde83 	.word	0x431bde83
 800166c:	08008118 	.word	0x08008118
 8001670:	08008148 	.word	0x08008148
 8001674:	08008178 	.word	0x08008178
 8001678:	080081a8 	.word	0x080081a8

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f7ff fb84 	bl	8000d8c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	; (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	; (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f006 f803 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff f9b5 	bl	8000a1c <main>
  bx  lr
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80016b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016bc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80016c0:	08008254 	.word	0x08008254
  ldr r2, =_sbss
 80016c4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80016c8:	24000680 	.word	0x24000680

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f980 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80016dc:	f001 f9fe 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_Init+0x68>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	4913      	ldr	r1, [pc, #76]	; (800173c <HAL_Init+0x6c>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_Init+0x68>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_Init+0x6c>)
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_Init+0x70>)
 8001712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_Init+0x74>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f814 	bl	8001748 <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e002      	b.n	8001730 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff fa29 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58024400 	.word	0x58024400
 800173c:	080081d8 	.word	0x080081d8
 8001740:	24000004 	.word	0x24000004
 8001744:	24000000 	.word	0x24000000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_InitTick+0x60>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e021      	b.n	80017a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_InitTick+0x64>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_InitTick+0x60>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f965 	bl	8001a42 <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00e      	b.n	80017a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d80a      	bhi.n	800179e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f000 f92f 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_InitTick+0x68>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2400000c 	.word	0x2400000c
 80017ac:	24000000 	.word	0x24000000
 80017b0:	24000008 	.word	0x24000008

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2400000c 	.word	0x2400000c
 80017d8:	2400066c 	.word	0x2400066c

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2400066c 	.word	0x2400066c

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffde 	bl	80017dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2400000c 	.word	0x2400000c

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	4313      	orrs	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	05fa0000 	.word	0x05fa0000

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff29 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff40 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff33 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa4 	bl	8001998 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a6a:	4b89      	ldr	r3, [pc, #548]	; (8001c90 <HAL_GPIO_Init+0x234>)
 8001a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a6e:	e194      	b.n	8001d9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8186 	beq.w	8001d94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d005      	beq.n	8001aa0 <HAL_GPIO_Init+0x44>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d130      	bne.n	8001b02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 0201 	and.w	r2, r3, #1
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d017      	beq.n	8001b3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d123      	bne.n	8001b92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	69b9      	ldr	r1, [r7, #24]
 8001b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0203 	and.w	r2, r3, #3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80e0 	beq.w	8001d94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_GPIO_Init+0x238>)
 8001bd6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001bda:	4a2e      	ldr	r2, [pc, #184]	; (8001c94 <HAL_GPIO_Init+0x238>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_GPIO_Init+0x238>)
 8001be6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <HAL_GPIO_Init+0x23c>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_GPIO_Init+0x240>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d052      	beq.n	8001cc4 <HAL_GPIO_Init+0x268>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_GPIO_Init+0x244>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d031      	beq.n	8001c8a <HAL_GPIO_Init+0x22e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_GPIO_Init+0x248>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d02b      	beq.n	8001c86 <HAL_GPIO_Init+0x22a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_GPIO_Init+0x24c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d025      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_GPIO_Init+0x250>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x254>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x258>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_GPIO_Init+0x25c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x216>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_GPIO_Init+0x260>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_GPIO_Init+0x264>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x20e>
 8001c66:	2309      	movs	r3, #9
 8001c68:	e02d      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	e02b      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	e029      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e027      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c76:	2306      	movs	r3, #6
 8001c78:	e025      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	e023      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e021      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e01f      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e01d      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e01b      	b.n	8001cc6 <HAL_GPIO_Init+0x26a>
 8001c8e:	bf00      	nop
 8001c90:	58000080 	.word	0x58000080
 8001c94:	58024400 	.word	0x58024400
 8001c98:	58000400 	.word	0x58000400
 8001c9c:	58020000 	.word	0x58020000
 8001ca0:	58020400 	.word	0x58020400
 8001ca4:	58020800 	.word	0x58020800
 8001ca8:	58020c00 	.word	0x58020c00
 8001cac:	58021000 	.word	0x58021000
 8001cb0:	58021400 	.word	0x58021400
 8001cb4:	58021800 	.word	0x58021800
 8001cb8:	58021c00 	.word	0x58021c00
 8001cbc:	58022000 	.word	0x58022000
 8001cc0:	58022400 	.word	0x58022400
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd6:	4938      	ldr	r1, [pc, #224]	; (8001db8 <HAL_GPIO_Init+0x35c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	3301      	adds	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f ae63 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3724      	adds	r7, #36	; 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	58000400 	.word	0x58000400

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff51 	bl	8000cf0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	d00a      	beq.n	8001e82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e040      	b.n	8001f00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e03e      	b.n	8001f00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e8a:	491f      	ldr	r1, [pc, #124]	; (8001f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e92:	f7ff fca3 	bl	80017dc <HAL_GetTick>
 8001e96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e98:	e009      	b.n	8001eae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e9a:	f7ff fc9f 	bl	80017dc <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea8:	d901      	bls.n	8001eae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e028      	b.n	8001f00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eba:	d1ee      	bne.n	8001e9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b1e      	cmp	r3, #30
 8001ec0:	d008      	beq.n	8001ed4 <HAL_PWREx_ConfigSupply+0x7c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ec6:	d005      	beq.n	8001ed4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b1d      	cmp	r3, #29
 8001ecc:	d002      	beq.n	8001ed4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ed2:	d114      	bne.n	8001efe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ed4:	f7ff fc82 	bl	80017dc <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001eda:	e009      	b.n	8001ef0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001edc:	f7ff fc7e 	bl	80017dc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eea:	d901      	bls.n	8001ef0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d1ee      	bne.n	8001edc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	58024800 	.word	0x58024800

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	; 0x30
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f000 bc1f 	b.w	800275e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80b3 	beq.w	8002094 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b95      	ldr	r3, [pc, #596]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f38:	4b92      	ldr	r3, [pc, #584]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	2b10      	cmp	r3, #16
 8001f42:	d007      	beq.n	8001f54 <HAL_RCC_OscConfig+0x48>
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	2b18      	cmp	r3, #24
 8001f48:	d112      	bne.n	8001f70 <HAL_RCC_OscConfig+0x64>
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d10d      	bne.n	8001f70 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	4b8b      	ldr	r3, [pc, #556]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8098 	beq.w	8002092 <HAL_RCC_OscConfig+0x186>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 8093 	bne.w	8002092 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e3f6      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f78:	d106      	bne.n	8001f88 <HAL_RCC_OscConfig+0x7c>
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a81      	ldr	r2, [pc, #516]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e058      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_OscConfig+0xaa>
 8001f90:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a7b      	ldr	r2, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a78      	ldr	r2, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a75      	ldr	r2, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e041      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fbe:	d112      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xda>
 8001fc0:	4b70      	ldr	r3, [pc, #448]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6f      	ldr	r2, [pc, #444]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6c      	ldr	r2, [pc, #432]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e029      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001fee:	d112      	bne.n	8002016 <HAL_RCC_OscConfig+0x10a>
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b61      	ldr	r3, [pc, #388]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a60      	ldr	r2, [pc, #384]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5d      	ldr	r2, [pc, #372]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e011      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5a      	ldr	r2, [pc, #360]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002034:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002038:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d013      	beq.n	800206a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff fbcb 	bl	80017dc <HAL_GetTick>
 8002046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204a:	f7ff fbc7 	bl	80017dc <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b64      	cmp	r3, #100	; 0x64
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e380      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x13e>
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff fbb7 	bl	80017dc <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002072:	f7ff fbb3 	bl	80017dc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e36c      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x166>
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002092:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 808c 	beq.w	80021ba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_RCC_OscConfig+0x1bc>
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	2b18      	cmp	r3, #24
 80020bc:	d137      	bne.n	800212e <HAL_RCC_OscConfig+0x222>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d132      	bne.n	800212e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1d4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e33e      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 0219 	bic.w	r2, r3, #25
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4925      	ldr	r1, [pc, #148]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7ff fb73 	bl	80017dc <HAL_GetTick>
 80020f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fa:	f7ff fb6f 	bl	80017dc <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e328      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	4917      	ldr	r1, [pc, #92]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212c:	e045      	b.n	80021ba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d028      	beq.n	8002188 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0219 	bic.w	r2, r3, #25
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4910      	ldr	r1, [pc, #64]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff fb48 	bl	80017dc <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff fb44 	bl	80017dc <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e2fd      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	4901      	ldr	r1, [pc, #4]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e01a      	b.n	80021ba <HAL_RCC_OscConfig+0x2ae>
 8002184:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002188:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a96      	ldr	r2, [pc, #600]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fb22 	bl	80017dc <HAL_GetTick>
 8002198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff fb1e 	bl	80017dc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e2d7      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021ae:	4b8e      	ldr	r3, [pc, #568]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d06a      	beq.n	800229c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021d0:	4b85      	ldr	r3, [pc, #532]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d007      	beq.n	80021ec <HAL_RCC_OscConfig+0x2e0>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b18      	cmp	r3, #24
 80021e0:	d11b      	bne.n	800221a <HAL_RCC_OscConfig+0x30e>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d116      	bne.n	800221a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021ec:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x2f8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e2ac      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002204:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	4975      	ldr	r1, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002214:	4313      	orrs	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002218:	e040      	b.n	800229c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d023      	beq.n	800226a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002222:	4b71      	ldr	r3, [pc, #452]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a70      	ldr	r2, [pc, #448]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff fad5 	bl	80017dc <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002236:	f7ff fad1 	bl	80017dc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e28a      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002248:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002254:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	4961      	ldr	r1, [pc, #388]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
 8002268:	e018      	b.n	800229c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5e      	ldr	r2, [pc, #376]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff fab1 	bl	80017dc <HAL_GetTick>
 800227a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800227e:	f7ff faad 	bl	80017dc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e266      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d036      	beq.n	8002316 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d019      	beq.n	80022e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b4:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff fa8e 	bl	80017dc <HAL_GetTick>
 80022c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fa8a 	bl	80017dc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e243      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x3b8>
 80022e2:	e018      	b.n	8002316 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	4a3f      	ldr	r2, [pc, #252]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff fa74 	bl	80017dc <HAL_GetTick>
 80022f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff fa70 	bl	80017dc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e229      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 800230c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d036      	beq.n	8002390 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002334:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002336:	f7ff fa51 	bl	80017dc <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233e:	f7ff fa4d 	bl	80017dc <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e206      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x432>
 800235c:	e018      	b.n	8002390 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002368:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800236a:	f7ff fa37 	bl	80017dc <HAL_GetTick>
 800236e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002372:	f7ff fa33 	bl	80017dc <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1ec      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80af 	beq.w	80024fc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_OscConfig+0x4e0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <HAL_RCC_OscConfig+0x4e0>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023aa:	f7ff fa17 	bl	80017dc <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7ff fa13 	bl	80017dc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1cc      	b.n	800275e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_OscConfig+0x4e0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4e4>
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a02      	ldr	r2, [pc, #8]	; (80023e8 <HAL_RCC_OscConfig+0x4dc>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	e05b      	b.n	800249e <HAL_RCC_OscConfig+0x592>
 80023e6:	bf00      	nop
 80023e8:	58024400 	.word	0x58024400
 80023ec:	58024800 	.word	0x58024800
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d112      	bne.n	800241e <HAL_RCC_OscConfig+0x512>
 80023f8:	4b9d      	ldr	r3, [pc, #628]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a9c      	ldr	r2, [pc, #624]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
 8002404:	4b9a      	ldr	r3, [pc, #616]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a99      	ldr	r2, [pc, #612]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800240a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	4b97      	ldr	r3, [pc, #604]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a96      	ldr	r2, [pc, #600]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	e03f      	b.n	800249e <HAL_RCC_OscConfig+0x592>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d112      	bne.n	800244c <HAL_RCC_OscConfig+0x540>
 8002426:	4b92      	ldr	r3, [pc, #584]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a91      	ldr	r2, [pc, #580]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	4b8f      	ldr	r3, [pc, #572]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a8e      	ldr	r2, [pc, #568]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	4b8c      	ldr	r3, [pc, #560]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a8b      	ldr	r2, [pc, #556]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	e028      	b.n	800249e <HAL_RCC_OscConfig+0x592>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b85      	cmp	r3, #133	; 0x85
 8002452:	d112      	bne.n	800247a <HAL_RCC_OscConfig+0x56e>
 8002454:	4b86      	ldr	r3, [pc, #536]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a85      	ldr	r2, [pc, #532]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	4b83      	ldr	r3, [pc, #524]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a82      	ldr	r2, [pc, #520]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	4b80      	ldr	r3, [pc, #512]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a7f      	ldr	r2, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	e011      	b.n	800249e <HAL_RCC_OscConfig+0x592>
 800247a:	4b7d      	ldr	r3, [pc, #500]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a7c      	ldr	r2, [pc, #496]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	4b7a      	ldr	r3, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a79      	ldr	r2, [pc, #484]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	4b77      	ldr	r3, [pc, #476]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a76      	ldr	r2, [pc, #472]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7ff f999 	bl	80017dc <HAL_GetTick>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7ff f995 	bl	80017dc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e14c      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCC_OscConfig+0x5a2>
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7ff f983 	bl	80017dc <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff f97f 	bl	80017dc <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e136      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024f0:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 812b 	beq.w	800275c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002506:	4b5a      	ldr	r3, [pc, #360]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800250e:	2b18      	cmp	r3, #24
 8002510:	f000 80bb 	beq.w	800268a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	2b02      	cmp	r3, #2
 800251a:	f040 8095 	bne.w	8002648 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b54      	ldr	r3, [pc, #336]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a53      	ldr	r2, [pc, #332]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7ff f957 	bl	80017dc <HAL_GetTick>
 800252e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7ff f953 	bl	80017dc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e10c      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002544:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002550:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002554:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x768>)
 8002556:	4013      	ands	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	430a      	orrs	r2, r1
 8002564:	4942      	ldr	r1, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002566:	4313      	orrs	r3, r2
 8002568:	628b      	str	r3, [r1, #40]	; 0x28
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	3b01      	subs	r3, #1
 8002570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002578:	3b01      	subs	r3, #1
 800257a:	025b      	lsls	r3, r3, #9
 800257c:	b29b      	uxth	r3, r3
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	3b01      	subs	r3, #1
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	3b01      	subs	r3, #1
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800259a:	4935      	ldr	r1, [pc, #212]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800259c:	4313      	orrs	r3, r2
 800259e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	4a32      	ldr	r2, [pc, #200]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025ac:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_OscConfig+0x76c>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025b8:	00d2      	lsls	r2, r2, #3
 80025ba:	492d      	ldr	r1, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	f023 020c 	bic.w	r2, r3, #12
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	4928      	ldr	r1, [pc, #160]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	f023 0202 	bic.w	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4924      	ldr	r1, [pc, #144]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	4a21      	ldr	r2, [pc, #132]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff f8dc 	bl	80017dc <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff f8d8 	bl	80017dc <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e091      	b.n	800275e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x71c>
 8002646:	e089      	b.n	800275c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_RCC_OscConfig+0x764>)
 800264e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7ff f8c2 	bl	80017dc <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800265a:	e00f      	b.n	800267c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7ff f8be 	bl	80017dc <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d908      	bls.n	800267c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e077      	b.n	800275e <HAL_RCC_OscConfig+0x852>
 800266e:	bf00      	nop
 8002670:	58024400 	.word	0x58024400
 8002674:	fffffc0c 	.word	0xfffffc0c
 8002678:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800267c:	4b3a      	ldr	r3, [pc, #232]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e9      	bne.n	800265c <HAL_RCC_OscConfig+0x750>
 8002688:	e068      	b.n	800275c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b01      	cmp	r3, #1
 800269c:	d031      	beq.n	8002702 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d12a      	bne.n	8002702 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d122      	bne.n	8002702 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d11a      	bne.n	8002702 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	0a5b      	lsrs	r3, r3, #9
 80026d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d111      	bne.n	8002702 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d108      	bne.n	8002702 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0e1b      	lsrs	r3, r3, #24
 80026f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e02b      	b.n	800275e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 8002708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002710:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d01f      	beq.n	800275c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002728:	f7ff f858 	bl	80017dc <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800272e:	bf00      	nop
 8002730:	f7ff f854 	bl	80017dc <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	4293      	cmp	r3, r2
 800273a:	d0f9      	beq.n	8002730 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 800273e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_OscConfig+0x860>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002748:	00d2      	lsls	r2, r2, #3
 800274a:	4907      	ldr	r1, [pc, #28]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_RCC_OscConfig+0x85c>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3730      	adds	r7, #48	; 0x30
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	58024400 	.word	0x58024400
 800276c:	ffff0007 	.word	0xffff0007

08002770 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e19c      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b8a      	ldr	r3, [pc, #552]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 020f 	bic.w	r2, r3, #15
 800279a:	4985      	ldr	r1, [pc, #532]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b83      	ldr	r3, [pc, #524]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e184      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	4b7b      	ldr	r3, [pc, #492]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d908      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027d0:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	4975      	ldr	r1, [pc, #468]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d908      	bls.n	8002810 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027fe:	4b6d      	ldr	r3, [pc, #436]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	496a      	ldr	r1, [pc, #424]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800280c:	4313      	orrs	r3, r2
 800280e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	4b64      	ldr	r3, [pc, #400]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002828:	429a      	cmp	r2, r3
 800282a:	d908      	bls.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800282c:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	495e      	ldr	r1, [pc, #376]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800283a:	4313      	orrs	r3, r2
 800283c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d010      	beq.n	800286c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002856:	429a      	cmp	r2, r3
 8002858:	d908      	bls.n	800286c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4953      	ldr	r1, [pc, #332]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002868:	4313      	orrs	r3, r2
 800286a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	429a      	cmp	r2, r3
 8002886:	d908      	bls.n	800289a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f023 020f 	bic.w	r2, r3, #15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4947      	ldr	r1, [pc, #284]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002896:	4313      	orrs	r3, r2
 8002898:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d055      	beq.n	8002952 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4940      	ldr	r1, [pc, #256]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c0:	4b3c      	ldr	r3, [pc, #240]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d121      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0f6      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d115      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0ea      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028f0:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0de      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0d6      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f023 0207 	bic.w	r2, r3, #7
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4925      	ldr	r1, [pc, #148]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800291e:	4313      	orrs	r3, r2
 8002920:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002922:	f7fe ff5b 	bl	80017dc <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002928:	e00a      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292a:	f7fe ff57 	bl	80017dc <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0be      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	429a      	cmp	r2, r3
 8002950:	d1eb      	bne.n	800292a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d010      	beq.n	8002980 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	429a      	cmp	r2, r3
 800296c:	d208      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f023 020f 	bic.w	r2, r3, #15
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	490e      	ldr	r1, [pc, #56]	; (80029b4 <HAL_RCC_ClockConfig+0x244>)
 800297c:	4313      	orrs	r3, r2
 800297e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d214      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 020f 	bic.w	r2, r3, #15
 8002996:	4906      	ldr	r1, [pc, #24]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_RCC_ClockConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e086      	b.n	8002abe <HAL_RCC_ClockConfig+0x34e>
 80029b0:	52002000 	.word	0x52002000
 80029b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d208      	bcs.n	80029e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029d4:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	4939      	ldr	r1, [pc, #228]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d208      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	492e      	ldr	r1, [pc, #184]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d208      	bcs.n	8002a42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	4922      	ldr	r1, [pc, #136]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d208      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4917      	ldr	r1, [pc, #92]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002a70:	f000 f834 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	4912      	ldr	r1, [pc, #72]	; (8002acc <HAL_RCC_ClockConfig+0x35c>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x358>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_RCC_ClockConfig+0x35c>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HAL_RCC_ClockConfig+0x360>)
 8002aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x364>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x368>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fe48 	bl	8001748 <HAL_InitTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	080081d8 	.word	0x080081d8
 8002ad0:	24000004 	.word	0x24000004
 8002ad4:	24000000 	.word	0x24000000
 8002ad8:	24000008 	.word	0x24000008

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae2:	4bb3      	ldr	r3, [pc, #716]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	f200 8155 	bhi.w	8002d9a <HAL_RCC_GetSysClockFreq+0x2be>
 8002af0:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b5d 	.word	0x08002b5d
 8002afc:	08002d9b 	.word	0x08002d9b
 8002b00:	08002d9b 	.word	0x08002d9b
 8002b04:	08002d9b 	.word	0x08002d9b
 8002b08:	08002d9b 	.word	0x08002d9b
 8002b0c:	08002d9b 	.word	0x08002d9b
 8002b10:	08002d9b 	.word	0x08002d9b
 8002b14:	08002d9b 	.word	0x08002d9b
 8002b18:	08002b83 	.word	0x08002b83
 8002b1c:	08002d9b 	.word	0x08002d9b
 8002b20:	08002d9b 	.word	0x08002d9b
 8002b24:	08002d9b 	.word	0x08002d9b
 8002b28:	08002d9b 	.word	0x08002d9b
 8002b2c:	08002d9b 	.word	0x08002d9b
 8002b30:	08002d9b 	.word	0x08002d9b
 8002b34:	08002d9b 	.word	0x08002d9b
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002d9b 	.word	0x08002d9b
 8002b40:	08002d9b 	.word	0x08002d9b
 8002b44:	08002d9b 	.word	0x08002d9b
 8002b48:	08002d9b 	.word	0x08002d9b
 8002b4c:	08002d9b 	.word	0x08002d9b
 8002b50:	08002d9b 	.word	0x08002d9b
 8002b54:	08002d9b 	.word	0x08002d9b
 8002b58:	08002b8f 	.word	0x08002b8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b5c:	4b94      	ldr	r3, [pc, #592]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b68:	4b91      	ldr	r3, [pc, #580]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	4a90      	ldr	r2, [pc, #576]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b7a:	e111      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b7c:	4b8d      	ldr	r3, [pc, #564]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b7e:	61bb      	str	r3, [r7, #24]
      break;
 8002b80:	e10e      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b82:	4b8d      	ldr	r3, [pc, #564]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b84:	61bb      	str	r3, [r7, #24]
      break;
 8002b86:	e10b      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b88:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b8a:	61bb      	str	r3, [r7, #24]
      break;
 8002b8c:	e108      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b98:	4b85      	ldr	r3, [pc, #532]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ba4:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002bae:	4b80      	ldr	r3, [pc, #512]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	08db      	lsrs	r3, r3, #3
 8002bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80e1 	beq.w	8002d94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	f000 8083 	beq.w	8002ce0 <HAL_RCC_GetSysClockFreq+0x204>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	f200 80a1 	bhi.w	8002d24 <HAL_RCC_GetSysClockFreq+0x248>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x114>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d056      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002bee:	e099      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02d      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bfc:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	4a6b      	ldr	r2, [pc, #428]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c26:	4b62      	ldr	r3, [pc, #392]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002c56:	e087      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002dc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c9a:	e065      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cae:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cde:	e043      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002dcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d22:	e021      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	0a5b      	lsrs	r3, r3, #9
 8002d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d72:	3301      	adds	r3, #1
 8002d74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d8c:	ee17 3a90 	vmov	r3, s15
 8002d90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d92:	e005      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
      break;
 8002d98:	e002      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d9c:	61bb      	str	r3, [r7, #24]
      break;
 8002d9e:	bf00      	nop
  }

  return sysclockfreq;
 8002da0:	69bb      	ldr	r3, [r7, #24]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	58024400 	.word	0x58024400
 8002db4:	03d09000 	.word	0x03d09000
 8002db8:	003d0900 	.word	0x003d0900
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	46000000 	.word	0x46000000
 8002dc4:	4c742400 	.word	0x4c742400
 8002dc8:	4a742400 	.word	0x4a742400
 8002dcc:	4af42400 	.word	0x4af42400

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002dd6:	f7ff fe81 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490f      	ldr	r1, [pc, #60]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e0e:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	58024400 	.word	0x58024400
 8002e24:	080081d8 	.word	0x080081d8
 8002e28:	24000004 	.word	0x24000004
 8002e2c:	24000000 	.word	0x24000000

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002e34:	f7ff ffcc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	58024400 	.word	0x58024400
 8002e58:	080081d8 	.word	0x080081d8

08002e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002e60:	f7ff ffb6 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	58024400 	.word	0x58024400
 8002e84:	080081d8 	.word	0x080081d8

08002e88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b0c8      	sub	sp, #288	; 0x120
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002eac:	2500      	movs	r5, #0
 8002eae:	ea54 0305 	orrs.w	r3, r4, r5
 8002eb2:	d049      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ebe:	d02f      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ec0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ec4:	d828      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eca:	d01a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed0:	d822      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eda:	d007      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002edc:	e01c      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ede:	4ba7      	ldr	r3, [pc, #668]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	4aa6      	ldr	r2, [pc, #664]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002eea:	e01a      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 fc43 	bl	8004780 <RCCEx_PLL2_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f00:	e00f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f06:	3328      	adds	r3, #40	; 0x28
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fcea 	bl	80048e4 <RCCEx_PLL3_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f16:	e004      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f1e:	e000      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f2a:	4b94      	ldr	r3, [pc, #592]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f38:	4a90      	ldr	r2, [pc, #576]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6513      	str	r3, [r2, #80]	; 0x50
 8002f3e:	e003      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002f54:	f04f 0900 	mov.w	r9, #0
 8002f58:	ea58 0309 	orrs.w	r3, r8, r9
 8002f5c:	d047      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d82a      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f85 	.word	0x08002f85
 8002f74:	08002f93 	.word	0x08002f93
 8002f78:	08002fa9 	.word	0x08002fa9
 8002f7c:	08002fc7 	.word	0x08002fc7
 8002f80:	08002fc7 	.word	0x08002fc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f84:	4b7d      	ldr	r3, [pc, #500]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	4a7c      	ldr	r2, [pc, #496]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f90:	e01a      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f96:	3308      	adds	r3, #8
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 fbf0 	bl	8004780 <RCCEx_PLL2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fa6:	e00f      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fac:	3328      	adds	r3, #40	; 0x28
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 fc97 	bl	80048e4 <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fbc:	e004      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	f023 0107 	bic.w	r1, r3, #7
 8002fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	4a67      	ldr	r2, [pc, #412]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6513      	str	r3, [r2, #80]	; 0x50
 8002fe4:	e003      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002ffa:	f04f 0b00 	mov.w	fp, #0
 8002ffe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003002:	d054      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800300e:	d036      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003010:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003014:	d82f      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301a:	d032      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800301c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003020:	d829      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003022:	2bc0      	cmp	r3, #192	; 0xc0
 8003024:	d02f      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003026:	2bc0      	cmp	r3, #192	; 0xc0
 8003028:	d825      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d018      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	d821      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d007      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800303a:	e01c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	4a4e      	ldr	r2, [pc, #312]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003048:	e01e      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800304a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304e:	3308      	adds	r3, #8
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f001 fb94 	bl	8004780 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800305e:	e013      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003064:	3328      	adds	r3, #40	; 0x28
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f001 fc3b 	bl	80048e4 <RCCEx_PLL3_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003074:	e008      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800307c:	e004      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800307e:	bf00      	nop
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003090:	4b3a      	ldr	r3, [pc, #232]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	4a37      	ldr	r2, [pc, #220]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6513      	str	r3, [r2, #80]	; 0x50
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80030ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80030ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030be:	2300      	movs	r3, #0
 80030c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80030c8:	460b      	mov	r3, r1
 80030ca:	4313      	orrs	r3, r2
 80030cc:	d05c      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030d8:	d03b      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80030da:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030de:	d834      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e4:	d037      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80030e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ea:	d82e      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030f0:	d033      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030f6:	d828      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d01a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003102:	d822      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d007      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800310e:	e01c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800311c:	e01e      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800311e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003122:	3308      	adds	r3, #8
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f001 fb2a 	bl	8004780 <RCCEx_PLL2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003132:	e013      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003138:	3328      	adds	r3, #40	; 0x28
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f001 fbd1 	bl	80048e4 <RCCEx_PLL3_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003148:	e008      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003150:	e004      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003152:	bf00      	nop
 8003154:	e002      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800315a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10d      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003168:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003172:	4a02      	ldr	r2, [pc, #8]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003174:	430b      	orrs	r3, r1
 8003176:	6513      	str	r3, [r2, #80]	; 0x50
 8003178:	e006      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800317a:	bf00      	nop
 800317c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003184:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800319e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80031a2:	460b      	mov	r3, r1
 80031a4:	4313      	orrs	r3, r2
 80031a6:	d03a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80031a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ae:	2b30      	cmp	r3, #48	; 0x30
 80031b0:	d01f      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80031b2:	2b30      	cmp	r3, #48	; 0x30
 80031b4:	d819      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d00c      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d815      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d111      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c6:	4bae      	ldr	r3, [pc, #696]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	4aad      	ldr	r2, [pc, #692]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031d2:	e011      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d8:	3308      	adds	r3, #8
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 facf 	bl	8004780 <RCCEx_PLL2_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031f0:	e002      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80031f2:	bf00      	nop
 80031f4:	e000      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80031f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003200:	4b9f      	ldr	r3, [pc, #636]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	4a9c      	ldr	r2, [pc, #624]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003210:	430b      	orrs	r3, r1
 8003212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003214:	e003      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003216:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800321a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800321e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800322a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003234:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003238:	460b      	mov	r3, r1
 800323a:	4313      	orrs	r3, r2
 800323c:	d051      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800323e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003248:	d035      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800324a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324e:	d82e      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003254:	d031      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800325a:	d828      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003260:	d01a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003266:	d822      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d007      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003272:	e01c      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003274:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	4a81      	ldr	r2, [pc, #516]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800327a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003280:	e01c      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003286:	3308      	adds	r3, #8
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f001 fa78 	bl	8004780 <RCCEx_PLL2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003296:	e011      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329c:	3328      	adds	r3, #40	; 0x28
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fb1f 	bl	80048e4 <RCCEx_PLL3_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032ac:	e006      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032b4:	e002      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80032ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032c4:	4b6e      	ldr	r3, [pc, #440]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80032cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d2:	4a6b      	ldr	r2, [pc, #428]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6513      	str	r3, [r2, #80]	; 0x50
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80032ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032f2:	2300      	movs	r3, #0
 80032f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80032fc:	460b      	mov	r3, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	d053      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330c:	d033      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800330e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003312:	d82c      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003318:	d02f      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800331a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800331e:	d826      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003324:	d02b      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003326:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800332a:	d820      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800332c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003330:	d012      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003336:	d81a      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d022      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d115      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003346:	3308      	adds	r3, #8
 8003348:	2101      	movs	r1, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f001 fa18 	bl	8004780 <RCCEx_PLL2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003356:	e015      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335c:	3328      	adds	r3, #40	; 0x28
 800335e:	2101      	movs	r1, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f001 fabf 	bl	80048e4 <RCCEx_PLL3_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800336c:	e00a      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003376:	bf00      	nop
 8003378:	e004      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003384:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800338c:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003390:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339a:	4a39      	ldr	r2, [pc, #228]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800339c:	430b      	orrs	r3, r1
 800339e:	6513      	str	r3, [r2, #80]	; 0x50
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80033b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4313      	orrs	r3, r2
 80033c8:	d060      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80033d6:	d039      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80033d8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80033dc:	d832      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e2:	d035      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80033e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e8:	d82c      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d031      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d826      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033fa:	d02d      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80033fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003400:	d820      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003406:	d012      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800340c:	d81a      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d024      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003416:	d115      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341c:	3308      	adds	r3, #8
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f001 f9ad 	bl	8004780 <RCCEx_PLL2_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800342c:	e017      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800342e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003432:	3328      	adds	r3, #40	; 0x28
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fa54 	bl	80048e4 <RCCEx_PLL3_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003442:	e00c      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800344a:	e008      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800344c:	bf00      	nop
 800344e:	e006      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003450:	bf00      	nop
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003454:	bf00      	nop
 8003456:	e002      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10e      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003476:	4a02      	ldr	r2, [pc, #8]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6593      	str	r3, [r2, #88]	; 0x58
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800347e:	bf00      	nop
 8003480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003488:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80034a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d037      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b6:	d00e      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034bc:	d816      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d018      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80034c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034c6:	d111      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4bc4      	ldr	r3, [pc, #784]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4ac3      	ldr	r2, [pc, #780]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034d4:	e00f      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034da:	3308      	adds	r3, #8
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 f94e 	bl	8004780 <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034ea:	e004      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80034f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034fe:	4bb7      	ldr	r3, [pc, #732]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350c:	4ab3      	ldr	r2, [pc, #716]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800350e:	430b      	orrs	r3, r1
 8003510:	6513      	str	r3, [r2, #80]	; 0x50
 8003512:	e003      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003518:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800351c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003532:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	d039      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800353c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b03      	cmp	r3, #3
 8003544:	d81c      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003589 	.word	0x08003589
 8003550:	0800355d 	.word	0x0800355d
 8003554:	0800356b 	.word	0x0800356b
 8003558:	08003589 	.word	0x08003589
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4b9f      	ldr	r3, [pc, #636]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4a9e      	ldr	r2, [pc, #632]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003568:	e00f      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800356a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356e:	3308      	adds	r3, #8
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f904 	bl	8004780 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800357e:	e004      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003592:	4b92      	ldr	r3, [pc, #584]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	f023 0103 	bic.w	r1, r3, #3
 800359a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a0:	4a8e      	ldr	r2, [pc, #568]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a2:	430b      	orrs	r3, r1
 80035a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035a6:	e003      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80035bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f000 8099 	beq.w	8003704 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d2:	4b83      	ldr	r3, [pc, #524]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a82      	ldr	r2, [pc, #520]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035de:	f7fe f8fd 	bl	80017dc <HAL_GetTick>
 80035e2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035e6:	e00b      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fe f8f8 	bl	80017dc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b64      	cmp	r3, #100	; 0x64
 80035f6:	d903      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035fe:	e005      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003600:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ed      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800360c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003610:	2b00      	cmp	r3, #0
 8003612:	d173      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003614:	4b71      	ldr	r3, [pc, #452]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003620:	4053      	eors	r3, r2
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d015      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362a:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003632:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003636:	4b69      	ldr	r3, [pc, #420]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a68      	ldr	r2, [pc, #416]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	4b66      	ldr	r3, [pc, #408]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a65      	ldr	r2, [pc, #404]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800364e:	4a63      	ldr	r2, [pc, #396]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800365e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003662:	d118      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe f8ba 	bl	80017dc <HAL_GetTick>
 8003668:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800366c:	e00d      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe f8b5 	bl	80017dc <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003678:	1ad2      	subs	r2, r2, r3
 800367a:	f241 3388 	movw	r3, #5000	; 0x1388
 800367e:	429a      	cmp	r2, r3
 8003680:	d903      	bls.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003688:	e005      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0eb      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003696:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800369a:	2b00      	cmp	r3, #0
 800369c:	d129      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d10e      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80036b0:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80036b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036c0:	091a      	lsrs	r2, r3, #4
 80036c2:	4b48      	ldr	r3, [pc, #288]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	4a45      	ldr	r2, [pc, #276]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6113      	str	r3, [r2, #16]
 80036cc:	e005      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80036ce:	4b43      	ldr	r3, [pc, #268]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	4a42      	ldr	r2, [pc, #264]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036d8:	6113      	str	r3, [r2, #16]
 80036da:	4b40      	ldr	r3, [pc, #256]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80036de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	e008      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003700:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f002 0301 	and.w	r3, r2, #1
 8003710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800371a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	f000 8090 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800372a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372e:	2b28      	cmp	r3, #40	; 0x28
 8003730:	d870      	bhi.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	0800381d 	.word	0x0800381d
 800373c:	08003815 	.word	0x08003815
 8003740:	08003815 	.word	0x08003815
 8003744:	08003815 	.word	0x08003815
 8003748:	08003815 	.word	0x08003815
 800374c:	08003815 	.word	0x08003815
 8003750:	08003815 	.word	0x08003815
 8003754:	08003815 	.word	0x08003815
 8003758:	080037e9 	.word	0x080037e9
 800375c:	08003815 	.word	0x08003815
 8003760:	08003815 	.word	0x08003815
 8003764:	08003815 	.word	0x08003815
 8003768:	08003815 	.word	0x08003815
 800376c:	08003815 	.word	0x08003815
 8003770:	08003815 	.word	0x08003815
 8003774:	08003815 	.word	0x08003815
 8003778:	080037ff 	.word	0x080037ff
 800377c:	08003815 	.word	0x08003815
 8003780:	08003815 	.word	0x08003815
 8003784:	08003815 	.word	0x08003815
 8003788:	08003815 	.word	0x08003815
 800378c:	08003815 	.word	0x08003815
 8003790:	08003815 	.word	0x08003815
 8003794:	08003815 	.word	0x08003815
 8003798:	0800381d 	.word	0x0800381d
 800379c:	08003815 	.word	0x08003815
 80037a0:	08003815 	.word	0x08003815
 80037a4:	08003815 	.word	0x08003815
 80037a8:	08003815 	.word	0x08003815
 80037ac:	08003815 	.word	0x08003815
 80037b0:	08003815 	.word	0x08003815
 80037b4:	08003815 	.word	0x08003815
 80037b8:	0800381d 	.word	0x0800381d
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003815 	.word	0x08003815
 80037c4:	08003815 	.word	0x08003815
 80037c8:	08003815 	.word	0x08003815
 80037cc:	08003815 	.word	0x08003815
 80037d0:	08003815 	.word	0x08003815
 80037d4:	08003815 	.word	0x08003815
 80037d8:	0800381d 	.word	0x0800381d
 80037dc:	58024400 	.word	0x58024400
 80037e0:	58024800 	.word	0x58024800
 80037e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ec:	3308      	adds	r3, #8
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ffc5 	bl	8004780 <RCCEx_PLL2_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037fc:	e00f      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003802:	3328      	adds	r3, #40	; 0x28
 8003804:	2101      	movs	r1, #1
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f86c 	bl	80048e4 <RCCEx_PLL3_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003812:	e004      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800381a:	e000      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800381c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800381e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003826:	4bc0      	ldr	r3, [pc, #768]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800382e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003836:	4abc      	ldr	r2, [pc, #752]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003838:	430b      	orrs	r3, r1
 800383a:	6553      	str	r3, [r2, #84]	; 0x54
 800383c:	e003      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003842:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f002 0302 	and.w	r3, r2, #2
 8003852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800385c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d043      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386e:	2b05      	cmp	r3, #5
 8003870:	d824      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	080038c5 	.word	0x080038c5
 800387c:	08003891 	.word	0x08003891
 8003880:	080038a7 	.word	0x080038a7
 8003884:	080038c5 	.word	0x080038c5
 8003888:	080038c5 	.word	0x080038c5
 800388c:	080038c5 	.word	0x080038c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003894:	3308      	adds	r3, #8
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ff71 	bl	8004780 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038a4:	e00f      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038aa:	3328      	adds	r3, #40	; 0x28
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f818 	bl	80048e4 <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038ba:	e004      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80038c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038ce:	4b96      	ldr	r3, [pc, #600]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f023 0107 	bic.w	r1, r3, #7
 80038d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038de:	4a92      	ldr	r2, [pc, #584]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6553      	str	r3, [r2, #84]	; 0x54
 80038e4:	e003      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f002 0304 	and.w	r3, r2, #4
 80038fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038fe:	2300      	movs	r3, #0
 8003900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003904:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003908:	460b      	mov	r3, r1
 800390a:	4313      	orrs	r3, r2
 800390c:	d043      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800390e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003916:	2b05      	cmp	r3, #5
 8003918:	d824      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	0800396d 	.word	0x0800396d
 8003924:	08003939 	.word	0x08003939
 8003928:	0800394f 	.word	0x0800394f
 800392c:	0800396d 	.word	0x0800396d
 8003930:	0800396d 	.word	0x0800396d
 8003934:	0800396d 	.word	0x0800396d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393c:	3308      	adds	r3, #8
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f000 ff1d 	bl	8004780 <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800394c:	e00f      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800394e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003952:	3328      	adds	r3, #40	; 0x28
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f000 ffc4 	bl	80048e4 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003976:	4b6c      	ldr	r3, [pc, #432]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	f023 0107 	bic.w	r1, r3, #7
 800397e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003986:	4a68      	ldr	r2, [pc, #416]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003988:	430b      	orrs	r3, r1
 800398a:	6593      	str	r3, [r2, #88]	; 0x58
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003992:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f002 0320 	and.w	r3, r2, #32
 80039a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039b0:	460b      	mov	r3, r1
 80039b2:	4313      	orrs	r3, r2
 80039b4:	d055      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c2:	d033      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80039c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c8:	d82c      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ce:	d02f      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d826      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039da:	d02b      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80039dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039e0:	d820      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e6:	d012      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80039e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ec:	d81a      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d022      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80039f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f6:	d115      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fc:	3308      	adds	r3, #8
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 febd 	bl	8004780 <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a0c:	e015      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a12:	3328      	adds	r3, #40	; 0x28
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 ff64 	bl	80048e4 <RCCEx_PLL3_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a22:	e00a      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a2a:	e006      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a2c:	bf00      	nop
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a30:	bf00      	nop
 8003a32:	e002      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a34:	bf00      	nop
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a42:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a52:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6553      	str	r3, [r2, #84]	; 0x54
 8003a58:	e003      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	d058      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a8e:	d033      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a94:	d82c      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d02f      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d826      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa6:	d02b      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aac:	d820      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab2:	d012      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab8:	d81a      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d022      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d115      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac8:	3308      	adds	r3, #8
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fe57 	bl	8004780 <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e015      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ade:	3328      	adds	r3, #40	; 0x28
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fefe 	bl	80048e4 <RCCEx_PLL3_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003aee:	e00a      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003af6:	e006      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003af8:	bf00      	nop
 8003afa:	e004      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b1e:	4a02      	ldr	r2, [pc, #8]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6593      	str	r3, [r2, #88]	; 0x58
 8003b24:	e006      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d055      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b60:	d033      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003b62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b66:	d82c      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6c:	d02f      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b72:	d826      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b78:	d02b      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003b7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b7e:	d820      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b84:	d012      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d81a      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d022      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b94:	d115      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fdee 	bl	8004780 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003baa:	e015      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	3328      	adds	r3, #40	; 0x28
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fe95 	bl	80048e4 <RCCEx_PLL3_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e004      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003be0:	4ba1      	ldr	r3, [pc, #644]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bf0:	4a9d      	ldr	r2, [pc, #628]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f002 0308 	and.w	r3, r2, #8
 8003c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d01e      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	3328      	adds	r3, #40	; 0x28
 8003c34:	2102      	movs	r1, #2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fe54 	bl	80048e4 <RCCEx_PLL3_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c48:	4b87      	ldr	r3, [pc, #540]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c58:	4a83      	ldr	r2, [pc, #524]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f002 0310 	and.w	r3, r2, #16
 8003c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	d01e      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c90:	3328      	adds	r3, #40	; 0x28
 8003c92:	2102      	movs	r1, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fe25 	bl	80048e4 <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca6:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cb6:	4a6c      	ldr	r2, [pc, #432]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	d03e      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce8:	d022      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cee:	d81b      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003cfa:	e015      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d00:	3308      	adds	r3, #8
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fd3b 	bl	8004780 <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d10:	e00f      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d16:	3328      	adds	r3, #40	; 0x28
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fde2 	bl	80048e4 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d4a:	4a47      	ldr	r2, [pc, #284]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003d66:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d68:	2300      	movs	r3, #0
 8003d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003d70:	460b      	mov	r3, r1
 8003d72:	4313      	orrs	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d82:	d01f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003d84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d88:	d818      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8e:	d003      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d94:	d007      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003d96:	e011      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b33      	ldr	r3, [pc, #204]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a32      	ldr	r2, [pc, #200]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003da4:	e00f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003daa:	3328      	adds	r3, #40	; 0x28
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fd98 	bl	80048e4 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dba:	e004      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dce:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6553      	str	r3, [r2, #84]	; 0x54
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	677b      	str	r3, [r7, #116]	; 0x74
 8003e00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003e04:	460b      	mov	r3, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	d034      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d007      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003e1a:	e011      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e28:	e00e      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2e:	3308      	adds	r3, #8
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fca4 	bl	8004780 <RCCEx_PLL2_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	4a02      	ldr	r2, [pc, #8]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e64:	e006      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003e66:	bf00      	nop
 8003e68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e82:	2300      	movs	r3, #0
 8003e84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	d00c      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e94:	3328      	adds	r3, #40	; 0x28
 8003e96:	2102      	movs	r1, #2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fd23 	bl	80048e4 <RCCEx_PLL3_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb8:	2300      	movs	r3, #0
 8003eba:	667b      	str	r3, [r7, #100]	; 0x64
 8003ebc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d038      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed2:	d018      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed8:	d811      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ede:	d014      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee4:	d80b      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d011      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eee:	d106      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef0:	4bc3      	ldr	r3, [pc, #780]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4ac2      	ldr	r2, [pc, #776]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003efc:	e008      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f04:	e004      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f18:	4bb9      	ldr	r3, [pc, #740]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	4ab5      	ldr	r2, [pc, #724]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	6553      	str	r3, [r2, #84]	; 0x54
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f46:	2300      	movs	r3, #0
 8003f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4313      	orrs	r3, r2
 8003f52:	d009      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f54:	4baa      	ldr	r3, [pc, #680]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f62:	4aa7      	ldr	r2, [pc, #668]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003f74:	653b      	str	r3, [r7, #80]	; 0x50
 8003f76:	2300      	movs	r3, #0
 8003f78:	657b      	str	r3, [r7, #84]	; 0x54
 8003f7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f84:	4b9e      	ldr	r3, [pc, #632]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a9b      	ldr	r2, [pc, #620]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003faa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003fb4:	4b92      	ldr	r3, [pc, #584]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	4a8f      	ldr	r2, [pc, #572]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fda:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fe4:	4b86      	ldr	r3, [pc, #536]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4a85      	ldr	r2, [pc, #532]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fee:	6113      	str	r3, [r2, #16]
 8003ff0:	4b83      	ldr	r3, [pc, #524]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ff2:	6919      	ldr	r1, [r3, #16]
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ffc:	4a80      	ldr	r2, [pc, #512]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004010:	2300      	movs	r3, #0
 8004012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004014:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004018:	460b      	mov	r3, r1
 800401a:	4313      	orrs	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800401e:	4b78      	ldr	r3, [pc, #480]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	4a74      	ldr	r2, [pc, #464]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800402e:	430b      	orrs	r3, r1
 8004030:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800403e:	633b      	str	r3, [r7, #48]	; 0x30
 8004040:	2300      	movs	r3, #0
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
 8004044:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004048:	460b      	mov	r3, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800404e:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405e:	4a68      	ldr	r2, [pc, #416]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004060:	430b      	orrs	r3, r1
 8004062:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	2100      	movs	r1, #0
 800406e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004076:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d011      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004084:	3308      	adds	r3, #8
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fb79 	bl	8004780 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004094:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	2100      	movs	r1, #0
 80040ae:	6239      	str	r1, [r7, #32]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
 80040b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d011      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c4:	3308      	adds	r3, #8
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fb59 	bl	8004780 <RCCEx_PLL2_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80040d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	2100      	movs	r1, #0
 80040ee:	61b9      	str	r1, [r7, #24]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040fa:	460b      	mov	r3, r1
 80040fc:	4313      	orrs	r3, r2
 80040fe:	d011      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004104:	3308      	adds	r3, #8
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fb39 	bl	8004780 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004114:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004120:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	2100      	movs	r1, #0
 800412e:	6139      	str	r1, [r7, #16]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800413a:	460b      	mov	r3, r1
 800413c:	4313      	orrs	r3, r2
 800413e:	d011      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004144:	3328      	adds	r3, #40	; 0x28
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fbcb 	bl	80048e4 <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004154:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004160:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	2100      	movs	r1, #0
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800417a:	460b      	mov	r3, r1
 800417c:	4313      	orrs	r3, r2
 800417e:	d011      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004184:	3328      	adds	r3, #40	; 0x28
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fbab 	bl	80048e4 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004194:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	2100      	movs	r1, #0
 80041ae:	6039      	str	r1, [r7, #0]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	d011      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c4:	3328      	adds	r3, #40	; 0x28
 80041c6:	2102      	movs	r1, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fb8b 	bl	80048e4 <RCCEx_PLL3_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80041d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80041e4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80041f8:	46bd      	mov	sp, r7
 80041fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400

08004204 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004208:	f7fe fde2 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4904      	ldr	r1, [pc, #16]	; (800422c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	58024400 	.word	0x58024400
 800422c:	080081d8 	.word	0x080081d8

08004230 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004238:	4ba1      	ldr	r3, [pc, #644]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004242:	4b9f      	ldr	r3, [pc, #636]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	0b1b      	lsrs	r3, r3, #12
 8004248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800424e:	4b9c      	ldr	r3, [pc, #624]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800425a:	4b99      	ldr	r3, [pc, #612]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	08db      	lsrs	r3, r3, #3
 8004260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8111 	beq.w	80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f000 8083 	beq.w	800438c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b02      	cmp	r3, #2
 800428a:	f200 80a1 	bhi.w	80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d056      	beq.n	8004348 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800429a:	e099      	b.n	80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800429c:	4b88      	ldr	r3, [pc, #544]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02d      	beq.n	8004304 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a8:	4b85      	ldr	r3, [pc, #532]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	4a84      	ldr	r2, [pc, #528]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d2:	4b7b      	ldr	r3, [pc, #492]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004302:	e087      	b.n	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b6a      	ldr	r3, [pc, #424]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a03 	vldr	s12, [r7, #12]
 800432a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004346:	e065      	b.n	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b59      	ldr	r3, [pc, #356]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a03 	vldr	s12, [r7, #12]
 800436e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438a:	e043      	b.n	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b48      	ldr	r3, [pc, #288]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ce:	e021      	b.n	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004412:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004414:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800442a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800442e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443a:	ee17 2a90 	vmov	r2, s15
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004442:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800445c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004468:	ee17 2a90 	vmov	r2, s15
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004470:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	0e1b      	lsrs	r3, r3, #24
 8004476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800448a:	edd7 6a07 	vldr	s13, [r7, #28]
 800448e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004496:	ee17 2a90 	vmov	r2, s15
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800449e:	e008      	b.n	80044b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
}
 80044b2:	bf00      	nop
 80044b4:	3724      	adds	r7, #36	; 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	58024400 	.word	0x58024400
 80044c4:	03d09000 	.word	0x03d09000
 80044c8:	46000000 	.word	0x46000000
 80044cc:	4c742400 	.word	0x4c742400
 80044d0:	4a742400 	.word	0x4a742400
 80044d4:	4af42400 	.word	0x4af42400

080044d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	; 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044e0:	4ba1      	ldr	r3, [pc, #644]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80044ea:	4b9f      	ldr	r3, [pc, #636]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	0d1b      	lsrs	r3, r3, #20
 80044f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044f6:	4b9c      	ldr	r3, [pc, #624]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004502:	4b99      	ldr	r3, [pc, #612]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	08db      	lsrs	r3, r3, #3
 8004508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8111 	beq.w	8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f000 8083 	beq.w	8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	f200 80a1 	bhi.w	8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d056      	beq.n	80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004542:	e099      	b.n	8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004544:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d02d      	beq.n	80045ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004550:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	08db      	lsrs	r3, r3, #3
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	4a84      	ldr	r2, [pc, #528]	; (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457a:	4b7b      	ldr	r3, [pc, #492]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458a:	ed97 6a03 	vldr	s12, [r7, #12]
 800458e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045aa:	e087      	b.n	80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045be:	4b6a      	ldr	r3, [pc, #424]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ee:	e065      	b.n	80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a03 	vldr	s12, [r7, #12]
 8004616:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004632:	e043      	b.n	80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800477c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a03 	vldr	s12, [r7, #12]
 800465a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004676:	e021      	b.n	80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a03 	vldr	s12, [r7, #12]
 800469e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046bc:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	0a5b      	lsrs	r3, r3, #9
 80046c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e2:	ee17 2a90 	vmov	r2, s15
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004704:	edd7 6a07 	vldr	s13, [r7, #28]
 8004708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004710:	ee17 2a90 	vmov	r2, s15
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	0e1b      	lsrs	r3, r3, #24
 800471e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800472e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004732:	edd7 6a07 	vldr	s13, [r7, #28]
 8004736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473e:	ee17 2a90 	vmov	r2, s15
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004746:	e008      	b.n	800475a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
}
 800475a:	bf00      	nop
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	58024400 	.word	0x58024400
 800476c:	03d09000 	.word	0x03d09000
 8004770:	46000000 	.word	0x46000000
 8004774:	4c742400 	.word	0x4c742400
 8004778:	4a742400 	.word	0x4a742400
 800477c:	4af42400 	.word	0x4af42400

08004780 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800478e:	4b53      	ldr	r3, [pc, #332]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b03      	cmp	r3, #3
 8004798:	d101      	bne.n	800479e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e099      	b.n	80048d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800479e:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a4e      	ldr	r2, [pc, #312]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80047a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fd f817 	bl	80017dc <HAL_GetTick>
 80047ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047b2:	f7fd f813 	bl	80017dc <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e086      	b.n	80048d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047c4:	4b45      	ldr	r3, [pc, #276]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047d0:	4b42      	ldr	r3, [pc, #264]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	031b      	lsls	r3, r3, #12
 80047de:	493f      	ldr	r1, [pc, #252]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	628b      	str	r3, [r1, #40]	; 0x28
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	025b      	lsls	r3, r3, #9
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	3b01      	subs	r3, #1
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	3b01      	subs	r3, #1
 800480e:	061b      	lsls	r3, r3, #24
 8004810:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004814:	4931      	ldr	r1, [pc, #196]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800481a:	4b30      	ldr	r3, [pc, #192]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	492d      	ldr	r1, [pc, #180]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004828:	4313      	orrs	r3, r2
 800482a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	f023 0220 	bic.w	r2, r3, #32
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	4928      	ldr	r1, [pc, #160]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800483e:	4b27      	ldr	r3, [pc, #156]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	4a26      	ldr	r2, [pc, #152]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004844:	f023 0310 	bic.w	r3, r3, #16
 8004848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 800484c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <RCCEx_PLL2_Config+0x160>)
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	69d2      	ldr	r2, [r2, #28]
 8004856:	00d2      	lsls	r2, r2, #3
 8004858:	4920      	ldr	r1, [pc, #128]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800485e:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004864:	f043 0310 	orr.w	r3, r3, #16
 8004868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a19      	ldr	r2, [pc, #100]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800487c:	e00f      	b.n	800489e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d106      	bne.n	8004892 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004884:	4b15      	ldr	r3, [pc, #84]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	4a14      	ldr	r2, [pc, #80]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 800488a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800488e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004890:	e005      	b.n	800489e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4a11      	ldr	r2, [pc, #68]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 8004898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800489c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a0e      	ldr	r2, [pc, #56]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80048a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048aa:	f7fc ff97 	bl	80017dc <HAL_GetTick>
 80048ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048b2:	f7fc ff93 	bl	80017dc <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e006      	b.n	80048d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <RCCEx_PLL2_Config+0x15c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	58024400 	.word	0x58024400
 80048e0:	ffff0007 	.word	0xffff0007

080048e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d101      	bne.n	8004902 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e099      	b.n	8004a36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004902:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a4e      	ldr	r2, [pc, #312]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490e:	f7fc ff65 	bl	80017dc <HAL_GetTick>
 8004912:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004914:	e008      	b.n	8004928 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004916:	f7fc ff61 	bl	80017dc <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e086      	b.n	8004a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004934:	4b42      	ldr	r3, [pc, #264]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	051b      	lsls	r3, r3, #20
 8004942:	493f      	ldr	r1, [pc, #252]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004944:	4313      	orrs	r3, r2
 8004946:	628b      	str	r3, [r1, #40]	; 0x28
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	3b01      	subs	r3, #1
 800494e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	3b01      	subs	r3, #1
 8004958:	025b      	lsls	r3, r3, #9
 800495a:	b29b      	uxth	r3, r3
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	3b01      	subs	r3, #1
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	3b01      	subs	r3, #1
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004978:	4931      	ldr	r1, [pc, #196]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800497e:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	492d      	ldr	r1, [pc, #180]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 800498c:	4313      	orrs	r3, r2
 800498e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004990:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4928      	ldr	r1, [pc, #160]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <RCCEx_PLL3_Config+0x160>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	69d2      	ldr	r2, [r2, #28]
 80049ba:	00d2      	lsls	r2, r2, #3
 80049bc:	4920      	ldr	r1, [pc, #128]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049e0:	e00f      	b.n	8004a02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d106      	bne.n	80049f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049e8:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049f4:	e005      	b.n	8004a02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 80049fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a02:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a0e      	ldr	r2, [pc, #56]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0e:	f7fc fee5 	bl	80017dc <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a14:	e008      	b.n	8004a28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a16:	f7fc fee1 	bl	80017dc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e006      	b.n	8004a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <RCCEx_PLL3_Config+0x15c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
 8004a44:	ffff0007 	.word	0xffff0007

08004a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e049      	b.n	8004aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fb74 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f000 feb4 	bl	80057f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d001      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e054      	b.n	8004bba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d022      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x80>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d01d      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x80>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x80>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x80>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x80>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x80>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_TIM_Base_Start_IT+0xe4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x80>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d115      	bne.n	8004ba4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_TIM_Base_Start_IT+0xec>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d015      	beq.n	8004bb6 <HAL_TIM_Base_Start_IT+0xbe>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d011      	beq.n	8004bb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	e008      	b.n	8004bb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40010400 	.word	0x40010400
 8004bdc:	40001800 	.word	0x40001800
 8004be0:	40014000 	.word	0x40014000
 8004be4:	00010007 	.word	0x00010007

08004be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e049      	b.n	8004c8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f841 	bl	8004c96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f000 fde4 	bl	80057f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <HAL_TIM_PWM_Start+0x24>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e03c      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d109      	bne.n	8004cea <HAL_TIM_PWM_Start+0x3e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e02f      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d109      	bne.n	8004d04 <HAL_TIM_PWM_Start+0x58>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e022      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	d109      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x72>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e015      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d109      	bne.n	8004d38 <HAL_TIM_PWM_Start+0x8c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e008      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e0a1      	b.n	8004e96 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <HAL_TIM_PWM_Start+0xb6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d60:	e023      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_PWM_Start+0xc6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d70:	e01b      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0xd6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d80:	e013      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0xe6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xf6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	e003      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 f938 	bl	8006028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a38      	ldr	r2, [pc, #224]	; (8004ea0 <HAL_TIM_PWM_Start+0x1f4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_TIM_PWM_Start+0x13e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a37      	ldr	r2, [pc, #220]	; (8004ea4 <HAL_TIM_PWM_Start+0x1f8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00e      	beq.n	8004dea <HAL_TIM_PWM_Start+0x13e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a35      	ldr	r2, [pc, #212]	; (8004ea8 <HAL_TIM_PWM_Start+0x1fc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_TIM_PWM_Start+0x13e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a34      	ldr	r2, [pc, #208]	; (8004eac <HAL_TIM_PWM_Start+0x200>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <HAL_TIM_PWM_Start+0x13e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a32      	ldr	r2, [pc, #200]	; (8004eb0 <HAL_TIM_PWM_Start+0x204>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_PWM_Start+0x142>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_PWM_Start+0x144>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <HAL_TIM_PWM_Start+0x1f4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d022      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x1a8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d01d      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x1a8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <HAL_TIM_PWM_Start+0x208>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d018      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x1a8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <HAL_TIM_PWM_Start+0x20c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x1a8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_TIM_PWM_Start+0x210>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00e      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x1a8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <HAL_TIM_PWM_Start+0x1f8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d009      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x1a8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_TIM_PWM_Start+0x214>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x1a8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <HAL_TIM_PWM_Start+0x1fc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d115      	bne.n	8004e80 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <HAL_TIM_PWM_Start+0x218>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d015      	beq.n	8004e92 <HAL_TIM_PWM_Start+0x1e6>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d011      	beq.n	8004e92 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	e008      	b.n	8004e92 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e000      	b.n	8004e94 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40010400 	.word	0x40010400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40001800 	.word	0x40001800
 8004ec4:	00010007 	.word	0x00010007

08004ec8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_TIM_PWM_Start_IT+0x28>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e03c      	b.n	8004f6a <HAL_TIM_PWM_Start_IT+0xa2>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d109      	bne.n	8004f0a <HAL_TIM_PWM_Start_IT+0x42>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e02f      	b.n	8004f6a <HAL_TIM_PWM_Start_IT+0xa2>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d109      	bne.n	8004f24 <HAL_TIM_PWM_Start_IT+0x5c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e022      	b.n	8004f6a <HAL_TIM_PWM_Start_IT+0xa2>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d109      	bne.n	8004f3e <HAL_TIM_PWM_Start_IT+0x76>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	bf14      	ite	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2300      	moveq	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	e015      	b.n	8004f6a <HAL_TIM_PWM_Start_IT+0xa2>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d109      	bne.n	8004f58 <HAL_TIM_PWM_Start_IT+0x90>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e008      	b.n	8004f6a <HAL_TIM_PWM_Start_IT+0xa2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0ec      	b.n	800514c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_PWM_Start_IT+0xba>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f80:	e023      	b.n	8004fca <HAL_TIM_PWM_Start_IT+0x102>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_PWM_Start_IT+0xca>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f90:	e01b      	b.n	8004fca <HAL_TIM_PWM_Start_IT+0x102>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_PWM_Start_IT+0xda>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa0:	e013      	b.n	8004fca <HAL_TIM_PWM_Start_IT+0x102>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_PWM_Start_IT+0xea>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb0:	e00b      	b.n	8004fca <HAL_TIM_PWM_Start_IT+0x102>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_PWM_Start_IT+0xfa>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	e003      	b.n	8004fca <HAL_TIM_PWM_Start_IT+0x102>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d841      	bhi.n	8005054 <HAL_TIM_PWM_Start_IT+0x18c>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <HAL_TIM_PWM_Start_IT+0x110>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	08005055 	.word	0x08005055
 8004fe0:	08005055 	.word	0x08005055
 8004fe4:	08005055 	.word	0x08005055
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	08005055 	.word	0x08005055
 8004ff4:	08005055 	.word	0x08005055
 8004ff8:	08005031 	.word	0x08005031
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005055 	.word	0x08005055
 8005004:	08005055 	.word	0x08005055
 8005008:	08005043 	.word	0x08005043
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0202 	orr.w	r2, r2, #2
 800501a:	60da      	str	r2, [r3, #12]
      break;
 800501c:	e01d      	b.n	800505a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0204 	orr.w	r2, r2, #4
 800502c:	60da      	str	r2, [r3, #12]
      break;
 800502e:	e014      	b.n	800505a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	60da      	str	r2, [r3, #12]
      break;
 8005040:	e00b      	b.n	800505a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0210 	orr.w	r2, r2, #16
 8005050:	60da      	str	r2, [r3, #12]
      break;
 8005052:	e002      	b.n	800505a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      break;
 8005058:	bf00      	nop
  }

  if (status == HAL_OK)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d174      	bne.n	800514a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2201      	movs	r2, #1
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 ffdd 	bl	8006028 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a38      	ldr	r2, [pc, #224]	; (8005154 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a36      	ldr	r2, [pc, #216]	; (8005158 <HAL_TIM_PWM_Start_IT+0x290>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a35      	ldr	r2, [pc, #212]	; (800515c <HAL_TIM_PWM_Start_IT+0x294>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a33      	ldr	r2, [pc, #204]	; (8005160 <HAL_TIM_PWM_Start_IT+0x298>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a32      	ldr	r2, [pc, #200]	; (8005164 <HAL_TIM_PWM_Start_IT+0x29c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <HAL_TIM_PWM_Start_IT+0x1dc>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_TIM_PWM_Start_IT+0x1de>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a25      	ldr	r2, [pc, #148]	; (8005154 <HAL_TIM_PWM_Start_IT+0x28c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_TIM_PWM_Start_IT+0x242>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d01d      	beq.n	800510a <HAL_TIM_PWM_Start_IT+0x242>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a25      	ldr	r2, [pc, #148]	; (8005168 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_TIM_PWM_Start_IT+0x242>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a23      	ldr	r2, [pc, #140]	; (800516c <HAL_TIM_PWM_Start_IT+0x2a4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_TIM_PWM_Start_IT+0x242>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a22      	ldr	r2, [pc, #136]	; (8005170 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIM_PWM_Start_IT+0x242>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a19      	ldr	r2, [pc, #100]	; (8005158 <HAL_TIM_PWM_Start_IT+0x290>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIM_PWM_Start_IT+0x242>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIM_PWM_Start_IT+0x242>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <HAL_TIM_PWM_Start_IT+0x294>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d115      	bne.n	8005136 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8005112:	4013      	ands	r3, r2
 8005114:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b06      	cmp	r3, #6
 800511a:	d015      	beq.n	8005148 <HAL_TIM_PWM_Start_IT+0x280>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005122:	d011      	beq.n	8005148 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	e008      	b.n	8005148 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e000      	b.n	800514a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40010000 	.word	0x40010000
 8005158:	40010400 	.word	0x40010400
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40001800 	.word	0x40001800
 8005178:	00010007 	.word	0x00010007

0800517c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d020      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0202 	mvn.w	r2, #2
 80051b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 faf6 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fae8 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 faf9 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0204 	mvn.w	r2, #4
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fad0 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fac2 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fad3 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d020      	beq.n	8005278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0208 	mvn.w	r2, #8
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2204      	movs	r2, #4
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 faaa 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa9c 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 faad 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b00      	cmp	r3, #0
 8005280:	d020      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0210 	mvn.w	r2, #16
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2208      	movs	r2, #8
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa84 	bl	80057b8 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa76 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fa87 	bl	80057cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0201 	mvn.w	r2, #1
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fb fcc8 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800530e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 ff47 	bl	80061a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00c      	beq.n	800533a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 ff3f 	bl	80061b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fa41 	bl	80057e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00c      	beq.n	8005382 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f06f 0220 	mvn.w	r2, #32
 800537a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 ff07 	bl	8006190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e0ff      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b14      	cmp	r3, #20
 80053b6:	f200 80f0 	bhi.w	800559a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	08005415 	.word	0x08005415
 80053c4:	0800559b 	.word	0x0800559b
 80053c8:	0800559b 	.word	0x0800559b
 80053cc:	0800559b 	.word	0x0800559b
 80053d0:	08005455 	.word	0x08005455
 80053d4:	0800559b 	.word	0x0800559b
 80053d8:	0800559b 	.word	0x0800559b
 80053dc:	0800559b 	.word	0x0800559b
 80053e0:	08005497 	.word	0x08005497
 80053e4:	0800559b 	.word	0x0800559b
 80053e8:	0800559b 	.word	0x0800559b
 80053ec:	0800559b 	.word	0x0800559b
 80053f0:	080054d7 	.word	0x080054d7
 80053f4:	0800559b 	.word	0x0800559b
 80053f8:	0800559b 	.word	0x0800559b
 80053fc:	0800559b 	.word	0x0800559b
 8005400:	08005519 	.word	0x08005519
 8005404:	0800559b 	.word	0x0800559b
 8005408:	0800559b 	.word	0x0800559b
 800540c:	0800559b 	.word	0x0800559b
 8005410:	08005559 	.word	0x08005559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fa90 	bl	8005940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0208 	orr.w	r2, r2, #8
 800542e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0204 	bic.w	r2, r2, #4
 800543e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6999      	ldr	r1, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	619a      	str	r2, [r3, #24]
      break;
 8005452:	e0a5      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fb00 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	619a      	str	r2, [r3, #24]
      break;
 8005494:	e084      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fb69 	bl	8005b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0208 	orr.w	r2, r2, #8
 80054b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0204 	bic.w	r2, r2, #4
 80054c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69d9      	ldr	r1, [r3, #28]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	61da      	str	r2, [r3, #28]
      break;
 80054d4:	e064      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fbd1 	bl	8005c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	021a      	lsls	r2, r3, #8
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	61da      	str	r2, [r3, #28]
      break;
 8005516:	e043      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fc1a 	bl	8005d58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0208 	orr.w	r2, r2, #8
 8005532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0204 	bic.w	r2, r2, #4
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005556:	e023      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fc5e 	bl	8005e20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005598:	e002      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	75fb      	strb	r3, [r7, #23]
      break;
 800559e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop

080055b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_TIM_ConfigClockSource+0x1c>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e0dc      	b.n	800578a <HAL_TIM_ConfigClockSource+0x1d6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <HAL_TIM_ConfigClockSource+0x1e0>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a64      	ldr	r2, [pc, #400]	; (8005798 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	f000 80a9 	beq.w	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 800560c:	4a62      	ldr	r2, [pc, #392]	; (8005798 <HAL_TIM_ConfigClockSource+0x1e4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	f200 80ae 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005614:	4a61      	ldr	r2, [pc, #388]	; (800579c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	f000 80a1 	beq.w	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 800561c:	4a5f      	ldr	r2, [pc, #380]	; (800579c <HAL_TIM_ConfigClockSource+0x1e8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f200 80a6 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005624:	4a5e      	ldr	r2, [pc, #376]	; (80057a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005626:	4293      	cmp	r3, r2
 8005628:	f000 8099 	beq.w	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 800562c:	4a5c      	ldr	r2, [pc, #368]	; (80057a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800562e:	4293      	cmp	r3, r2
 8005630:	f200 809e 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005638:	f000 8091 	beq.w	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 800563c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005640:	f200 8096 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005648:	f000 8089 	beq.w	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005650:	f200 808e 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005658:	d03e      	beq.n	80056d8 <HAL_TIM_ConfigClockSource+0x124>
 800565a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565e:	f200 8087 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	f000 8086 	beq.w	8005776 <HAL_TIM_ConfigClockSource+0x1c2>
 800566a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566e:	d87f      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005670:	2b70      	cmp	r3, #112	; 0x70
 8005672:	d01a      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xf6>
 8005674:	2b70      	cmp	r3, #112	; 0x70
 8005676:	d87b      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005678:	2b60      	cmp	r3, #96	; 0x60
 800567a:	d050      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x16a>
 800567c:	2b60      	cmp	r3, #96	; 0x60
 800567e:	d877      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005680:	2b50      	cmp	r3, #80	; 0x50
 8005682:	d03c      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x14a>
 8005684:	2b50      	cmp	r3, #80	; 0x50
 8005686:	d873      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d058      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x18a>
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d86f      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005690:	2b30      	cmp	r3, #48	; 0x30
 8005692:	d064      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d86b      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 8005698:	2b20      	cmp	r3, #32
 800569a:	d060      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d867      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d05c      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d05a      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x1aa>
 80056a8:	e062      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6899      	ldr	r1, [r3, #8]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f000 fc95 	bl	8005fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	609a      	str	r2, [r3, #8]
      break;
 80056d6:	e04f      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6899      	ldr	r1, [r3, #8]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f000 fc7e 	bl	8005fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056fa:	609a      	str	r2, [r3, #8]
      break;
 80056fc:	e03c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	461a      	mov	r2, r3
 800570c:	f000 fbee 	bl	8005eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2150      	movs	r1, #80	; 0x50
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fc48 	bl	8005fac <TIM_ITRx_SetConfig>
      break;
 800571c:	e02c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	f000 fc0d 	bl	8005f4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2160      	movs	r1, #96	; 0x60
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fc38 	bl	8005fac <TIM_ITRx_SetConfig>
      break;
 800573c:	e01c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6859      	ldr	r1, [r3, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	461a      	mov	r2, r3
 800574c:	f000 fbce 	bl	8005eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2140      	movs	r1, #64	; 0x40
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fc28 	bl	8005fac <TIM_ITRx_SetConfig>
      break;
 800575c:	e00c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f000 fc1f 	bl	8005fac <TIM_ITRx_SetConfig>
      break;
 800576e:	e003      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
      break;
 8005774:	e000      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	ffceff88 	.word	0xffceff88
 8005798:	00100040 	.word	0x00100040
 800579c:	00100030 	.word	0x00100030
 80057a0:	00100020 	.word	0x00100020

080057a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a46      	ldr	r2, [pc, #280]	; (8005920 <TIM_Base_SetConfig+0x12c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005812:	d00f      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a43      	ldr	r2, [pc, #268]	; (8005924 <TIM_Base_SetConfig+0x130>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a42      	ldr	r2, [pc, #264]	; (8005928 <TIM_Base_SetConfig+0x134>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a41      	ldr	r2, [pc, #260]	; (800592c <TIM_Base_SetConfig+0x138>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a40      	ldr	r2, [pc, #256]	; (8005930 <TIM_Base_SetConfig+0x13c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a35      	ldr	r2, [pc, #212]	; (8005920 <TIM_Base_SetConfig+0x12c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01f      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d01b      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a32      	ldr	r2, [pc, #200]	; (8005924 <TIM_Base_SetConfig+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d017      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a31      	ldr	r2, [pc, #196]	; (8005928 <TIM_Base_SetConfig+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a30      	ldr	r2, [pc, #192]	; (800592c <TIM_Base_SetConfig+0x138>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00f      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2f      	ldr	r2, [pc, #188]	; (8005930 <TIM_Base_SetConfig+0x13c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2e      	ldr	r2, [pc, #184]	; (8005934 <TIM_Base_SetConfig+0x140>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <TIM_Base_SetConfig+0x144>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_Base_SetConfig+0x9a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2c      	ldr	r2, [pc, #176]	; (800593c <TIM_Base_SetConfig+0x148>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d108      	bne.n	80058a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a16      	ldr	r2, [pc, #88]	; (8005920 <TIM_Base_SetConfig+0x12c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0xf8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <TIM_Base_SetConfig+0x13c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a17      	ldr	r2, [pc, #92]	; (8005934 <TIM_Base_SetConfig+0x140>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0xf8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a16      	ldr	r2, [pc, #88]	; (8005938 <TIM_Base_SetConfig+0x144>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0xf8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a15      	ldr	r2, [pc, #84]	; (800593c <TIM_Base_SetConfig+0x148>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d103      	bne.n	80058f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b01      	cmp	r3, #1
 8005904:	d105      	bne.n	8005912 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f023 0201 	bic.w	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	611a      	str	r2, [r3, #16]
  }
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010000 	.word	0x40010000
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40010400 	.word	0x40010400
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800

08005940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f023 0201 	bic.w	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <TIM_OC1_SetConfig+0x108>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 0302 	bic.w	r3, r3, #2
 8005988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <TIM_OC1_SetConfig+0x10c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00f      	beq.n	80059bc <TIM_OC1_SetConfig+0x7c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <TIM_OC1_SetConfig+0x110>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_OC1_SetConfig+0x7c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a2b      	ldr	r2, [pc, #172]	; (8005a54 <TIM_OC1_SetConfig+0x114>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_OC1_SetConfig+0x7c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a2a      	ldr	r2, [pc, #168]	; (8005a58 <TIM_OC1_SetConfig+0x118>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC1_SetConfig+0x7c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <TIM_OC1_SetConfig+0x11c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10c      	bne.n	80059d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0308 	bic.w	r3, r3, #8
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 0304 	bic.w	r3, r3, #4
 80059d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <TIM_OC1_SetConfig+0x10c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_OC1_SetConfig+0xbe>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <TIM_OC1_SetConfig+0x110>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_OC1_SetConfig+0xbe>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1a      	ldr	r2, [pc, #104]	; (8005a54 <TIM_OC1_SetConfig+0x114>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_OC1_SetConfig+0xbe>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <TIM_OC1_SetConfig+0x118>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC1_SetConfig+0xbe>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a18      	ldr	r2, [pc, #96]	; (8005a5c <TIM_OC1_SetConfig+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d111      	bne.n	8005a22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	621a      	str	r2, [r3, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	fffeff8f 	.word	0xfffeff8f
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f023 0210 	bic.w	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <TIM_OC2_SetConfig+0xfc>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <TIM_OC2_SetConfig+0x100>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC2_SetConfig+0x68>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <TIM_OC2_SetConfig+0x104>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a1e      	ldr	r2, [pc, #120]	; (8005b60 <TIM_OC2_SetConfig+0x100>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00f      	beq.n	8005b0c <TIM_OC2_SetConfig+0xac>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <TIM_OC2_SetConfig+0x104>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_OC2_SetConfig+0xac>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <TIM_OC2_SetConfig+0x108>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_OC2_SetConfig+0xac>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <TIM_OC2_SetConfig+0x10c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC2_SetConfig+0xac>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a1a      	ldr	r2, [pc, #104]	; (8005b70 <TIM_OC2_SetConfig+0x110>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d113      	bne.n	8005b34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	feff8fff 	.word	0xfeff8fff
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400
 8005b70:	40014800 	.word	0x40014800

08005b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4b33      	ldr	r3, [pc, #204]	; (8005c6c <TIM_OC3_SetConfig+0xf8>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <TIM_OC3_SetConfig+0xfc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC3_SetConfig+0x66>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <TIM_OC3_SetConfig+0x100>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10d      	bne.n	8005bf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <TIM_OC3_SetConfig+0xfc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00f      	beq.n	8005c1e <TIM_OC3_SetConfig+0xaa>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <TIM_OC3_SetConfig+0x100>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_OC3_SetConfig+0xaa>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <TIM_OC3_SetConfig+0x104>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_OC3_SetConfig+0xaa>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <TIM_OC3_SetConfig+0x108>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_OC3_SetConfig+0xaa>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <TIM_OC3_SetConfig+0x10c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d113      	bne.n	8005c46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	621a      	str	r2, [r3, #32]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	fffeff8f 	.word	0xfffeff8f
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40010400 	.word	0x40010400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800

08005c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <TIM_OC4_SetConfig+0xbc>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <TIM_OC4_SetConfig+0xc0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00f      	beq.n	8005d04 <TIM_OC4_SetConfig+0x80>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <TIM_OC4_SetConfig+0xc4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <TIM_OC4_SetConfig+0x80>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <TIM_OC4_SetConfig+0xc8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_OC4_SetConfig+0x80>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <TIM_OC4_SetConfig+0xcc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_OC4_SetConfig+0x80>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a15      	ldr	r2, [pc, #84]	; (8005d54 <TIM_OC4_SetConfig+0xd0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d109      	bne.n	8005d18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	feff8fff 	.word	0xfeff8fff
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800

08005d58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <TIM_OC5_SetConfig+0xb0>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <TIM_OC5_SetConfig+0xb4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00f      	beq.n	8005dce <TIM_OC5_SetConfig+0x76>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a17      	ldr	r2, [pc, #92]	; (8005e10 <TIM_OC5_SetConfig+0xb8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00b      	beq.n	8005dce <TIM_OC5_SetConfig+0x76>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a16      	ldr	r2, [pc, #88]	; (8005e14 <TIM_OC5_SetConfig+0xbc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <TIM_OC5_SetConfig+0x76>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <TIM_OC5_SetConfig+0xc0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_OC5_SetConfig+0x76>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <TIM_OC5_SetConfig+0xc4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d109      	bne.n	8005de2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	621a      	str	r2, [r3, #32]
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	fffeff8f 	.word	0xfffeff8f
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	40010400 	.word	0x40010400
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800

08005e20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <TIM_OC6_SetConfig+0xb4>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	051b      	lsls	r3, r3, #20
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <TIM_OC6_SetConfig+0xb8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00f      	beq.n	8005e98 <TIM_OC6_SetConfig+0x78>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a18      	ldr	r2, [pc, #96]	; (8005edc <TIM_OC6_SetConfig+0xbc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <TIM_OC6_SetConfig+0x78>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <TIM_OC6_SetConfig+0xc0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <TIM_OC6_SetConfig+0x78>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <TIM_OC6_SetConfig+0xc4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_OC6_SetConfig+0x78>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <TIM_OC6_SetConfig+0xc8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d109      	bne.n	8005eac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	029b      	lsls	r3, r3, #10
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	feff8fff 	.word	0xfeff8fff
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800

08005eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 030a 	bic.w	r3, r3, #10
 8005f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b087      	sub	sp, #28
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f023 0210 	bic.w	r2, r3, #16
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	031b      	lsls	r3, r3, #12
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <TIM_ITRx_SetConfig+0x38>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f043 0307 	orr.w	r3, r3, #7
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	609a      	str	r2, [r3, #8]
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	ffcfff8f 	.word	0xffcfff8f

08005fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	431a      	orrs	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2201      	movs	r2, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	43db      	mvns	r3, r3
 800604a:	401a      	ands	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	fa01 f303 	lsl.w	r3, r1, r3
 8006060:	431a      	orrs	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e06d      	b.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a30      	ldr	r2, [pc, #192]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d108      	bne.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a20      	ldr	r2, [pc, #128]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d022      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fe:	d01d      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1d      	ldr	r2, [pc, #116]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a16      	ldr	r2, [pc, #88]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a15      	ldr	r2, [pc, #84]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d10c      	bne.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	4313      	orrs	r3, r2
 800614c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	40010000 	.word	0x40010000
 8006178:	40010400 	.word	0x40010400
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40001800 	.word	0x40001800
 800618c:	40014000 	.word	0x40014000

08006190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e042      	b.n	8006264 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fb f8c7 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2224      	movs	r2, #36	; 0x24
 80061fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 ff22 	bl	8007060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f8b3 	bl	8006388 <UART_SetConfig>
 8006222:	4603      	mov	r3, r0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e01b      	b.n	8006264 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800623a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800624a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 ffa1 	bl	80071a4 <UART_CheckIdleState>
 8006262:	4603      	mov	r3, r0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	4613      	mov	r3, r2
 800627a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	2b20      	cmp	r3, #32
 8006284:	d17b      	bne.n	800637e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <HAL_UART_Transmit+0x26>
 800628c:	88fb      	ldrh	r3, [r7, #6]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e074      	b.n	8006380 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2221      	movs	r2, #33	; 0x21
 80062a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062a6:	f7fb fa99 	bl	80017dc <HAL_GetTick>
 80062aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c4:	d108      	bne.n	80062d8 <HAL_UART_Transmit+0x6c>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	e003      	b.n	80062e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062e0:	e030      	b.n	8006344 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f001 f803 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e03d      	b.n	8006380 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	3302      	adds	r3, #2
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	e007      	b.n	8006332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	3301      	adds	r3, #1
 8006330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1c8      	bne.n	80062e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2200      	movs	r2, #0
 8006358:	2140      	movs	r1, #64	; 0x40
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 ffcc 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e006      	b.n	8006380 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800638c:	b092      	sub	sp, #72	; 0x48
 800638e:	af00      	add	r7, sp, #0
 8006390:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4bbe      	ldr	r3, [pc, #760]	; (80066b0 <UART_SetConfig+0x328>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4ab3      	ldr	r2, [pc, #716]	; (80066b4 <UART_SetConfig+0x32c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063f0:	4313      	orrs	r3, r2
 80063f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	4baf      	ldr	r3, [pc, #700]	; (80066b8 <UART_SetConfig+0x330>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006404:	430b      	orrs	r3, r1
 8006406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	f023 010f 	bic.w	r1, r3, #15
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4aa6      	ldr	r2, [pc, #664]	; (80066bc <UART_SetConfig+0x334>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d177      	bne.n	8006518 <UART_SetConfig+0x190>
 8006428:	4ba5      	ldr	r3, [pc, #660]	; (80066c0 <UART_SetConfig+0x338>)
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006430:	2b28      	cmp	r3, #40	; 0x28
 8006432:	d86d      	bhi.n	8006510 <UART_SetConfig+0x188>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0xb4>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	080064e1 	.word	0x080064e1
 8006440:	08006511 	.word	0x08006511
 8006444:	08006511 	.word	0x08006511
 8006448:	08006511 	.word	0x08006511
 800644c:	08006511 	.word	0x08006511
 8006450:	08006511 	.word	0x08006511
 8006454:	08006511 	.word	0x08006511
 8006458:	08006511 	.word	0x08006511
 800645c:	080064e9 	.word	0x080064e9
 8006460:	08006511 	.word	0x08006511
 8006464:	08006511 	.word	0x08006511
 8006468:	08006511 	.word	0x08006511
 800646c:	08006511 	.word	0x08006511
 8006470:	08006511 	.word	0x08006511
 8006474:	08006511 	.word	0x08006511
 8006478:	08006511 	.word	0x08006511
 800647c:	080064f1 	.word	0x080064f1
 8006480:	08006511 	.word	0x08006511
 8006484:	08006511 	.word	0x08006511
 8006488:	08006511 	.word	0x08006511
 800648c:	08006511 	.word	0x08006511
 8006490:	08006511 	.word	0x08006511
 8006494:	08006511 	.word	0x08006511
 8006498:	08006511 	.word	0x08006511
 800649c:	080064f9 	.word	0x080064f9
 80064a0:	08006511 	.word	0x08006511
 80064a4:	08006511 	.word	0x08006511
 80064a8:	08006511 	.word	0x08006511
 80064ac:	08006511 	.word	0x08006511
 80064b0:	08006511 	.word	0x08006511
 80064b4:	08006511 	.word	0x08006511
 80064b8:	08006511 	.word	0x08006511
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006511 	.word	0x08006511
 80064c4:	08006511 	.word	0x08006511
 80064c8:	08006511 	.word	0x08006511
 80064cc:	08006511 	.word	0x08006511
 80064d0:	08006511 	.word	0x08006511
 80064d4:	08006511 	.word	0x08006511
 80064d8:	08006511 	.word	0x08006511
 80064dc:	08006509 	.word	0x08006509
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e326      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e322      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e31e      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fe:	e31a      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006500:	2320      	movs	r3, #32
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006506:	e316      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650e:	e312      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006516:	e30e      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a69      	ldr	r2, [pc, #420]	; (80066c4 <UART_SetConfig+0x33c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d130      	bne.n	8006584 <UART_SetConfig+0x1fc>
 8006522:	4b67      	ldr	r3, [pc, #412]	; (80066c0 <UART_SetConfig+0x338>)
 8006524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b05      	cmp	r3, #5
 800652c:	d826      	bhi.n	800657c <UART_SetConfig+0x1f4>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <UART_SetConfig+0x1ac>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	0800654d 	.word	0x0800654d
 8006538:	08006555 	.word	0x08006555
 800653c:	0800655d 	.word	0x0800655d
 8006540:	08006565 	.word	0x08006565
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006575 	.word	0x08006575
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006552:	e2f0      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006554:	2304      	movs	r3, #4
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655a:	e2ec      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800655c:	2308      	movs	r3, #8
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e2e8      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006564:	2310      	movs	r3, #16
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656a:	e2e4      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800656c:	2320      	movs	r3, #32
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006572:	e2e0      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657a:	e2dc      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006582:	e2d8      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a4f      	ldr	r2, [pc, #316]	; (80066c8 <UART_SetConfig+0x340>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d130      	bne.n	80065f0 <UART_SetConfig+0x268>
 800658e:	4b4c      	ldr	r3, [pc, #304]	; (80066c0 <UART_SetConfig+0x338>)
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	2b05      	cmp	r3, #5
 8006598:	d826      	bhi.n	80065e8 <UART_SetConfig+0x260>
 800659a:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <UART_SetConfig+0x218>)
 800659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a0:	080065b9 	.word	0x080065b9
 80065a4:	080065c1 	.word	0x080065c1
 80065a8:	080065c9 	.word	0x080065c9
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065e1 	.word	0x080065e1
 80065b8:	2300      	movs	r3, #0
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e2ba      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80065c0:	2304      	movs	r3, #4
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e2b6      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80065c8:	2308      	movs	r3, #8
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e2b2      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80065d0:	2310      	movs	r3, #16
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e2ae      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80065d8:	2320      	movs	r3, #32
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065de:	e2aa      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e6:	e2a6      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ee:	e2a2      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a35      	ldr	r2, [pc, #212]	; (80066cc <UART_SetConfig+0x344>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d130      	bne.n	800665c <UART_SetConfig+0x2d4>
 80065fa:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <UART_SetConfig+0x338>)
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	2b05      	cmp	r3, #5
 8006604:	d826      	bhi.n	8006654 <UART_SetConfig+0x2cc>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <UART_SetConfig+0x284>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006625 	.word	0x08006625
 8006610:	0800662d 	.word	0x0800662d
 8006614:	08006635 	.word	0x08006635
 8006618:	0800663d 	.word	0x0800663d
 800661c:	08006645 	.word	0x08006645
 8006620:	0800664d 	.word	0x0800664d
 8006624:	2300      	movs	r3, #0
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e284      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800662c:	2304      	movs	r3, #4
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e280      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006634:	2308      	movs	r3, #8
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e27c      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800663c:	2310      	movs	r3, #16
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e278      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006644:	2320      	movs	r3, #32
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e274      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800664c:	2340      	movs	r3, #64	; 0x40
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e270      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e26c      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <UART_SetConfig+0x348>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d142      	bne.n	80066ec <UART_SetConfig+0x364>
 8006666:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <UART_SetConfig+0x338>)
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b05      	cmp	r3, #5
 8006670:	d838      	bhi.n	80066e4 <UART_SetConfig+0x35c>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x2f0>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	08006691 	.word	0x08006691
 800667c:	08006699 	.word	0x08006699
 8006680:	080066a1 	.word	0x080066a1
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066d5 	.word	0x080066d5
 800668c:	080066dd 	.word	0x080066dd
 8006690:	2300      	movs	r3, #0
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e24e      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e24a      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e246      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e242      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80066b0:	cfff69f3 	.word	0xcfff69f3
 80066b4:	58000c00 	.word	0x58000c00
 80066b8:	11fff4ff 	.word	0x11fff4ff
 80066bc:	40011000 	.word	0x40011000
 80066c0:	58024400 	.word	0x58024400
 80066c4:	40004400 	.word	0x40004400
 80066c8:	40004800 	.word	0x40004800
 80066cc:	40004c00 	.word	0x40004c00
 80066d0:	40005000 	.word	0x40005000
 80066d4:	2320      	movs	r3, #32
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e22c      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80066dc:	2340      	movs	r3, #64	; 0x40
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e228      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ea:	e224      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4ab1      	ldr	r2, [pc, #708]	; (80069b8 <UART_SetConfig+0x630>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d176      	bne.n	80067e4 <UART_SetConfig+0x45c>
 80066f6:	4bb1      	ldr	r3, [pc, #708]	; (80069bc <UART_SetConfig+0x634>)
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066fe:	2b28      	cmp	r3, #40	; 0x28
 8006700:	d86c      	bhi.n	80067dc <UART_SetConfig+0x454>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <UART_SetConfig+0x380>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	080067ad 	.word	0x080067ad
 800670c:	080067dd 	.word	0x080067dd
 8006710:	080067dd 	.word	0x080067dd
 8006714:	080067dd 	.word	0x080067dd
 8006718:	080067dd 	.word	0x080067dd
 800671c:	080067dd 	.word	0x080067dd
 8006720:	080067dd 	.word	0x080067dd
 8006724:	080067dd 	.word	0x080067dd
 8006728:	080067b5 	.word	0x080067b5
 800672c:	080067dd 	.word	0x080067dd
 8006730:	080067dd 	.word	0x080067dd
 8006734:	080067dd 	.word	0x080067dd
 8006738:	080067dd 	.word	0x080067dd
 800673c:	080067dd 	.word	0x080067dd
 8006740:	080067dd 	.word	0x080067dd
 8006744:	080067dd 	.word	0x080067dd
 8006748:	080067bd 	.word	0x080067bd
 800674c:	080067dd 	.word	0x080067dd
 8006750:	080067dd 	.word	0x080067dd
 8006754:	080067dd 	.word	0x080067dd
 8006758:	080067dd 	.word	0x080067dd
 800675c:	080067dd 	.word	0x080067dd
 8006760:	080067dd 	.word	0x080067dd
 8006764:	080067dd 	.word	0x080067dd
 8006768:	080067c5 	.word	0x080067c5
 800676c:	080067dd 	.word	0x080067dd
 8006770:	080067dd 	.word	0x080067dd
 8006774:	080067dd 	.word	0x080067dd
 8006778:	080067dd 	.word	0x080067dd
 800677c:	080067dd 	.word	0x080067dd
 8006780:	080067dd 	.word	0x080067dd
 8006784:	080067dd 	.word	0x080067dd
 8006788:	080067cd 	.word	0x080067cd
 800678c:	080067dd 	.word	0x080067dd
 8006790:	080067dd 	.word	0x080067dd
 8006794:	080067dd 	.word	0x080067dd
 8006798:	080067dd 	.word	0x080067dd
 800679c:	080067dd 	.word	0x080067dd
 80067a0:	080067dd 	.word	0x080067dd
 80067a4:	080067dd 	.word	0x080067dd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e1c0      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e1bc      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e1b8      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e1b4      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80067cc:	2320      	movs	r3, #32
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e1b0      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067da:	e1ac      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80067dc:	2380      	movs	r3, #128	; 0x80
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e1a8      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a75      	ldr	r2, [pc, #468]	; (80069c0 <UART_SetConfig+0x638>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d130      	bne.n	8006850 <UART_SetConfig+0x4c8>
 80067ee:	4b73      	ldr	r3, [pc, #460]	; (80069bc <UART_SetConfig+0x634>)
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d826      	bhi.n	8006848 <UART_SetConfig+0x4c0>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x478>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006819 	.word	0x08006819
 8006804:	08006821 	.word	0x08006821
 8006808:	08006829 	.word	0x08006829
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	2300      	movs	r3, #0
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681e:	e18a      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e186      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e182      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e17e      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006838:	2320      	movs	r3, #32
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e17a      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e176      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e172      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a5b      	ldr	r2, [pc, #364]	; (80069c4 <UART_SetConfig+0x63c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d130      	bne.n	80068bc <UART_SetConfig+0x534>
 800685a:	4b58      	ldr	r3, [pc, #352]	; (80069bc <UART_SetConfig+0x634>)
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b05      	cmp	r3, #5
 8006864:	d826      	bhi.n	80068b4 <UART_SetConfig+0x52c>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x4e4>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006885 	.word	0x08006885
 8006870:	0800688d 	.word	0x0800688d
 8006874:	08006895 	.word	0x08006895
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068a5 	.word	0x080068a5
 8006880:	080068ad 	.word	0x080068ad
 8006884:	2300      	movs	r3, #0
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e154      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e150      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e14c      	b.n	8006b36 <UART_SetConfig+0x7ae>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e148      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80068a4:	2320      	movs	r3, #32
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e144      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e140      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80068b4:	2380      	movs	r3, #128	; 0x80
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ba:	e13c      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a41      	ldr	r2, [pc, #260]	; (80069c8 <UART_SetConfig+0x640>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	f040 8082 	bne.w	80069cc <UART_SetConfig+0x644>
 80068c8:	4b3c      	ldr	r3, [pc, #240]	; (80069bc <UART_SetConfig+0x634>)
 80068ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068d0:	2b28      	cmp	r3, #40	; 0x28
 80068d2:	d86d      	bhi.n	80069b0 <UART_SetConfig+0x628>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <UART_SetConfig+0x554>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	08006981 	.word	0x08006981
 80068e0:	080069b1 	.word	0x080069b1
 80068e4:	080069b1 	.word	0x080069b1
 80068e8:	080069b1 	.word	0x080069b1
 80068ec:	080069b1 	.word	0x080069b1
 80068f0:	080069b1 	.word	0x080069b1
 80068f4:	080069b1 	.word	0x080069b1
 80068f8:	080069b1 	.word	0x080069b1
 80068fc:	08006989 	.word	0x08006989
 8006900:	080069b1 	.word	0x080069b1
 8006904:	080069b1 	.word	0x080069b1
 8006908:	080069b1 	.word	0x080069b1
 800690c:	080069b1 	.word	0x080069b1
 8006910:	080069b1 	.word	0x080069b1
 8006914:	080069b1 	.word	0x080069b1
 8006918:	080069b1 	.word	0x080069b1
 800691c:	08006991 	.word	0x08006991
 8006920:	080069b1 	.word	0x080069b1
 8006924:	080069b1 	.word	0x080069b1
 8006928:	080069b1 	.word	0x080069b1
 800692c:	080069b1 	.word	0x080069b1
 8006930:	080069b1 	.word	0x080069b1
 8006934:	080069b1 	.word	0x080069b1
 8006938:	080069b1 	.word	0x080069b1
 800693c:	08006999 	.word	0x08006999
 8006940:	080069b1 	.word	0x080069b1
 8006944:	080069b1 	.word	0x080069b1
 8006948:	080069b1 	.word	0x080069b1
 800694c:	080069b1 	.word	0x080069b1
 8006950:	080069b1 	.word	0x080069b1
 8006954:	080069b1 	.word	0x080069b1
 8006958:	080069b1 	.word	0x080069b1
 800695c:	080069a1 	.word	0x080069a1
 8006960:	080069b1 	.word	0x080069b1
 8006964:	080069b1 	.word	0x080069b1
 8006968:	080069b1 	.word	0x080069b1
 800696c:	080069b1 	.word	0x080069b1
 8006970:	080069b1 	.word	0x080069b1
 8006974:	080069b1 	.word	0x080069b1
 8006978:	080069b1 	.word	0x080069b1
 800697c:	080069a9 	.word	0x080069a9
 8006980:	2301      	movs	r3, #1
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006986:	e0d6      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006988:	2304      	movs	r3, #4
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698e:	e0d2      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006990:	2308      	movs	r3, #8
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006996:	e0ce      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006998:	2310      	movs	r3, #16
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699e:	e0ca      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80069a0:	2320      	movs	r3, #32
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a6:	e0c6      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80069a8:	2340      	movs	r3, #64	; 0x40
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ae:	e0c2      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b6:	e0be      	b.n	8006b36 <UART_SetConfig+0x7ae>
 80069b8:	40011400 	.word	0x40011400
 80069bc:	58024400 	.word	0x58024400
 80069c0:	40007800 	.word	0x40007800
 80069c4:	40007c00 	.word	0x40007c00
 80069c8:	40011800 	.word	0x40011800
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4aad      	ldr	r2, [pc, #692]	; (8006c88 <UART_SetConfig+0x900>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d176      	bne.n	8006ac4 <UART_SetConfig+0x73c>
 80069d6:	4bad      	ldr	r3, [pc, #692]	; (8006c8c <UART_SetConfig+0x904>)
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069de:	2b28      	cmp	r3, #40	; 0x28
 80069e0:	d86c      	bhi.n	8006abc <UART_SetConfig+0x734>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0x660>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a8d 	.word	0x08006a8d
 80069ec:	08006abd 	.word	0x08006abd
 80069f0:	08006abd 	.word	0x08006abd
 80069f4:	08006abd 	.word	0x08006abd
 80069f8:	08006abd 	.word	0x08006abd
 80069fc:	08006abd 	.word	0x08006abd
 8006a00:	08006abd 	.word	0x08006abd
 8006a04:	08006abd 	.word	0x08006abd
 8006a08:	08006a95 	.word	0x08006a95
 8006a0c:	08006abd 	.word	0x08006abd
 8006a10:	08006abd 	.word	0x08006abd
 8006a14:	08006abd 	.word	0x08006abd
 8006a18:	08006abd 	.word	0x08006abd
 8006a1c:	08006abd 	.word	0x08006abd
 8006a20:	08006abd 	.word	0x08006abd
 8006a24:	08006abd 	.word	0x08006abd
 8006a28:	08006a9d 	.word	0x08006a9d
 8006a2c:	08006abd 	.word	0x08006abd
 8006a30:	08006abd 	.word	0x08006abd
 8006a34:	08006abd 	.word	0x08006abd
 8006a38:	08006abd 	.word	0x08006abd
 8006a3c:	08006abd 	.word	0x08006abd
 8006a40:	08006abd 	.word	0x08006abd
 8006a44:	08006abd 	.word	0x08006abd
 8006a48:	08006aa5 	.word	0x08006aa5
 8006a4c:	08006abd 	.word	0x08006abd
 8006a50:	08006abd 	.word	0x08006abd
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006abd 	.word	0x08006abd
 8006a60:	08006abd 	.word	0x08006abd
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006aad 	.word	0x08006aad
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006abd 	.word	0x08006abd
 8006a74:	08006abd 	.word	0x08006abd
 8006a78:	08006abd 	.word	0x08006abd
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006abd 	.word	0x08006abd
 8006a84:	08006abd 	.word	0x08006abd
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e050      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e04c      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa2:	e048      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aaa:	e044      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006aac:	2320      	movs	r3, #32
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e040      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aba:	e03c      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac2:	e038      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a71      	ldr	r2, [pc, #452]	; (8006c90 <UART_SetConfig+0x908>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d130      	bne.n	8006b30 <UART_SetConfig+0x7a8>
 8006ace:	4b6f      	ldr	r3, [pc, #444]	; (8006c8c <UART_SetConfig+0x904>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d826      	bhi.n	8006b28 <UART_SetConfig+0x7a0>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0x758>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006af9 	.word	0x08006af9
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b09 	.word	0x08006b09
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	2302      	movs	r3, #2
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e01a      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e016      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e012      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e00e      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006b18:	2320      	movs	r3, #32
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e00a      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b26:	e006      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2e:	e002      	b.n	8006b36 <UART_SetConfig+0x7ae>
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a55      	ldr	r2, [pc, #340]	; (8006c90 <UART_SetConfig+0x908>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	f040 80f8 	bne.w	8006d32 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	dc46      	bgt.n	8006bd8 <UART_SetConfig+0x850>
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	db75      	blt.n	8006c3a <UART_SetConfig+0x8b2>
 8006b4e:	3b02      	subs	r3, #2
 8006b50:	2b1e      	cmp	r3, #30
 8006b52:	d872      	bhi.n	8006c3a <UART_SetConfig+0x8b2>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0x7d4>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006bdf 	.word	0x08006bdf
 8006b60:	08006c3b 	.word	0x08006c3b
 8006b64:	08006be7 	.word	0x08006be7
 8006b68:	08006c3b 	.word	0x08006c3b
 8006b6c:	08006c3b 	.word	0x08006c3b
 8006b70:	08006c3b 	.word	0x08006c3b
 8006b74:	08006bf7 	.word	0x08006bf7
 8006b78:	08006c3b 	.word	0x08006c3b
 8006b7c:	08006c3b 	.word	0x08006c3b
 8006b80:	08006c3b 	.word	0x08006c3b
 8006b84:	08006c3b 	.word	0x08006c3b
 8006b88:	08006c3b 	.word	0x08006c3b
 8006b8c:	08006c3b 	.word	0x08006c3b
 8006b90:	08006c3b 	.word	0x08006c3b
 8006b94:	08006c07 	.word	0x08006c07
 8006b98:	08006c3b 	.word	0x08006c3b
 8006b9c:	08006c3b 	.word	0x08006c3b
 8006ba0:	08006c3b 	.word	0x08006c3b
 8006ba4:	08006c3b 	.word	0x08006c3b
 8006ba8:	08006c3b 	.word	0x08006c3b
 8006bac:	08006c3b 	.word	0x08006c3b
 8006bb0:	08006c3b 	.word	0x08006c3b
 8006bb4:	08006c3b 	.word	0x08006c3b
 8006bb8:	08006c3b 	.word	0x08006c3b
 8006bbc:	08006c3b 	.word	0x08006c3b
 8006bc0:	08006c3b 	.word	0x08006c3b
 8006bc4:	08006c3b 	.word	0x08006c3b
 8006bc8:	08006c3b 	.word	0x08006c3b
 8006bcc:	08006c3b 	.word	0x08006c3b
 8006bd0:	08006c3b 	.word	0x08006c3b
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d02a      	beq.n	8006c32 <UART_SetConfig+0x8aa>
 8006bdc:	e02d      	b.n	8006c3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006bde:	f7fd fb11 	bl	8004204 <HAL_RCCEx_GetD3PCLK1Freq>
 8006be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006be4:	e02f      	b.n	8006c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fd fb20 	bl	8004230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf4:	e027      	b.n	8006c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf6:	f107 0318 	add.w	r3, r7, #24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fd fc6c 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c04:	e01f      	b.n	8006c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c06:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <UART_SetConfig+0x904>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <UART_SetConfig+0x904>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	08db      	lsrs	r3, r3, #3
 8006c18:	f003 0303 	and.w	r3, r3, #3
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <UART_SetConfig+0x90c>)
 8006c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c24:	e00f      	b.n	8006c46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006c26:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <UART_SetConfig+0x90c>)
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c2a:	e00c      	b.n	8006c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c2c:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <UART_SetConfig+0x910>)
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c30:	e009      	b.n	8006c46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c38:	e005      	b.n	8006c46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 81ee 	beq.w	800702a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <UART_SetConfig+0x914>)
 8006c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d305      	bcc.n	8006c7e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d910      	bls.n	8006ca0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c84:	e1d1      	b.n	800702a <UART_SetConfig+0xca2>
 8006c86:	bf00      	nop
 8006c88:	40011c00 	.word	0x40011c00
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	58000c00 	.word	0x58000c00
 8006c94:	03d09000 	.word	0x03d09000
 8006c98:	003d0900 	.word	0x003d0900
 8006c9c:	080081e8 	.word	0x080081e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	60fa      	str	r2, [r7, #12]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	4ac0      	ldr	r2, [pc, #768]	; (8006fb0 <UART_SetConfig+0xc28>)
 8006cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cc2:	f7f9 fb6d 	bl	80003a0 <__aeabi_uldivmod>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	020b      	lsls	r3, r1, #8
 8006cd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cdc:	0202      	lsls	r2, r0, #8
 8006cde:	6979      	ldr	r1, [r7, #20]
 8006ce0:	6849      	ldr	r1, [r1, #4]
 8006ce2:	0849      	lsrs	r1, r1, #1
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	4605      	mov	r5, r0
 8006cea:	eb12 0804 	adds.w	r8, r2, r4
 8006cee:	eb43 0905 	adc.w	r9, r3, r5
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	4693      	mov	fp, r2
 8006cfc:	4652      	mov	r2, sl
 8006cfe:	465b      	mov	r3, fp
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fb4c 	bl	80003a0 <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d16:	d308      	bcc.n	8006d2a <UART_SetConfig+0x9a2>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1e:	d204      	bcs.n	8006d2a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d26:	60da      	str	r2, [r3, #12]
 8006d28:	e17f      	b.n	800702a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d30:	e17b      	b.n	800702a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3a:	f040 80bd 	bne.w	8006eb8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006d3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	dc48      	bgt.n	8006dd8 <UART_SetConfig+0xa50>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	db7b      	blt.n	8006e42 <UART_SetConfig+0xaba>
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d879      	bhi.n	8006e42 <UART_SetConfig+0xaba>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0x9cc>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006ddf 	.word	0x08006ddf
 8006d58:	08006de7 	.word	0x08006de7
 8006d5c:	08006e43 	.word	0x08006e43
 8006d60:	08006e43 	.word	0x08006e43
 8006d64:	08006def 	.word	0x08006def
 8006d68:	08006e43 	.word	0x08006e43
 8006d6c:	08006e43 	.word	0x08006e43
 8006d70:	08006e43 	.word	0x08006e43
 8006d74:	08006dff 	.word	0x08006dff
 8006d78:	08006e43 	.word	0x08006e43
 8006d7c:	08006e43 	.word	0x08006e43
 8006d80:	08006e43 	.word	0x08006e43
 8006d84:	08006e43 	.word	0x08006e43
 8006d88:	08006e43 	.word	0x08006e43
 8006d8c:	08006e43 	.word	0x08006e43
 8006d90:	08006e43 	.word	0x08006e43
 8006d94:	08006e0f 	.word	0x08006e0f
 8006d98:	08006e43 	.word	0x08006e43
 8006d9c:	08006e43 	.word	0x08006e43
 8006da0:	08006e43 	.word	0x08006e43
 8006da4:	08006e43 	.word	0x08006e43
 8006da8:	08006e43 	.word	0x08006e43
 8006dac:	08006e43 	.word	0x08006e43
 8006db0:	08006e43 	.word	0x08006e43
 8006db4:	08006e43 	.word	0x08006e43
 8006db8:	08006e43 	.word	0x08006e43
 8006dbc:	08006e43 	.word	0x08006e43
 8006dc0:	08006e43 	.word	0x08006e43
 8006dc4:	08006e43 	.word	0x08006e43
 8006dc8:	08006e43 	.word	0x08006e43
 8006dcc:	08006e43 	.word	0x08006e43
 8006dd0:	08006e43 	.word	0x08006e43
 8006dd4:	08006e35 	.word	0x08006e35
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d02e      	beq.n	8006e3a <UART_SetConfig+0xab2>
 8006ddc:	e031      	b.n	8006e42 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dde:	f7fc f827 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8006de2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006de4:	e033      	b.n	8006e4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de6:	f7fc f839 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8006dea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006dec:	e02f      	b.n	8006e4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fd fa1c 	bl	8004230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dfc:	e027      	b.n	8006e4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfe:	f107 0318 	add.w	r3, r7, #24
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fd fb68 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0c:	e01f      	b.n	8006e4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0e:	4b69      	ldr	r3, [pc, #420]	; (8006fb4 <UART_SetConfig+0xc2c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e1a:	4b66      	ldr	r3, [pc, #408]	; (8006fb4 <UART_SetConfig+0xc2c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	08db      	lsrs	r3, r3, #3
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	4a64      	ldr	r2, [pc, #400]	; (8006fb8 <UART_SetConfig+0xc30>)
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e2c:	e00f      	b.n	8006e4e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006e2e:	4b62      	ldr	r3, [pc, #392]	; (8006fb8 <UART_SetConfig+0xc30>)
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e32:	e00c      	b.n	8006e4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e34:	4b61      	ldr	r3, [pc, #388]	; (8006fbc <UART_SetConfig+0xc34>)
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e38:	e009      	b.n	8006e4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e40:	e005      	b.n	8006e4e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80ea 	beq.w	800702a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	4a55      	ldr	r2, [pc, #340]	; (8006fb0 <UART_SetConfig+0xc28>)
 8006e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e68:	005a      	lsls	r2, r3, #1
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	441a      	add	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d916      	bls.n	8006eb0 <UART_SetConfig+0xb28>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e88:	d212      	bcs.n	8006eb0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f023 030f 	bic.w	r3, r3, #15
 8006e92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	e0bc      	b.n	800702a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006eb6:	e0b8      	b.n	800702a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	dc4b      	bgt.n	8006f58 <UART_SetConfig+0xbd0>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f2c0 8087 	blt.w	8006fd4 <UART_SetConfig+0xc4c>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	f200 8084 	bhi.w	8006fd4 <UART_SetConfig+0xc4c>
 8006ecc:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <UART_SetConfig+0xb4c>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006f5f 	.word	0x08006f5f
 8006ed8:	08006f67 	.word	0x08006f67
 8006edc:	08006fd5 	.word	0x08006fd5
 8006ee0:	08006fd5 	.word	0x08006fd5
 8006ee4:	08006f6f 	.word	0x08006f6f
 8006ee8:	08006fd5 	.word	0x08006fd5
 8006eec:	08006fd5 	.word	0x08006fd5
 8006ef0:	08006fd5 	.word	0x08006fd5
 8006ef4:	08006f7f 	.word	0x08006f7f
 8006ef8:	08006fd5 	.word	0x08006fd5
 8006efc:	08006fd5 	.word	0x08006fd5
 8006f00:	08006fd5 	.word	0x08006fd5
 8006f04:	08006fd5 	.word	0x08006fd5
 8006f08:	08006fd5 	.word	0x08006fd5
 8006f0c:	08006fd5 	.word	0x08006fd5
 8006f10:	08006fd5 	.word	0x08006fd5
 8006f14:	08006f8f 	.word	0x08006f8f
 8006f18:	08006fd5 	.word	0x08006fd5
 8006f1c:	08006fd5 	.word	0x08006fd5
 8006f20:	08006fd5 	.word	0x08006fd5
 8006f24:	08006fd5 	.word	0x08006fd5
 8006f28:	08006fd5 	.word	0x08006fd5
 8006f2c:	08006fd5 	.word	0x08006fd5
 8006f30:	08006fd5 	.word	0x08006fd5
 8006f34:	08006fd5 	.word	0x08006fd5
 8006f38:	08006fd5 	.word	0x08006fd5
 8006f3c:	08006fd5 	.word	0x08006fd5
 8006f40:	08006fd5 	.word	0x08006fd5
 8006f44:	08006fd5 	.word	0x08006fd5
 8006f48:	08006fd5 	.word	0x08006fd5
 8006f4c:	08006fd5 	.word	0x08006fd5
 8006f50:	08006fd5 	.word	0x08006fd5
 8006f54:	08006fc7 	.word	0x08006fc7
 8006f58:	2b40      	cmp	r3, #64	; 0x40
 8006f5a:	d037      	beq.n	8006fcc <UART_SetConfig+0xc44>
 8006f5c:	e03a      	b.n	8006fd4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f5e:	f7fb ff67 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8006f62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f64:	e03c      	b.n	8006fe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f66:	f7fb ff79 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8006f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f6c:	e038      	b.n	8006fe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd f95c 	bl	8004230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7c:	e030      	b.n	8006fe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f7e:	f107 0318 	add.w	r3, r7, #24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fd faa8 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8c:	e028      	b.n	8006fe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <UART_SetConfig+0xc2c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d012      	beq.n	8006fc0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <UART_SetConfig+0xc2c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	08db      	lsrs	r3, r3, #3
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <UART_SetConfig+0xc30>)
 8006fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fac:	e018      	b.n	8006fe0 <UART_SetConfig+0xc58>
 8006fae:	bf00      	nop
 8006fb0:	080081e8 	.word	0x080081e8
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	03d09000 	.word	0x03d09000
 8006fbc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006fc0:	4b24      	ldr	r3, [pc, #144]	; (8007054 <UART_SetConfig+0xccc>)
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc4:	e00c      	b.n	8006fe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fc6:	4b24      	ldr	r3, [pc, #144]	; (8007058 <UART_SetConfig+0xcd0>)
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fca:	e009      	b.n	8006fe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd2:	e005      	b.n	8006fe0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006fde:	bf00      	nop
    }

    if (pclk != 0U)
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d021      	beq.n	800702a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	4a1c      	ldr	r2, [pc, #112]	; (800705c <UART_SetConfig+0xcd4>)
 8006fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	441a      	add	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	fbb2 f3f3 	udiv	r3, r2, r3
 8007008:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	2b0f      	cmp	r3, #15
 800700e:	d909      	bls.n	8007024 <UART_SetConfig+0xc9c>
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007016:	d205      	bcs.n	8007024 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	b29a      	uxth	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	e002      	b.n	800702a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2201      	movs	r2, #1
 800702e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2201      	movs	r2, #1
 8007036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2200      	movs	r2, #0
 8007044:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007046:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800704a:	4618      	mov	r0, r3
 800704c:	3748      	adds	r7, #72	; 0x48
 800704e:	46bd      	mov	sp, r7
 8007050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007054:	03d09000 	.word	0x03d09000
 8007058:	003d0900 	.word	0x003d0900
 800705c:	080081e8 	.word	0x080081e8

08007060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01a      	beq.n	8007176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715e:	d10a      	bne.n	8007176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	605a      	str	r2, [r3, #4]
  }
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b098      	sub	sp, #96	; 0x60
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b4:	f7fa fb12 	bl	80017dc <HAL_GetTick>
 80071b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d12f      	bne.n	8007228 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d0:	2200      	movs	r2, #0
 80071d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f88e 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d022      	beq.n	8007228 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f6:	653b      	str	r3, [r7, #80]	; 0x50
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007200:	647b      	str	r3, [r7, #68]	; 0x44
 8007202:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e6      	bne.n	80071e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e063      	b.n	80072f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b04      	cmp	r3, #4
 8007234:	d149      	bne.n	80072ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007236:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800723e:	2200      	movs	r2, #0
 8007240:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f857 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d03c      	beq.n	80072ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	623b      	str	r3, [r7, #32]
   return(result);
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726e:	633b      	str	r3, [r7, #48]	; 0x30
 8007270:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e6      	bne.n	8007250 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3308      	adds	r3, #8
 8007288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	60fb      	str	r3, [r7, #12]
   return(result);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	64bb      	str	r3, [r7, #72]	; 0x48
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a2:	61fa      	str	r2, [r7, #28]
 80072a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	69b9      	ldr	r1, [r7, #24]
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	617b      	str	r3, [r7, #20]
   return(result);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e5      	bne.n	8007282 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e012      	b.n	80072f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3758      	adds	r7, #88	; 0x58
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	4613      	mov	r3, r2
 8007306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007308:	e04f      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d04b      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007312:	f7fa fa63 	bl	80017dc <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	429a      	cmp	r2, r3
 8007320:	d302      	bcc.n	8007328 <UART_WaitOnFlagUntilTimeout+0x30>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e04e      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d037      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d034      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d031      	beq.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b08      	cmp	r3, #8
 8007352:	d110      	bne.n	8007376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2208      	movs	r2, #8
 800735a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f839 	bl	80073d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2208      	movs	r2, #8
 8007366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e029      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007384:	d111      	bne.n	80073aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800738e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f81f 	bl	80073d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e00f      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4013      	ands	r3, r2
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d0a0      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b095      	sub	sp, #84	; 0x54
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fa:	643b      	str	r3, [r7, #64]	; 0x40
 80073fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e6      	bne.n	80073dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	61fb      	str	r3, [r7, #28]
   return(result);
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	4b1e      	ldr	r3, [pc, #120]	; (800749c <UART_EndRxTransfer+0xc8>)
 8007422:	4013      	ands	r3, r2
 8007424:	64bb      	str	r3, [r7, #72]	; 0x48
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800742e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007446:	2b01      	cmp	r3, #1
 8007448:	d118      	bne.n	800747c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	60bb      	str	r3, [r7, #8]
   return(result);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f023 0310 	bic.w	r3, r3, #16
 800745e:	647b      	str	r3, [r7, #68]	; 0x44
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6979      	ldr	r1, [r7, #20]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	613b      	str	r3, [r7, #16]
   return(result);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e6      	bne.n	800744a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007490:	bf00      	nop
 8007492:	3754      	adds	r7, #84	; 0x54
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	effffffe 	.word	0xeffffffe

080074a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e027      	b.n	8007506 <HAL_UARTEx_DisableFifoMode+0x66>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2224      	movs	r2, #36	; 0x24
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007526:	2302      	movs	r3, #2
 8007528:	e02d      	b.n	8007586 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2224      	movs	r2, #36	; 0x24
 8007536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0201 	bic.w	r2, r2, #1
 8007550:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f850 	bl	800760c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e02d      	b.n	8007602 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2224      	movs	r2, #36	; 0x24
 80075b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0201 	bic.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f812 	bl	800760c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007618:	2b00      	cmp	r3, #0
 800761a:	d108      	bne.n	800762e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800762c:	e031      	b.n	8007692 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800762e:	2310      	movs	r3, #16
 8007630:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007632:	2310      	movs	r3, #16
 8007634:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	0e5b      	lsrs	r3, r3, #25
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	0f5b      	lsrs	r3, r3, #29
 800764e:	b2db      	uxtb	r3, r3
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	7b3a      	ldrb	r2, [r7, #12]
 800765a:	4911      	ldr	r1, [pc, #68]	; (80076a0 <UARTEx_SetNbDataToProcess+0x94>)
 800765c:	5c8a      	ldrb	r2, [r1, r2]
 800765e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007662:	7b3a      	ldrb	r2, [r7, #12]
 8007664:	490f      	ldr	r1, [pc, #60]	; (80076a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007666:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007668:	fb93 f3f2 	sdiv	r3, r3, r2
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	7b7a      	ldrb	r2, [r7, #13]
 8007678:	4909      	ldr	r1, [pc, #36]	; (80076a0 <UARTEx_SetNbDataToProcess+0x94>)
 800767a:	5c8a      	ldrb	r2, [r1, r2]
 800767c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007680:	7b7a      	ldrb	r2, [r7, #13]
 8007682:	4908      	ldr	r1, [pc, #32]	; (80076a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007684:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007686:	fb93 f3f2 	sdiv	r3, r3, r2
 800768a:	b29a      	uxth	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	08008200 	.word	0x08008200
 80076a4:	08008208 	.word	0x08008208

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	24000010 	.word	0x24000010

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f000 fc8e 	bl	8007fe8 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	0800824c 	.word	0x0800824c
 80076f0:	0800824c 	.word	0x0800824c
 80076f4:	0800824c 	.word	0x0800824c
 80076f8:	08008250 	.word	0x08008250

080076fc <memset>:
 80076fc:	4402      	add	r2, r0
 80076fe:	4603      	mov	r3, r0
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	f803 1b01 	strb.w	r1, [r3], #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>

0800770c <siprintf>:
 800770c:	b40e      	push	{r1, r2, r3}
 800770e:	b500      	push	{lr}
 8007710:	b09c      	sub	sp, #112	; 0x70
 8007712:	ab1d      	add	r3, sp, #116	; 0x74
 8007714:	9002      	str	r0, [sp, #8]
 8007716:	9006      	str	r0, [sp, #24]
 8007718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800771c:	4809      	ldr	r0, [pc, #36]	; (8007744 <siprintf+0x38>)
 800771e:	9107      	str	r1, [sp, #28]
 8007720:	9104      	str	r1, [sp, #16]
 8007722:	4909      	ldr	r1, [pc, #36]	; (8007748 <siprintf+0x3c>)
 8007724:	f853 2b04 	ldr.w	r2, [r3], #4
 8007728:	9105      	str	r1, [sp, #20]
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	a902      	add	r1, sp, #8
 8007730:	f000 f868 	bl	8007804 <_svfiprintf_r>
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	b01c      	add	sp, #112	; 0x70
 800773c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007740:	b003      	add	sp, #12
 8007742:	4770      	bx	lr
 8007744:	24000010 	.word	0x24000010
 8007748:	ffff0208 	.word	0xffff0208

0800774c <__ssputs_r>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	688e      	ldr	r6, [r1, #8]
 8007752:	429e      	cmp	r6, r3
 8007754:	4682      	mov	sl, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4690      	mov	r8, r2
 800775a:	461f      	mov	r7, r3
 800775c:	d838      	bhi.n	80077d0 <__ssputs_r+0x84>
 800775e:	898a      	ldrh	r2, [r1, #12]
 8007760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007764:	d032      	beq.n	80077cc <__ssputs_r+0x80>
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	6909      	ldr	r1, [r1, #16]
 800776a:	eba5 0901 	sub.w	r9, r5, r1
 800776e:	6965      	ldr	r5, [r4, #20]
 8007770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007778:	3301      	adds	r3, #1
 800777a:	444b      	add	r3, r9
 800777c:	106d      	asrs	r5, r5, #1
 800777e:	429d      	cmp	r5, r3
 8007780:	bf38      	it	cc
 8007782:	461d      	movcc	r5, r3
 8007784:	0553      	lsls	r3, r2, #21
 8007786:	d531      	bpl.n	80077ec <__ssputs_r+0xa0>
 8007788:	4629      	mov	r1, r5
 800778a:	f000 fb63 	bl	8007e54 <_malloc_r>
 800778e:	4606      	mov	r6, r0
 8007790:	b950      	cbnz	r0, 80077a8 <__ssputs_r+0x5c>
 8007792:	230c      	movs	r3, #12
 8007794:	f8ca 3000 	str.w	r3, [sl]
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	6921      	ldr	r1, [r4, #16]
 80077aa:	464a      	mov	r2, r9
 80077ac:	f000 fabe 	bl	8007d2c <memcpy>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	6126      	str	r6, [r4, #16]
 80077be:	6165      	str	r5, [r4, #20]
 80077c0:	444e      	add	r6, r9
 80077c2:	eba5 0509 	sub.w	r5, r5, r9
 80077c6:	6026      	str	r6, [r4, #0]
 80077c8:	60a5      	str	r5, [r4, #8]
 80077ca:	463e      	mov	r6, r7
 80077cc:	42be      	cmp	r6, r7
 80077ce:	d900      	bls.n	80077d2 <__ssputs_r+0x86>
 80077d0:	463e      	mov	r6, r7
 80077d2:	6820      	ldr	r0, [r4, #0]
 80077d4:	4632      	mov	r2, r6
 80077d6:	4641      	mov	r1, r8
 80077d8:	f000 fab6 	bl	8007d48 <memmove>
 80077dc:	68a3      	ldr	r3, [r4, #8]
 80077de:	1b9b      	subs	r3, r3, r6
 80077e0:	60a3      	str	r3, [r4, #8]
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	4433      	add	r3, r6
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	2000      	movs	r0, #0
 80077ea:	e7db      	b.n	80077a4 <__ssputs_r+0x58>
 80077ec:	462a      	mov	r2, r5
 80077ee:	f000 fba5 	bl	8007f3c <_realloc_r>
 80077f2:	4606      	mov	r6, r0
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d1e1      	bne.n	80077bc <__ssputs_r+0x70>
 80077f8:	6921      	ldr	r1, [r4, #16]
 80077fa:	4650      	mov	r0, sl
 80077fc:	f000 fabe 	bl	8007d7c <_free_r>
 8007800:	e7c7      	b.n	8007792 <__ssputs_r+0x46>
	...

08007804 <_svfiprintf_r>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	4698      	mov	r8, r3
 800780a:	898b      	ldrh	r3, [r1, #12]
 800780c:	061b      	lsls	r3, r3, #24
 800780e:	b09d      	sub	sp, #116	; 0x74
 8007810:	4607      	mov	r7, r0
 8007812:	460d      	mov	r5, r1
 8007814:	4614      	mov	r4, r2
 8007816:	d50e      	bpl.n	8007836 <_svfiprintf_r+0x32>
 8007818:	690b      	ldr	r3, [r1, #16]
 800781a:	b963      	cbnz	r3, 8007836 <_svfiprintf_r+0x32>
 800781c:	2140      	movs	r1, #64	; 0x40
 800781e:	f000 fb19 	bl	8007e54 <_malloc_r>
 8007822:	6028      	str	r0, [r5, #0]
 8007824:	6128      	str	r0, [r5, #16]
 8007826:	b920      	cbnz	r0, 8007832 <_svfiprintf_r+0x2e>
 8007828:	230c      	movs	r3, #12
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	e0d1      	b.n	80079d6 <_svfiprintf_r+0x1d2>
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	616b      	str	r3, [r5, #20]
 8007836:	2300      	movs	r3, #0
 8007838:	9309      	str	r3, [sp, #36]	; 0x24
 800783a:	2320      	movs	r3, #32
 800783c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007840:	f8cd 800c 	str.w	r8, [sp, #12]
 8007844:	2330      	movs	r3, #48	; 0x30
 8007846:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079f0 <_svfiprintf_r+0x1ec>
 800784a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800784e:	f04f 0901 	mov.w	r9, #1
 8007852:	4623      	mov	r3, r4
 8007854:	469a      	mov	sl, r3
 8007856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800785a:	b10a      	cbz	r2, 8007860 <_svfiprintf_r+0x5c>
 800785c:	2a25      	cmp	r2, #37	; 0x25
 800785e:	d1f9      	bne.n	8007854 <_svfiprintf_r+0x50>
 8007860:	ebba 0b04 	subs.w	fp, sl, r4
 8007864:	d00b      	beq.n	800787e <_svfiprintf_r+0x7a>
 8007866:	465b      	mov	r3, fp
 8007868:	4622      	mov	r2, r4
 800786a:	4629      	mov	r1, r5
 800786c:	4638      	mov	r0, r7
 800786e:	f7ff ff6d 	bl	800774c <__ssputs_r>
 8007872:	3001      	adds	r0, #1
 8007874:	f000 80aa 	beq.w	80079cc <_svfiprintf_r+0x1c8>
 8007878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800787a:	445a      	add	r2, fp
 800787c:	9209      	str	r2, [sp, #36]	; 0x24
 800787e:	f89a 3000 	ldrb.w	r3, [sl]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80a2 	beq.w	80079cc <_svfiprintf_r+0x1c8>
 8007888:	2300      	movs	r3, #0
 800788a:	f04f 32ff 	mov.w	r2, #4294967295
 800788e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007892:	f10a 0a01 	add.w	sl, sl, #1
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	9307      	str	r3, [sp, #28]
 800789a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800789e:	931a      	str	r3, [sp, #104]	; 0x68
 80078a0:	4654      	mov	r4, sl
 80078a2:	2205      	movs	r2, #5
 80078a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a8:	4851      	ldr	r0, [pc, #324]	; (80079f0 <_svfiprintf_r+0x1ec>)
 80078aa:	f7f8 fd29 	bl	8000300 <memchr>
 80078ae:	9a04      	ldr	r2, [sp, #16]
 80078b0:	b9d8      	cbnz	r0, 80078ea <_svfiprintf_r+0xe6>
 80078b2:	06d0      	lsls	r0, r2, #27
 80078b4:	bf44      	itt	mi
 80078b6:	2320      	movmi	r3, #32
 80078b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078bc:	0711      	lsls	r1, r2, #28
 80078be:	bf44      	itt	mi
 80078c0:	232b      	movmi	r3, #43	; 0x2b
 80078c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ca:	2b2a      	cmp	r3, #42	; 0x2a
 80078cc:	d015      	beq.n	80078fa <_svfiprintf_r+0xf6>
 80078ce:	9a07      	ldr	r2, [sp, #28]
 80078d0:	4654      	mov	r4, sl
 80078d2:	2000      	movs	r0, #0
 80078d4:	f04f 0c0a 	mov.w	ip, #10
 80078d8:	4621      	mov	r1, r4
 80078da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078de:	3b30      	subs	r3, #48	; 0x30
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d94e      	bls.n	8007982 <_svfiprintf_r+0x17e>
 80078e4:	b1b0      	cbz	r0, 8007914 <_svfiprintf_r+0x110>
 80078e6:	9207      	str	r2, [sp, #28]
 80078e8:	e014      	b.n	8007914 <_svfiprintf_r+0x110>
 80078ea:	eba0 0308 	sub.w	r3, r0, r8
 80078ee:	fa09 f303 	lsl.w	r3, r9, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	9304      	str	r3, [sp, #16]
 80078f6:	46a2      	mov	sl, r4
 80078f8:	e7d2      	b.n	80078a0 <_svfiprintf_r+0x9c>
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	9103      	str	r1, [sp, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfbb      	ittet	lt
 8007906:	425b      	neglt	r3, r3
 8007908:	f042 0202 	orrlt.w	r2, r2, #2
 800790c:	9307      	strge	r3, [sp, #28]
 800790e:	9307      	strlt	r3, [sp, #28]
 8007910:	bfb8      	it	lt
 8007912:	9204      	strlt	r2, [sp, #16]
 8007914:	7823      	ldrb	r3, [r4, #0]
 8007916:	2b2e      	cmp	r3, #46	; 0x2e
 8007918:	d10c      	bne.n	8007934 <_svfiprintf_r+0x130>
 800791a:	7863      	ldrb	r3, [r4, #1]
 800791c:	2b2a      	cmp	r3, #42	; 0x2a
 800791e:	d135      	bne.n	800798c <_svfiprintf_r+0x188>
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	1d1a      	adds	r2, r3, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	9203      	str	r2, [sp, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	bfb8      	it	lt
 800792c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007930:	3402      	adds	r4, #2
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a00 <_svfiprintf_r+0x1fc>
 8007938:	7821      	ldrb	r1, [r4, #0]
 800793a:	2203      	movs	r2, #3
 800793c:	4650      	mov	r0, sl
 800793e:	f7f8 fcdf 	bl	8000300 <memchr>
 8007942:	b140      	cbz	r0, 8007956 <_svfiprintf_r+0x152>
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	eba0 000a 	sub.w	r0, r0, sl
 800794a:	fa03 f000 	lsl.w	r0, r3, r0
 800794e:	9b04      	ldr	r3, [sp, #16]
 8007950:	4303      	orrs	r3, r0
 8007952:	3401      	adds	r4, #1
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795a:	4826      	ldr	r0, [pc, #152]	; (80079f4 <_svfiprintf_r+0x1f0>)
 800795c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007960:	2206      	movs	r2, #6
 8007962:	f7f8 fccd 	bl	8000300 <memchr>
 8007966:	2800      	cmp	r0, #0
 8007968:	d038      	beq.n	80079dc <_svfiprintf_r+0x1d8>
 800796a:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <_svfiprintf_r+0x1f4>)
 800796c:	bb1b      	cbnz	r3, 80079b6 <_svfiprintf_r+0x1b2>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	3307      	adds	r3, #7
 8007972:	f023 0307 	bic.w	r3, r3, #7
 8007976:	3308      	adds	r3, #8
 8007978:	9303      	str	r3, [sp, #12]
 800797a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797c:	4433      	add	r3, r6
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	e767      	b.n	8007852 <_svfiprintf_r+0x4e>
 8007982:	fb0c 3202 	mla	r2, ip, r2, r3
 8007986:	460c      	mov	r4, r1
 8007988:	2001      	movs	r0, #1
 800798a:	e7a5      	b.n	80078d8 <_svfiprintf_r+0xd4>
 800798c:	2300      	movs	r3, #0
 800798e:	3401      	adds	r4, #1
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	4619      	mov	r1, r3
 8007994:	f04f 0c0a 	mov.w	ip, #10
 8007998:	4620      	mov	r0, r4
 800799a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800799e:	3a30      	subs	r2, #48	; 0x30
 80079a0:	2a09      	cmp	r2, #9
 80079a2:	d903      	bls.n	80079ac <_svfiprintf_r+0x1a8>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0c5      	beq.n	8007934 <_svfiprintf_r+0x130>
 80079a8:	9105      	str	r1, [sp, #20]
 80079aa:	e7c3      	b.n	8007934 <_svfiprintf_r+0x130>
 80079ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b0:	4604      	mov	r4, r0
 80079b2:	2301      	movs	r3, #1
 80079b4:	e7f0      	b.n	8007998 <_svfiprintf_r+0x194>
 80079b6:	ab03      	add	r3, sp, #12
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	462a      	mov	r2, r5
 80079bc:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <_svfiprintf_r+0x1f8>)
 80079be:	a904      	add	r1, sp, #16
 80079c0:	4638      	mov	r0, r7
 80079c2:	f3af 8000 	nop.w
 80079c6:	1c42      	adds	r2, r0, #1
 80079c8:	4606      	mov	r6, r0
 80079ca:	d1d6      	bne.n	800797a <_svfiprintf_r+0x176>
 80079cc:	89ab      	ldrh	r3, [r5, #12]
 80079ce:	065b      	lsls	r3, r3, #25
 80079d0:	f53f af2c 	bmi.w	800782c <_svfiprintf_r+0x28>
 80079d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d6:	b01d      	add	sp, #116	; 0x74
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	ab03      	add	r3, sp, #12
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	462a      	mov	r2, r5
 80079e2:	4b06      	ldr	r3, [pc, #24]	; (80079fc <_svfiprintf_r+0x1f8>)
 80079e4:	a904      	add	r1, sp, #16
 80079e6:	4638      	mov	r0, r7
 80079e8:	f000 f87a 	bl	8007ae0 <_printf_i>
 80079ec:	e7eb      	b.n	80079c6 <_svfiprintf_r+0x1c2>
 80079ee:	bf00      	nop
 80079f0:	08008210 	.word	0x08008210
 80079f4:	0800821a 	.word	0x0800821a
 80079f8:	00000000 	.word	0x00000000
 80079fc:	0800774d 	.word	0x0800774d
 8007a00:	08008216 	.word	0x08008216

08007a04 <_printf_common>:
 8007a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a08:	4616      	mov	r6, r2
 8007a0a:	4699      	mov	r9, r3
 8007a0c:	688a      	ldr	r2, [r1, #8]
 8007a0e:	690b      	ldr	r3, [r1, #16]
 8007a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	bfb8      	it	lt
 8007a18:	4613      	movlt	r3, r2
 8007a1a:	6033      	str	r3, [r6, #0]
 8007a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a20:	4607      	mov	r7, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b10a      	cbz	r2, 8007a2a <_printf_common+0x26>
 8007a26:	3301      	adds	r3, #1
 8007a28:	6033      	str	r3, [r6, #0]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	0699      	lsls	r1, r3, #26
 8007a2e:	bf42      	ittt	mi
 8007a30:	6833      	ldrmi	r3, [r6, #0]
 8007a32:	3302      	addmi	r3, #2
 8007a34:	6033      	strmi	r3, [r6, #0]
 8007a36:	6825      	ldr	r5, [r4, #0]
 8007a38:	f015 0506 	ands.w	r5, r5, #6
 8007a3c:	d106      	bne.n	8007a4c <_printf_common+0x48>
 8007a3e:	f104 0a19 	add.w	sl, r4, #25
 8007a42:	68e3      	ldr	r3, [r4, #12]
 8007a44:	6832      	ldr	r2, [r6, #0]
 8007a46:	1a9b      	subs	r3, r3, r2
 8007a48:	42ab      	cmp	r3, r5
 8007a4a:	dc26      	bgt.n	8007a9a <_printf_common+0x96>
 8007a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a50:	1e13      	subs	r3, r2, #0
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	bf18      	it	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	0692      	lsls	r2, r2, #26
 8007a5a:	d42b      	bmi.n	8007ab4 <_printf_common+0xb0>
 8007a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a60:	4649      	mov	r1, r9
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	3001      	adds	r0, #1
 8007a68:	d01e      	beq.n	8007aa8 <_printf_common+0xa4>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	68e5      	ldr	r5, [r4, #12]
 8007a6e:	6832      	ldr	r2, [r6, #0]
 8007a70:	f003 0306 	and.w	r3, r3, #6
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	bf08      	it	eq
 8007a78:	1aad      	subeq	r5, r5, r2
 8007a7a:	68a3      	ldr	r3, [r4, #8]
 8007a7c:	6922      	ldr	r2, [r4, #16]
 8007a7e:	bf0c      	ite	eq
 8007a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a84:	2500      	movne	r5, #0
 8007a86:	4293      	cmp	r3, r2
 8007a88:	bfc4      	itt	gt
 8007a8a:	1a9b      	subgt	r3, r3, r2
 8007a8c:	18ed      	addgt	r5, r5, r3
 8007a8e:	2600      	movs	r6, #0
 8007a90:	341a      	adds	r4, #26
 8007a92:	42b5      	cmp	r5, r6
 8007a94:	d11a      	bne.n	8007acc <_printf_common+0xc8>
 8007a96:	2000      	movs	r0, #0
 8007a98:	e008      	b.n	8007aac <_printf_common+0xa8>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4652      	mov	r2, sl
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	47c0      	blx	r8
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d103      	bne.n	8007ab0 <_printf_common+0xac>
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab0:	3501      	adds	r5, #1
 8007ab2:	e7c6      	b.n	8007a42 <_printf_common+0x3e>
 8007ab4:	18e1      	adds	r1, r4, r3
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	2030      	movs	r0, #48	; 0x30
 8007aba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007abe:	4422      	add	r2, r4
 8007ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ac8:	3302      	adds	r3, #2
 8007aca:	e7c7      	b.n	8007a5c <_printf_common+0x58>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	47c0      	blx	r8
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d0e6      	beq.n	8007aa8 <_printf_common+0xa4>
 8007ada:	3601      	adds	r6, #1
 8007adc:	e7d9      	b.n	8007a92 <_printf_common+0x8e>
	...

08007ae0 <_printf_i>:
 8007ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	7e0f      	ldrb	r7, [r1, #24]
 8007ae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ae8:	2f78      	cmp	r7, #120	; 0x78
 8007aea:	4691      	mov	r9, r2
 8007aec:	4680      	mov	r8, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	469a      	mov	sl, r3
 8007af2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007af6:	d807      	bhi.n	8007b08 <_printf_i+0x28>
 8007af8:	2f62      	cmp	r7, #98	; 0x62
 8007afa:	d80a      	bhi.n	8007b12 <_printf_i+0x32>
 8007afc:	2f00      	cmp	r7, #0
 8007afe:	f000 80d8 	beq.w	8007cb2 <_printf_i+0x1d2>
 8007b02:	2f58      	cmp	r7, #88	; 0x58
 8007b04:	f000 80a3 	beq.w	8007c4e <_printf_i+0x16e>
 8007b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b10:	e03a      	b.n	8007b88 <_printf_i+0xa8>
 8007b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b16:	2b15      	cmp	r3, #21
 8007b18:	d8f6      	bhi.n	8007b08 <_printf_i+0x28>
 8007b1a:	a101      	add	r1, pc, #4	; (adr r1, 8007b20 <_printf_i+0x40>)
 8007b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b20:	08007b79 	.word	0x08007b79
 8007b24:	08007b8d 	.word	0x08007b8d
 8007b28:	08007b09 	.word	0x08007b09
 8007b2c:	08007b09 	.word	0x08007b09
 8007b30:	08007b09 	.word	0x08007b09
 8007b34:	08007b09 	.word	0x08007b09
 8007b38:	08007b8d 	.word	0x08007b8d
 8007b3c:	08007b09 	.word	0x08007b09
 8007b40:	08007b09 	.word	0x08007b09
 8007b44:	08007b09 	.word	0x08007b09
 8007b48:	08007b09 	.word	0x08007b09
 8007b4c:	08007c99 	.word	0x08007c99
 8007b50:	08007bbd 	.word	0x08007bbd
 8007b54:	08007c7b 	.word	0x08007c7b
 8007b58:	08007b09 	.word	0x08007b09
 8007b5c:	08007b09 	.word	0x08007b09
 8007b60:	08007cbb 	.word	0x08007cbb
 8007b64:	08007b09 	.word	0x08007b09
 8007b68:	08007bbd 	.word	0x08007bbd
 8007b6c:	08007b09 	.word	0x08007b09
 8007b70:	08007b09 	.word	0x08007b09
 8007b74:	08007c83 	.word	0x08007c83
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	1d1a      	adds	r2, r3, #4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	602a      	str	r2, [r5, #0]
 8007b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0a3      	b.n	8007cd4 <_printf_i+0x1f4>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	6829      	ldr	r1, [r5, #0]
 8007b90:	0606      	lsls	r6, r0, #24
 8007b92:	f101 0304 	add.w	r3, r1, #4
 8007b96:	d50a      	bpl.n	8007bae <_printf_i+0xce>
 8007b98:	680e      	ldr	r6, [r1, #0]
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	2e00      	cmp	r6, #0
 8007b9e:	da03      	bge.n	8007ba8 <_printf_i+0xc8>
 8007ba0:	232d      	movs	r3, #45	; 0x2d
 8007ba2:	4276      	negs	r6, r6
 8007ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ba8:	485e      	ldr	r0, [pc, #376]	; (8007d24 <_printf_i+0x244>)
 8007baa:	230a      	movs	r3, #10
 8007bac:	e019      	b.n	8007be2 <_printf_i+0x102>
 8007bae:	680e      	ldr	r6, [r1, #0]
 8007bb0:	602b      	str	r3, [r5, #0]
 8007bb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bb6:	bf18      	it	ne
 8007bb8:	b236      	sxthne	r6, r6
 8007bba:	e7ef      	b.n	8007b9c <_printf_i+0xbc>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	6820      	ldr	r0, [r4, #0]
 8007bc0:	1d19      	adds	r1, r3, #4
 8007bc2:	6029      	str	r1, [r5, #0]
 8007bc4:	0601      	lsls	r1, r0, #24
 8007bc6:	d501      	bpl.n	8007bcc <_printf_i+0xec>
 8007bc8:	681e      	ldr	r6, [r3, #0]
 8007bca:	e002      	b.n	8007bd2 <_printf_i+0xf2>
 8007bcc:	0646      	lsls	r6, r0, #25
 8007bce:	d5fb      	bpl.n	8007bc8 <_printf_i+0xe8>
 8007bd0:	881e      	ldrh	r6, [r3, #0]
 8007bd2:	4854      	ldr	r0, [pc, #336]	; (8007d24 <_printf_i+0x244>)
 8007bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2308      	moveq	r3, #8
 8007bda:	230a      	movne	r3, #10
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007be2:	6865      	ldr	r5, [r4, #4]
 8007be4:	60a5      	str	r5, [r4, #8]
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	bfa2      	ittt	ge
 8007bea:	6821      	ldrge	r1, [r4, #0]
 8007bec:	f021 0104 	bicge.w	r1, r1, #4
 8007bf0:	6021      	strge	r1, [r4, #0]
 8007bf2:	b90e      	cbnz	r6, 8007bf8 <_printf_i+0x118>
 8007bf4:	2d00      	cmp	r5, #0
 8007bf6:	d04d      	beq.n	8007c94 <_printf_i+0x1b4>
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bfe:	fb03 6711 	mls	r7, r3, r1, r6
 8007c02:	5dc7      	ldrb	r7, [r0, r7]
 8007c04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c08:	4637      	mov	r7, r6
 8007c0a:	42bb      	cmp	r3, r7
 8007c0c:	460e      	mov	r6, r1
 8007c0e:	d9f4      	bls.n	8007bfa <_printf_i+0x11a>
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d10b      	bne.n	8007c2c <_printf_i+0x14c>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	07de      	lsls	r6, r3, #31
 8007c18:	d508      	bpl.n	8007c2c <_printf_i+0x14c>
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	6861      	ldr	r1, [r4, #4]
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	bfde      	ittt	le
 8007c22:	2330      	movle	r3, #48	; 0x30
 8007c24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c2c:	1b52      	subs	r2, r2, r5
 8007c2e:	6122      	str	r2, [r4, #16]
 8007c30:	f8cd a000 	str.w	sl, [sp]
 8007c34:	464b      	mov	r3, r9
 8007c36:	aa03      	add	r2, sp, #12
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f7ff fee2 	bl	8007a04 <_printf_common>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d14c      	bne.n	8007cde <_printf_i+0x1fe>
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	b004      	add	sp, #16
 8007c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4e:	4835      	ldr	r0, [pc, #212]	; (8007d24 <_printf_i+0x244>)
 8007c50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c54:	6829      	ldr	r1, [r5, #0]
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c5c:	6029      	str	r1, [r5, #0]
 8007c5e:	061d      	lsls	r5, r3, #24
 8007c60:	d514      	bpl.n	8007c8c <_printf_i+0x1ac>
 8007c62:	07df      	lsls	r7, r3, #31
 8007c64:	bf44      	itt	mi
 8007c66:	f043 0320 	orrmi.w	r3, r3, #32
 8007c6a:	6023      	strmi	r3, [r4, #0]
 8007c6c:	b91e      	cbnz	r6, 8007c76 <_printf_i+0x196>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	f023 0320 	bic.w	r3, r3, #32
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	2310      	movs	r3, #16
 8007c78:	e7b0      	b.n	8007bdc <_printf_i+0xfc>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	f043 0320 	orr.w	r3, r3, #32
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	2378      	movs	r3, #120	; 0x78
 8007c84:	4828      	ldr	r0, [pc, #160]	; (8007d28 <_printf_i+0x248>)
 8007c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c8a:	e7e3      	b.n	8007c54 <_printf_i+0x174>
 8007c8c:	0659      	lsls	r1, r3, #25
 8007c8e:	bf48      	it	mi
 8007c90:	b2b6      	uxthmi	r6, r6
 8007c92:	e7e6      	b.n	8007c62 <_printf_i+0x182>
 8007c94:	4615      	mov	r5, r2
 8007c96:	e7bb      	b.n	8007c10 <_printf_i+0x130>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	6826      	ldr	r6, [r4, #0]
 8007c9c:	6961      	ldr	r1, [r4, #20]
 8007c9e:	1d18      	adds	r0, r3, #4
 8007ca0:	6028      	str	r0, [r5, #0]
 8007ca2:	0635      	lsls	r5, r6, #24
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	d501      	bpl.n	8007cac <_printf_i+0x1cc>
 8007ca8:	6019      	str	r1, [r3, #0]
 8007caa:	e002      	b.n	8007cb2 <_printf_i+0x1d2>
 8007cac:	0670      	lsls	r0, r6, #25
 8007cae:	d5fb      	bpl.n	8007ca8 <_printf_i+0x1c8>
 8007cb0:	8019      	strh	r1, [r3, #0]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6123      	str	r3, [r4, #16]
 8007cb6:	4615      	mov	r5, r2
 8007cb8:	e7ba      	b.n	8007c30 <_printf_i+0x150>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	1d1a      	adds	r2, r3, #4
 8007cbe:	602a      	str	r2, [r5, #0]
 8007cc0:	681d      	ldr	r5, [r3, #0]
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f7f8 fb1a 	bl	8000300 <memchr>
 8007ccc:	b108      	cbz	r0, 8007cd2 <_printf_i+0x1f2>
 8007cce:	1b40      	subs	r0, r0, r5
 8007cd0:	6060      	str	r0, [r4, #4]
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	6123      	str	r3, [r4, #16]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cdc:	e7a8      	b.n	8007c30 <_printf_i+0x150>
 8007cde:	6923      	ldr	r3, [r4, #16]
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	47d0      	blx	sl
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d0ab      	beq.n	8007c44 <_printf_i+0x164>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	079b      	lsls	r3, r3, #30
 8007cf0:	d413      	bmi.n	8007d1a <_printf_i+0x23a>
 8007cf2:	68e0      	ldr	r0, [r4, #12]
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	4298      	cmp	r0, r3
 8007cf8:	bfb8      	it	lt
 8007cfa:	4618      	movlt	r0, r3
 8007cfc:	e7a4      	b.n	8007c48 <_printf_i+0x168>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4632      	mov	r2, r6
 8007d02:	4649      	mov	r1, r9
 8007d04:	4640      	mov	r0, r8
 8007d06:	47d0      	blx	sl
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d09b      	beq.n	8007c44 <_printf_i+0x164>
 8007d0c:	3501      	adds	r5, #1
 8007d0e:	68e3      	ldr	r3, [r4, #12]
 8007d10:	9903      	ldr	r1, [sp, #12]
 8007d12:	1a5b      	subs	r3, r3, r1
 8007d14:	42ab      	cmp	r3, r5
 8007d16:	dcf2      	bgt.n	8007cfe <_printf_i+0x21e>
 8007d18:	e7eb      	b.n	8007cf2 <_printf_i+0x212>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	f104 0619 	add.w	r6, r4, #25
 8007d20:	e7f5      	b.n	8007d0e <_printf_i+0x22e>
 8007d22:	bf00      	nop
 8007d24:	08008221 	.word	0x08008221
 8007d28:	08008232 	.word	0x08008232

08007d2c <memcpy>:
 8007d2c:	440a      	add	r2, r1
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d34:	d100      	bne.n	8007d38 <memcpy+0xc>
 8007d36:	4770      	bx	lr
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d42:	4291      	cmp	r1, r2
 8007d44:	d1f9      	bne.n	8007d3a <memcpy+0xe>
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <memmove>:
 8007d48:	4288      	cmp	r0, r1
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	eb01 0402 	add.w	r4, r1, r2
 8007d50:	d902      	bls.n	8007d58 <memmove+0x10>
 8007d52:	4284      	cmp	r4, r0
 8007d54:	4623      	mov	r3, r4
 8007d56:	d807      	bhi.n	8007d68 <memmove+0x20>
 8007d58:	1e43      	subs	r3, r0, #1
 8007d5a:	42a1      	cmp	r1, r4
 8007d5c:	d008      	beq.n	8007d70 <memmove+0x28>
 8007d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d66:	e7f8      	b.n	8007d5a <memmove+0x12>
 8007d68:	4402      	add	r2, r0
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	428a      	cmp	r2, r1
 8007d6e:	d100      	bne.n	8007d72 <memmove+0x2a>
 8007d70:	bd10      	pop	{r4, pc}
 8007d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d7a:	e7f7      	b.n	8007d6c <memmove+0x24>

08007d7c <_free_r>:
 8007d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d044      	beq.n	8007e0c <_free_r+0x90>
 8007d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d86:	9001      	str	r0, [sp, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d8e:	bfb8      	it	lt
 8007d90:	18e4      	addlt	r4, r4, r3
 8007d92:	f000 f913 	bl	8007fbc <__malloc_lock>
 8007d96:	4a1e      	ldr	r2, [pc, #120]	; (8007e10 <_free_r+0x94>)
 8007d98:	9801      	ldr	r0, [sp, #4]
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	b933      	cbnz	r3, 8007dac <_free_r+0x30>
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	b003      	add	sp, #12
 8007da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007da8:	f000 b90e 	b.w	8007fc8 <__malloc_unlock>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d908      	bls.n	8007dc2 <_free_r+0x46>
 8007db0:	6825      	ldr	r5, [r4, #0]
 8007db2:	1961      	adds	r1, r4, r5
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1949      	addeq	r1, r1, r5
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	e7ed      	b.n	8007d9e <_free_r+0x22>
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b10b      	cbz	r3, 8007dcc <_free_r+0x50>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x46>
 8007dcc:	6811      	ldr	r1, [r2, #0]
 8007dce:	1855      	adds	r5, r2, r1
 8007dd0:	42a5      	cmp	r5, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x70>
 8007dd4:	6824      	ldr	r4, [r4, #0]
 8007dd6:	4421      	add	r1, r4
 8007dd8:	1854      	adds	r4, r2, r1
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	d1e0      	bne.n	8007da2 <_free_r+0x26>
 8007de0:	681c      	ldr	r4, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	6053      	str	r3, [r2, #4]
 8007de6:	4421      	add	r1, r4
 8007de8:	6011      	str	r1, [r2, #0]
 8007dea:	e7da      	b.n	8007da2 <_free_r+0x26>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x78>
 8007dee:	230c      	movs	r3, #12
 8007df0:	6003      	str	r3, [r0, #0]
 8007df2:	e7d6      	b.n	8007da2 <_free_r+0x26>
 8007df4:	6825      	ldr	r5, [r4, #0]
 8007df6:	1961      	adds	r1, r4, r5
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	bf04      	itt	eq
 8007dfc:	6819      	ldreq	r1, [r3, #0]
 8007dfe:	685b      	ldreq	r3, [r3, #4]
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	bf04      	itt	eq
 8007e04:	1949      	addeq	r1, r1, r5
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	6054      	str	r4, [r2, #4]
 8007e0a:	e7ca      	b.n	8007da2 <_free_r+0x26>
 8007e0c:	b003      	add	sp, #12
 8007e0e:	bd30      	pop	{r4, r5, pc}
 8007e10:	24000670 	.word	0x24000670

08007e14 <sbrk_aligned>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4e0e      	ldr	r6, [pc, #56]	; (8007e50 <sbrk_aligned+0x3c>)
 8007e18:	460c      	mov	r4, r1
 8007e1a:	6831      	ldr	r1, [r6, #0]
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	b911      	cbnz	r1, 8007e26 <sbrk_aligned+0x12>
 8007e20:	f000 f8bc 	bl	8007f9c <_sbrk_r>
 8007e24:	6030      	str	r0, [r6, #0]
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 f8b7 	bl	8007f9c <_sbrk_r>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	d00a      	beq.n	8007e48 <sbrk_aligned+0x34>
 8007e32:	1cc4      	adds	r4, r0, #3
 8007e34:	f024 0403 	bic.w	r4, r4, #3
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d007      	beq.n	8007e4c <sbrk_aligned+0x38>
 8007e3c:	1a21      	subs	r1, r4, r0
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f8ac 	bl	8007f9c <_sbrk_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d101      	bne.n	8007e4c <sbrk_aligned+0x38>
 8007e48:	f04f 34ff 	mov.w	r4, #4294967295
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	24000674 	.word	0x24000674

08007e54 <_malloc_r>:
 8007e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e58:	1ccd      	adds	r5, r1, #3
 8007e5a:	f025 0503 	bic.w	r5, r5, #3
 8007e5e:	3508      	adds	r5, #8
 8007e60:	2d0c      	cmp	r5, #12
 8007e62:	bf38      	it	cc
 8007e64:	250c      	movcc	r5, #12
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	4607      	mov	r7, r0
 8007e6a:	db01      	blt.n	8007e70 <_malloc_r+0x1c>
 8007e6c:	42a9      	cmp	r1, r5
 8007e6e:	d905      	bls.n	8007e7c <_malloc_r+0x28>
 8007e70:	230c      	movs	r3, #12
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	2600      	movs	r6, #0
 8007e76:	4630      	mov	r0, r6
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7c:	4e2e      	ldr	r6, [pc, #184]	; (8007f38 <_malloc_r+0xe4>)
 8007e7e:	f000 f89d 	bl	8007fbc <__malloc_lock>
 8007e82:	6833      	ldr	r3, [r6, #0]
 8007e84:	461c      	mov	r4, r3
 8007e86:	bb34      	cbnz	r4, 8007ed6 <_malloc_r+0x82>
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	f7ff ffc2 	bl	8007e14 <sbrk_aligned>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	4604      	mov	r4, r0
 8007e94:	d14d      	bne.n	8007f32 <_malloc_r+0xde>
 8007e96:	6834      	ldr	r4, [r6, #0]
 8007e98:	4626      	mov	r6, r4
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	d140      	bne.n	8007f20 <_malloc_r+0xcc>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	eb04 0803 	add.w	r8, r4, r3
 8007ea8:	f000 f878 	bl	8007f9c <_sbrk_r>
 8007eac:	4580      	cmp	r8, r0
 8007eae:	d13a      	bne.n	8007f26 <_malloc_r+0xd2>
 8007eb0:	6821      	ldr	r1, [r4, #0]
 8007eb2:	3503      	adds	r5, #3
 8007eb4:	1a6d      	subs	r5, r5, r1
 8007eb6:	f025 0503 	bic.w	r5, r5, #3
 8007eba:	3508      	adds	r5, #8
 8007ebc:	2d0c      	cmp	r5, #12
 8007ebe:	bf38      	it	cc
 8007ec0:	250c      	movcc	r5, #12
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f7ff ffa5 	bl	8007e14 <sbrk_aligned>
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d02b      	beq.n	8007f26 <_malloc_r+0xd2>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	442b      	add	r3, r5
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	e00e      	b.n	8007ef4 <_malloc_r+0xa0>
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	1b52      	subs	r2, r2, r5
 8007eda:	d41e      	bmi.n	8007f1a <_malloc_r+0xc6>
 8007edc:	2a0b      	cmp	r2, #11
 8007ede:	d916      	bls.n	8007f0e <_malloc_r+0xba>
 8007ee0:	1961      	adds	r1, r4, r5
 8007ee2:	42a3      	cmp	r3, r4
 8007ee4:	6025      	str	r5, [r4, #0]
 8007ee6:	bf18      	it	ne
 8007ee8:	6059      	strne	r1, [r3, #4]
 8007eea:	6863      	ldr	r3, [r4, #4]
 8007eec:	bf08      	it	eq
 8007eee:	6031      	streq	r1, [r6, #0]
 8007ef0:	5162      	str	r2, [r4, r5]
 8007ef2:	604b      	str	r3, [r1, #4]
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f104 060b 	add.w	r6, r4, #11
 8007efa:	f000 f865 	bl	8007fc8 <__malloc_unlock>
 8007efe:	f026 0607 	bic.w	r6, r6, #7
 8007f02:	1d23      	adds	r3, r4, #4
 8007f04:	1af2      	subs	r2, r6, r3
 8007f06:	d0b6      	beq.n	8007e76 <_malloc_r+0x22>
 8007f08:	1b9b      	subs	r3, r3, r6
 8007f0a:	50a3      	str	r3, [r4, r2]
 8007f0c:	e7b3      	b.n	8007e76 <_malloc_r+0x22>
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	bf0c      	ite	eq
 8007f14:	6032      	streq	r2, [r6, #0]
 8007f16:	605a      	strne	r2, [r3, #4]
 8007f18:	e7ec      	b.n	8007ef4 <_malloc_r+0xa0>
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	6864      	ldr	r4, [r4, #4]
 8007f1e:	e7b2      	b.n	8007e86 <_malloc_r+0x32>
 8007f20:	4634      	mov	r4, r6
 8007f22:	6876      	ldr	r6, [r6, #4]
 8007f24:	e7b9      	b.n	8007e9a <_malloc_r+0x46>
 8007f26:	230c      	movs	r3, #12
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f000 f84c 	bl	8007fc8 <__malloc_unlock>
 8007f30:	e7a1      	b.n	8007e76 <_malloc_r+0x22>
 8007f32:	6025      	str	r5, [r4, #0]
 8007f34:	e7de      	b.n	8007ef4 <_malloc_r+0xa0>
 8007f36:	bf00      	nop
 8007f38:	24000670 	.word	0x24000670

08007f3c <_realloc_r>:
 8007f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	4680      	mov	r8, r0
 8007f42:	4614      	mov	r4, r2
 8007f44:	460e      	mov	r6, r1
 8007f46:	b921      	cbnz	r1, 8007f52 <_realloc_r+0x16>
 8007f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	f7ff bf81 	b.w	8007e54 <_malloc_r>
 8007f52:	b92a      	cbnz	r2, 8007f60 <_realloc_r+0x24>
 8007f54:	f7ff ff12 	bl	8007d7c <_free_r>
 8007f58:	4625      	mov	r5, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f60:	f000 f838 	bl	8007fd4 <_malloc_usable_size_r>
 8007f64:	4284      	cmp	r4, r0
 8007f66:	4607      	mov	r7, r0
 8007f68:	d802      	bhi.n	8007f70 <_realloc_r+0x34>
 8007f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f6e:	d812      	bhi.n	8007f96 <_realloc_r+0x5a>
 8007f70:	4621      	mov	r1, r4
 8007f72:	4640      	mov	r0, r8
 8007f74:	f7ff ff6e 	bl	8007e54 <_malloc_r>
 8007f78:	4605      	mov	r5, r0
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d0ed      	beq.n	8007f5a <_realloc_r+0x1e>
 8007f7e:	42bc      	cmp	r4, r7
 8007f80:	4622      	mov	r2, r4
 8007f82:	4631      	mov	r1, r6
 8007f84:	bf28      	it	cs
 8007f86:	463a      	movcs	r2, r7
 8007f88:	f7ff fed0 	bl	8007d2c <memcpy>
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f7ff fef4 	bl	8007d7c <_free_r>
 8007f94:	e7e1      	b.n	8007f5a <_realloc_r+0x1e>
 8007f96:	4635      	mov	r5, r6
 8007f98:	e7df      	b.n	8007f5a <_realloc_r+0x1e>
	...

08007f9c <_sbrk_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d06      	ldr	r5, [pc, #24]	; (8007fb8 <_sbrk_r+0x1c>)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	602b      	str	r3, [r5, #0]
 8007fa8:	f7f8 feba 	bl	8000d20 <_sbrk>
 8007fac:	1c43      	adds	r3, r0, #1
 8007fae:	d102      	bne.n	8007fb6 <_sbrk_r+0x1a>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	b103      	cbz	r3, 8007fb6 <_sbrk_r+0x1a>
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}
 8007fb8:	24000678 	.word	0x24000678

08007fbc <__malloc_lock>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	; (8007fc4 <__malloc_lock+0x8>)
 8007fbe:	f000 b811 	b.w	8007fe4 <__retarget_lock_acquire_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	2400067c 	.word	0x2400067c

08007fc8 <__malloc_unlock>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__malloc_unlock+0x8>)
 8007fca:	f000 b80c 	b.w	8007fe6 <__retarget_lock_release_recursive>
 8007fce:	bf00      	nop
 8007fd0:	2400067c 	.word	0x2400067c

08007fd4 <_malloc_usable_size_r>:
 8007fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd8:	1f18      	subs	r0, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bfbc      	itt	lt
 8007fde:	580b      	ldrlt	r3, [r1, r0]
 8007fe0:	18c0      	addlt	r0, r0, r3
 8007fe2:	4770      	bx	lr

08007fe4 <__retarget_lock_acquire_recursive>:
 8007fe4:	4770      	bx	lr

08007fe6 <__retarget_lock_release_recursive>:
 8007fe6:	4770      	bx	lr

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
