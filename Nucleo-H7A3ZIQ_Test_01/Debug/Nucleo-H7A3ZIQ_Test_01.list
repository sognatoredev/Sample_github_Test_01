
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d8c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  24000010  08006090  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000164  08006090  00020164  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001617b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027f1  00000000  00000000  000361b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001088  00000000  00000000  000389b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f68  00000000  00000000  00039a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030f66  00000000  00000000  0003a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016c83  00000000  00000000  0006b906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e83f  00000000  00000000  00082589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c0dc8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000448c  00000000  00000000  001c0e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006020 	.word	0x08006020

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006020 	.word	0x08006020

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LED_Process>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
void LED_Process (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  if (TIM1_CNT > 499)
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <LED_Process+0x44>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005fc:	d30c      	bcc.n	8000618 <LED_Process+0x28>
  {
    TIM1_CNT = 0;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <LED_Process+0x44>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]

    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000604:	2101      	movs	r1, #1
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <LED_Process+0x48>)
 8000608:	f001 f803 	bl	8001612 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800060c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <LED_Process+0x48>)
 8000612:	f000 fffe 	bl	8001612 <HAL_GPIO_TogglePin>
  else if (TIM2_CNT > 9)
  {
    TIM2_CNT = 0;
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  }
}
 8000616:	e00a      	b.n	800062e <LED_Process+0x3e>
  else if (TIM2_CNT > 9)
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <LED_Process+0x4c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b09      	cmp	r3, #9
 800061e:	d906      	bls.n	800062e <LED_Process+0x3e>
    TIM2_CNT = 0;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LED_Process+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000626:	2102      	movs	r1, #2
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <LED_Process+0x50>)
 800062a:	f000 fff2 	bl	8001612 <HAL_GPIO_TogglePin>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	24000158 	.word	0x24000158
 8000638:	58020400 	.word	0x58020400
 800063c:	2400015c 	.word	0x2400015c
 8000640:	58021000 	.word	0x58021000

08000644 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	; 0x38
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b80      	ldr	r3, [pc, #512]	; (800085c <MX_GPIO_Init+0x218>)
 800065c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000660:	4a7e      	ldr	r2, [pc, #504]	; (800085c <MX_GPIO_Init+0x218>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800066a:	4b7c      	ldr	r3, [pc, #496]	; (800085c <MX_GPIO_Init+0x218>)
 800066c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	623b      	str	r3, [r7, #32]
 8000676:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000678:	4b78      	ldr	r3, [pc, #480]	; (800085c <MX_GPIO_Init+0x218>)
 800067a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800067e:	4a77      	ldr	r2, [pc, #476]	; (800085c <MX_GPIO_Init+0x218>)
 8000680:	f043 0320 	orr.w	r3, r3, #32
 8000684:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000688:	4b74      	ldr	r3, [pc, #464]	; (800085c <MX_GPIO_Init+0x218>)
 800068a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b71      	ldr	r3, [pc, #452]	; (800085c <MX_GPIO_Init+0x218>)
 8000698:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800069c:	4a6f      	ldr	r2, [pc, #444]	; (800085c <MX_GPIO_Init+0x218>)
 800069e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006a6:	4b6d      	ldr	r3, [pc, #436]	; (800085c <MX_GPIO_Init+0x218>)
 80006a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4b69      	ldr	r3, [pc, #420]	; (800085c <MX_GPIO_Init+0x218>)
 80006b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ba:	4a68      	ldr	r2, [pc, #416]	; (800085c <MX_GPIO_Init+0x218>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c4:	4b65      	ldr	r3, [pc, #404]	; (800085c <MX_GPIO_Init+0x218>)
 80006c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	4b62      	ldr	r3, [pc, #392]	; (800085c <MX_GPIO_Init+0x218>)
 80006d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d8:	4a60      	ldr	r2, [pc, #384]	; (800085c <MX_GPIO_Init+0x218>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e2:	4b5e      	ldr	r3, [pc, #376]	; (800085c <MX_GPIO_Init+0x218>)
 80006e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f0:	4b5a      	ldr	r3, [pc, #360]	; (800085c <MX_GPIO_Init+0x218>)
 80006f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f6:	4a59      	ldr	r2, [pc, #356]	; (800085c <MX_GPIO_Init+0x218>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000700:	4b56      	ldr	r3, [pc, #344]	; (800085c <MX_GPIO_Init+0x218>)
 8000702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b53      	ldr	r3, [pc, #332]	; (800085c <MX_GPIO_Init+0x218>)
 8000710:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000714:	4a51      	ldr	r2, [pc, #324]	; (800085c <MX_GPIO_Init+0x218>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800071e:	4b4f      	ldr	r3, [pc, #316]	; (800085c <MX_GPIO_Init+0x218>)
 8000720:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072c:	4b4b      	ldr	r3, [pc, #300]	; (800085c <MX_GPIO_Init+0x218>)
 800072e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000732:	4a4a      	ldr	r2, [pc, #296]	; (800085c <MX_GPIO_Init+0x218>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <MX_GPIO_Init+0x218>)
 800073e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000750:	4843      	ldr	r0, [pc, #268]	; (8000860 <MX_GPIO_Init+0x21c>)
 8000752:	f000 ff45 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f244 0101 	movw	r1, #16385	; 0x4001
 800075c:	4841      	ldr	r0, [pc, #260]	; (8000864 <MX_GPIO_Init+0x220>)
 800075e:	f000 ff3f 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	4840      	ldr	r0, [pc, #256]	; (8000868 <MX_GPIO_Init+0x224>)
 8000768:	f000 ff3a 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	4619      	mov	r1, r3
 8000780:	483a      	ldr	r0, [pc, #232]	; (800086c <MX_GPIO_Init+0x228>)
 8000782:	f000 fd7d 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	4830      	ldr	r0, [pc, #192]	; (8000860 <MX_GPIO_Init+0x21c>)
 80007a0:	f000 fd6e 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007a4:	f244 0301 	movw	r3, #16385	; 0x4001
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	4829      	ldr	r0, [pc, #164]	; (8000864 <MX_GPIO_Init+0x220>)
 80007be:	f000 fd5f 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	4619      	mov	r1, r3
 80007d6:	4826      	ldr	r0, [pc, #152]	; (8000870 <MX_GPIO_Init+0x22c>)
 80007d8:	f000 fd52 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80007dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4820      	ldr	r0, [pc, #128]	; (8000874 <MX_GPIO_Init+0x230>)
 80007f2:	f000 fd45 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000808:	230a      	movs	r3, #10
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	4818      	ldr	r0, [pc, #96]	; (8000874 <MX_GPIO_Init+0x230>)
 8000814:	f000 fd34 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000818:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	4810      	ldr	r0, [pc, #64]	; (8000874 <MX_GPIO_Init+0x230>)
 8000832:	f000 fd25 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000836:	2302      	movs	r3, #2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4619      	mov	r1, r3
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_GPIO_Init+0x224>)
 800084e:	f000 fd17 	bl	8001280 <HAL_GPIO_Init>

}
 8000852:	bf00      	nop
 8000854:	3738      	adds	r7, #56	; 0x38
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	58024400 	.word	0x58024400
 8000860:	58021400 	.word	0x58021400
 8000864:	58020400 	.word	0x58020400
 8000868:	58021000 	.word	0x58021000
 800086c:	58020800 	.word	0x58020800
 8000870:	58021800 	.word	0x58021800
 8000874:	58020000 	.word	0x58020000

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f000 fb5e 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f818 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f7ff fede 	bl	8000644 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000888:	f000 fa70 	bl	8000d6c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800088c:	f000 fb24 	bl	8000ed8 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000890:	f000 f982 	bl	8000b98 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000894:	f000 f9d4 	bl	8000c40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <main+0x34>)
 800089a:	f003 fd25 	bl	80042e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <main+0x38>)
 80008a0:	f003 fd22 	bl	80042e8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Process();
 80008a4:	f7ff fea4 	bl	80005f0 <LED_Process>
  {
 80008a8:	e7fc      	b.n	80008a4 <main+0x2c>
 80008aa:	bf00      	nop
 80008ac:	2400002c 	.word	0x2400002c
 80008b0:	24000078 	.word	0x24000078

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	; 0x70
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	224c      	movs	r2, #76	; 0x4c
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 fba4 	bl	8006010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2220      	movs	r2, #32
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 fb9e 	bl	8006010 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <SystemClock_Config+0xe4>)
 80008d6:	f04f 32ff 	mov.w	r2, #4294967295
 80008da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008de:	2004      	movs	r0, #4
 80008e0:	f000 feb2 	bl	8001648 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <SystemClock_Config+0xe8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a2b      	ldr	r2, [pc, #172]	; (800099c <SystemClock_Config+0xe8>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <SystemClock_Config+0xe8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000900:	bf00      	nop
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <SystemClock_Config+0xe8>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800090e:	d1f8      	bne.n	8000902 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000910:	2321      	movs	r3, #33	; 0x21
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000914:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800091a:	2301      	movs	r3, #1
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 800092a:	2346      	movs	r3, #70	; 0x46
 800092c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000932:	2304      	movs	r3, #4
 8000934:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800093a:	230c      	movs	r3, #12
 800093c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fed6 	bl	80016fc <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000956:	f000 f823 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	233f      	movs	r3, #63	; 0x3f
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2107      	movs	r1, #7
 8000980:	4618      	mov	r0, r3
 8000982:	f001 faed 	bl	8001f60 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800098c:	f000 f808 	bl	80009a0 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3770      	adds	r7, #112	; 0x70
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400
 800099c:	58024800 	.word	0x58024800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_MspInit+0x30>)
 80009b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009b8:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x30>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x30>)
 80009c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	58024400 	.word	0x58024400

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 faf8 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <TIM1_UP_IRQHandler+0x10>)
 8000a3a:	f003 fccd 	bl	80043d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2400002c 	.word	0x2400002c

08000a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <TIM2_IRQHandler+0x10>)
 8000a4e:	f003 fcc3 	bl	80043d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000078 	.word	0x24000078

08000a5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d105      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    TIM1_CNT++;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a76:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM2)
  {
    TIM2_CNT++;
  }
}
 8000a78:	e009      	b.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x32>
  else if (htim->Instance == TIM2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a82:	d104      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x32>
    TIM2_CNT++;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	24000158 	.word	0x24000158
 8000aa4:	2400015c 	.word	0x2400015c

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <SystemInit+0xd0>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a31      	ldr	r2, [pc, #196]	; (8000b78 <SystemInit+0xd0>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <SystemInit+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 030f 	and.w	r3, r3, #15
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d807      	bhi.n	8000ad8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemInit+0xd4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f023 030f 	bic.w	r3, r3, #15
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <SystemInit+0xd4>)
 8000ad2:	f043 0303 	orr.w	r3, r3, #3
 8000ad6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <SystemInit+0xd8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <SystemInit+0xd8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <SystemInit+0xd8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <SystemInit+0xd8>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4924      	ldr	r1, [pc, #144]	; (8000b80 <SystemInit+0xd8>)
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <SystemInit+0xdc>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <SystemInit+0xd4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 030c 	and.w	r3, r3, #12
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d007      	beq.n	8000b12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <SystemInit+0xd4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f023 030f 	bic.w	r3, r3, #15
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <SystemInit+0xd4>)
 8000b0c:	f043 0303 	orr.w	r3, r3, #3
 8000b10:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0xd8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <SystemInit+0xd8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <SystemInit+0xd8>)
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <SystemInit+0xe0>)
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0xd8>)
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <SystemInit+0xe4>)
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <SystemInit+0xd8>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <SystemInit+0xe8>)
 8000b34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0xd8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <SystemInit+0xd8>)
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0xe8>)
 8000b40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <SystemInit+0xd8>)
 8000b4a:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <SystemInit+0xe8>)
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <SystemInit+0xd8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SystemInit+0xd8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <SystemInit+0xd8>)
 8000b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <SystemInit+0xd8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <SystemInit+0xec>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	52004000 	.word	0x52004000

08000b98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <MX_TIM1_Init+0xa4>)
 8000bba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000bbe:	f240 1217 	movw	r2, #279	; 0x117
 8000bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000bcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be4:	4814      	ldr	r0, [pc, #80]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000be6:	f003 fb27 	bl	8004238 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f7ff fed6 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000c02:	f003 fcf1 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c0c:	f7ff fec8 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_TIM1_Init+0xa0>)
 8000c22:	f003 ff45 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c2c:	f7ff feb8 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2400002c 	.word	0x2400002c
 8000c3c:	40010000 	.word	0x40010000

08000c40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c68:	f240 1217 	movw	r2, #279	; 0x117
 8000c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <MX_TIM2_Init+0x9c>)
 8000c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c86:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c88:	f003 fad6 	bl	8004238 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c92:	f7ff fe85 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000ca4:	f003 fca0 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cae:	f7ff fe77 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000cc0:	f003 fef6 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cca:	f7ff fe69 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000078 	.word	0x24000078
 8000cdc:	0001869f 	.word	0x0001869f

08000ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_TIM_Base_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d117      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_TIM_Base_MspInit+0x88>)
 8000cf4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <HAL_TIM_Base_MspInit+0x88>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_TIM_Base_MspInit+0x88>)
 8000d04:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2019      	movs	r0, #25
 8000d16:	f000 fa7e 	bl	8001216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d1a:	2019      	movs	r0, #25
 8000d1c:	f000 fa95 	bl	800124a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d20:	e01b      	b.n	8000d5a <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d2a:	d116      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_TIM_Base_MspInit+0x88>)
 8000d2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_TIM_Base_MspInit+0x88>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_TIM_Base_MspInit+0x88>)
 8000d3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	201c      	movs	r0, #28
 8000d50:	f000 fa61 	bl	8001216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d54:	201c      	movs	r0, #28
 8000d56:	f000 fa78 	bl	800124a <HAL_NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	58024400 	.word	0x58024400

08000d6c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <MX_USART3_UART_Init+0x94>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000db6:	f003 ff27 	bl	8004c08 <HAL_UART_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dc0:	f7ff fdee 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000dc8:	f005 f833 	bl	8005e32 <HAL_UARTEx_SetTxFifoThreshold>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dd2:	f7ff fde5 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000dda:	f005 f868 	bl	8005eae <HAL_UARTEx_SetRxFifoThreshold>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000de4:	f7ff fddc 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_USART3_UART_Init+0x90>)
 8000dea:	f004 ffe9 	bl	8005dc0 <HAL_UARTEx_DisableFifoMode>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000df4:	f7ff fdd4 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	240000c4 	.word	0x240000c4
 8000e00:	40004800 	.word	0x40004800

08000e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ba      	sub	sp, #232	; 0xe8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	22c0      	movs	r2, #192	; 0xc0
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 f8f3 	bl	8006010 <memset>
  if(uartHandle->Instance==USART3)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <HAL_UART_MspInit+0xc8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d146      	bne.n	8000ec2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e34:	f04f 0202 	mov.w	r2, #2
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fc14 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e56:	f7ff fda3 	bl	80009a0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_UART_MspInit+0xcc>)
 8000e5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_UART_MspInit+0xcc>)
 8000e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e66:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_UART_MspInit+0xcc>)
 8000e6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0xcc>)
 8000e7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_UART_MspInit+0xcc>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0xcc>)
 8000e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0xd0>)
 8000ebe:	f000 f9df 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	37e8      	adds	r7, #232	; 0xe8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	58020c00 	.word	0x58020c00

08000ed8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eec:	f7ff fddc 	bl	8000aa8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f005 f857 	bl	8005fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fcad 	bl	8000878 <main>
  bx  lr
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f28:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f2c:	08006080 	.word	0x08006080
  ldr r2, =_sbss
 8000f30:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f34:	24000164 	.word	0x24000164

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f42:	2003      	movs	r0, #3
 8000f44:	f000 f95c 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f48:	f001 f9c0 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_Init+0x68>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	f003 030f 	and.w	r3, r3, #15
 8000f58:	4913      	ldr	r1, [pc, #76]	; (8000fa8 <HAL_Init+0x6c>)
 8000f5a:	5ccb      	ldrb	r3, [r1, r3]
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_Init+0x68>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_Init+0x6c>)
 8000f70:	5cd3      	ldrb	r3, [r2, r3]
 8000f72:	f003 031f 	and.w	r3, r3, #31
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_Init+0x70>)
 8000f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_Init+0x74>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f814 	bl	8000fb4 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e002      	b.n	8000f9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f96:	f7ff fd09 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	08006038 	.word	0x08006038
 8000fac:	24000004 	.word	0x24000004
 8000fb0:	24000000 	.word	0x24000000

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_InitTick+0x60>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e021      	b.n	800100c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_InitTick+0x64>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_InitTick+0x60>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f941 	bl	8001266 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f90b 	bl	8001216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x68>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2400000c 	.word	0x2400000c
 8001018:	24000000 	.word	0x24000000
 800101c:	24000008 	.word	0x24000008

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2400000c 	.word	0x2400000c
 8001044:	24000160 	.word	0x24000160

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	24000160 	.word	0x24000160

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	4313      	orrs	r3, r2
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	05fa0000 	.word	0x05fa0000

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff29 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff40 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff90 	bl	8001154 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5f 	bl	8001100 <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff33 	bl	80010c4 <__NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffa4 	bl	80011bc <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800128e:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <HAL_GPIO_Init+0x234>)
 8001290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001292:	e194      	b.n	80015be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8186 	beq.w	80015b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d005      	beq.n	80012c4 <HAL_GPIO_Init+0x44>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d130      	bne.n	8001326 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fa:	2201      	movs	r2, #1
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 0201 	and.w	r2, r3, #1
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b03      	cmp	r3, #3
 8001330:	d017      	beq.n	8001362 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	69b9      	ldr	r1, [r7, #24]
 80013b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0203 	and.w	r2, r3, #3
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80e0 	beq.w	80015b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_GPIO_Init+0x238>)
 80013fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013fe:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <HAL_GPIO_Init+0x238>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_GPIO_Init+0x238>)
 800140a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_GPIO_Init+0x23c>)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <HAL_GPIO_Init+0x240>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d052      	beq.n	80014e8 <HAL_GPIO_Init+0x268>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_GPIO_Init+0x244>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d031      	beq.n	80014ae <HAL_GPIO_Init+0x22e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_GPIO_Init+0x248>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x22a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_GPIO_Init+0x24c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x226>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <HAL_GPIO_Init+0x250>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x222>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_GPIO_Init+0x254>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x21e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_GPIO_Init+0x258>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x21a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_GPIO_Init+0x25c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x216>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_GPIO_Init+0x260>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x212>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_GPIO_Init+0x264>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x20e>
 800148a:	2309      	movs	r3, #9
 800148c:	e02d      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 800148e:	230a      	movs	r3, #10
 8001490:	e02b      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 8001492:	2308      	movs	r3, #8
 8001494:	e029      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 8001496:	2307      	movs	r3, #7
 8001498:	e027      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 800149a:	2306      	movs	r3, #6
 800149c:	e025      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 800149e:	2305      	movs	r3, #5
 80014a0:	e023      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e021      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e01f      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e01d      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e01b      	b.n	80014ea <HAL_GPIO_Init+0x26a>
 80014b2:	bf00      	nop
 80014b4:	58000080 	.word	0x58000080
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58000400 	.word	0x58000400
 80014c0:	58020000 	.word	0x58020000
 80014c4:	58020400 	.word	0x58020400
 80014c8:	58020800 	.word	0x58020800
 80014cc:	58020c00 	.word	0x58020c00
 80014d0:	58021000 	.word	0x58021000
 80014d4:	58021400 	.word	0x58021400
 80014d8:	58021800 	.word	0x58021800
 80014dc:	58021c00 	.word	0x58021c00
 80014e0:	58022000 	.word	0x58022000
 80014e4:	58022400 	.word	0x58022400
 80014e8:	2300      	movs	r3, #0
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4093      	lsls	r3, r2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fa:	4938      	ldr	r1, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x35c>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800152e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f ae63 	bne.w	8001294 <HAL_GPIO_Init+0x14>
  }
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3724      	adds	r7, #36	; 0x24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58000400 	.word	0x58000400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	041a      	lsls	r2, r3, #16
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43d9      	mvns	r1, r3
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	400b      	ands	r3, r1
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	2b06      	cmp	r3, #6
 800165a:	d00a      	beq.n	8001672 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d001      	beq.n	800166e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e040      	b.n	80016f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e03e      	b.n	80016f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800167a:	491f      	ldr	r1, [pc, #124]	; (80016f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4313      	orrs	r3, r2
 8001680:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001682:	f7ff fce1 	bl	8001048 <HAL_GetTick>
 8001686:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001688:	e009      	b.n	800169e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800168a:	f7ff fcdd 	bl	8001048 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001698:	d901      	bls.n	800169e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e028      	b.n	80016f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016aa:	d1ee      	bne.n	800168a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b1e      	cmp	r3, #30
 80016b0:	d008      	beq.n	80016c4 <HAL_PWREx_ConfigSupply+0x7c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b2e      	cmp	r3, #46	; 0x2e
 80016b6:	d005      	beq.n	80016c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b1d      	cmp	r3, #29
 80016bc:	d002      	beq.n	80016c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b2d      	cmp	r3, #45	; 0x2d
 80016c2:	d114      	bne.n	80016ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80016c4:	f7ff fcc0 	bl	8001048 <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016ca:	e009      	b.n	80016e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016cc:	f7ff fcbc 	bl	8001048 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016da:	d901      	bls.n	80016e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e007      	b.n	80016f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d1ee      	bne.n	80016cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58024800 	.word	0x58024800

080016fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	f000 bc1f 	b.w	8001f4e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80b3 	beq.w	8001884 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171e:	4b95      	ldr	r3, [pc, #596]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	2b10      	cmp	r3, #16
 8001732:	d007      	beq.n	8001744 <HAL_RCC_OscConfig+0x48>
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	2b18      	cmp	r3, #24
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x64>
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d10d      	bne.n	8001760 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b8b      	ldr	r3, [pc, #556]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8098 	beq.w	8001882 <HAL_RCC_OscConfig+0x186>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 8093 	bne.w	8001882 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e3f6      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x7c>
 800176a:	4b82      	ldr	r3, [pc, #520]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a81      	ldr	r2, [pc, #516]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e058      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d112      	bne.n	80017a6 <HAL_RCC_OscConfig+0xaa>
 8001780:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a7b      	ldr	r2, [pc, #492]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b79      	ldr	r3, [pc, #484]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a78      	ldr	r2, [pc, #480]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b76      	ldr	r3, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a75      	ldr	r2, [pc, #468]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e041      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ae:	d112      	bne.n	80017d6 <HAL_RCC_OscConfig+0xda>
 80017b0:	4b70      	ldr	r3, [pc, #448]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6f      	ldr	r2, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6c      	ldr	r2, [pc, #432]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a69      	ldr	r2, [pc, #420]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e029      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80017de:	d112      	bne.n	8001806 <HAL_RCC_OscConfig+0x10a>
 80017e0:	4b64      	ldr	r3, [pc, #400]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a63      	ldr	r2, [pc, #396]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a60      	ldr	r2, [pc, #384]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b5e      	ldr	r3, [pc, #376]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a5d      	ldr	r2, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e011      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
 8001806:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a57      	ldr	r2, [pc, #348]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b55      	ldr	r3, [pc, #340]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a54      	ldr	r2, [pc, #336]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001824:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001828:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d013      	beq.n	800185a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fc09 	bl	8001048 <HAL_GetTick>
 8001836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183a:	f7ff fc05 	bl	8001048 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e380      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x13e>
 8001858:	e014      	b.n	8001884 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fbf5 	bl	8001048 <HAL_GetTick>
 800185e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001862:	f7ff fbf1 	bl	8001048 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	; 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e36c      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x166>
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 808c 	beq.w	80019aa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800189a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <HAL_RCC_OscConfig+0x1bc>
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2b18      	cmp	r3, #24
 80018ac:	d137      	bne.n	800191e <HAL_RCC_OscConfig+0x222>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d132      	bne.n	800191e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x1d4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e33e      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 0219 	bic.w	r2, r3, #25
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4925      	ldr	r1, [pc, #148]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fbb1 	bl	8001048 <HAL_GetTick>
 80018e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ea:	f7ff fbad 	bl	8001048 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e328      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	4917      	ldr	r1, [pc, #92]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	e045      	b.n	80019aa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d028      	beq.n	8001978 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0219 	bic.w	r2, r3, #25
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	4910      	ldr	r1, [pc, #64]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fb86 	bl	8001048 <HAL_GetTick>
 800193c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff fb82 	bl	8001048 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e2fd      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	061b      	lsls	r3, r3, #24
 800196c:	4901      	ldr	r1, [pc, #4]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 8001972:	e01a      	b.n	80019aa <HAL_RCC_OscConfig+0x2ae>
 8001974:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001978:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a96      	ldr	r2, [pc, #600]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fb60 	bl	8001048 <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff fb5c 	bl	8001048 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2d7      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800199e:	4b8e      	ldr	r3, [pc, #568]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06a      	beq.n	8001a8c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b6:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019c0:	4b85      	ldr	r3, [pc, #532]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d007      	beq.n	80019dc <HAL_RCC_OscConfig+0x2e0>
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b18      	cmp	r3, #24
 80019d0:	d11b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x30e>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d116      	bne.n	8001a0a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019dc:	4b7e      	ldr	r3, [pc, #504]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2f8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b80      	cmp	r3, #128	; 0x80
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e2ac      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019f4:	4b78      	ldr	r3, [pc, #480]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	4975      	ldr	r1, [pc, #468]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a08:	e040      	b.n	8001a8c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d023      	beq.n	8001a5a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a12:	4b71      	ldr	r3, [pc, #452]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a70      	ldr	r2, [pc, #448]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb13 	bl	8001048 <HAL_GetTick>
 8001a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a26:	f7ff fb0f 	bl	8001048 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e28a      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a38:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	4961      	ldr	r1, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e018      	b.n	8001a8c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff faef 	bl	8001048 <HAL_GetTick>
 8001a6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a6e:	f7ff faeb 	bl	8001048 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e266      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a80:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d036      	beq.n	8001b06 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d019      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff facc 	bl	8001048 <HAL_GetTick>
 8001ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fac8 	bl	8001048 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e243      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x3b8>
 8001ad2:	e018      	b.n	8001b06 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad4:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	4a3f      	ldr	r2, [pc, #252]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fab2 	bl	8001048 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff faae 	bl	8001048 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e229      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d036      	beq.n	8001b80 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fa8f 	bl	8001048 <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2e:	f7ff fa8b 	bl	8001048 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e206      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x432>
 8001b4c:	e018      	b.n	8001b80 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fa75 	bl	8001048 <HAL_GetTick>
 8001b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b62:	f7ff fa71 	bl	8001048 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1ec      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80af 	beq.w	8001cec <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <HAL_RCC_OscConfig+0x4e0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_RCC_OscConfig+0x4e0>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b9a:	f7ff fa55 	bl	8001048 <HAL_GetTick>
 8001b9e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff fa51 	bl	8001048 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1cc      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_OscConfig+0x4e0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d10b      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4e4>
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a02      	ldr	r2, [pc, #8]	; (8001bd8 <HAL_RCC_OscConfig+0x4dc>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	e05b      	b.n	8001c8e <HAL_RCC_OscConfig+0x592>
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58024800 	.word	0x58024800
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d112      	bne.n	8001c0e <HAL_RCC_OscConfig+0x512>
 8001be8:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	4a9c      	ldr	r2, [pc, #624]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf4:	4b9a      	ldr	r3, [pc, #616]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a99      	ldr	r2, [pc, #612]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001c00:	4b97      	ldr	r3, [pc, #604]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a96      	ldr	r2, [pc, #600]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c06:	f023 0304 	bic.w	r3, r3, #4
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0c:	e03f      	b.n	8001c8e <HAL_RCC_OscConfig+0x592>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x540>
 8001c16:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	4a91      	ldr	r2, [pc, #580]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6713      	str	r3, [r2, #112]	; 0x70
 8001c22:	4b8f      	ldr	r3, [pc, #572]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	4a8e      	ldr	r2, [pc, #568]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2e:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	4a8b      	ldr	r2, [pc, #556]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3a:	e028      	b.n	8001c8e <HAL_RCC_OscConfig+0x592>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b85      	cmp	r3, #133	; 0x85
 8001c42:	d112      	bne.n	8001c6a <HAL_RCC_OscConfig+0x56e>
 8001c44:	4b86      	ldr	r3, [pc, #536]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a85      	ldr	r2, [pc, #532]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	4b83      	ldr	r3, [pc, #524]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a82      	ldr	r2, [pc, #520]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a7f      	ldr	r2, [pc, #508]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
 8001c68:	e011      	b.n	8001c8e <HAL_RCC_OscConfig+0x592>
 8001c6a:	4b7d      	ldr	r3, [pc, #500]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a7c      	ldr	r2, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	4a79      	ldr	r2, [pc, #484]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6713      	str	r3, [r2, #112]	; 0x70
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a76      	ldr	r2, [pc, #472]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d015      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff f9d7 	bl	8001048 <HAL_GetTick>
 8001c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff f9d3 	bl	8001048 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e14c      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ee      	beq.n	8001c9e <HAL_RCC_OscConfig+0x5a2>
 8001cc0:	e014      	b.n	8001cec <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f9c1 	bl	8001048 <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7ff f9bd 	bl	8001048 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e136      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce0:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ee      	bne.n	8001cca <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 812b 	beq.w	8001f4c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cfe:	2b18      	cmp	r3, #24
 8001d00:	f000 80bb 	beq.w	8001e7a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	f040 8095 	bne.w	8001e38 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b54      	ldr	r3, [pc, #336]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a53      	ldr	r2, [pc, #332]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f995 	bl	8001048 <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff f991 	bl	8001048 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e10c      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d44:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_OscConfig+0x768>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	430a      	orrs	r2, r1
 8001d54:	4942      	ldr	r1, [pc, #264]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	628b      	str	r3, [r1, #40]	; 0x28
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	3b01      	subs	r3, #1
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	3b01      	subs	r3, #1
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d8a:	4935      	ldr	r1, [pc, #212]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d90:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d9c:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_RCC_OscConfig+0x76c>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	492d      	ldr	r1, [pc, #180]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	f023 020c 	bic.w	r2, r3, #12
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4928      	ldr	r1, [pc, #160]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	f023 0202 	bic.w	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4924      	ldr	r1, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f91a 	bl	8001048 <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f916 	bl	8001048 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e091      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x71c>
 8001e36:	e089      	b.n	8001f4c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_RCC_OscConfig+0x764>)
 8001e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f900 	bl	8001048 <HAL_GetTick>
 8001e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e4a:	e00f      	b.n	8001e6c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f8fc 	bl	8001048 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d908      	bls.n	8001e6c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e077      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
 8001e5e:	bf00      	nop
 8001e60:	58024400 	.word	0x58024400
 8001e64:	fffffc0c 	.word	0xfffffc0c
 8001e68:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e9      	bne.n	8001e4c <HAL_RCC_OscConfig+0x750>
 8001e78:	e068      	b.n	8001f4c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d031      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d12a      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d122      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d11a      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d111      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d108      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0e1b      	lsrs	r3, r3, #24
 8001ee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e02b      	b.n	8001f4e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	08db      	lsrs	r3, r3, #3
 8001efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f00:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d01f      	beq.n	8001f4c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f18:	f7ff f896 	bl	8001048 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f1e:	bf00      	nop
 8001f20:	f7ff f892 	bl	8001048 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d0f9      	beq.n	8001f20 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCC_OscConfig+0x860>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f38:	00d2      	lsls	r2, r2, #3
 8001f3a:	4907      	ldr	r1, [pc, #28]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCC_OscConfig+0x85c>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3730      	adds	r7, #48	; 0x30
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	ffff0007 	.word	0xffff0007

08001f60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e19c      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b8a      	ldr	r3, [pc, #552]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d910      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b87      	ldr	r3, [pc, #540]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 020f 	bic.w	r2, r3, #15
 8001f8a:	4985      	ldr	r1, [pc, #532]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e184      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d010      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d908      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fc0:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4975      	ldr	r1, [pc, #468]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d010      	beq.n	8002000 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d908      	bls.n	8002000 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fee:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	496a      	ldr	r1, [pc, #424]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002018:	429a      	cmp	r2, r3
 800201a:	d908      	bls.n	800202e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800201c:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	495e      	ldr	r1, [pc, #376]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 800202a:	4313      	orrs	r3, r2
 800202c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d010      	beq.n	800205c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002046:	429a      	cmp	r2, r3
 8002048:	d908      	bls.n	800205c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4953      	ldr	r1, [pc, #332]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002058:	4313      	orrs	r3, r2
 800205a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	429a      	cmp	r2, r3
 8002076:	d908      	bls.n	800208a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f023 020f 	bic.w	r2, r3, #15
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4947      	ldr	r1, [pc, #284]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002086:	4313      	orrs	r3, r2
 8002088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d055      	beq.n	8002142 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4940      	ldr	r1, [pc, #256]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b0:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d121      	bne.n	8002100 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0f6      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d115      	bne.n	8002100 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0ea      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0de      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d6      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f023 0207 	bic.w	r2, r3, #7
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4925      	ldr	r1, [pc, #148]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 800210e:	4313      	orrs	r3, r2
 8002110:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002112:	f7fe ff99 	bl	8001048 <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002118:	e00a      	b.n	8002130 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7fe ff95 	bl	8001048 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0be      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	429a      	cmp	r2, r3
 8002140:	d1eb      	bne.n	800211a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d010      	beq.n	8002170 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	429a      	cmp	r2, r3
 800215c:	d208      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f023 020f 	bic.w	r2, r3, #15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	490e      	ldr	r1, [pc, #56]	; (80021a4 <HAL_RCC_ClockConfig+0x244>)
 800216c:	4313      	orrs	r3, r2
 800216e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d214      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 020f 	bic.w	r2, r3, #15
 8002186:	4906      	ldr	r1, [pc, #24]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCC_ClockConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e086      	b.n	80022ae <HAL_RCC_ClockConfig+0x34e>
 80021a0:	52002000 	.word	0x52002000
 80021a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d208      	bcs.n	80021d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021c4:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	4939      	ldr	r1, [pc, #228]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d208      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	492e      	ldr	r1, [pc, #184]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 8002200:	4313      	orrs	r3, r2
 8002202:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800221c:	429a      	cmp	r2, r3
 800221e:	d208      	bcs.n	8002232 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4922      	ldr	r1, [pc, #136]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 800222e:	4313      	orrs	r3, r2
 8002230:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800224a:	429a      	cmp	r2, r3
 800224c:	d208      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4917      	ldr	r1, [pc, #92]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 800225c:	4313      	orrs	r3, r2
 800225e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002260:	f000 f834 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	4912      	ldr	r1, [pc, #72]	; (80022bc <HAL_RCC_ClockConfig+0x35c>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_RCC_ClockConfig+0x358>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_RCC_ClockConfig+0x35c>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_RCC_ClockConfig+0x360>)
 8002296:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x364>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x368>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe86 	bl	8000fb4 <HAL_InitTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	58024400 	.word	0x58024400
 80022bc:	08006038 	.word	0x08006038
 80022c0:	24000004 	.word	0x24000004
 80022c4:	24000000 	.word	0x24000000
 80022c8:	24000008 	.word	0x24000008

080022cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d2:	4bb3      	ldr	r3, [pc, #716]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022da:	2b18      	cmp	r3, #24
 80022dc:	f200 8155 	bhi.w	800258a <HAL_RCC_GetSysClockFreq+0x2be>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	0800234d 	.word	0x0800234d
 80022ec:	0800258b 	.word	0x0800258b
 80022f0:	0800258b 	.word	0x0800258b
 80022f4:	0800258b 	.word	0x0800258b
 80022f8:	0800258b 	.word	0x0800258b
 80022fc:	0800258b 	.word	0x0800258b
 8002300:	0800258b 	.word	0x0800258b
 8002304:	0800258b 	.word	0x0800258b
 8002308:	08002373 	.word	0x08002373
 800230c:	0800258b 	.word	0x0800258b
 8002310:	0800258b 	.word	0x0800258b
 8002314:	0800258b 	.word	0x0800258b
 8002318:	0800258b 	.word	0x0800258b
 800231c:	0800258b 	.word	0x0800258b
 8002320:	0800258b 	.word	0x0800258b
 8002324:	0800258b 	.word	0x0800258b
 8002328:	08002379 	.word	0x08002379
 800232c:	0800258b 	.word	0x0800258b
 8002330:	0800258b 	.word	0x0800258b
 8002334:	0800258b 	.word	0x0800258b
 8002338:	0800258b 	.word	0x0800258b
 800233c:	0800258b 	.word	0x0800258b
 8002340:	0800258b 	.word	0x0800258b
 8002344:	0800258b 	.word	0x0800258b
 8002348:	0800237f 	.word	0x0800237f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800234c:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002358:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	4a90      	ldr	r2, [pc, #576]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800236a:	e111      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800236c:	4b8d      	ldr	r3, [pc, #564]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800236e:	61bb      	str	r3, [r7, #24]
      break;
 8002370:	e10e      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002372:	4b8d      	ldr	r3, [pc, #564]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002374:	61bb      	str	r3, [r7, #24]
      break;
 8002376:	e10b      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002378:	4b8c      	ldr	r3, [pc, #560]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800237a:	61bb      	str	r3, [r7, #24]
      break;
 800237c:	e108      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002388:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002392:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002394:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800239e:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a2:	08db      	lsrs	r3, r3, #3
 80023a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80e1 	beq.w	8002584 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f000 8083 	beq.w	80024d0 <HAL_RCC_GetSysClockFreq+0x204>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	f200 80a1 	bhi.w	8002514 <HAL_RCC_GetSysClockFreq+0x248>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x114>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d056      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x1c0>
 80023de:	e099      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023e0:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02d      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023ec:	4b6c      	ldr	r3, [pc, #432]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	08db      	lsrs	r3, r3, #3
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	4a6b      	ldr	r2, [pc, #428]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002416:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002426:	ed97 6a02 	vldr	s12, [r7, #8]
 800242a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800242e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800243a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002446:	e087      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002452:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245a:	4b51      	ldr	r3, [pc, #324]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246a:	ed97 6a02 	vldr	s12, [r7, #8]
 800246e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800247e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002486:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800248a:	e065      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002496:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800249a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024ce:	e043      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80024de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002512:	e021      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002536:	ed97 6a02 	vldr	s12, [r7, #8]
 800253a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800254a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002556:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	0a5b      	lsrs	r3, r3, #9
 800255e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002562:	3301      	adds	r3, #1
 8002564:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002570:	edd7 6a07 	vldr	s13, [r7, #28]
 8002574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257c:	ee17 3a90 	vmov	r3, s15
 8002580:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002582:	e005      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
      break;
 8002588:	e002      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800258c:	61bb      	str	r3, [r7, #24]
      break;
 800258e:	bf00      	nop
  }

  return sysclockfreq;
 8002590:	69bb      	ldr	r3, [r7, #24]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	58024400 	.word	0x58024400
 80025a4:	03d09000 	.word	0x03d09000
 80025a8:	003d0900 	.word	0x003d0900
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	46000000 	.word	0x46000000
 80025b4:	4c742400 	.word	0x4c742400
 80025b8:	4a742400 	.word	0x4a742400
 80025bc:	4af42400 	.word	0x4af42400

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80025c6:	f7ff fe81 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_RCC_GetHCLKFreq+0x50>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490f      	ldr	r1, [pc, #60]	; (8002614 <HAL_RCC_GetHCLKFreq+0x54>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_GetHCLKFreq+0x50>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_GetHCLKFreq+0x54>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_RCC_GetHCLKFreq+0x58>)
 80025fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_GetHCLKFreq+0x58>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	58024400 	.word	0x58024400
 8002614:	08006038 	.word	0x08006038
 8002618:	24000004 	.word	0x24000004
 800261c:	24000000 	.word	0x24000000

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002624:	f7ff ffcc 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400
 8002648:	08006038 	.word	0x08006038

0800264c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002650:	f7ff ffb6 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024400 	.word	0x58024400
 8002674:	08006038 	.word	0x08006038

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b0c8      	sub	sp, #288	; 0x120
 800267e:	af00      	add	r7, sp, #0
 8002680:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002684:	2300      	movs	r3, #0
 8002686:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800268a:	2300      	movs	r3, #0
 800268c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800269c:	2500      	movs	r5, #0
 800269e:	ea54 0305 	orrs.w	r3, r4, r5
 80026a2:	d049      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026ae:	d02f      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026b4:	d828      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ba:	d01a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c0:	d822      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ca:	d007      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026cc:	e01c      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ce:	4ba7      	ldr	r3, [pc, #668]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	4aa6      	ldr	r2, [pc, #664]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026da:	e01a      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e0:	3308      	adds	r3, #8
 80026e2:	2102      	movs	r1, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 fc43 	bl	8003f70 <RCCEx_PLL2_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026f0:	e00f      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80026f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f6:	3328      	adds	r3, #40	; 0x28
 80026f8:	2102      	movs	r1, #2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fcea 	bl	80040d4 <RCCEx_PLL3_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002706:	e004      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800270e:	e000      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002712:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800271a:	4b94      	ldr	r3, [pc, #592]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800271c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002728:	4a90      	ldr	r2, [pc, #576]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800272a:	430b      	orrs	r3, r1
 800272c:	6513      	str	r3, [r2, #80]	; 0x50
 800272e:	e003      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002734:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002744:	f04f 0900 	mov.w	r9, #0
 8002748:	ea58 0309 	orrs.w	r3, r8, r9
 800274c:	d047      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800274e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	2b04      	cmp	r3, #4
 8002756:	d82a      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002775 	.word	0x08002775
 8002764:	08002783 	.word	0x08002783
 8002768:	08002799 	.word	0x08002799
 800276c:	080027b7 	.word	0x080027b7
 8002770:	080027b7 	.word	0x080027b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002774:	4b7d      	ldr	r3, [pc, #500]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	4a7c      	ldr	r2, [pc, #496]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800277a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002780:	e01a      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002786:	3308      	adds	r3, #8
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f001 fbf0 	bl	8003f70 <RCCEx_PLL2_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002796:	e00f      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800279c:	3328      	adds	r3, #40	; 0x28
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 fc97 	bl	80040d4 <RCCEx_PLL3_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027ac:	e004      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027b4:	e000      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c0:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	f023 0107 	bic.w	r1, r3, #7
 80027c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a67      	ldr	r2, [pc, #412]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6513      	str	r3, [r2, #80]	; 0x50
 80027d4:	e003      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80027de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80027ea:	f04f 0b00 	mov.w	fp, #0
 80027ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80027f2:	d054      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80027f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027fe:	d036      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002800:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002804:	d82f      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d032      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800280c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002810:	d829      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002812:	2bc0      	cmp	r3, #192	; 0xc0
 8002814:	d02f      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002816:	2bc0      	cmp	r3, #192	; 0xc0
 8002818:	d825      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d018      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d821      	bhi.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d007      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800282a:	e01c      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800282c:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002838:	e01e      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800283a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800283e:	3308      	adds	r3, #8
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fb94 	bl	8003f70 <RCCEx_PLL2_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800284e:	e013      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002854:	3328      	adds	r3, #40	; 0x28
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fc3b 	bl	80040d4 <RCCEx_PLL3_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002864:	e008      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800286c:	e004      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800286e:	bf00      	nop
 8002870:	e002      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	4a37      	ldr	r2, [pc, #220]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002890:	430b      	orrs	r3, r1
 8002892:	6513      	str	r3, [r2, #80]	; 0x50
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002896:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800289a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800289e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80028aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80028b8:	460b      	mov	r3, r1
 80028ba:	4313      	orrs	r3, r2
 80028bc:	d05c      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80028be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028c8:	d03b      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028ca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028ce:	d834      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d4:	d037      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80028d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028da:	d82e      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028e0:	d033      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80028e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028e6:	d828      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d01a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d822      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d007      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80028fe:	e01c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800290c:	e01e      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800290e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002912:	3308      	adds	r3, #8
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f001 fb2a 	bl	8003f70 <RCCEx_PLL2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002922:	e013      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002928:	3328      	adds	r3, #40	; 0x28
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f001 fbd1 	bl	80040d4 <RCCEx_PLL3_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002938:	e008      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002940:	e004      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800294a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800294c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10d      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800295c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	4a02      	ldr	r2, [pc, #8]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002964:	430b      	orrs	r3, r1
 8002966:	6513      	str	r3, [r2, #80]	; 0x50
 8002968:	e006      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800296a:	bf00      	nop
 800296c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002974:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800298e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002992:	460b      	mov	r3, r1
 8002994:	4313      	orrs	r3, r2
 8002996:	d03a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	2b30      	cmp	r3, #48	; 0x30
 80029a0:	d01f      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80029a2:	2b30      	cmp	r3, #48	; 0x30
 80029a4:	d819      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x362>
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d00c      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d815      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x362>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d019      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d111      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b6:	4bae      	ldr	r3, [pc, #696]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	4aad      	ldr	r2, [pc, #692]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80029c2:	e011      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c8:	3308      	adds	r3, #8
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 facf 	bl	8003f70 <RCCEx_PLL2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80029d8:	e006      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80029e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029f0:	4b9f      	ldr	r3, [pc, #636]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80029f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a9c      	ldr	r2, [pc, #624]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a00:	430b      	orrs	r3, r1
 8002a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a04:	e003      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002a1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	d051      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a38:	d035      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a3e:	d82e      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a44:	d031      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a4a:	d828      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a50:	d01a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a56:	d822      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d007      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002a62:	e01c      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a64:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	4a81      	ldr	r2, [pc, #516]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a70:	e01c      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a76:	3308      	adds	r3, #8
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 fa78 	bl	8003f70 <RCCEx_PLL2_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a86:	e011      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a8c:	3328      	adds	r3, #40	; 0x28
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 fb1f 	bl	80040d4 <RCCEx_PLL3_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a9c:	e006      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002aa4:	e002      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002aa6:	bf00      	nop
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ab4:	4b6e      	ldr	r3, [pc, #440]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac2:	4a6b      	ldr	r2, [pc, #428]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ac8:	e003      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ace:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ae8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002aec:	460b      	mov	r3, r1
 8002aee:	4313      	orrs	r3, r2
 8002af0:	d053      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d033      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b02:	d82c      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b08:	d02f      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0e:	d826      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b14:	d02b      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002b16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b1a:	d820      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b20:	d012      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b26:	d81a      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d022      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d115      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b36:	3308      	adds	r3, #8
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 fa18 	bl	8003f70 <RCCEx_PLL2_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b46:	e015      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b4c:	3328      	adds	r3, #40	; 0x28
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 fabf 	bl	80040d4 <RCCEx_PLL3_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b64:	e006      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b66:	bf00      	nop
 8002b68:	e004      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e002      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b8a:	4a39      	ldr	r2, [pc, #228]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6513      	str	r3, [r2, #80]	; 0x50
 8002b90:	e003      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002ba6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bb0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	d060      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bc2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002bc6:	d039      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002bc8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002bcc:	d832      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd2:	d035      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd8:	d82c      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d031      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d826      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bea:	d02d      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bf0:	d820      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf6:	d012      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfc:	d81a      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d024      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c06:	d115      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f9ad 	bl	8003f70 <RCCEx_PLL2_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c1c:	e017      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c22:	3328      	adds	r3, #40	; 0x28
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fa54 	bl	80040d4 <RCCEx_PLL3_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c32:	e00c      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e006      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c40:	bf00      	nop
 8002c42:	e004      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10e      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c66:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6c:	e006      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002c6e:	bf00      	nop
 8002c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c96:	460b      	mov	r3, r1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	d037      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cac:	d816      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb8:	4bc4      	ldr	r3, [pc, #784]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	4ac3      	ldr	r2, [pc, #780]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cc4:	e00f      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cca:	3308      	adds	r3, #8
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 f94e 	bl	8003f70 <RCCEx_PLL2_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cda:	e004      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cee:	4bb7      	ldr	r3, [pc, #732]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfc:	4ab3      	ldr	r2, [pc, #716]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6513      	str	r3, [r2, #80]	; 0x50
 8002d02:	e003      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	d039      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d81c      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d79 	.word	0x08002d79
 8002d40:	08002d4d 	.word	0x08002d4d
 8002d44:	08002d5b 	.word	0x08002d5b
 8002d48:	08002d79 	.word	0x08002d79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4c:	4b9f      	ldr	r3, [pc, #636]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	4a9e      	ldr	r2, [pc, #632]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d58:	e00f      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5e:	3308      	adds	r3, #8
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 f904 	bl	8003f70 <RCCEx_PLL2_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d6e:	e004      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d82:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	f023 0103 	bic.w	r1, r3, #3
 8002d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	4a8e      	ldr	r2, [pc, #568]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d92:	430b      	orrs	r3, r1
 8002d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d96:	e003      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002db6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f000 8099 	beq.w	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc2:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a82      	ldr	r2, [pc, #520]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dce:	f7fe f93b 	bl	8001048 <HAL_GetTick>
 8002dd2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd8:	f7fe f936 	bl	8001048 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b64      	cmp	r3, #100	; 0x64
 8002de6:	d903      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dee:	e005      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df0:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ed      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d173      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e04:	4b71      	ldr	r3, [pc, #452]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e10:	4053      	eors	r3, r2
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d015      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e1a:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e26:	4b69      	ldr	r3, [pc, #420]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a68      	ldr	r2, [pc, #416]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e32:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a65      	ldr	r2, [pc, #404]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e3e:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e52:	d118      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe f8f8 	bl	8001048 <HAL_GetTick>
 8002e58:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e5c:	e00d      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe f8f3 	bl	8001048 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e68:	1ad2      	subs	r2, r2, r3
 8002e6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d903      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002e78:	e005      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e7a:	4b54      	ldr	r3, [pc, #336]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0eb      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002e86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d129      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e9e:	d10e      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002eb0:	091a      	lsrs	r2, r3, #4
 8002eb2:	4b48      	ldr	r3, [pc, #288]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	4a45      	ldr	r2, [pc, #276]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6113      	str	r3, [r2, #16]
 8002ebc:	e005      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ec4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ec8:	6113      	str	r3, [r2, #16]
 8002eca:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ecc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	4a3c      	ldr	r2, [pc, #240]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002eea:	e003      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ef0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f002 0301 	and.w	r3, r2, #1
 8002f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f000 8090 	beq.w	8003036 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1e:	2b28      	cmp	r3, #40	; 0x28
 8002f20:	d870      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	0800300d 	.word	0x0800300d
 8002f2c:	08003005 	.word	0x08003005
 8002f30:	08003005 	.word	0x08003005
 8002f34:	08003005 	.word	0x08003005
 8002f38:	08003005 	.word	0x08003005
 8002f3c:	08003005 	.word	0x08003005
 8002f40:	08003005 	.word	0x08003005
 8002f44:	08003005 	.word	0x08003005
 8002f48:	08002fd9 	.word	0x08002fd9
 8002f4c:	08003005 	.word	0x08003005
 8002f50:	08003005 	.word	0x08003005
 8002f54:	08003005 	.word	0x08003005
 8002f58:	08003005 	.word	0x08003005
 8002f5c:	08003005 	.word	0x08003005
 8002f60:	08003005 	.word	0x08003005
 8002f64:	08003005 	.word	0x08003005
 8002f68:	08002fef 	.word	0x08002fef
 8002f6c:	08003005 	.word	0x08003005
 8002f70:	08003005 	.word	0x08003005
 8002f74:	08003005 	.word	0x08003005
 8002f78:	08003005 	.word	0x08003005
 8002f7c:	08003005 	.word	0x08003005
 8002f80:	08003005 	.word	0x08003005
 8002f84:	08003005 	.word	0x08003005
 8002f88:	0800300d 	.word	0x0800300d
 8002f8c:	08003005 	.word	0x08003005
 8002f90:	08003005 	.word	0x08003005
 8002f94:	08003005 	.word	0x08003005
 8002f98:	08003005 	.word	0x08003005
 8002f9c:	08003005 	.word	0x08003005
 8002fa0:	08003005 	.word	0x08003005
 8002fa4:	08003005 	.word	0x08003005
 8002fa8:	0800300d 	.word	0x0800300d
 8002fac:	08003005 	.word	0x08003005
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	08003005 	.word	0x08003005
 8002fb8:	08003005 	.word	0x08003005
 8002fbc:	08003005 	.word	0x08003005
 8002fc0:	08003005 	.word	0x08003005
 8002fc4:	08003005 	.word	0x08003005
 8002fc8:	0800300d 	.word	0x0800300d
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	58024800 	.word	0x58024800
 8002fd4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fdc:	3308      	adds	r3, #8
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 ffc5 	bl	8003f70 <RCCEx_PLL2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fec:	e00f      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff2:	3328      	adds	r3, #40	; 0x28
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 f86c 	bl	80040d4 <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003002:	e004      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800300c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003016:	4bc0      	ldr	r3, [pc, #768]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	4abc      	ldr	r2, [pc, #752]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003028:	430b      	orrs	r3, r1
 800302a:	6553      	str	r3, [r2, #84]	; 0x54
 800302c:	e003      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003032:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f002 0302 	and.w	r3, r2, #2
 8003042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800304c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d043      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305e:	2b05      	cmp	r3, #5
 8003060:	d824      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	080030b5 	.word	0x080030b5
 800306c:	08003081 	.word	0x08003081
 8003070:	08003097 	.word	0x08003097
 8003074:	080030b5 	.word	0x080030b5
 8003078:	080030b5 	.word	0x080030b5
 800307c:	080030b5 	.word	0x080030b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003084:	3308      	adds	r3, #8
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f000 ff71 	bl	8003f70 <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003094:	e00f      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309a:	3328      	adds	r3, #40	; 0x28
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 f818 	bl	80040d4 <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030aa:	e004      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80030b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030be:	4b96      	ldr	r3, [pc, #600]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f023 0107 	bic.w	r1, r3, #7
 80030c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ce:	4a92      	ldr	r2, [pc, #584]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6553      	str	r3, [r2, #84]	; 0x54
 80030d4:	e003      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f002 0304 	and.w	r3, r2, #4
 80030ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4313      	orrs	r3, r2
 80030fc:	d043      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003106:	2b05      	cmp	r3, #5
 8003108:	d824      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	0800315d 	.word	0x0800315d
 8003114:	08003129 	.word	0x08003129
 8003118:	0800313f 	.word	0x0800313f
 800311c:	0800315d 	.word	0x0800315d
 8003120:	0800315d 	.word	0x0800315d
 8003124:	0800315d 	.word	0x0800315d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312c:	3308      	adds	r3, #8
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f000 ff1d 	bl	8003f70 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800313e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003142:	3328      	adds	r3, #40	; 0x28
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f000 ffc4 	bl	80040d4 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003166:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f023 0107 	bic.w	r1, r3, #7
 800316e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003176:	4a68      	ldr	r2, [pc, #416]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003178:	430b      	orrs	r3, r1
 800317a:	6593      	str	r3, [r2, #88]	; 0x58
 800317c:	e003      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003182:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f002 0320 	and.w	r3, r2, #32
 8003192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800319c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031a0:	460b      	mov	r3, r1
 80031a2:	4313      	orrs	r3, r2
 80031a4:	d055      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b2:	d033      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80031b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b8:	d82c      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031be:	d02f      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d826      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ca:	d02b      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80031cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031d0:	d820      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d6:	d012      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80031d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031dc:	d81a      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d022      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80031e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031e6:	d115      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ec:	3308      	adds	r3, #8
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 febd 	bl	8003f70 <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031fc:	e015      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003202:	3328      	adds	r3, #40	; 0x28
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 ff64 	bl	80040d4 <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003212:	e00a      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800321a:	e006      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800321c:	bf00      	nop
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003220:	bf00      	nop
 8003222:	e002      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800323a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003242:	4a35      	ldr	r2, [pc, #212]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6553      	str	r3, [r2, #84]	; 0x54
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800324e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800325e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003268:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800326c:	460b      	mov	r3, r1
 800326e:	4313      	orrs	r3, r2
 8003270:	d058      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800327a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800327e:	d033      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003280:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003284:	d82c      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d02f      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d826      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003292:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003296:	d02b      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800329c:	d820      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800329e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a2:	d012      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80032a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a8:	d81a      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d022      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d115      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b8:	3308      	adds	r3, #8
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fe57 	bl	8003f70 <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032c8:	e015      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ce:	3328      	adds	r3, #40	; 0x28
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fefe 	bl	80040d4 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032de:	e00a      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032e6:	e006      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032e8:	bf00      	nop
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032ec:	bf00      	nop
 80032ee:	e002      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10e      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800330e:	4a02      	ldr	r2, [pc, #8]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6593      	str	r3, [r2, #88]	; 0x58
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003316:	bf00      	nop
 8003318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003320:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800333a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800333e:	460b      	mov	r3, r1
 8003340:	4313      	orrs	r3, r2
 8003342:	d055      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003348:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800334c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003350:	d033      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003352:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003356:	d82c      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335c:	d02f      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800335e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003362:	d826      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003364:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003368:	d02b      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800336a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800336e:	d820      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003374:	d012      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800337a:	d81a      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d022      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003384:	d115      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338a:	3308      	adds	r3, #8
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fdee 	bl	8003f70 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800339a:	e015      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800339c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a0:	3328      	adds	r3, #40	; 0x28
 80033a2:	2102      	movs	r1, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fe95 	bl	80040d4 <RCCEx_PLL3_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033b0:	e00a      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033d0:	4ba1      	ldr	r3, [pc, #644]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80033d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033e0:	4a9d      	ldr	r2, [pc, #628]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f002 0308 	and.w	r3, r2, #8
 80033fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003406:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d01e      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341c:	d10c      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800341e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003422:	3328      	adds	r3, #40	; 0x28
 8003424:	2102      	movs	r1, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fe54 	bl	80040d4 <RCCEx_PLL3_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003438:	4b87      	ldr	r3, [pc, #540]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003448:	4a83      	ldr	r2, [pc, #524]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800344a:	430b      	orrs	r3, r1
 800344c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800344e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f002 0310 	and.w	r3, r2, #16
 800345a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003464:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003468:	460b      	mov	r3, r1
 800346a:	4313      	orrs	r3, r2
 800346c:	d01e      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347a:	d10c      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800347c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003480:	3328      	adds	r3, #40	; 0x28
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fe25 	bl	80040d4 <RCCEx_PLL3_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003496:	4b70      	ldr	r3, [pc, #448]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800349e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034a6:	4a6c      	ldr	r2, [pc, #432]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80034b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80034c6:	460b      	mov	r3, r1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	d03e      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d8:	d022      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80034da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034de:	d81b      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d00b      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80034ea:	e015      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f0:	3308      	adds	r3, #8
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fd3b 	bl	8003f70 <RCCEx_PLL2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003500:	e00f      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003506:	3328      	adds	r3, #40	; 0x28
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fde2 	bl	80040d4 <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003516:	e004      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003522:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800352a:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003536:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800353a:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800353c:	430b      	orrs	r3, r1
 800353e:	6593      	str	r3, [r2, #88]	; 0x58
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003546:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800354a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003556:	67bb      	str	r3, [r7, #120]	; 0x78
 8003558:	2300      	movs	r3, #0
 800355a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800355c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003560:	460b      	mov	r3, r1
 8003562:	4313      	orrs	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003572:	d01f      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003578:	d818      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800357a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357e:	d003      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003584:	d007      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003586:	e011      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	4a32      	ldr	r2, [pc, #200]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003594:	e00f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359a:	3328      	adds	r3, #40	; 0x28
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fd98 	bl	80040d4 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035be:	4b26      	ldr	r3, [pc, #152]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a22      	ldr	r2, [pc, #136]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6553      	str	r3, [r2, #84]	; 0x54
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80035ea:	673b      	str	r3, [r7, #112]	; 0x70
 80035ec:	2300      	movs	r3, #0
 80035ee:	677b      	str	r3, [r7, #116]	; 0x74
 80035f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80035f4:	460b      	mov	r3, r1
 80035f6:	4313      	orrs	r3, r2
 80035f8:	d034      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d007      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800360a:	e011      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a11      	ldr	r2, [pc, #68]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003618:	e00e      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800361a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361e:	3308      	adds	r3, #8
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fca4 	bl	8003f70 <RCCEx_PLL2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800362e:	e003      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003638:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	4a02      	ldr	r2, [pc, #8]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003650:	430b      	orrs	r3, r1
 8003652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003656:	bf00      	nop
 8003658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003660:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003670:	66bb      	str	r3, [r7, #104]	; 0x68
 8003672:	2300      	movs	r3, #0
 8003674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003676:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800367a:	460b      	mov	r3, r1
 800367c:	4313      	orrs	r3, r2
 800367e:	d00c      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003684:	3328      	adds	r3, #40	; 0x28
 8003686:	2102      	movs	r1, #2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fd23 	bl	80040d4 <RCCEx_PLL3_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800369a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80036a6:	663b      	str	r3, [r7, #96]	; 0x60
 80036a8:	2300      	movs	r3, #0
 80036aa:	667b      	str	r3, [r7, #100]	; 0x64
 80036ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d038      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c2:	d018      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80036c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c8:	d811      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80036ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ce:	d014      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d4:	d80b      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d011      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80036da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036de:	d106      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4bc3      	ldr	r3, [pc, #780]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4ac2      	ldr	r2, [pc, #776]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036ec:	e008      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036f4:	e004      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003708:	4bb9      	ldr	r3, [pc, #740]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	4ab5      	ldr	r2, [pc, #724]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6553      	str	r3, [r2, #84]	; 0x54
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003724:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003734:	65bb      	str	r3, [r7, #88]	; 0x58
 8003736:	2300      	movs	r3, #0
 8003738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800373a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800373e:	460b      	mov	r3, r1
 8003740:	4313      	orrs	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003744:	4baa      	ldr	r3, [pc, #680]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800374c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003752:	4aa7      	ldr	r2, [pc, #668]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003754:	430b      	orrs	r3, r1
 8003756:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003764:	653b      	str	r3, [r7, #80]	; 0x50
 8003766:	2300      	movs	r3, #0
 8003768:	657b      	str	r3, [r7, #84]	; 0x54
 800376a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800376e:	460b      	mov	r3, r1
 8003770:	4313      	orrs	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003774:	4b9e      	ldr	r3, [pc, #632]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003778:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800377c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a9b      	ldr	r2, [pc, #620]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003784:	430b      	orrs	r3, r1
 8003786:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003794:	64bb      	str	r3, [r7, #72]	; 0x48
 8003796:	2300      	movs	r3, #0
 8003798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800379e:	460b      	mov	r3, r1
 80037a0:	4313      	orrs	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80037a4:	4b92      	ldr	r3, [pc, #584]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80037ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	4a8f      	ldr	r2, [pc, #572]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80037c4:	643b      	str	r3, [r7, #64]	; 0x40
 80037c6:	2300      	movs	r3, #0
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037d4:	4b86      	ldr	r3, [pc, #536]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	4a85      	ldr	r2, [pc, #532]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037de:	6113      	str	r3, [r2, #16]
 80037e0:	4b83      	ldr	r3, [pc, #524]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037e2:	6919      	ldr	r1, [r3, #16]
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037ec:	4a80      	ldr	r2, [pc, #512]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80037fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003800:	2300      	movs	r3, #0
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003804:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003808:	460b      	mov	r3, r1
 800380a:	4313      	orrs	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800380e:	4b78      	ldr	r3, [pc, #480]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	4a74      	ldr	r2, [pc, #464]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800381e:	430b      	orrs	r3, r1
 8003820:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
 8003830:	2300      	movs	r3, #0
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
 8003834:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003838:	460b      	mov	r3, r1
 800383a:	4313      	orrs	r3, r2
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800383e:	4b6c      	ldr	r3, [pc, #432]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384e:	4a68      	ldr	r2, [pc, #416]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003850:	430b      	orrs	r3, r1
 8003852:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	2100      	movs	r1, #0
 800385e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003866:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d011      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003874:	3308      	adds	r3, #8
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb79 	bl	8003f70 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003884:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	2100      	movs	r1, #0
 800389e:	6239      	str	r1, [r7, #32]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d011      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b4:	3308      	adds	r3, #8
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fb59 	bl	8003f70 <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	2100      	movs	r1, #0
 80038de:	61b9      	str	r1, [r7, #24]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d011      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f4:	3308      	adds	r3, #8
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fb39 	bl	8003f70 <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003904:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003910:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	2100      	movs	r1, #0
 800391e:	6139      	str	r1, [r7, #16]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800392a:	460b      	mov	r3, r1
 800392c:	4313      	orrs	r3, r2
 800392e:	d011      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fbcb 	bl	80040d4 <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003944:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003950:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	2100      	movs	r1, #0
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d011      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003974:	3328      	adds	r3, #40	; 0x28
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fbab 	bl	80040d4 <RCCEx_PLL3_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003984:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	2100      	movs	r1, #0
 800399e:	6039      	str	r1, [r7, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039aa:	460b      	mov	r3, r1
 80039ac:	4313      	orrs	r3, r2
 80039ae:	d011      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b4:	3328      	adds	r3, #40	; 0x28
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fb8b 	bl	80040d4 <RCCEx_PLL3_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80039c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80039d4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400

080039f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80039f8:	f7fe fde2 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4904      	ldr	r1, [pc, #16]	; (8003a1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	08006038 	.word	0x08006038

08003a20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a28:	4ba1      	ldr	r3, [pc, #644]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a32:	4b9f      	ldr	r3, [pc, #636]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	0b1b      	lsrs	r3, r3, #12
 8003a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a3e:	4b9c      	ldr	r3, [pc, #624]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a4a:	4b99      	ldr	r3, [pc, #612]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	08db      	lsrs	r3, r3, #3
 8003a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8111 	beq.w	8003c90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f000 8083 	beq.w	8003b7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	f200 80a1 	bhi.w	8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d056      	beq.n	8003b38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a8a:	e099      	b.n	8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a8c:	4b88      	ldr	r3, [pc, #544]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d02d      	beq.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a98:	4b85      	ldr	r3, [pc, #532]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	4a84      	ldr	r2, [pc, #528]	; (8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	ee07 3a90 	vmov	s15, r3
 8003ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac2:	4b7b      	ldr	r3, [pc, #492]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003af2:	e087      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b06:	4b6a      	ldr	r3, [pc, #424]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b36:	e065      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7a:	e043      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bbe:	e021      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	0a5b      	lsrs	r3, r3, #9
 8003c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2a:	ee17 2a90 	vmov	r2, s15
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c32:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3c:	ee07 3a90 	vmov	s15, r3
 8003c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c58:	ee17 2a90 	vmov	r2, s15
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	0e1b      	lsrs	r3, r3, #24
 8003c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c86:	ee17 2a90 	vmov	r2, s15
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
}
 8003ca2:	bf00      	nop
 8003ca4:	3724      	adds	r7, #36	; 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	03d09000 	.word	0x03d09000
 8003cb8:	46000000 	.word	0x46000000
 8003cbc:	4c742400 	.word	0x4c742400
 8003cc0:	4a742400 	.word	0x4a742400
 8003cc4:	4af42400 	.word	0x4af42400

08003cc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cd0:	4ba1      	ldr	r3, [pc, #644]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cda:	4b9f      	ldr	r3, [pc, #636]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	0d1b      	lsrs	r3, r3, #20
 8003ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ce6:	4b9c      	ldr	r3, [pc, #624]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cf2:	4b99      	ldr	r3, [pc, #612]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8111 	beq.w	8003f38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f000 8083 	beq.w	8003e24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	f200 80a1 	bhi.w	8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d056      	beq.n	8003de0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d32:	e099      	b.n	8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d34:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d02d      	beq.n	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d40:	4b85      	ldr	r3, [pc, #532]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	4a84      	ldr	r2, [pc, #528]	; (8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6a:	4b7b      	ldr	r3, [pc, #492]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d9a:	e087      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dae:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dde:	e065      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df2:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e22:	e043      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b48      	ldr	r3, [pc, #288]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e66:	e021      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	0a5b      	lsrs	r3, r3, #9
 8003eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed2:	ee17 2a90 	vmov	r2, s15
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003eda:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f00:	ee17 2a90 	vmov	r2, s15
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	0e1b      	lsrs	r3, r3, #24
 8003f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2e:	ee17 2a90 	vmov	r2, s15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f36:	e008      	b.n	8003f4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
}
 8003f4a:	bf00      	nop
 8003f4c:	3724      	adds	r7, #36	; 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
 8003f5c:	03d09000 	.word	0x03d09000
 8003f60:	46000000 	.word	0x46000000
 8003f64:	4c742400 	.word	0x4c742400
 8003f68:	4a742400 	.word	0x4a742400
 8003f6c:	4af42400 	.word	0x4af42400

08003f70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d101      	bne.n	8003f8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e099      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f8e:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a4e      	ldr	r2, [pc, #312]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9a:	f7fd f855 	bl	8001048 <HAL_GetTick>
 8003f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fa2:	f7fd f851 	bl	8001048 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e086      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fb4:	4b45      	ldr	r3, [pc, #276]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fc0:	4b42      	ldr	r3, [pc, #264]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	031b      	lsls	r3, r3, #12
 8003fce:	493f      	ldr	r1, [pc, #252]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	628b      	str	r3, [r1, #40]	; 0x28
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	025b      	lsls	r3, r3, #9
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004004:	4931      	ldr	r1, [pc, #196]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800400a:	4b30      	ldr	r3, [pc, #192]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	492d      	ldr	r1, [pc, #180]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	f023 0220 	bic.w	r2, r3, #32
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4928      	ldr	r1, [pc, #160]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800402e:	4b27      	ldr	r3, [pc, #156]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	4a26      	ldr	r2, [pc, #152]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004034:	f023 0310 	bic.w	r3, r3, #16
 8004038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 800403c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403e:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <RCCEx_PLL2_Config+0x160>)
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	69d2      	ldr	r2, [r2, #28]
 8004046:	00d2      	lsls	r2, r2, #3
 8004048:	4920      	ldr	r1, [pc, #128]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 800404a:	4313      	orrs	r3, r2
 800404c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	4a1e      	ldr	r2, [pc, #120]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004054:	f043 0310 	orr.w	r3, r3, #16
 8004058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004066:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800406a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800406c:	e00f      	b.n	800408e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004080:	e005      	b.n	800408e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4a11      	ldr	r2, [pc, #68]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800408c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800408e:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409a:	f7fc ffd5 	bl	8001048 <HAL_GetTick>
 800409e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040a2:	f7fc ffd1 	bl	8001048 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e006      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <RCCEx_PLL2_Config+0x15c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	ffff0007 	.word	0xffff0007

080040d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040e2:	4b53      	ldr	r3, [pc, #332]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d101      	bne.n	80040f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e099      	b.n	8004226 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040f2:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a4e      	ldr	r2, [pc, #312]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fe:	f7fc ffa3 	bl	8001048 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004104:	e008      	b.n	8004118 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004106:	f7fc ff9f 	bl	8001048 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e086      	b.n	8004226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004118:	4b45      	ldr	r3, [pc, #276]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004124:	4b42      	ldr	r3, [pc, #264]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	051b      	lsls	r3, r3, #20
 8004132:	493f      	ldr	r1, [pc, #252]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	628b      	str	r3, [r1, #40]	; 0x28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	025b      	lsls	r3, r3, #9
 800414a:	b29b      	uxth	r3, r3
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	3b01      	subs	r3, #1
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004168:	4931      	ldr	r1, [pc, #196]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800416e:	4b30      	ldr	r3, [pc, #192]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	492d      	ldr	r1, [pc, #180]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	4928      	ldr	r1, [pc, #160]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004192:	4b27      	ldr	r3, [pc, #156]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	4a26      	ldr	r2, [pc, #152]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a2:	4b24      	ldr	r3, [pc, #144]	; (8004234 <RCCEx_PLL3_Config+0x160>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	69d2      	ldr	r2, [r2, #28]
 80041aa:	00d2      	lsls	r2, r2, #3
 80041ac:	4920      	ldr	r1, [pc, #128]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041b2:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	4a19      	ldr	r2, [pc, #100]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041d0:	e00f      	b.n	80041f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041e4:	e005      	b.n	80041f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a0e      	ldr	r2, [pc, #56]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fe:	f7fc ff23 	bl	8001048 <HAL_GetTick>
 8004202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004204:	e008      	b.n	8004218 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004206:	f7fc ff1f 	bl	8001048 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e006      	b.n	8004226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <RCCEx_PLL3_Config+0x15c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	58024400 	.word	0x58024400
 8004234:	ffff0007 	.word	0xffff0007

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e049      	b.n	80042de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc fd3e 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 fad6 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d001      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e054      	b.n	80043aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d022      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432a:	d01d      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a22      	ldr	r2, [pc, #136]	; (80043bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1f      	ldr	r2, [pc, #124]	; (80043c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <HAL_TIM_Base_Start_IT+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x80>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d115      	bne.n	8004394 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_TIM_Base_Start_IT+0xec>)
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b06      	cmp	r3, #6
 8004378:	d015      	beq.n	80043a6 <HAL_TIM_Base_Start_IT+0xbe>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d011      	beq.n	80043a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004392:	e008      	b.n	80043a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e000      	b.n	80043a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40010400 	.word	0x40010400
 80043cc:	40001800 	.word	0x40001800
 80043d0:	40014000 	.word	0x40014000
 80043d4:	00010007 	.word	0x00010007

080043d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0202 	mvn.w	r2, #2
 800440c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9e2 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9d4 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f9e5 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0204 	mvn.w	r2, #4
 8004458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9bc 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9ae 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f9bf 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0208 	mvn.w	r2, #8
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2204      	movs	r2, #4
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f996 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f988 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f999 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0210 	mvn.w	r2, #16
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2208      	movs	r2, #8
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f970 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f962 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f973 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00c      	beq.n	8004544 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0201 	mvn.w	r2, #1
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fa8c 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fb37 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00c      	beq.n	8004596 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800458e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fb2f 	bl	8004bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00c      	beq.n	80045ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f92d 	bl	8004814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00c      	beq.n	80045de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0220 	mvn.w	r2, #32
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 faf7 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIM_ConfigClockSource+0x1c>
 8004600:	2302      	movs	r3, #2
 8004602:	e0dc      	b.n	80047be <HAL_TIM_ConfigClockSource+0x1d6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a64      	ldr	r2, [pc, #400]	; (80047cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f000 80a9 	beq.w	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 8004640:	4a62      	ldr	r2, [pc, #392]	; (80047cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f200 80ae 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004648:	4a61      	ldr	r2, [pc, #388]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	f000 80a1 	beq.w	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 8004650:	4a5f      	ldr	r2, [pc, #380]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f200 80a6 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004658:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f000 8099 	beq.w	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 8004660:	4a5c      	ldr	r2, [pc, #368]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f200 809e 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004668:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800466c:	f000 8091 	beq.w	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 8004670:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004674:	f200 8096 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467c:	f000 8089 	beq.w	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 8004680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004684:	f200 808e 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468c:	d03e      	beq.n	800470c <HAL_TIM_ConfigClockSource+0x124>
 800468e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004692:	f200 8087 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	f000 8086 	beq.w	80047aa <HAL_TIM_ConfigClockSource+0x1c2>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d87f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046a4:	2b70      	cmp	r3, #112	; 0x70
 80046a6:	d01a      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xf6>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d87b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d050      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x16a>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d877      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046b4:	2b50      	cmp	r3, #80	; 0x50
 80046b6:	d03c      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x14a>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d873      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d058      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x18a>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d86f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046c4:	2b30      	cmp	r3, #48	; 0x30
 80046c6:	d064      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d86b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d060      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d867      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d05a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x1aa>
 80046dc:	e062      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f000 f9bf 	bl	8004a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	609a      	str	r2, [r3, #8]
      break;
 800470a:	e04f      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6899      	ldr	r1, [r3, #8]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f000 f9a8 	bl	8004a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472e:	609a      	str	r2, [r3, #8]
      break;
 8004730:	e03c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	f000 f918 	bl	8004974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2150      	movs	r1, #80	; 0x50
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f972 	bl	8004a34 <TIM_ITRx_SetConfig>
      break;
 8004750:	e02c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	461a      	mov	r2, r3
 8004760:	f000 f937 	bl	80049d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2160      	movs	r1, #96	; 0x60
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f962 	bl	8004a34 <TIM_ITRx_SetConfig>
      break;
 8004770:	e01c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 f8f8 	bl	8004974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f952 	bl	8004a34 <TIM_ITRx_SetConfig>
      break;
 8004790:	e00c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f000 f949 	bl	8004a34 <TIM_ITRx_SetConfig>
      break;
 80047a2:	e003      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      break;
 80047a8:	e000      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80047aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	ffceff88 	.word	0xffceff88
 80047cc:	00100040 	.word	0x00100040
 80047d0:	00100030 	.word	0x00100030
 80047d4:	00100020 	.word	0x00100020

080047d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a46      	ldr	r2, [pc, #280]	; (8004954 <TIM_Base_SetConfig+0x12c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d00f      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a43      	ldr	r2, [pc, #268]	; (8004958 <TIM_Base_SetConfig+0x130>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00b      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a42      	ldr	r2, [pc, #264]	; (800495c <TIM_Base_SetConfig+0x134>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a41      	ldr	r2, [pc, #260]	; (8004960 <TIM_Base_SetConfig+0x138>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a40      	ldr	r2, [pc, #256]	; (8004964 <TIM_Base_SetConfig+0x13c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d108      	bne.n	800487a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a35      	ldr	r2, [pc, #212]	; (8004954 <TIM_Base_SetConfig+0x12c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01f      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d01b      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a32      	ldr	r2, [pc, #200]	; (8004958 <TIM_Base_SetConfig+0x130>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a31      	ldr	r2, [pc, #196]	; (800495c <TIM_Base_SetConfig+0x134>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a30      	ldr	r2, [pc, #192]	; (8004960 <TIM_Base_SetConfig+0x138>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <TIM_Base_SetConfig+0x13c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2e      	ldr	r2, [pc, #184]	; (8004968 <TIM_Base_SetConfig+0x140>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2d      	ldr	r2, [pc, #180]	; (800496c <TIM_Base_SetConfig+0x144>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <TIM_Base_SetConfig+0x148>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <TIM_Base_SetConfig+0x12c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <TIM_Base_SetConfig+0x13c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <TIM_Base_SetConfig+0x140>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <TIM_Base_SetConfig+0x144>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <TIM_Base_SetConfig+0x148>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]
  }
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800

08004974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0201 	bic.w	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f023 030a 	bic.w	r3, r3, #10
 80049b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b087      	sub	sp, #28
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 0210 	bic.w	r2, r3, #16
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	031b      	lsls	r3, r3, #12
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <TIM_ITRx_SetConfig+0x38>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f043 0307 	orr.w	r3, r3, #7
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	609a      	str	r2, [r3, #8]
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	ffcfff8f 	.word	0xffcfff8f

08004a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	021a      	lsls	r2, r3, #8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	609a      	str	r2, [r3, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e06d      	b.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a30      	ldr	r2, [pc, #192]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2f      	ldr	r2, [pc, #188]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d108      	bne.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d022      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d01d      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1a      	ldr	r2, [pc, #104]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10c      	bne.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800
 8004bc0:	40000c00 	.word	0x40000c00
 8004bc4:	40001800 	.word	0x40001800
 8004bc8:	40014000 	.word	0x40014000

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e042      	b.n	8004ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fc f8e9 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	; 0x24
 8004c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fe94 	bl	8005980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f825 	bl	8004ca8 <UART_SetConfig>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e01b      	b.n	8004ca0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 ff13 	bl	8005ac4 <UART_CheckIdleState>
 8004c9e:	4603      	mov	r3, r0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b092      	sub	sp, #72	; 0x48
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4bbe      	ldr	r3, [pc, #760]	; (8004fd0 <UART_SetConfig+0x328>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4ab3      	ldr	r2, [pc, #716]	; (8004fd4 <UART_SetConfig+0x32c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d10:	4313      	orrs	r3, r2
 8004d12:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	4baf      	ldr	r3, [pc, #700]	; (8004fd8 <UART_SetConfig+0x330>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	f023 010f 	bic.w	r1, r3, #15
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4aa6      	ldr	r2, [pc, #664]	; (8004fdc <UART_SetConfig+0x334>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d177      	bne.n	8004e38 <UART_SetConfig+0x190>
 8004d48:	4ba5      	ldr	r3, [pc, #660]	; (8004fe0 <UART_SetConfig+0x338>)
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d50:	2b28      	cmp	r3, #40	; 0x28
 8004d52:	d86d      	bhi.n	8004e30 <UART_SetConfig+0x188>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0xb4>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004e01 	.word	0x08004e01
 8004d60:	08004e31 	.word	0x08004e31
 8004d64:	08004e31 	.word	0x08004e31
 8004d68:	08004e31 	.word	0x08004e31
 8004d6c:	08004e31 	.word	0x08004e31
 8004d70:	08004e31 	.word	0x08004e31
 8004d74:	08004e31 	.word	0x08004e31
 8004d78:	08004e31 	.word	0x08004e31
 8004d7c:	08004e09 	.word	0x08004e09
 8004d80:	08004e31 	.word	0x08004e31
 8004d84:	08004e31 	.word	0x08004e31
 8004d88:	08004e31 	.word	0x08004e31
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e11 	.word	0x08004e11
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e31 	.word	0x08004e31
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e31 	.word	0x08004e31
 8004db4:	08004e31 	.word	0x08004e31
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e19 	.word	0x08004e19
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004e31 	.word	0x08004e31
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e31 	.word	0x08004e31
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004e31 	.word	0x08004e31
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e06:	e326      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0e:	e322      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e31e      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1e:	e31a      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e20:	2320      	movs	r3, #32
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e26:	e316      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2e:	e312      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e36:	e30e      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a69      	ldr	r2, [pc, #420]	; (8004fe4 <UART_SetConfig+0x33c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d130      	bne.n	8004ea4 <UART_SetConfig+0x1fc>
 8004e42:	4b67      	ldr	r3, [pc, #412]	; (8004fe0 <UART_SetConfig+0x338>)
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d826      	bhi.n	8004e9c <UART_SetConfig+0x1f4>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0x1ac>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e6d 	.word	0x08004e6d
 8004e58:	08004e75 	.word	0x08004e75
 8004e5c:	08004e7d 	.word	0x08004e7d
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e72:	e2f0      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e74:	2304      	movs	r3, #4
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7a:	e2ec      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e82:	e2e8      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e84:	2310      	movs	r3, #16
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8a:	e2e4      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e92:	e2e0      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9a:	e2dc      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea2:	e2d8      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4f      	ldr	r2, [pc, #316]	; (8004fe8 <UART_SetConfig+0x340>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d130      	bne.n	8004f10 <UART_SetConfig+0x268>
 8004eae:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <UART_SetConfig+0x338>)
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d826      	bhi.n	8004f08 <UART_SetConfig+0x260>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x218>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ed9 	.word	0x08004ed9
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	08004ee9 	.word	0x08004ee9
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e2ba      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e2b6      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e2b2      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e2ae      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004ef8:	2320      	movs	r3, #32
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efe:	e2aa      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f00:	2340      	movs	r3, #64	; 0x40
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e2a6      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f08:	2380      	movs	r3, #128	; 0x80
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0e:	e2a2      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a35      	ldr	r2, [pc, #212]	; (8004fec <UART_SetConfig+0x344>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d130      	bne.n	8004f7c <UART_SetConfig+0x2d4>
 8004f1a:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <UART_SetConfig+0x338>)
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b05      	cmp	r3, #5
 8004f24:	d826      	bhi.n	8004f74 <UART_SetConfig+0x2cc>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <UART_SetConfig+0x284>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f45 	.word	0x08004f45
 8004f30:	08004f4d 	.word	0x08004f4d
 8004f34:	08004f55 	.word	0x08004f55
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e284      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e280      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e27c      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e278      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f64:	2320      	movs	r3, #32
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e274      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e270      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e26c      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <UART_SetConfig+0x348>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d142      	bne.n	800500c <UART_SetConfig+0x364>
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <UART_SetConfig+0x338>)
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d838      	bhi.n	8005004 <UART_SetConfig+0x35c>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0x2f0>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fb1 	.word	0x08004fb1
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004ff5 	.word	0x08004ff5
 8004fac:	08004ffd 	.word	0x08004ffd
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e24e      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e24a      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e246      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e242      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004fd0:	cfff69f3 	.word	0xcfff69f3
 8004fd4:	58000c00 	.word	0x58000c00
 8004fd8:	11fff4ff 	.word	0x11fff4ff
 8004fdc:	40011000 	.word	0x40011000
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	40004800 	.word	0x40004800
 8004fec:	40004c00 	.word	0x40004c00
 8004ff0:	40005000 	.word	0x40005000
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffa:	e22c      	b.n	8005456 <UART_SetConfig+0x7ae>
 8004ffc:	2340      	movs	r3, #64	; 0x40
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005002:	e228      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e224      	b.n	8005456 <UART_SetConfig+0x7ae>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4ab1      	ldr	r2, [pc, #708]	; (80052d8 <UART_SetConfig+0x630>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d176      	bne.n	8005104 <UART_SetConfig+0x45c>
 8005016:	4bb1      	ldr	r3, [pc, #708]	; (80052dc <UART_SetConfig+0x634>)
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800501e:	2b28      	cmp	r3, #40	; 0x28
 8005020:	d86c      	bhi.n	80050fc <UART_SetConfig+0x454>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0x380>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	080050cd 	.word	0x080050cd
 800502c:	080050fd 	.word	0x080050fd
 8005030:	080050fd 	.word	0x080050fd
 8005034:	080050fd 	.word	0x080050fd
 8005038:	080050fd 	.word	0x080050fd
 800503c:	080050fd 	.word	0x080050fd
 8005040:	080050fd 	.word	0x080050fd
 8005044:	080050fd 	.word	0x080050fd
 8005048:	080050d5 	.word	0x080050d5
 800504c:	080050fd 	.word	0x080050fd
 8005050:	080050fd 	.word	0x080050fd
 8005054:	080050fd 	.word	0x080050fd
 8005058:	080050fd 	.word	0x080050fd
 800505c:	080050fd 	.word	0x080050fd
 8005060:	080050fd 	.word	0x080050fd
 8005064:	080050fd 	.word	0x080050fd
 8005068:	080050dd 	.word	0x080050dd
 800506c:	080050fd 	.word	0x080050fd
 8005070:	080050fd 	.word	0x080050fd
 8005074:	080050fd 	.word	0x080050fd
 8005078:	080050fd 	.word	0x080050fd
 800507c:	080050fd 	.word	0x080050fd
 8005080:	080050fd 	.word	0x080050fd
 8005084:	080050fd 	.word	0x080050fd
 8005088:	080050e5 	.word	0x080050e5
 800508c:	080050fd 	.word	0x080050fd
 8005090:	080050fd 	.word	0x080050fd
 8005094:	080050fd 	.word	0x080050fd
 8005098:	080050fd 	.word	0x080050fd
 800509c:	080050fd 	.word	0x080050fd
 80050a0:	080050fd 	.word	0x080050fd
 80050a4:	080050fd 	.word	0x080050fd
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	080050fd 	.word	0x080050fd
 80050b4:	080050fd 	.word	0x080050fd
 80050b8:	080050fd 	.word	0x080050fd
 80050bc:	080050fd 	.word	0x080050fd
 80050c0:	080050fd 	.word	0x080050fd
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e1c0      	b.n	8005456 <UART_SetConfig+0x7ae>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e1bc      	b.n	8005456 <UART_SetConfig+0x7ae>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e1b8      	b.n	8005456 <UART_SetConfig+0x7ae>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e1b4      	b.n	8005456 <UART_SetConfig+0x7ae>
 80050ec:	2320      	movs	r3, #32
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e1b0      	b.n	8005456 <UART_SetConfig+0x7ae>
 80050f4:	2340      	movs	r3, #64	; 0x40
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e1ac      	b.n	8005456 <UART_SetConfig+0x7ae>
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e1a8      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a75      	ldr	r2, [pc, #468]	; (80052e0 <UART_SetConfig+0x638>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d130      	bne.n	8005170 <UART_SetConfig+0x4c8>
 800510e:	4b73      	ldr	r3, [pc, #460]	; (80052dc <UART_SetConfig+0x634>)
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b05      	cmp	r3, #5
 8005118:	d826      	bhi.n	8005168 <UART_SetConfig+0x4c0>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <UART_SetConfig+0x478>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005139 	.word	0x08005139
 8005124:	08005141 	.word	0x08005141
 8005128:	08005149 	.word	0x08005149
 800512c:	08005151 	.word	0x08005151
 8005130:	08005159 	.word	0x08005159
 8005134:	08005161 	.word	0x08005161
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513e:	e18a      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005146:	e186      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514e:	e182      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005156:	e17e      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005158:	2320      	movs	r3, #32
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515e:	e17a      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e176      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e172      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5b      	ldr	r2, [pc, #364]	; (80052e4 <UART_SetConfig+0x63c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d130      	bne.n	80051dc <UART_SetConfig+0x534>
 800517a:	4b58      	ldr	r3, [pc, #352]	; (80052dc <UART_SetConfig+0x634>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b05      	cmp	r3, #5
 8005184:	d826      	bhi.n	80051d4 <UART_SetConfig+0x52c>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <UART_SetConfig+0x4e4>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a5 	.word	0x080051a5
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051aa:	e154      	b.n	8005456 <UART_SetConfig+0x7ae>
 80051ac:	2304      	movs	r3, #4
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e150      	b.n	8005456 <UART_SetConfig+0x7ae>
 80051b4:	2308      	movs	r3, #8
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ba:	e14c      	b.n	8005456 <UART_SetConfig+0x7ae>
 80051bc:	2310      	movs	r3, #16
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e148      	b.n	8005456 <UART_SetConfig+0x7ae>
 80051c4:	2320      	movs	r3, #32
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e144      	b.n	8005456 <UART_SetConfig+0x7ae>
 80051cc:	2340      	movs	r3, #64	; 0x40
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e140      	b.n	8005456 <UART_SetConfig+0x7ae>
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e13c      	b.n	8005456 <UART_SetConfig+0x7ae>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a41      	ldr	r2, [pc, #260]	; (80052e8 <UART_SetConfig+0x640>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	f040 8082 	bne.w	80052ec <UART_SetConfig+0x644>
 80051e8:	4b3c      	ldr	r3, [pc, #240]	; (80052dc <UART_SetConfig+0x634>)
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f0:	2b28      	cmp	r3, #40	; 0x28
 80051f2:	d86d      	bhi.n	80052d0 <UART_SetConfig+0x628>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0x554>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	080052a1 	.word	0x080052a1
 8005200:	080052d1 	.word	0x080052d1
 8005204:	080052d1 	.word	0x080052d1
 8005208:	080052d1 	.word	0x080052d1
 800520c:	080052d1 	.word	0x080052d1
 8005210:	080052d1 	.word	0x080052d1
 8005214:	080052d1 	.word	0x080052d1
 8005218:	080052d1 	.word	0x080052d1
 800521c:	080052a9 	.word	0x080052a9
 8005220:	080052d1 	.word	0x080052d1
 8005224:	080052d1 	.word	0x080052d1
 8005228:	080052d1 	.word	0x080052d1
 800522c:	080052d1 	.word	0x080052d1
 8005230:	080052d1 	.word	0x080052d1
 8005234:	080052d1 	.word	0x080052d1
 8005238:	080052d1 	.word	0x080052d1
 800523c:	080052b1 	.word	0x080052b1
 8005240:	080052d1 	.word	0x080052d1
 8005244:	080052d1 	.word	0x080052d1
 8005248:	080052d1 	.word	0x080052d1
 800524c:	080052d1 	.word	0x080052d1
 8005250:	080052d1 	.word	0x080052d1
 8005254:	080052d1 	.word	0x080052d1
 8005258:	080052d1 	.word	0x080052d1
 800525c:	080052b9 	.word	0x080052b9
 8005260:	080052d1 	.word	0x080052d1
 8005264:	080052d1 	.word	0x080052d1
 8005268:	080052d1 	.word	0x080052d1
 800526c:	080052d1 	.word	0x080052d1
 8005270:	080052d1 	.word	0x080052d1
 8005274:	080052d1 	.word	0x080052d1
 8005278:	080052d1 	.word	0x080052d1
 800527c:	080052c1 	.word	0x080052c1
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080052d1 	.word	0x080052d1
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052d1 	.word	0x080052d1
 8005294:	080052d1 	.word	0x080052d1
 8005298:	080052d1 	.word	0x080052d1
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e0d6      	b.n	8005456 <UART_SetConfig+0x7ae>
 80052a8:	2304      	movs	r3, #4
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e0d2      	b.n	8005456 <UART_SetConfig+0x7ae>
 80052b0:	2308      	movs	r3, #8
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e0ce      	b.n	8005456 <UART_SetConfig+0x7ae>
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e0ca      	b.n	8005456 <UART_SetConfig+0x7ae>
 80052c0:	2320      	movs	r3, #32
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e0c6      	b.n	8005456 <UART_SetConfig+0x7ae>
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ce:	e0c2      	b.n	8005456 <UART_SetConfig+0x7ae>
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e0be      	b.n	8005456 <UART_SetConfig+0x7ae>
 80052d8:	40011400 	.word	0x40011400
 80052dc:	58024400 	.word	0x58024400
 80052e0:	40007800 	.word	0x40007800
 80052e4:	40007c00 	.word	0x40007c00
 80052e8:	40011800 	.word	0x40011800
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4aad      	ldr	r2, [pc, #692]	; (80055a8 <UART_SetConfig+0x900>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d176      	bne.n	80053e4 <UART_SetConfig+0x73c>
 80052f6:	4bad      	ldr	r3, [pc, #692]	; (80055ac <UART_SetConfig+0x904>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052fe:	2b28      	cmp	r3, #40	; 0x28
 8005300:	d86c      	bhi.n	80053dc <UART_SetConfig+0x734>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x660>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	080053ad 	.word	0x080053ad
 800530c:	080053dd 	.word	0x080053dd
 8005310:	080053dd 	.word	0x080053dd
 8005314:	080053dd 	.word	0x080053dd
 8005318:	080053dd 	.word	0x080053dd
 800531c:	080053dd 	.word	0x080053dd
 8005320:	080053dd 	.word	0x080053dd
 8005324:	080053dd 	.word	0x080053dd
 8005328:	080053b5 	.word	0x080053b5
 800532c:	080053dd 	.word	0x080053dd
 8005330:	080053dd 	.word	0x080053dd
 8005334:	080053dd 	.word	0x080053dd
 8005338:	080053dd 	.word	0x080053dd
 800533c:	080053dd 	.word	0x080053dd
 8005340:	080053dd 	.word	0x080053dd
 8005344:	080053dd 	.word	0x080053dd
 8005348:	080053bd 	.word	0x080053bd
 800534c:	080053dd 	.word	0x080053dd
 8005350:	080053dd 	.word	0x080053dd
 8005354:	080053dd 	.word	0x080053dd
 8005358:	080053dd 	.word	0x080053dd
 800535c:	080053dd 	.word	0x080053dd
 8005360:	080053dd 	.word	0x080053dd
 8005364:	080053dd 	.word	0x080053dd
 8005368:	080053c5 	.word	0x080053c5
 800536c:	080053dd 	.word	0x080053dd
 8005370:	080053dd 	.word	0x080053dd
 8005374:	080053dd 	.word	0x080053dd
 8005378:	080053dd 	.word	0x080053dd
 800537c:	080053dd 	.word	0x080053dd
 8005380:	080053dd 	.word	0x080053dd
 8005384:	080053dd 	.word	0x080053dd
 8005388:	080053cd 	.word	0x080053cd
 800538c:	080053dd 	.word	0x080053dd
 8005390:	080053dd 	.word	0x080053dd
 8005394:	080053dd 	.word	0x080053dd
 8005398:	080053dd 	.word	0x080053dd
 800539c:	080053dd 	.word	0x080053dd
 80053a0:	080053dd 	.word	0x080053dd
 80053a4:	080053dd 	.word	0x080053dd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e050      	b.n	8005456 <UART_SetConfig+0x7ae>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e04c      	b.n	8005456 <UART_SetConfig+0x7ae>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e048      	b.n	8005456 <UART_SetConfig+0x7ae>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e044      	b.n	8005456 <UART_SetConfig+0x7ae>
 80053cc:	2320      	movs	r3, #32
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e040      	b.n	8005456 <UART_SetConfig+0x7ae>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e03c      	b.n	8005456 <UART_SetConfig+0x7ae>
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e038      	b.n	8005456 <UART_SetConfig+0x7ae>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a71      	ldr	r2, [pc, #452]	; (80055b0 <UART_SetConfig+0x908>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d130      	bne.n	8005450 <UART_SetConfig+0x7a8>
 80053ee:	4b6f      	ldr	r3, [pc, #444]	; (80055ac <UART_SetConfig+0x904>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d826      	bhi.n	8005448 <UART_SetConfig+0x7a0>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0x758>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005419 	.word	0x08005419
 8005404:	08005421 	.word	0x08005421
 8005408:	08005429 	.word	0x08005429
 800540c:	08005431 	.word	0x08005431
 8005410:	08005439 	.word	0x08005439
 8005414:	08005441 	.word	0x08005441
 8005418:	2302      	movs	r3, #2
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e01a      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e016      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e012      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e00e      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005438:	2320      	movs	r3, #32
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e00a      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e006      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e002      	b.n	8005456 <UART_SetConfig+0x7ae>
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a55      	ldr	r2, [pc, #340]	; (80055b0 <UART_SetConfig+0x908>)
 800545c:	4293      	cmp	r3, r2
 800545e:	f040 80f8 	bne.w	8005652 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005462:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005466:	2b20      	cmp	r3, #32
 8005468:	dc46      	bgt.n	80054f8 <UART_SetConfig+0x850>
 800546a:	2b02      	cmp	r3, #2
 800546c:	db75      	blt.n	800555a <UART_SetConfig+0x8b2>
 800546e:	3b02      	subs	r3, #2
 8005470:	2b1e      	cmp	r3, #30
 8005472:	d872      	bhi.n	800555a <UART_SetConfig+0x8b2>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x7d4>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054ff 	.word	0x080054ff
 8005480:	0800555b 	.word	0x0800555b
 8005484:	08005507 	.word	0x08005507
 8005488:	0800555b 	.word	0x0800555b
 800548c:	0800555b 	.word	0x0800555b
 8005490:	0800555b 	.word	0x0800555b
 8005494:	08005517 	.word	0x08005517
 8005498:	0800555b 	.word	0x0800555b
 800549c:	0800555b 	.word	0x0800555b
 80054a0:	0800555b 	.word	0x0800555b
 80054a4:	0800555b 	.word	0x0800555b
 80054a8:	0800555b 	.word	0x0800555b
 80054ac:	0800555b 	.word	0x0800555b
 80054b0:	0800555b 	.word	0x0800555b
 80054b4:	08005527 	.word	0x08005527
 80054b8:	0800555b 	.word	0x0800555b
 80054bc:	0800555b 	.word	0x0800555b
 80054c0:	0800555b 	.word	0x0800555b
 80054c4:	0800555b 	.word	0x0800555b
 80054c8:	0800555b 	.word	0x0800555b
 80054cc:	0800555b 	.word	0x0800555b
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	0800555b 	.word	0x0800555b
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	0800555b 	.word	0x0800555b
 80054e0:	0800555b 	.word	0x0800555b
 80054e4:	0800555b 	.word	0x0800555b
 80054e8:	0800555b 	.word	0x0800555b
 80054ec:	0800555b 	.word	0x0800555b
 80054f0:	0800555b 	.word	0x0800555b
 80054f4:	0800554d 	.word	0x0800554d
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	d02a      	beq.n	8005552 <UART_SetConfig+0x8aa>
 80054fc:	e02d      	b.n	800555a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054fe:	f7fe fa79 	bl	80039f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005502:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005504:	e02f      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe fa88 	bl	8003a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005514:	e027      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005516:	f107 0318 	add.w	r3, r7, #24
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fbd4 	bl	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005524:	e01f      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005526:	4b21      	ldr	r3, [pc, #132]	; (80055ac <UART_SetConfig+0x904>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <UART_SetConfig+0x904>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	08db      	lsrs	r3, r3, #3
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <UART_SetConfig+0x90c>)
 800553e:	fa22 f303 	lsr.w	r3, r2, r3
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005544:	e00f      	b.n	8005566 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005546:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <UART_SetConfig+0x90c>)
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800554a:	e00c      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <UART_SetConfig+0x910>)
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 81ee 	beq.w	800594a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	4a12      	ldr	r2, [pc, #72]	; (80055bc <UART_SetConfig+0x914>)
 8005574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005578:	461a      	mov	r2, r3
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005580:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558e:	429a      	cmp	r2, r3
 8005590:	d305      	bcc.n	800559e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559a:	429a      	cmp	r2, r3
 800559c:	d910      	bls.n	80055c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055a4:	e1d1      	b.n	800594a <UART_SetConfig+0xca2>
 80055a6:	bf00      	nop
 80055a8:	40011c00 	.word	0x40011c00
 80055ac:	58024400 	.word	0x58024400
 80055b0:	58000c00 	.word	0x58000c00
 80055b4:	03d09000 	.word	0x03d09000
 80055b8:	003d0900 	.word	0x003d0900
 80055bc:	08006048 	.word	0x08006048
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c2:	2200      	movs	r2, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	60fa      	str	r2, [r7, #12]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	4ac0      	ldr	r2, [pc, #768]	; (80058d0 <UART_SetConfig+0xc28>)
 80055ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2200      	movs	r2, #0
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055e2:	f7fa fe83 	bl	80002ec <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	020b      	lsls	r3, r1, #8
 80055f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055fc:	0202      	lsls	r2, r0, #8
 80055fe:	6979      	ldr	r1, [r7, #20]
 8005600:	6849      	ldr	r1, [r1, #4]
 8005602:	0849      	lsrs	r1, r1, #1
 8005604:	2000      	movs	r0, #0
 8005606:	460c      	mov	r4, r1
 8005608:	4605      	mov	r5, r0
 800560a:	eb12 0804 	adds.w	r8, r2, r4
 800560e:	eb43 0905 	adc.w	r9, r3, r5
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	469a      	mov	sl, r3
 800561a:	4693      	mov	fp, r2
 800561c:	4652      	mov	r2, sl
 800561e:	465b      	mov	r3, fp
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fa fe62 	bl	80002ec <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4613      	mov	r3, r2
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005636:	d308      	bcc.n	800564a <UART_SetConfig+0x9a2>
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563e:	d204      	bcs.n	800564a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005646:	60da      	str	r2, [r3, #12]
 8005648:	e17f      	b.n	800594a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005650:	e17b      	b.n	800594a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565a:	f040 80bd 	bne.w	80057d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800565e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005662:	2b20      	cmp	r3, #32
 8005664:	dc48      	bgt.n	80056f8 <UART_SetConfig+0xa50>
 8005666:	2b00      	cmp	r3, #0
 8005668:	db7b      	blt.n	8005762 <UART_SetConfig+0xaba>
 800566a:	2b20      	cmp	r3, #32
 800566c:	d879      	bhi.n	8005762 <UART_SetConfig+0xaba>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <UART_SetConfig+0x9cc>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056ff 	.word	0x080056ff
 8005678:	08005707 	.word	0x08005707
 800567c:	08005763 	.word	0x08005763
 8005680:	08005763 	.word	0x08005763
 8005684:	0800570f 	.word	0x0800570f
 8005688:	08005763 	.word	0x08005763
 800568c:	08005763 	.word	0x08005763
 8005690:	08005763 	.word	0x08005763
 8005694:	0800571f 	.word	0x0800571f
 8005698:	08005763 	.word	0x08005763
 800569c:	08005763 	.word	0x08005763
 80056a0:	08005763 	.word	0x08005763
 80056a4:	08005763 	.word	0x08005763
 80056a8:	08005763 	.word	0x08005763
 80056ac:	08005763 	.word	0x08005763
 80056b0:	08005763 	.word	0x08005763
 80056b4:	0800572f 	.word	0x0800572f
 80056b8:	08005763 	.word	0x08005763
 80056bc:	08005763 	.word	0x08005763
 80056c0:	08005763 	.word	0x08005763
 80056c4:	08005763 	.word	0x08005763
 80056c8:	08005763 	.word	0x08005763
 80056cc:	08005763 	.word	0x08005763
 80056d0:	08005763 	.word	0x08005763
 80056d4:	08005763 	.word	0x08005763
 80056d8:	08005763 	.word	0x08005763
 80056dc:	08005763 	.word	0x08005763
 80056e0:	08005763 	.word	0x08005763
 80056e4:	08005763 	.word	0x08005763
 80056e8:	08005763 	.word	0x08005763
 80056ec:	08005763 	.word	0x08005763
 80056f0:	08005763 	.word	0x08005763
 80056f4:	08005755 	.word	0x08005755
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d02e      	beq.n	800575a <UART_SetConfig+0xab2>
 80056fc:	e031      	b.n	8005762 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fe:	f7fc ff8f 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8005702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005704:	e033      	b.n	800576e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005706:	f7fc ffa1 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 800570a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800570c:	e02f      	b.n	800576e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800570e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe f984 	bl	8003a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800571c:	e027      	b.n	800576e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800571e:	f107 0318 	add.w	r3, r7, #24
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fad0 	bl	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800572c:	e01f      	b.n	800576e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800572e:	4b69      	ldr	r3, [pc, #420]	; (80058d4 <UART_SetConfig+0xc2c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800573a:	4b66      	ldr	r3, [pc, #408]	; (80058d4 <UART_SetConfig+0xc2c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	08db      	lsrs	r3, r3, #3
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	4a64      	ldr	r2, [pc, #400]	; (80058d8 <UART_SetConfig+0xc30>)
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800574c:	e00f      	b.n	800576e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800574e:	4b62      	ldr	r3, [pc, #392]	; (80058d8 <UART_SetConfig+0xc30>)
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005752:	e00c      	b.n	800576e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005754:	4b61      	ldr	r3, [pc, #388]	; (80058dc <UART_SetConfig+0xc34>)
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005758:	e009      	b.n	800576e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005760:	e005      	b.n	800576e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800576c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800576e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80ea 	beq.w	800594a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	4a55      	ldr	r2, [pc, #340]	; (80058d0 <UART_SetConfig+0xc28>)
 800577c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005780:	461a      	mov	r2, r3
 8005782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005784:	fbb3 f3f2 	udiv	r3, r3, r2
 8005788:	005a      	lsls	r2, r3, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	441a      	add	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d916      	bls.n	80057d0 <UART_SetConfig+0xb28>
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a8:	d212      	bcs.n	80057d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f023 030f 	bic.w	r3, r3, #15
 80057b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	b29a      	uxth	r2, r3
 80057c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057c2:	4313      	orrs	r3, r2
 80057c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80057cc:	60da      	str	r2, [r3, #12]
 80057ce:	e0bc      	b.n	800594a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057d6:	e0b8      	b.n	800594a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057dc:	2b20      	cmp	r3, #32
 80057de:	dc4b      	bgt.n	8005878 <UART_SetConfig+0xbd0>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f2c0 8087 	blt.w	80058f4 <UART_SetConfig+0xc4c>
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	f200 8084 	bhi.w	80058f4 <UART_SetConfig+0xc4c>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0xb4c>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	0800587f 	.word	0x0800587f
 80057f8:	08005887 	.word	0x08005887
 80057fc:	080058f5 	.word	0x080058f5
 8005800:	080058f5 	.word	0x080058f5
 8005804:	0800588f 	.word	0x0800588f
 8005808:	080058f5 	.word	0x080058f5
 800580c:	080058f5 	.word	0x080058f5
 8005810:	080058f5 	.word	0x080058f5
 8005814:	0800589f 	.word	0x0800589f
 8005818:	080058f5 	.word	0x080058f5
 800581c:	080058f5 	.word	0x080058f5
 8005820:	080058f5 	.word	0x080058f5
 8005824:	080058f5 	.word	0x080058f5
 8005828:	080058f5 	.word	0x080058f5
 800582c:	080058f5 	.word	0x080058f5
 8005830:	080058f5 	.word	0x080058f5
 8005834:	080058af 	.word	0x080058af
 8005838:	080058f5 	.word	0x080058f5
 800583c:	080058f5 	.word	0x080058f5
 8005840:	080058f5 	.word	0x080058f5
 8005844:	080058f5 	.word	0x080058f5
 8005848:	080058f5 	.word	0x080058f5
 800584c:	080058f5 	.word	0x080058f5
 8005850:	080058f5 	.word	0x080058f5
 8005854:	080058f5 	.word	0x080058f5
 8005858:	080058f5 	.word	0x080058f5
 800585c:	080058f5 	.word	0x080058f5
 8005860:	080058f5 	.word	0x080058f5
 8005864:	080058f5 	.word	0x080058f5
 8005868:	080058f5 	.word	0x080058f5
 800586c:	080058f5 	.word	0x080058f5
 8005870:	080058f5 	.word	0x080058f5
 8005874:	080058e7 	.word	0x080058e7
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d037      	beq.n	80058ec <UART_SetConfig+0xc44>
 800587c:	e03a      	b.n	80058f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587e:	f7fc fecf 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8005882:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005884:	e03c      	b.n	8005900 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005886:	f7fc fee1 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 800588a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800588c:	e038      	b.n	8005900 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe f8c4 	bl	8003a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800589c:	e030      	b.n	8005900 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589e:	f107 0318 	add.w	r3, r7, #24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fa10 	bl	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ac:	e028      	b.n	8005900 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <UART_SetConfig+0xc2c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d012      	beq.n	80058e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <UART_SetConfig+0xc2c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	08db      	lsrs	r3, r3, #3
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <UART_SetConfig+0xc30>)
 80058c6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058cc:	e018      	b.n	8005900 <UART_SetConfig+0xc58>
 80058ce:	bf00      	nop
 80058d0:	08006048 	.word	0x08006048
 80058d4:	58024400 	.word	0x58024400
 80058d8:	03d09000 	.word	0x03d09000
 80058dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <UART_SetConfig+0xccc>)
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e4:	e00c      	b.n	8005900 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <UART_SetConfig+0xcd0>)
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ea:	e009      	b.n	8005900 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f2:	e005      	b.n	8005900 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d021      	beq.n	800594a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	4a1c      	ldr	r2, [pc, #112]	; (800597c <UART_SetConfig+0xcd4>)
 800590c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005910:	461a      	mov	r2, r3
 8005912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005914:	fbb3 f2f2 	udiv	r2, r3, r2
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	441a      	add	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	2b0f      	cmp	r3, #15
 800592e:	d909      	bls.n	8005944 <UART_SetConfig+0xc9c>
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005936:	d205      	bcs.n	8005944 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593a:	b29a      	uxth	r2, r3
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e002      	b.n	800594a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2201      	movs	r2, #1
 800594e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2201      	movs	r2, #1
 8005956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2200      	movs	r2, #0
 800595e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2200      	movs	r2, #0
 8005964:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005966:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800596a:	4618      	mov	r0, r3
 800596c:	3748      	adds	r7, #72	; 0x48
 800596e:	46bd      	mov	sp, r7
 8005970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005974:	03d09000 	.word	0x03d09000
 8005978:	003d0900 	.word	0x003d0900
 800597c:	08006048 	.word	0x08006048

08005980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7e:	d10a      	bne.n	8005a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b098      	sub	sp, #96	; 0x60
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ad4:	f7fb fab8 	bl	8001048 <HAL_GetTick>
 8005ad8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d12f      	bne.n	8005b48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f88e 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d022      	beq.n	8005b48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b20:	647b      	str	r3, [r7, #68]	; 0x44
 8005b22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e6      	bne.n	8005b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e063      	b.n	8005c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d149      	bne.n	8005bea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f857 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d03c      	beq.n	8005bea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e6      	bne.n	8005b70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc2:	61fa      	str	r2, [r7, #28]
 8005bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	69b9      	ldr	r1, [r7, #24]
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e5      	bne.n	8005ba2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e012      	b.n	8005c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3758      	adds	r7, #88	; 0x58
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c28:	e04f      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d04b      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fb fa09 	bl	8001048 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e04e      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d037      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b80      	cmp	r3, #128	; 0x80
 8005c5e:	d034      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d031      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d110      	bne.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2208      	movs	r2, #8
 8005c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f839 	bl	8005cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2208      	movs	r2, #8
 8005c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e029      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	d111      	bne.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f81f 	bl	8005cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e00f      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	bf0c      	ite	eq
 8005cda:	2301      	moveq	r3, #1
 8005cdc:	2300      	movne	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d0a0      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b095      	sub	sp, #84	; 0x54
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e6      	bne.n	8005cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <UART_EndRxTransfer+0xc8>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e5      	bne.n	8005d2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d118      	bne.n	8005d9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f023 0310 	bic.w	r3, r3, #16
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6979      	ldr	r1, [r7, #20]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	613b      	str	r3, [r7, #16]
   return(result);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e6      	bne.n	8005d6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005db0:	bf00      	nop
 8005db2:	3754      	adds	r7, #84	; 0x54
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	effffffe 	.word	0xeffffffe

08005dc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e027      	b.n	8005e26 <HAL_UARTEx_DisableFifoMode+0x66>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2224      	movs	r2, #36	; 0x24
 8005de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e02d      	b.n	8005ea6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2224      	movs	r2, #36	; 0x24
 8005e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f850 	bl	8005f2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e02d      	b.n	8005f22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	; 0x24
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f812 	bl	8005f2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d108      	bne.n	8005f4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f4c:	e031      	b.n	8005fb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f4e:	2310      	movs	r3, #16
 8005f50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f52:	2310      	movs	r3, #16
 8005f54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	0e5b      	lsrs	r3, r3, #25
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	0f5b      	lsrs	r3, r3, #29
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	7b3a      	ldrb	r2, [r7, #12]
 8005f7a:	4911      	ldr	r1, [pc, #68]	; (8005fc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005f7c:	5c8a      	ldrb	r2, [r1, r2]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f82:	7b3a      	ldrb	r2, [r7, #12]
 8005f84:	490f      	ldr	r1, [pc, #60]	; (8005fc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005f86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f88:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	7b7a      	ldrb	r2, [r7, #13]
 8005f98:	4909      	ldr	r1, [pc, #36]	; (8005fc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005f9a:	5c8a      	ldrb	r2, [r1, r2]
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fa0:	7b7a      	ldrb	r2, [r7, #13]
 8005fa2:	4908      	ldr	r1, [pc, #32]	; (8005fc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005fa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	08006060 	.word	0x08006060
 8005fc4:	08006068 	.word	0x08006068

08005fc8 <__libc_init_array>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4d0d      	ldr	r5, [pc, #52]	; (8006000 <__libc_init_array+0x38>)
 8005fcc:	4c0d      	ldr	r4, [pc, #52]	; (8006004 <__libc_init_array+0x3c>)
 8005fce:	1b64      	subs	r4, r4, r5
 8005fd0:	10a4      	asrs	r4, r4, #2
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	42a6      	cmp	r6, r4
 8005fd6:	d109      	bne.n	8005fec <__libc_init_array+0x24>
 8005fd8:	4d0b      	ldr	r5, [pc, #44]	; (8006008 <__libc_init_array+0x40>)
 8005fda:	4c0c      	ldr	r4, [pc, #48]	; (800600c <__libc_init_array+0x44>)
 8005fdc:	f000 f820 	bl	8006020 <_init>
 8005fe0:	1b64      	subs	r4, r4, r5
 8005fe2:	10a4      	asrs	r4, r4, #2
 8005fe4:	2600      	movs	r6, #0
 8005fe6:	42a6      	cmp	r6, r4
 8005fe8:	d105      	bne.n	8005ff6 <__libc_init_array+0x2e>
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff0:	4798      	blx	r3
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7ee      	b.n	8005fd4 <__libc_init_array+0xc>
 8005ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffa:	4798      	blx	r3
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	e7f2      	b.n	8005fe6 <__libc_init_array+0x1e>
 8006000:	08006078 	.word	0x08006078
 8006004:	08006078 	.word	0x08006078
 8006008:	08006078 	.word	0x08006078
 800600c:	0800607c 	.word	0x0800607c

08006010 <memset>:
 8006010:	4402      	add	r2, r0
 8006012:	4603      	mov	r3, r0
 8006014:	4293      	cmp	r3, r2
 8006016:	d100      	bne.n	800601a <memset+0xa>
 8006018:	4770      	bx	lr
 800601a:	f803 1b01 	strb.w	r1, [r3], #1
 800601e:	e7f9      	b.n	8006014 <memset+0x4>

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
