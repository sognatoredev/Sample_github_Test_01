
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000104  24000010  08005f60  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000114  08005f60  00020114  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000160ab  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027e6  00000000  00000000  000360e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  000388d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f58  00000000  00000000  00039948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030f66  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016bdb  00000000  00000000  0006b806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e813  00000000  00000000  000823e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c0bf4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000444c  00000000  00000000  001c0c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005ef0 	.word	0x08005ef0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005ef0 	.word	0x08005ef0

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b80      	ldr	r3, [pc, #512]	; (8000808 <MX_GPIO_Init+0x218>)
 8000608:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800060c:	4a7e      	ldr	r2, [pc, #504]	; (8000808 <MX_GPIO_Init+0x218>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000616:	4b7c      	ldr	r3, [pc, #496]	; (8000808 <MX_GPIO_Init+0x218>)
 8000618:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	623b      	str	r3, [r7, #32]
 8000622:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000624:	4b78      	ldr	r3, [pc, #480]	; (8000808 <MX_GPIO_Init+0x218>)
 8000626:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062a:	4a77      	ldr	r2, [pc, #476]	; (8000808 <MX_GPIO_Init+0x218>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000634:	4b74      	ldr	r3, [pc, #464]	; (8000808 <MX_GPIO_Init+0x218>)
 8000636:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	4b71      	ldr	r3, [pc, #452]	; (8000808 <MX_GPIO_Init+0x218>)
 8000644:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000648:	4a6f      	ldr	r2, [pc, #444]	; (8000808 <MX_GPIO_Init+0x218>)
 800064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000652:	4b6d      	ldr	r3, [pc, #436]	; (8000808 <MX_GPIO_Init+0x218>)
 8000654:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b69      	ldr	r3, [pc, #420]	; (8000808 <MX_GPIO_Init+0x218>)
 8000662:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000666:	4a68      	ldr	r2, [pc, #416]	; (8000808 <MX_GPIO_Init+0x218>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000670:	4b65      	ldr	r3, [pc, #404]	; (8000808 <MX_GPIO_Init+0x218>)
 8000672:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b62      	ldr	r3, [pc, #392]	; (8000808 <MX_GPIO_Init+0x218>)
 8000680:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000684:	4a60      	ldr	r2, [pc, #384]	; (8000808 <MX_GPIO_Init+0x218>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800068e:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <MX_GPIO_Init+0x218>)
 8000690:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069c:	4b5a      	ldr	r3, [pc, #360]	; (8000808 <MX_GPIO_Init+0x218>)
 800069e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a2:	4a59      	ldr	r2, [pc, #356]	; (8000808 <MX_GPIO_Init+0x218>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ac:	4b56      	ldr	r3, [pc, #344]	; (8000808 <MX_GPIO_Init+0x218>)
 80006ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b53      	ldr	r3, [pc, #332]	; (8000808 <MX_GPIO_Init+0x218>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	4a51      	ldr	r2, [pc, #324]	; (8000808 <MX_GPIO_Init+0x218>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ca:	4b4f      	ldr	r3, [pc, #316]	; (8000808 <MX_GPIO_Init+0x218>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d8:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <MX_GPIO_Init+0x218>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	4a4a      	ldr	r2, [pc, #296]	; (8000808 <MX_GPIO_Init+0x218>)
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e8:	4b47      	ldr	r3, [pc, #284]	; (8000808 <MX_GPIO_Init+0x218>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fc:	4843      	ldr	r0, [pc, #268]	; (800080c <MX_GPIO_Init+0x21c>)
 80006fe:	f000 fed7 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f244 0101 	movw	r1, #16385	; 0x4001
 8000708:	4841      	ldr	r0, [pc, #260]	; (8000810 <MX_GPIO_Init+0x220>)
 800070a:	f000 fed1 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	4840      	ldr	r0, [pc, #256]	; (8000814 <MX_GPIO_Init+0x224>)
 8000714:	f000 fecc 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	4619      	mov	r1, r3
 800072c:	483a      	ldr	r0, [pc, #232]	; (8000818 <MX_GPIO_Init+0x228>)
 800072e:	f000 fd0f 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	4830      	ldr	r0, [pc, #192]	; (800080c <MX_GPIO_Init+0x21c>)
 800074c:	f000 fd00 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000750:	f244 0301 	movw	r3, #16385	; 0x4001
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	4829      	ldr	r0, [pc, #164]	; (8000810 <MX_GPIO_Init+0x220>)
 800076a:	f000 fcf1 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	4826      	ldr	r0, [pc, #152]	; (800081c <MX_GPIO_Init+0x22c>)
 8000784:	f000 fce4 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	4820      	ldr	r0, [pc, #128]	; (8000820 <MX_GPIO_Init+0x230>)
 800079e:	f000 fcd7 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007b4:	230a      	movs	r3, #10
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	4818      	ldr	r0, [pc, #96]	; (8000820 <MX_GPIO_Init+0x230>)
 80007c0:	f000 fcc6 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80007c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <MX_GPIO_Init+0x230>)
 80007de:	f000 fcb7 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e2:	2302      	movs	r3, #2
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4619      	mov	r1, r3
 80007f8:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_GPIO_Init+0x224>)
 80007fa:	f000 fca9 	bl	8001150 <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3738      	adds	r7, #56	; 0x38
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	58024400 	.word	0x58024400
 800080c:	58021400 	.word	0x58021400
 8000810:	58020400 	.word	0x58020400
 8000814:	58021000 	.word	0x58021000
 8000818:	58020800 	.word	0x58020800
 800081c:	58021800 	.word	0x58021800
 8000820:	58020000 	.word	0x58020000

08000824 <LED_Process>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
void LED_Process (void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  if (TIM1_CNT > 499)
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <LED_Process+0x34>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000830:	d30f      	bcc.n	8000852 <LED_Process+0x2e>
  {
    TIM1_CNT = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <LED_Process+0x34>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]

    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000838:	2101      	movs	r1, #1
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <LED_Process+0x38>)
 800083c:	f000 fe51 	bl	80014e2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <LED_Process+0x38>)
 8000846:	f000 fe4c 	bl	80014e2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800084a:	2102      	movs	r1, #2
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <LED_Process+0x3c>)
 800084e:	f000 fe48 	bl	80014e2 <HAL_GPIO_TogglePin>
  }
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2400010c 	.word	0x2400010c
 800085c:	58020400 	.word	0x58020400
 8000860:	58021000 	.word	0x58021000

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f000 fad0 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f810 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f7ff febe 	bl	80005f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000874:	f000 f9e2 	bl	8000c3c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000878:	f000 fa96 	bl	8000da8 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 800087c:	f000 f962 	bl	8000b44 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <main+0x28>)
 8000882:	f003 fc99 	bl	80041b8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Process();
 8000886:	f7ff ffcd 	bl	8000824 <LED_Process>
  {
 800088a:	e7fc      	b.n	8000886 <main+0x22>
 800088c:	2400002c 	.word	0x2400002c

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	; 0x70
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	224c      	movs	r2, #76	; 0x4c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fb1e 	bl	8005ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2220      	movs	r2, #32
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fb18 	bl	8005ee0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008b0:	4b30      	ldr	r3, [pc, #192]	; (8000974 <SystemClock_Config+0xe4>)
 80008b2:	f04f 32ff 	mov.w	r2, #4294967295
 80008b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008ba:	2004      	movs	r0, #4
 80008bc:	f000 fe2c 	bl	8001518 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008c0:	2300      	movs	r3, #0
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <SystemClock_Config+0xe8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <SystemClock_Config+0xe8>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <SystemClock_Config+0xe8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <SystemClock_Config+0xe8>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008ec:	2321      	movs	r3, #33	; 0x21
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008f6:	2301      	movs	r3, #1
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	2302      	movs	r3, #2
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000906:	2346      	movs	r3, #70	; 0x46
 8000908:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800090e:	2304      	movs	r3, #4
 8000910:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000916:	230c      	movs	r3, #12
 8000918:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800091a:	2300      	movs	r3, #0
 800091c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fe50 	bl	80015cc <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000932:	f000 f823 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	233f      	movs	r3, #63	; 0x3f
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2107      	movs	r1, #7
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fa67 	bl	8001e30 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000968:	f000 f808 	bl	800097c <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3770      	adds	r7, #112	; 0x70
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58024400 	.word	0x58024400
 8000978:	58024800 	.word	0x58024800

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x30>)
 8000990:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x30>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x30>)
 80009a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	58024400 	.word	0x58024400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 fa72 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM1_UP_IRQHandler+0x10>)
 8000a16:	f003 fc47 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2400002c 	.word	0x2400002c

08000a24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d104      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    TIM1_CNT++;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a3e:	6013      	str	r3, [r2, #0]
  }

}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	2400010c 	.word	0x2400010c

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a58:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <SystemInit+0xd0>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a31      	ldr	r2, [pc, #196]	; (8000b24 <SystemInit+0xd0>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <SystemInit+0xd4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d807      	bhi.n	8000a84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <SystemInit+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f023 030f 	bic.w	r3, r3, #15
 8000a7c:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <SystemInit+0xd4>)
 8000a7e:	f043 0303 	orr.w	r3, r3, #3
 8000a82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a84:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <SystemInit+0xd8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <SystemInit+0xd8>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <SystemInit+0xd8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <SystemInit+0xd8>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4924      	ldr	r1, [pc, #144]	; (8000b2c <SystemInit+0xd8>)
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SystemInit+0xdc>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <SystemInit+0xd4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 030c 	and.w	r3, r3, #12
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <SystemInit+0xd4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <SystemInit+0xd4>)
 8000ab8:	f043 0303 	orr.w	r3, r3, #3
 8000abc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <SystemInit+0xd8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <SystemInit+0xd8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <SystemInit+0xd8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <SystemInit+0xd8>)
 8000ad2:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <SystemInit+0xe0>)
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <SystemInit+0xd8>)
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <SystemInit+0xe4>)
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <SystemInit+0xd8>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <SystemInit+0xe8>)
 8000ae0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <SystemInit+0xd8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <SystemInit+0xd8>)
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <SystemInit+0xe8>)
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <SystemInit+0xd8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <SystemInit+0xd8>)
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <SystemInit+0xe8>)
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0xd8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SystemInit+0xd8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <SystemInit+0xd8>)
 8000b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SystemInit+0xd8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <SystemInit+0xec>)
 8000b14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	52002000 	.word	0x52002000
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b34:	02020200 	.word	0x02020200
 8000b38:	01ff0000 	.word	0x01ff0000
 8000b3c:	01010280 	.word	0x01010280
 8000b40:	52004000 	.word	0x52004000

08000b44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <MX_TIM1_Init+0xa4>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b6a:	f240 1217 	movw	r2, #279	; 0x117
 8000b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b90:	4814      	ldr	r0, [pc, #80]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000b92:	f003 fab9 	bl	8004108 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f7ff feee 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000bae:	f003 fc83 	bl	80044b8 <HAL_TIM_ConfigClockSource>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000bb8:	f7ff fee0 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM1_Init+0xa0>)
 8000bce:	f003 fed7 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bd8:	f7ff fed0 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2400002c 	.word	0x2400002c
 8000be8:	40010000 	.word	0x40010000

08000bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_TIM_Base_MspInit+0x48>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d116      	bne.n	8000c2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_TIM_Base_MspInit+0x4c>)
 8000c00:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x4c>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_TIM_Base_MspInit+0x4c>)
 8000c10:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2019      	movs	r0, #25
 8000c22:	f000 fa60 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c26:	2019      	movs	r0, #25
 8000c28:	f000 fa77 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40010000 	.word	0x40010000
 8000c38:	58024400 	.word	0x58024400

08000c3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <MX_USART3_UART_Init+0x94>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c86:	f003 ff27 	bl	8004ad8 <HAL_UART_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c90:	f7ff fe74 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c98:	f005 f833 	bl	8005d02 <HAL_UARTEx_SetTxFifoThreshold>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ca2:	f7ff fe6b 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000caa:	f005 f868 	bl	8005d7e <HAL_UARTEx_SetRxFifoThreshold>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb4:	f7ff fe62 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000cba:	f004 ffe9 	bl	8005c90 <HAL_UARTEx_DisableFifoMode>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f7ff fe5a 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24000078 	.word	0x24000078
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0ba      	sub	sp, #232	; 0xe8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	22c0      	movs	r2, #192	; 0xc0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f005 f8f3 	bl	8005ee0 <memset>
  if(uartHandle->Instance==USART3)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <HAL_UART_MspInit+0xc8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d146      	bne.n	8000d92 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d04:	f04f 0202 	mov.w	r2, #2
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fc14 	bl	8002548 <HAL_RCCEx_PeriphCLKConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d26:	f7ff fe29 	bl	800097c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_UART_MspInit+0xcc>)
 8000d2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_UART_MspInit+0xcc>)
 8000d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d36:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0xcc>)
 8000d3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0xcc>)
 8000d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0xcc>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0xcc>)
 8000d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_UART_MspInit+0xd0>)
 8000d8e:	f000 f9df 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d92:	bf00      	nop
 8000d94:	37e8      	adds	r7, #232	; 0xe8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58020c00 	.word	0x58020c00

08000da8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dbc:	f7ff fe4a 	bl	8000a54 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f005 f857 	bl	8005e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fd3b 	bl	8000864 <main>
  bx  lr
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000df4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000df8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dfc:	08005f50 	.word	0x08005f50
  ldr r2, =_sbss
 8000e00:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e04:	24000114 	.word	0x24000114

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e12:	2003      	movs	r0, #3
 8000e14:	f000 f95c 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e18:	f001 f9c0 	bl	800219c <HAL_RCC_GetSysClockFreq>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_Init+0x68>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	4913      	ldr	r1, [pc, #76]	; (8000e78 <HAL_Init+0x6c>)
 8000e2a:	5ccb      	ldrb	r3, [r1, r3]
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_Init+0x68>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_Init+0x6c>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x70>)
 8000e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_Init+0x74>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f814 	bl	8000e84 <HAL_InitTick>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e002      	b.n	8000e6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fd8f 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400
 8000e78:	08005f08 	.word	0x08005f08
 8000e7c:	24000004 	.word	0x24000004
 8000e80:	24000000 	.word	0x24000000

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_InitTick+0x60>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e021      	b.n	8000edc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_InitTick+0x64>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_InitTick+0x60>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f941 	bl	8001136 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f90b 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x68>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2400000c 	.word	0x2400000c
 8000ee8:	24000000 	.word	0x24000000
 8000eec:	24000008 	.word	0x24000008

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2400000c 	.word	0x2400000c
 8000f14:	24000110 	.word	0x24000110

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	24000110 	.word	0x24000110

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	05fa0000 	.word	0x05fa0000

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff40 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff90 	bl	8001024 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5f 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff33 	bl	8000f94 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa4 	bl	800108c <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800115e:	4b89      	ldr	r3, [pc, #548]	; (8001384 <HAL_GPIO_Init+0x234>)
 8001160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001162:	e194      	b.n	800148e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8186 	beq.w	8001488 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d005      	beq.n	8001194 <HAL_GPIO_Init+0x44>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d130      	bne.n	80011f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ca:	2201      	movs	r2, #1
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 0201 	and.w	r2, r3, #1
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d017      	beq.n	8001232 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d123      	bne.n	8001286 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	69b9      	ldr	r1, [r7, #24]
 8001282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0203 	and.w	r2, r3, #3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80e0 	beq.w	8001488 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x238>)
 80012ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012ce:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <HAL_GPIO_Init+0x238>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_GPIO_Init+0x238>)
 80012da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a29      	ldr	r2, [pc, #164]	; (800138c <HAL_GPIO_Init+0x23c>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <HAL_GPIO_Init+0x240>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d052      	beq.n	80013b8 <HAL_GPIO_Init+0x268>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_GPIO_Init+0x244>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d031      	beq.n	800137e <HAL_GPIO_Init+0x22e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_GPIO_Init+0x248>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d02b      	beq.n	800137a <HAL_GPIO_Init+0x22a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_GPIO_Init+0x24c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d025      	beq.n	8001376 <HAL_GPIO_Init+0x226>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_GPIO_Init+0x250>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x222>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_GPIO_Init+0x254>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x21e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x258>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x21a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_GPIO_Init+0x25c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x216>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_GPIO_Init+0x260>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x212>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_GPIO_Init+0x264>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x20e>
 800135a:	2309      	movs	r3, #9
 800135c:	e02d      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 800135e:	230a      	movs	r3, #10
 8001360:	e02b      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 8001362:	2308      	movs	r3, #8
 8001364:	e029      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 8001366:	2307      	movs	r3, #7
 8001368:	e027      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 800136a:	2306      	movs	r3, #6
 800136c:	e025      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 800136e:	2305      	movs	r3, #5
 8001370:	e023      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 8001372:	2304      	movs	r3, #4
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 8001376:	2303      	movs	r3, #3
 8001378:	e01f      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 800137a:	2302      	movs	r3, #2
 800137c:	e01d      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 800137e:	2301      	movs	r3, #1
 8001380:	e01b      	b.n	80013ba <HAL_GPIO_Init+0x26a>
 8001382:	bf00      	nop
 8001384:	58000080 	.word	0x58000080
 8001388:	58024400 	.word	0x58024400
 800138c:	58000400 	.word	0x58000400
 8001390:	58020000 	.word	0x58020000
 8001394:	58020400 	.word	0x58020400
 8001398:	58020800 	.word	0x58020800
 800139c:	58020c00 	.word	0x58020c00
 80013a0:	58021000 	.word	0x58021000
 80013a4:	58021400 	.word	0x58021400
 80013a8:	58021800 	.word	0x58021800
 80013ac:	58021c00 	.word	0x58021c00
 80013b0:	58022000 	.word	0x58022000
 80013b4:	58022400 	.word	0x58022400
 80013b8:	2300      	movs	r3, #0
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4093      	lsls	r3, r2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ca:	4938      	ldr	r1, [pc, #224]	; (80014ac <HAL_GPIO_Init+0x35c>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800142c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	f47f ae63 	bne.w	8001164 <HAL_GPIO_Init+0x14>
  }
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3724      	adds	r7, #36	; 0x24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	58000400 	.word	0x58000400

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f4:	887a      	ldrh	r2, [r7, #2]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	041a      	lsls	r2, r3, #16
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43d9      	mvns	r1, r3
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	400b      	ands	r3, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	2b06      	cmp	r3, #6
 800152a:	d00a      	beq.n	8001542 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e040      	b.n	80015c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e03e      	b.n	80015c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800154a:	491f      	ldr	r1, [pc, #124]	; (80015c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001552:	f7ff fce1 	bl	8000f18 <HAL_GetTick>
 8001556:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001558:	e009      	b.n	800156e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800155a:	f7ff fcdd 	bl	8000f18 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001568:	d901      	bls.n	800156e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e028      	b.n	80015c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800157a:	d1ee      	bne.n	800155a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b1e      	cmp	r3, #30
 8001580:	d008      	beq.n	8001594 <HAL_PWREx_ConfigSupply+0x7c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b2e      	cmp	r3, #46	; 0x2e
 8001586:	d005      	beq.n	8001594 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b1d      	cmp	r3, #29
 800158c:	d002      	beq.n	8001594 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b2d      	cmp	r3, #45	; 0x2d
 8001592:	d114      	bne.n	80015be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001594:	f7ff fcc0 	bl	8000f18 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800159a:	e009      	b.n	80015b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800159c:	f7ff fcbc 	bl	8000f18 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015aa:	d901      	bls.n	80015b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e007      	b.n	80015c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d1ee      	bne.n	800159c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	58024800 	.word	0x58024800

080015cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	f000 bc1f 	b.w	8001e1e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80b3 	beq.w	8001754 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ee:	4b95      	ldr	r3, [pc, #596]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	2b10      	cmp	r3, #16
 8001602:	d007      	beq.n	8001614 <HAL_RCC_OscConfig+0x48>
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	2b18      	cmp	r3, #24
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0x64>
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d10d      	bne.n	8001630 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 8098 	beq.w	8001752 <HAL_RCC_OscConfig+0x186>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 8093 	bne.w	8001752 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e3f6      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x7c>
 800163a:	4b82      	ldr	r3, [pc, #520]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a81      	ldr	r2, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e058      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d112      	bne.n	8001676 <HAL_RCC_OscConfig+0xaa>
 8001650:	4b7c      	ldr	r3, [pc, #496]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a7b      	ldr	r2, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a78      	ldr	r2, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b76      	ldr	r3, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a75      	ldr	r2, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e041      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167e:	d112      	bne.n	80016a6 <HAL_RCC_OscConfig+0xda>
 8001680:	4b70      	ldr	r3, [pc, #448]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6f      	ldr	r2, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6c      	ldr	r2, [pc, #432]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001692:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a69      	ldr	r2, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e029      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80016ae:	d112      	bne.n	80016d6 <HAL_RCC_OscConfig+0x10a>
 80016b0:	4b64      	ldr	r3, [pc, #400]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a63      	ldr	r2, [pc, #396]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a5d      	ldr	r2, [pc, #372]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e011      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
 80016d6:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b58      	ldr	r3, [pc, #352]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b55      	ldr	r3, [pc, #340]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a54      	ldr	r2, [pc, #336]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80016f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d013      	beq.n	800172a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fc09 	bl	8000f18 <HAL_GetTick>
 8001706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170a:	f7ff fc05 	bl	8000f18 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e380      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800171c:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x13e>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fbf5 	bl	8000f18 <HAL_GetTick>
 800172e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001732:	f7ff fbf1 	bl	8000f18 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e36c      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001744:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x166>
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 808c 	beq.w	800187a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800176a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800176c:	4b35      	ldr	r3, [pc, #212]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_RCC_OscConfig+0x1bc>
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	2b18      	cmp	r3, #24
 800177c:	d137      	bne.n	80017ee <HAL_RCC_OscConfig+0x222>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d132      	bne.n	80017ee <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1d4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e33e      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 0219 	bic.w	r2, r3, #25
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4925      	ldr	r1, [pc, #148]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff fbb1 	bl	8000f18 <HAL_GetTick>
 80017b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fbad 	bl	8000f18 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e328      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	4917      	ldr	r1, [pc, #92]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ec:	e045      	b.n	800187a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d028      	beq.n	8001848 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0219 	bic.w	r2, r3, #25
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	4910      	ldr	r1, [pc, #64]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fb86 	bl	8000f18 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fb82 	bl	8000f18 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e2fd      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	4901      	ldr	r1, [pc, #4]	; (8001844 <HAL_RCC_OscConfig+0x278>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
 8001842:	e01a      	b.n	800187a <HAL_RCC_OscConfig+0x2ae>
 8001844:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001848:	4b97      	ldr	r3, [pc, #604]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fb60 	bl	8000f18 <HAL_GetTick>
 8001858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185c:	f7ff fb5c 	bl	8000f18 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e2d7      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800186e:	4b8e      	ldr	r3, [pc, #568]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b00      	cmp	r3, #0
 8001884:	d06a      	beq.n	800195c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800188e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001890:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b08      	cmp	r3, #8
 800189a:	d007      	beq.n	80018ac <HAL_RCC_OscConfig+0x2e0>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b18      	cmp	r3, #24
 80018a0:	d11b      	bne.n	80018da <HAL_RCC_OscConfig+0x30e>
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d116      	bne.n	80018da <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2f8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e2ac      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	4975      	ldr	r1, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018d8:	e040      	b.n	800195c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d023      	beq.n	800192a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018e2:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a70      	ldr	r2, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80018e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb13 	bl	8000f18 <HAL_GetTick>
 80018f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018f6:	f7ff fb0f 	bl	8000f18 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e28a      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001908:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	4961      	ldr	r1, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001924:	4313      	orrs	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
 8001928:	e018      	b.n	800195c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800192a:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff faef 	bl	8000f18 <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800193e:	f7ff faeb 	bl	8000f18 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e266      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001950:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d036      	beq.n	80019d6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d019      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff facc 	bl	8000f18 <HAL_GetTick>
 8001980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fac8 	bl	8000f18 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e243      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x3b8>
 80019a2:	e018      	b.n	80019d6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a8:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff fab2 	bl	8000f18 <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff faae 	bl	8000f18 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e229      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80019cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d019      	beq.n	8001a1e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fa8f 	bl	8000f18 <HAL_GetTick>
 80019fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fe:	f7ff fa8b 	bl	8000f18 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e206      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x432>
 8001a1c:	e018      	b.n	8001a50 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa75 	bl	8000f18 <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a32:	f7ff fa71 	bl	8000f18 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1ec      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80af 	beq.w	8001bbc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_RCC_OscConfig+0x4e0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <HAL_RCC_OscConfig+0x4e0>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff fa55 	bl	8000f18 <HAL_GetTick>
 8001a6e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7ff fa51 	bl	8000f18 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	; 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1cc      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_OscConfig+0x4e0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4e4>
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	4a02      	ldr	r2, [pc, #8]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa4:	e05b      	b.n	8001b5e <HAL_RCC_OscConfig+0x592>
 8001aa6:	bf00      	nop
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	58024800 	.word	0x58024800
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d112      	bne.n	8001ade <HAL_RCC_OscConfig+0x512>
 8001ab8:	4b9d      	ldr	r3, [pc, #628]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a9c      	ldr	r2, [pc, #624]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	4b9a      	ldr	r3, [pc, #616]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a99      	ldr	r2, [pc, #612]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad0:	4b97      	ldr	r3, [pc, #604]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a96      	ldr	r2, [pc, #600]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	f023 0304 	bic.w	r3, r3, #4
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	e03f      	b.n	8001b5e <HAL_RCC_OscConfig+0x592>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d112      	bne.n	8001b0c <HAL_RCC_OscConfig+0x540>
 8001ae6:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a91      	ldr	r2, [pc, #580]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a8b      	ldr	r2, [pc, #556]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	e028      	b.n	8001b5e <HAL_RCC_OscConfig+0x592>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b85      	cmp	r3, #133	; 0x85
 8001b12:	d112      	bne.n	8001b3a <HAL_RCC_OscConfig+0x56e>
 8001b14:	4b86      	ldr	r3, [pc, #536]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a85      	ldr	r2, [pc, #532]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	4a82      	ldr	r2, [pc, #520]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	e011      	b.n	8001b5e <HAL_RCC_OscConfig+0x592>
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a7c      	ldr	r2, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	4b7a      	ldr	r3, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	4a79      	ldr	r2, [pc, #484]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	4b77      	ldr	r3, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a76      	ldr	r2, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff f9d7 	bl	8000f18 <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff f9d3 	bl	8000f18 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e14c      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x5a2>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7ff f9c1 	bl	8000f18 <HAL_GetTick>
 8001b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff f9bd 	bl	8000f18 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e136      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb0:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 812b 	beq.w	8001e1c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bce:	2b18      	cmp	r3, #24
 8001bd0:	f000 80bb 	beq.w	8001d4a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f040 8095 	bne.w	8001d08 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f995 	bl	8000f18 <HAL_GetTick>
 8001bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff f991 	bl	8000f18 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e10c      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c14:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x768>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	430a      	orrs	r2, r1
 8001c24:	4942      	ldr	r1, [pc, #264]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	628b      	str	r3, [r1, #40]	; 0x28
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	3b01      	subs	r3, #1
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	3b01      	subs	r3, #1
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c5a:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c60:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_OscConfig+0x76c>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	492d      	ldr	r1, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f023 020c 	bic.w	r2, r3, #12
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4928      	ldr	r1, [pc, #160]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	f023 0202 	bic.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4924      	ldr	r1, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f91a 	bl	8000f18 <HAL_GetTick>
 8001ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff f916 	bl	8000f18 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e091      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x71c>
 8001d06:	e089      	b.n	8001e1c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_RCC_OscConfig+0x764>)
 8001d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f900 	bl	8000f18 <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f8fc 	bl	8000f18 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d908      	bls.n	8001d3c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e077      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
 8001d2e:	bf00      	nop
 8001d30:	58024400 	.word	0x58024400
 8001d34:	fffffc0c 	.word	0xfffffc0c
 8001d38:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3c:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e9      	bne.n	8001d1c <HAL_RCC_OscConfig+0x750>
 8001d48:	e068      	b.n	8001e1c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d50:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d031      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d12a      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d122      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d11a      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	0a5b      	lsrs	r3, r3, #9
 8001d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d111      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d108      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	0e1b      	lsrs	r3, r3, #24
 8001db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e02b      	b.n	8001e1e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	08db      	lsrs	r3, r3, #3
 8001dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dd0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d01f      	beq.n	8001e1c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001de8:	f7ff f896 	bl	8000f18 <HAL_GetTick>
 8001dec:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001dee:	bf00      	nop
 8001df0:	f7ff f892 	bl	8000f18 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d0f9      	beq.n	8001df0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_RCC_OscConfig+0x860>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	4907      	ldr	r1, [pc, #28]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_RCC_OscConfig+0x85c>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3730      	adds	r7, #48	; 0x30
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	ffff0007 	.word	0xffff0007

08001e30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e19c      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b8a      	ldr	r3, [pc, #552]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b87      	ldr	r3, [pc, #540]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 020f 	bic.w	r2, r3, #15
 8001e5a:	4985      	ldr	r1, [pc, #532]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b83      	ldr	r3, [pc, #524]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e184      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	4b7b      	ldr	r3, [pc, #492]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d908      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e90:	4b78      	ldr	r3, [pc, #480]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4975      	ldr	r1, [pc, #468]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b70      	ldr	r3, [pc, #448]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d908      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ebe:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	496a      	ldr	r1, [pc, #424]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	4b64      	ldr	r3, [pc, #400]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d908      	bls.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eec:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	495e      	ldr	r1, [pc, #376]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d908      	bls.n	8001f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f1a:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4953      	ldr	r1, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f023 020f 	bic.w	r2, r3, #15
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4947      	ldr	r1, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d055      	beq.n	8002012 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4940      	ldr	r1, [pc, #256]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f80:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d121      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0f6      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d115      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0ea      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0de      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0d6      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4925      	ldr	r1, [pc, #148]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe2:	f7fe ff99 	bl	8000f18 <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe ff95 	bl	8000f18 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0be      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	429a      	cmp	r2, r3
 8002010:	d1eb      	bne.n	8001fea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	429a      	cmp	r2, r3
 800202c:	d208      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f023 020f 	bic.w	r2, r3, #15
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x244>)
 800203c:	4313      	orrs	r3, r2
 800203e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d214      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 020f 	bic.w	r2, r3, #15
 8002056:	4906      	ldr	r1, [pc, #24]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_RCC_ClockConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e086      	b.n	800217e <HAL_RCC_ClockConfig+0x34e>
 8002070:	52002000 	.word	0x52002000
 8002074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002090:	429a      	cmp	r2, r3
 8002092:	d208      	bcs.n	80020a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4939      	ldr	r1, [pc, #228]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020be:	429a      	cmp	r2, r3
 80020c0:	d208      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	492e      	ldr	r1, [pc, #184]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d208      	bcs.n	8002102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4922      	ldr	r1, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800211a:	429a      	cmp	r2, r3
 800211c:	d208      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4917      	ldr	r1, [pc, #92]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 800212c:	4313      	orrs	r3, r2
 800212e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002130:	f000 f834 	bl	800219c <HAL_RCC_GetSysClockFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	4912      	ldr	r1, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x35c>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x358>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_RCC_ClockConfig+0x35c>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x360>)
 8002166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x364>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_RCC_ClockConfig+0x368>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fe86 	bl	8000e84 <HAL_InitTick>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	58024400 	.word	0x58024400
 800218c:	08005f08 	.word	0x08005f08
 8002190:	24000004 	.word	0x24000004
 8002194:	24000000 	.word	0x24000000
 8002198:	24000008 	.word	0x24000008

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a2:	4bb3      	ldr	r3, [pc, #716]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021aa:	2b18      	cmp	r3, #24
 80021ac:	f200 8155 	bhi.w	800245a <HAL_RCC_GetSysClockFreq+0x2be>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	0800221d 	.word	0x0800221d
 80021bc:	0800245b 	.word	0x0800245b
 80021c0:	0800245b 	.word	0x0800245b
 80021c4:	0800245b 	.word	0x0800245b
 80021c8:	0800245b 	.word	0x0800245b
 80021cc:	0800245b 	.word	0x0800245b
 80021d0:	0800245b 	.word	0x0800245b
 80021d4:	0800245b 	.word	0x0800245b
 80021d8:	08002243 	.word	0x08002243
 80021dc:	0800245b 	.word	0x0800245b
 80021e0:	0800245b 	.word	0x0800245b
 80021e4:	0800245b 	.word	0x0800245b
 80021e8:	0800245b 	.word	0x0800245b
 80021ec:	0800245b 	.word	0x0800245b
 80021f0:	0800245b 	.word	0x0800245b
 80021f4:	0800245b 	.word	0x0800245b
 80021f8:	08002249 	.word	0x08002249
 80021fc:	0800245b 	.word	0x0800245b
 8002200:	0800245b 	.word	0x0800245b
 8002204:	0800245b 	.word	0x0800245b
 8002208:	0800245b 	.word	0x0800245b
 800220c:	0800245b 	.word	0x0800245b
 8002210:	0800245b 	.word	0x0800245b
 8002214:	0800245b 	.word	0x0800245b
 8002218:	0800224f 	.word	0x0800224f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800221c:	4b94      	ldr	r3, [pc, #592]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002228:	4b91      	ldr	r3, [pc, #580]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	4a90      	ldr	r2, [pc, #576]	; (8002474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800223a:	e111      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800223c:	4b8d      	ldr	r3, [pc, #564]	; (8002474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800223e:	61bb      	str	r3, [r7, #24]
      break;
 8002240:	e10e      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002242:	4b8d      	ldr	r3, [pc, #564]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002244:	61bb      	str	r3, [r7, #24]
      break;
 8002246:	e10b      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002248:	4b8c      	ldr	r3, [pc, #560]	; (800247c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800224a:	61bb      	str	r3, [r7, #24]
      break;
 800224c:	e108      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002258:	4b85      	ldr	r3, [pc, #532]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002264:	4b82      	ldr	r3, [pc, #520]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800226e:	4b80      	ldr	r3, [pc, #512]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80e1 	beq.w	8002454 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b02      	cmp	r3, #2
 8002296:	f000 8083 	beq.w	80023a0 <HAL_RCC_GetSysClockFreq+0x204>
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b02      	cmp	r3, #2
 800229e:	f200 80a1 	bhi.w	80023e4 <HAL_RCC_GetSysClockFreq+0x248>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x114>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d056      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x1c0>
 80022ae:	e099      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b0:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02d      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022bc:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	08db      	lsrs	r3, r3, #3
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	4a6b      	ldr	r2, [pc, #428]	; (8002474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022e6:	4b62      	ldr	r3, [pc, #392]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800230a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800230e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002316:	e087      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002322:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800233a:	ed97 6a02 	vldr	s12, [r7, #8]
 800233e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800234a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800234e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800235a:	e065      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002366:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800236a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800236e:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800237e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002382:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800238a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800238e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800239e:	e043      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800248c <HAL_RCC_GetSysClockFreq+0x2f0>
 80023ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023b2:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023e2:	e021      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002488 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002406:	ed97 6a02 	vldr	s12, [r7, #8]
 800240a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800240e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800241a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	0a5b      	lsrs	r3, r3, #9
 800242e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002432:	3301      	adds	r3, #1
 8002434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002440:	edd7 6a07 	vldr	s13, [r7, #28]
 8002444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002452:	e005      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
      break;
 8002458:	e002      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800245c:	61bb      	str	r3, [r7, #24]
      break;
 800245e:	bf00      	nop
  }

  return sysclockfreq;
 8002460:	69bb      	ldr	r3, [r7, #24]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	58024400 	.word	0x58024400
 8002474:	03d09000 	.word	0x03d09000
 8002478:	003d0900 	.word	0x003d0900
 800247c:	007a1200 	.word	0x007a1200
 8002480:	46000000 	.word	0x46000000
 8002484:	4c742400 	.word	0x4c742400
 8002488:	4a742400 	.word	0x4a742400
 800248c:	4af42400 	.word	0x4af42400

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002496:	f7ff fe81 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800249a:	4602      	mov	r2, r0
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	490f      	ldr	r1, [pc, #60]	; (80024e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80024cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58024400 	.word	0x58024400
 80024e4:	08005f08 	.word	0x08005f08
 80024e8:	24000004 	.word	0x24000004
 80024ec:	24000000 	.word	0x24000000

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80024f4:	f7ff ffcc 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4904      	ldr	r1, [pc, #16]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	58024400 	.word	0x58024400
 8002518:	08005f08 	.word	0x08005f08

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002520:	f7ff ffb6 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4904      	ldr	r1, [pc, #16]	; (8002544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	58024400 	.word	0x58024400
 8002544:	08005f08 	.word	0x08005f08

08002548 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b0c8      	sub	sp, #288	; 0x120
 800254e:	af00      	add	r7, sp, #0
 8002550:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002554:	2300      	movs	r3, #0
 8002556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800255a:	2300      	movs	r3, #0
 800255c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800256c:	2500      	movs	r5, #0
 800256e:	ea54 0305 	orrs.w	r3, r4, r5
 8002572:	d049      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800257e:	d02f      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002584:	d828      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800258a:	d01a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800258c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002590:	d822      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259a:	d007      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800259c:	e01c      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800259e:	4ba7      	ldr	r3, [pc, #668]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	4aa6      	ldr	r2, [pc, #664]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025aa:	e01a      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025b0:	3308      	adds	r3, #8
 80025b2:	2102      	movs	r1, #2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fc43 	bl	8003e40 <RCCEx_PLL2_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025c0:	e00f      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80025c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c6:	3328      	adds	r3, #40	; 0x28
 80025c8:	2102      	movs	r1, #2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fcea 	bl	8003fa4 <RCCEx_PLL3_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025d6:	e004      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025de:	e000      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80025e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025ea:	4b94      	ldr	r3, [pc, #592]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80025f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f8:	4a90      	ldr	r2, [pc, #576]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025fa:	430b      	orrs	r3, r1
 80025fc:	6513      	str	r3, [r2, #80]	; 0x50
 80025fe:	e003      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002604:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002614:	f04f 0900 	mov.w	r9, #0
 8002618:	ea58 0309 	orrs.w	r3, r8, r9
 800261c:	d047      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800261e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	2b04      	cmp	r3, #4
 8002626:	d82a      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002645 	.word	0x08002645
 8002634:	08002653 	.word	0x08002653
 8002638:	08002669 	.word	0x08002669
 800263c:	08002687 	.word	0x08002687
 8002640:	08002687 	.word	0x08002687
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002644:	4b7d      	ldr	r3, [pc, #500]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	4a7c      	ldr	r2, [pc, #496]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002650:	e01a      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002656:	3308      	adds	r3, #8
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fbf0 	bl	8003e40 <RCCEx_PLL2_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002666:	e00f      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800266c:	3328      	adds	r3, #40	; 0x28
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fc97 	bl	8003fa4 <RCCEx_PLL3_Config>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800267c:	e004      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002684:	e000      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	f023 0107 	bic.w	r1, r3, #7
 8002698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	4a67      	ldr	r2, [pc, #412]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6513      	str	r3, [r2, #80]	; 0x50
 80026a4:	e003      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80026ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80026ba:	f04f 0b00 	mov.w	fp, #0
 80026be:	ea5a 030b 	orrs.w	r3, sl, fp
 80026c2:	d054      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80026c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026ce:	d036      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80026d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026d4:	d82f      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026da:	d032      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80026dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e0:	d829      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026e2:	2bc0      	cmp	r3, #192	; 0xc0
 80026e4:	d02f      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80026e6:	2bc0      	cmp	r3, #192	; 0xc0
 80026e8:	d825      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d018      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80026ee:	2b80      	cmp	r3, #128	; 0x80
 80026f0:	d821      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	d007      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80026fa:	e01c      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	4a4e      	ldr	r2, [pc, #312]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002708:	e01e      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800270a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800270e:	3308      	adds	r3, #8
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f001 fb94 	bl	8003e40 <RCCEx_PLL2_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800271e:	e013      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002724:	3328      	adds	r3, #40	; 0x28
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f001 fc3b 	bl	8003fa4 <RCCEx_PLL3_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002734:	e008      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800273c:	e004      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002748:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	4a37      	ldr	r2, [pc, #220]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002760:	430b      	orrs	r3, r1
 8002762:	6513      	str	r3, [r2, #80]	; 0x50
 8002764:	e003      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002766:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800276a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800276e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800277a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002784:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002788:	460b      	mov	r3, r1
 800278a:	4313      	orrs	r3, r2
 800278c:	d05c      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800278e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002794:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002798:	d03b      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800279a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800279e:	d834      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a4:	d037      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80027a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027aa:	d82e      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027b0:	d033      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80027b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027b6:	d828      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027bc:	d01a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c2:	d822      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	d007      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x296>
 80027ce:	e01c      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	4a19      	ldr	r2, [pc, #100]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80027dc:	e01e      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e2:	3308      	adds	r3, #8
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 fb2a 	bl	8003e40 <RCCEx_PLL2_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80027f2:	e013      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f8:	3328      	adds	r3, #40	; 0x28
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 fbd1 	bl	8003fa4 <RCCEx_PLL3_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002808:	e008      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002810:	e004      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800281a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800281c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002828:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800282c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	4a02      	ldr	r2, [pc, #8]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002834:	430b      	orrs	r3, r1
 8002836:	6513      	str	r3, [r2, #80]	; 0x50
 8002838:	e006      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800283a:	bf00      	nop
 800283c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002844:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002854:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800285e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002862:	460b      	mov	r3, r1
 8002864:	4313      	orrs	r3, r2
 8002866:	d03a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	2b30      	cmp	r3, #48	; 0x30
 8002870:	d01f      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002872:	2b30      	cmp	r3, #48	; 0x30
 8002874:	d819      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002876:	2b20      	cmp	r3, #32
 8002878:	d00c      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800287a:	2b20      	cmp	r3, #32
 800287c:	d815      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x362>
 800287e:	2b00      	cmp	r3, #0
 8002880:	d019      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002882:	2b10      	cmp	r3, #16
 8002884:	d111      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002886:	4bae      	ldr	r3, [pc, #696]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	4aad      	ldr	r2, [pc, #692]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002892:	e011      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002898:	3308      	adds	r3, #8
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f001 facf 	bl	8003e40 <RCCEx_PLL2_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80028a8:	e006      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028b0:	e002      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80028b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028c0:	4b9f      	ldr	r3, [pc, #636]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80028c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	4a9c      	ldr	r2, [pc, #624]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028d0:	430b      	orrs	r3, r1
 80028d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80028ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80028f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4313      	orrs	r3, r2
 80028fc:	d051      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80028fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002908:	d035      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800290a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800290e:	d82e      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002914:	d031      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800291a:	d828      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002920:	d01a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002926:	d822      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800292c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002930:	d007      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002932:	e01c      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002934:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	4a81      	ldr	r2, [pc, #516]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800293a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002940:	e01c      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002946:	3308      	adds	r3, #8
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f001 fa78 	bl	8003e40 <RCCEx_PLL2_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002956:	e011      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295c:	3328      	adds	r3, #40	; 0x28
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fb1f 	bl	8003fa4 <RCCEx_PLL3_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002974:	e002      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800297a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002984:	4b6e      	ldr	r3, [pc, #440]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002988:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800298c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002992:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002994:	430b      	orrs	r3, r1
 8002996:	6513      	str	r3, [r2, #80]	; 0x50
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800299e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80029ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80029b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80029bc:	460b      	mov	r3, r1
 80029be:	4313      	orrs	r3, r2
 80029c0:	d053      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80029c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d033      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80029ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d2:	d82c      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80029d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029d8:	d02f      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80029da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029de:	d826      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80029e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029e4:	d02b      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80029e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029ea:	d820      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80029ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f0:	d012      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80029f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f6:	d81a      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d022      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d115      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a06:	3308      	adds	r3, #8
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fa18 	bl	8003e40 <RCCEx_PLL2_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a16:	e015      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1c:	3328      	adds	r3, #40	; 0x28
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 fabf 	bl	8003fa4 <RCCEx_PLL3_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a34:	e006      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a36:	bf00      	nop
 8002a38:	e004      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a4c:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5a:	4a39      	ldr	r2, [pc, #228]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6513      	str	r3, [r2, #80]	; 0x50
 8002a60:	e003      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a80:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4313      	orrs	r3, r2
 8002a88:	d060      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a92:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002a96:	d039      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002a98:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002a9c:	d832      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa2:	d035      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa8:	d82c      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aae:	d031      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d826      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002aba:	d02d      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac0:	d820      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac6:	d012      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d81a      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d024      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad6:	d115      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002adc:	3308      	adds	r3, #8
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 f9ad 	bl	8003e40 <RCCEx_PLL2_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002aec:	e017      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af2:	3328      	adds	r3, #40	; 0x28
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fa54 	bl	8003fa4 <RCCEx_PLL3_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b02:	e00c      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b0a:	e008      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b0c:	bf00      	nop
 8002b0e:	e006      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b10:	bf00      	nop
 8002b12:	e004      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b14:	bf00      	nop
 8002b16:	e002      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b18:	bf00      	nop
 8002b1a:	e000      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b36:	4a02      	ldr	r2, [pc, #8]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3c:	e006      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b66:	460b      	mov	r3, r1
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	d037      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b76:	d00e      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b7c:	d816      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d018      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b86:	d111      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b88:	4bc4      	ldr	r3, [pc, #784]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	4ac3      	ldr	r2, [pc, #780]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b94:	e00f      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f94e 	bl	8003e40 <RCCEx_PLL2_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002baa:	e004      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10a      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bbe:	4bb7      	ldr	r3, [pc, #732]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bcc:	4ab3      	ldr	r2, [pc, #716]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	6513      	str	r3, [r2, #80]	; 0x50
 8002bd2:	e003      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bf2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	d039      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d81c      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c49 	.word	0x08002c49
 8002c10:	08002c1d 	.word	0x08002c1d
 8002c14:	08002c2b 	.word	0x08002c2b
 8002c18:	08002c49 	.word	0x08002c49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c1c:	4b9f      	ldr	r3, [pc, #636]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	4a9e      	ldr	r2, [pc, #632]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c28:	e00f      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c2e:	3308      	adds	r3, #8
 8002c30:	2102      	movs	r1, #2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f904 	bl	8003e40 <RCCEx_PLL2_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c3e:	e004      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c46:	e000      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c52:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	f023 0103 	bic.w	r1, r3, #3
 8002c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c60:	4a8e      	ldr	r2, [pc, #568]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c62:	430b      	orrs	r3, r1
 8002c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c66:	e003      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f000 8099 	beq.w	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c92:	4b83      	ldr	r3, [pc, #524]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a82      	ldr	r2, [pc, #520]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9e:	f7fe f93b 	bl	8000f18 <HAL_GetTick>
 8002ca2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7fe f936 	bl	8000f18 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d903      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cbe:	e005      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc0:	4b77      	ldr	r3, [pc, #476]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ed      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d173      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cd4:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ce0:	4053      	eors	r3, r2
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cea:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf6:	4b69      	ldr	r3, [pc, #420]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a68      	ldr	r2, [pc, #416]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d02:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d0e:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d22:	d118      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe f8f8 	bl	8000f18 <HAL_GetTick>
 8002d28:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d2c:	e00d      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe f8f3 	bl	8000f18 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d38:	1ad2      	subs	r2, r2, r3
 8002d3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d903      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002d48:	e005      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0eb      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002d56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d129      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6e:	d10e      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002d70:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d80:	091a      	lsrs	r2, r3, #4
 8002d82:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	4a45      	ldr	r2, [pc, #276]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6113      	str	r3, [r2, #16]
 8002d8c:	e005      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002d8e:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	4a42      	ldr	r2, [pc, #264]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d98:	6113      	str	r3, [r2, #16]
 8002d9a:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002daa:	4a3c      	ldr	r2, [pc, #240]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e008      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002db2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002db6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002dba:	e003      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f002 0301 	and.w	r3, r2, #1
 8002dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f000 8090 	beq.w	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dee:	2b28      	cmp	r3, #40	; 0x28
 8002df0:	d870      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002edd 	.word	0x08002edd
 8002dfc:	08002ed5 	.word	0x08002ed5
 8002e00:	08002ed5 	.word	0x08002ed5
 8002e04:	08002ed5 	.word	0x08002ed5
 8002e08:	08002ed5 	.word	0x08002ed5
 8002e0c:	08002ed5 	.word	0x08002ed5
 8002e10:	08002ed5 	.word	0x08002ed5
 8002e14:	08002ed5 	.word	0x08002ed5
 8002e18:	08002ea9 	.word	0x08002ea9
 8002e1c:	08002ed5 	.word	0x08002ed5
 8002e20:	08002ed5 	.word	0x08002ed5
 8002e24:	08002ed5 	.word	0x08002ed5
 8002e28:	08002ed5 	.word	0x08002ed5
 8002e2c:	08002ed5 	.word	0x08002ed5
 8002e30:	08002ed5 	.word	0x08002ed5
 8002e34:	08002ed5 	.word	0x08002ed5
 8002e38:	08002ebf 	.word	0x08002ebf
 8002e3c:	08002ed5 	.word	0x08002ed5
 8002e40:	08002ed5 	.word	0x08002ed5
 8002e44:	08002ed5 	.word	0x08002ed5
 8002e48:	08002ed5 	.word	0x08002ed5
 8002e4c:	08002ed5 	.word	0x08002ed5
 8002e50:	08002ed5 	.word	0x08002ed5
 8002e54:	08002ed5 	.word	0x08002ed5
 8002e58:	08002edd 	.word	0x08002edd
 8002e5c:	08002ed5 	.word	0x08002ed5
 8002e60:	08002ed5 	.word	0x08002ed5
 8002e64:	08002ed5 	.word	0x08002ed5
 8002e68:	08002ed5 	.word	0x08002ed5
 8002e6c:	08002ed5 	.word	0x08002ed5
 8002e70:	08002ed5 	.word	0x08002ed5
 8002e74:	08002ed5 	.word	0x08002ed5
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	08002ed5 	.word	0x08002ed5
 8002e80:	08002ed5 	.word	0x08002ed5
 8002e84:	08002ed5 	.word	0x08002ed5
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	08002ed5 	.word	0x08002ed5
 8002e90:	08002ed5 	.word	0x08002ed5
 8002e94:	08002ed5 	.word	0x08002ed5
 8002e98:	08002edd 	.word	0x08002edd
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	58024800 	.word	0x58024800
 8002ea4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eac:	3308      	adds	r3, #8
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 ffc5 	bl	8003e40 <RCCEx_PLL2_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ebc:	e00f      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec2:	3328      	adds	r3, #40	; 0x28
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f86c 	bl	8003fa4 <RCCEx_PLL3_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ed2:	e004      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ede:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ee6:	4bc0      	ldr	r3, [pc, #768]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef6:	4abc      	ldr	r2, [pc, #752]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6553      	str	r3, [r2, #84]	; 0x54
 8002efc:	e003      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f002 0302 	and.w	r3, r2, #2
 8002f12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f1c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002f20:	460b      	mov	r3, r1
 8002f22:	4313      	orrs	r3, r2
 8002f24:	d043      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d824      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f85 	.word	0x08002f85
 8002f3c:	08002f51 	.word	0x08002f51
 8002f40:	08002f67 	.word	0x08002f67
 8002f44:	08002f85 	.word	0x08002f85
 8002f48:	08002f85 	.word	0x08002f85
 8002f4c:	08002f85 	.word	0x08002f85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f54:	3308      	adds	r3, #8
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 ff71 	bl	8003e40 <RCCEx_PLL2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f64:	e00f      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6a:	3328      	adds	r3, #40	; 0x28
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 f818 	bl	8003fa4 <RCCEx_PLL3_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f7a:	e004      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f82:	e000      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f8e:	4b96      	ldr	r3, [pc, #600]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f023 0107 	bic.w	r1, r3, #7
 8002f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9e:	4a92      	ldr	r2, [pc, #584]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6553      	str	r3, [r2, #84]	; 0x54
 8002fa4:	e003      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002faa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f002 0304 	and.w	r3, r2, #4
 8002fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fc4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	d043      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d824      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	0800302d 	.word	0x0800302d
 8002fe4:	08002ff9 	.word	0x08002ff9
 8002fe8:	0800300f 	.word	0x0800300f
 8002fec:	0800302d 	.word	0x0800302d
 8002ff0:	0800302d 	.word	0x0800302d
 8002ff4:	0800302d 	.word	0x0800302d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f000 ff1d 	bl	8003e40 <RCCEx_PLL2_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800300c:	e00f      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800300e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003012:	3328      	adds	r3, #40	; 0x28
 8003014:	2101      	movs	r1, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f000 ffc4 	bl	8003fa4 <RCCEx_PLL3_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800302c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003036:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f023 0107 	bic.w	r1, r3, #7
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003046:	4a68      	ldr	r2, [pc, #416]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003048:	430b      	orrs	r3, r1
 800304a:	6593      	str	r3, [r2, #88]	; 0x58
 800304c:	e003      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003052:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f002 0320 	and.w	r3, r2, #32
 8003062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800306c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003070:	460b      	mov	r3, r1
 8003072:	4313      	orrs	r3, r2
 8003074:	d055      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800307a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800307e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003082:	d033      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003088:	d82c      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308e:	d02f      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d826      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003096:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800309a:	d02b      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800309c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030a0:	d820      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a6:	d012      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80030a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ac:	d81a      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d022      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80030b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b6:	d115      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030bc:	3308      	adds	r3, #8
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 febd 	bl	8003e40 <RCCEx_PLL2_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030cc:	e015      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d2:	3328      	adds	r3, #40	; 0x28
 80030d4:	2102      	movs	r1, #2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ff64 	bl	8003fa4 <RCCEx_PLL3_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030e2:	e00a      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030ea:	e006      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80030ec:	bf00      	nop
 80030ee:	e004      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80030f0:	bf00      	nop
 80030f2:	e002      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80030f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800310a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800310e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003112:	4a35      	ldr	r2, [pc, #212]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003114:	430b      	orrs	r3, r1
 8003116:	6553      	str	r3, [r2, #84]	; 0x54
 8003118:	e003      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800311e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003138:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800313c:	460b      	mov	r3, r1
 800313e:	4313      	orrs	r3, r2
 8003140:	d058      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003146:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800314a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800314e:	d033      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003150:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003154:	d82c      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315a:	d02f      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800315c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003160:	d826      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003166:	d02b      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316c:	d820      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800316e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003172:	d012      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003178:	d81a      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d022      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003182:	d115      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003188:	3308      	adds	r3, #8
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fe57 	bl	8003e40 <RCCEx_PLL2_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003198:	e015      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319e:	3328      	adds	r3, #40	; 0x28
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fefe 	bl	8003fa4 <RCCEx_PLL3_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031ae:	e00a      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031b6:	e006      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031b8:	bf00      	nop
 80031ba:	e004      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031bc:	bf00      	nop
 80031be:	e002      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031c0:	bf00      	nop
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10e      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031de:	4a02      	ldr	r2, [pc, #8]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6593      	str	r3, [r2, #88]	; 0x58
 80031e4:	e006      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80031e6:	bf00      	nop
 80031e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800320a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800320e:	460b      	mov	r3, r1
 8003210:	4313      	orrs	r3, r2
 8003212:	d055      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003218:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800321c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003220:	d033      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003222:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003226:	d82c      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322c:	d02f      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d826      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003234:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003238:	d02b      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800323a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800323e:	d820      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003244:	d012      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324a:	d81a      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d022      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003254:	d115      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325a:	3308      	adds	r3, #8
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fdee 	bl	8003e40 <RCCEx_PLL2_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800326a:	e015      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800326c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003270:	3328      	adds	r3, #40	; 0x28
 8003272:	2102      	movs	r1, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fe95 	bl	8003fa4 <RCCEx_PLL3_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003280:	e00a      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003288:	e006      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800328a:	bf00      	nop
 800328c:	e004      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003298:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032a0:	4ba1      	ldr	r3, [pc, #644]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80032a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032b0:	4a9d      	ldr	r2, [pc, #628]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b2:	430b      	orrs	r3, r1
 80032b4:	6593      	str	r3, [r2, #88]	; 0x58
 80032b6:	e003      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f002 0308 	and.w	r3, r2, #8
 80032cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80032da:	460b      	mov	r3, r1
 80032dc:	4313      	orrs	r3, r2
 80032de:	d01e      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f2:	3328      	adds	r3, #40	; 0x28
 80032f4:	2102      	movs	r1, #2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fe54 	bl	8003fa4 <RCCEx_PLL3_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003308:	4b87      	ldr	r3, [pc, #540]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003318:	4a83      	ldr	r2, [pc, #524]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800331a:	430b      	orrs	r3, r1
 800331c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800331e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f002 0310 	and.w	r3, r2, #16
 800332a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003334:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d01e      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800333e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334a:	d10c      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800334c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003350:	3328      	adds	r3, #40	; 0x28
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fe25 	bl	8003fa4 <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003366:	4b70      	ldr	r3, [pc, #448]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800336e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003372:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003376:	4a6c      	ldr	r2, [pc, #432]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003378:	430b      	orrs	r3, r1
 800337a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003392:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d03e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800339c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a8:	d022      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80033aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ae:	d81b      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d00b      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80033ba:	e015      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c0:	3308      	adds	r3, #8
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fd3b 	bl	8003e40 <RCCEx_PLL2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033d0:	e00f      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d6:	3328      	adds	r3, #40	; 0x28
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fde2 	bl	8003fa4 <RCCEx_PLL3_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033e6:	e004      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80033f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033fa:	4b4b      	ldr	r3, [pc, #300]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003406:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800340a:	4a47      	ldr	r2, [pc, #284]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800340c:	430b      	orrs	r3, r1
 800340e:	6593      	str	r3, [r2, #88]	; 0x58
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003416:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800341a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003426:	67bb      	str	r3, [r7, #120]	; 0x78
 8003428:	2300      	movs	r3, #0
 800342a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800342c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003430:	460b      	mov	r3, r1
 8003432:	4313      	orrs	r3, r2
 8003434:	d03b      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003442:	d01f      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003448:	d818      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800344a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344e:	d003      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003454:	d007      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003456:	e011      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003458:	4b33      	ldr	r3, [pc, #204]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4a32      	ldr	r2, [pc, #200]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003464:	e00f      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346a:	3328      	adds	r3, #40	; 0x28
 800346c:	2101      	movs	r1, #1
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fd98 	bl	8003fa4 <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6553      	str	r3, [r2, #84]	; 0x54
 80034a4:	e003      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80034ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80034ba:	673b      	str	r3, [r7, #112]	; 0x70
 80034bc:	2300      	movs	r3, #0
 80034be:	677b      	str	r3, [r7, #116]	; 0x74
 80034c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80034c4:	460b      	mov	r3, r1
 80034c6:	4313      	orrs	r3, r2
 80034c8:	d034      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d007      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80034da:	e011      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	4a11      	ldr	r2, [pc, #68]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034e8:	e00e      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ee:	3308      	adds	r3, #8
 80034f0:	2102      	movs	r1, #2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fca4 	bl	8003e40 <RCCEx_PLL2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003508:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	4a02      	ldr	r2, [pc, #8]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003520:	430b      	orrs	r3, r1
 8003522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003524:	e006      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003526:	bf00      	nop
 8003528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003530:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003540:	66bb      	str	r3, [r7, #104]	; 0x68
 8003542:	2300      	movs	r3, #0
 8003544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003546:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800354a:	460b      	mov	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	d00c      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003554:	3328      	adds	r3, #40	; 0x28
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fd23 	bl	8003fa4 <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800356a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003576:	663b      	str	r3, [r7, #96]	; 0x60
 8003578:	2300      	movs	r3, #0
 800357a:	667b      	str	r3, [r7, #100]	; 0x64
 800357c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d038      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003592:	d018      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003598:	d811      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800359a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359e:	d014      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d80b      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d011      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d106      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	4bc3      	ldr	r3, [pc, #780]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4ac2      	ldr	r2, [pc, #776]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035c4:	e004      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80035ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d8:	4bb9      	ldr	r3, [pc, #740]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	4ab5      	ldr	r2, [pc, #724]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ea:	430b      	orrs	r3, r1
 80035ec:	6553      	str	r3, [r2, #84]	; 0x54
 80035ee:	e003      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003604:	65bb      	str	r3, [r7, #88]	; 0x58
 8003606:	2300      	movs	r3, #0
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003614:	4baa      	ldr	r3, [pc, #680]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800361c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003622:	4aa7      	ldr	r2, [pc, #668]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003624:	430b      	orrs	r3, r1
 8003626:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003634:	653b      	str	r3, [r7, #80]	; 0x50
 8003636:	2300      	movs	r3, #0
 8003638:	657b      	str	r3, [r7, #84]	; 0x54
 800363a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003644:	4b9e      	ldr	r3, [pc, #632]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800364c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a9b      	ldr	r2, [pc, #620]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003664:	64bb      	str	r3, [r7, #72]	; 0x48
 8003666:	2300      	movs	r3, #0
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800366e:	460b      	mov	r3, r1
 8003670:	4313      	orrs	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003674:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	4a8f      	ldr	r2, [pc, #572]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003694:	643b      	str	r3, [r7, #64]	; 0x40
 8003696:	2300      	movs	r3, #0
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
 800369a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800369e:	460b      	mov	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036a4:	4b86      	ldr	r3, [pc, #536]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4a85      	ldr	r2, [pc, #532]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036ae:	6113      	str	r3, [r2, #16]
 80036b0:	4b83      	ldr	r3, [pc, #524]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036b2:	6919      	ldr	r1, [r3, #16]
 80036b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036bc:	4a80      	ldr	r2, [pc, #512]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d0:	2300      	movs	r3, #0
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80036d8:	460b      	mov	r3, r1
 80036da:	4313      	orrs	r3, r2
 80036dc:	d009      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036de:	4b78      	ldr	r3, [pc, #480]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	4a74      	ldr	r2, [pc, #464]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036ee:	430b      	orrs	r3, r1
 80036f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003700:	2300      	movs	r3, #0
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
 8003704:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800370e:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371e:	4a68      	ldr	r2, [pc, #416]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003720:	430b      	orrs	r3, r1
 8003722:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	2100      	movs	r1, #0
 800372e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800373a:	460b      	mov	r3, r1
 800373c:	4313      	orrs	r3, r2
 800373e:	d011      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003744:	3308      	adds	r3, #8
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fb79 	bl	8003e40 <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003754:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003760:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	2100      	movs	r1, #0
 800376e:	6239      	str	r1, [r7, #32]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d011      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003784:	3308      	adds	r3, #8
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fb59 	bl	8003e40 <RCCEx_PLL2_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003794:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80037a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	2100      	movs	r1, #0
 80037ae:	61b9      	str	r1, [r7, #24]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d011      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c4:	3308      	adds	r3, #8
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fb39 	bl	8003e40 <RCCEx_PLL2_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	2100      	movs	r1, #0
 80037ee:	6139      	str	r1, [r7, #16]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037fa:	460b      	mov	r3, r1
 80037fc:	4313      	orrs	r3, r2
 80037fe:	d011      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003804:	3328      	adds	r3, #40	; 0x28
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fbcb 	bl	8003fa4 <RCCEx_PLL3_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003814:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003820:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	2100      	movs	r1, #0
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d011      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003844:	3328      	adds	r3, #40	; 0x28
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fbab 	bl	8003fa4 <RCCEx_PLL3_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003854:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003860:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	2100      	movs	r1, #0
 800386e:	6039      	str	r1, [r7, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	e9d7 1200 	ldrd	r1, r2, [r7]
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d011      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003884:	3328      	adds	r3, #40	; 0x28
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fb8b 	bl	8003fa4 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003894:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80038a4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038be:	bf00      	nop
 80038c0:	58024400 	.word	0x58024400

080038c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80038c8:	f7fe fde2 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4904      	ldr	r1, [pc, #16]	; (80038ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	58024400 	.word	0x58024400
 80038ec:	08005f08 	.word	0x08005f08

080038f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038f8:	4ba1      	ldr	r3, [pc, #644]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003902:	4b9f      	ldr	r3, [pc, #636]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	0b1b      	lsrs	r3, r3, #12
 8003908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800390c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800390e:	4b9c      	ldr	r3, [pc, #624]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800391a:	4b99      	ldr	r3, [pc, #612]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8111 	beq.w	8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	f000 8083 	beq.w	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b02      	cmp	r3, #2
 800394a:	f200 80a1 	bhi.w	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d056      	beq.n	8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800395a:	e099      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800395c:	4b88      	ldr	r3, [pc, #544]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d02d      	beq.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003968:	4b85      	ldr	r3, [pc, #532]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	08db      	lsrs	r3, r3, #3
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	4a84      	ldr	r2, [pc, #528]	; (8003b84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b7b      	ldr	r3, [pc, #492]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80039c2:	e087      	b.n	8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a06:	e065      	b.n	8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a4a:	e043      	b.n	8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5e:	4b48      	ldr	r3, [pc, #288]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a8e:	e021      	b.n	8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ab6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ad2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ad4:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	0a5b      	lsrs	r3, r3, #9
 8003ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003afa:	ee17 2a90 	vmov	r2, s15
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	0c1b      	lsrs	r3, r3, #16
 8003b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b28:	ee17 2a90 	vmov	r2, s15
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	0e1b      	lsrs	r3, r3, #24
 8003b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b56:	ee17 2a90 	vmov	r2, s15
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b5e:	e008      	b.n	8003b72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	bf00      	nop
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	58024400 	.word	0x58024400
 8003b84:	03d09000 	.word	0x03d09000
 8003b88:	46000000 	.word	0x46000000
 8003b8c:	4c742400 	.word	0x4c742400
 8003b90:	4a742400 	.word	0x4a742400
 8003b94:	4af42400 	.word	0x4af42400

08003b98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ba0:	4ba1      	ldr	r3, [pc, #644]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003baa:	4b9f      	ldr	r3, [pc, #636]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	0d1b      	lsrs	r3, r3, #20
 8003bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003bb6:	4b9c      	ldr	r3, [pc, #624]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003bc2:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	08db      	lsrs	r3, r3, #3
 8003bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8111 	beq.w	8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	f000 8083 	beq.w	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	f200 80a1 	bhi.w	8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d056      	beq.n	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c02:	e099      	b.n	8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02d      	beq.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c10:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	08db      	lsrs	r3, r3, #3
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	4a84      	ldr	r2, [pc, #528]	; (8003e2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b7b      	ldr	r3, [pc, #492]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c6a:	e087      	b.n	8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7e:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cae:	e065      	b.n	8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc2:	4b59      	ldr	r3, [pc, #356]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cf2:	e043      	b.n	8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d06:	4b48      	ldr	r3, [pc, #288]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d36:	e021      	b.n	8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4a:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	0a5b      	lsrs	r3, r3, #9
 8003d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003da2:	ee17 2a90 	vmov	r2, s15
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003daa:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd0:	ee17 2a90 	vmov	r2, s15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	0e1b      	lsrs	r3, r3, #24
 8003dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfe:	ee17 2a90 	vmov	r2, s15
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e06:	e008      	b.n	8003e1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
}
 8003e1a:	bf00      	nop
 8003e1c:	3724      	adds	r7, #36	; 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	58024400 	.word	0x58024400
 8003e2c:	03d09000 	.word	0x03d09000
 8003e30:	46000000 	.word	0x46000000
 8003e34:	4c742400 	.word	0x4c742400
 8003e38:	4a742400 	.word	0x4a742400
 8003e3c:	4af42400 	.word	0x4af42400

08003e40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d101      	bne.n	8003e5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e099      	b.n	8003f92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e5e:	4b4f      	ldr	r3, [pc, #316]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a4e      	ldr	r2, [pc, #312]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003e64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6a:	f7fd f855 	bl	8000f18 <HAL_GetTick>
 8003e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e72:	f7fd f851 	bl	8000f18 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e086      	b.n	8003f92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e84:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f0      	bne.n	8003e72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e90:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	493f      	ldr	r1, [pc, #252]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	025b      	lsls	r3, r3, #9
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	061b      	lsls	r3, r3, #24
 8003ed0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed4:	4931      	ldr	r1, [pc, #196]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	492d      	ldr	r1, [pc, #180]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f023 0220 	bic.w	r2, r3, #32
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4928      	ldr	r1, [pc, #160]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003efe:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <RCCEx_PLL2_Config+0x160>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	69d2      	ldr	r2, [r2, #28]
 8003f16:	00d2      	lsls	r2, r2, #3
 8003f18:	4920      	ldr	r1, [pc, #128]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f24:	f043 0310 	orr.w	r3, r3, #16
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f3c:	e00f      	b.n	8003f5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d106      	bne.n	8003f52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f44:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f50:	e005      	b.n	8003f5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6a:	f7fc ffd5 	bl	8000f18 <HAL_GetTick>
 8003f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f70:	e008      	b.n	8003f84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f72:	f7fc ffd1 	bl	8000f18 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e006      	b.n	8003f92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <RCCEx_PLL2_Config+0x15c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	ffff0007 	.word	0xffff0007

08003fa4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fb2:	4b53      	ldr	r3, [pc, #332]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d101      	bne.n	8003fc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e099      	b.n	80040f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a4e      	ldr	r2, [pc, #312]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8003fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fce:	f7fc ffa3 	bl	8000f18 <HAL_GetTick>
 8003fd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fd4:	e008      	b.n	8003fe8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fd6:	f7fc ff9f 	bl	8000f18 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e086      	b.n	80040f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fe8:	4b45      	ldr	r3, [pc, #276]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ff4:	4b42      	ldr	r3, [pc, #264]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	051b      	lsls	r3, r3, #20
 8004002:	493f      	ldr	r1, [pc, #252]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	628b      	str	r3, [r1, #40]	; 0x28
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	3b01      	subs	r3, #1
 800400e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	3b01      	subs	r3, #1
 8004018:	025b      	lsls	r3, r3, #9
 800401a:	b29b      	uxth	r3, r3
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	3b01      	subs	r3, #1
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	3b01      	subs	r3, #1
 8004032:	061b      	lsls	r3, r3, #24
 8004034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004038:	4931      	ldr	r1, [pc, #196]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800403e:	4b30      	ldr	r3, [pc, #192]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	492d      	ldr	r1, [pc, #180]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4928      	ldr	r1, [pc, #160]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4a26      	ldr	r2, [pc, #152]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <RCCEx_PLL3_Config+0x160>)
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	69d2      	ldr	r2, [r2, #28]
 800407a:	00d2      	lsls	r2, r2, #3
 800407c:	4920      	ldr	r1, [pc, #128]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004082:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 800409a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800409e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040a0:	e00f      	b.n	80040c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d106      	bne.n	80040b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 80040ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040b4:	e005      	b.n	80040c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	4a11      	ldr	r2, [pc, #68]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 80040bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 80040c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ce:	f7fc ff23 	bl	8000f18 <HAL_GetTick>
 80040d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040d6:	f7fc ff1f 	bl	8000f18 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <RCCEx_PLL3_Config+0x15c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	58024400 	.word	0x58024400
 8004104:	ffff0007 	.word	0xffff0007

08004108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e049      	b.n	80041ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fc fd5c 	bl	8000bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 fad6 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e054      	b.n	800427a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a26      	ldr	r2, [pc, #152]	; (8004288 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d022      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x80>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d01d      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x80>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a22      	ldr	r2, [pc, #136]	; (800428c <HAL_TIM_Base_Start_IT+0xd4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d018      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x80>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a21      	ldr	r2, [pc, #132]	; (8004290 <HAL_TIM_Base_Start_IT+0xd8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x80>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <HAL_TIM_Base_Start_IT+0xdc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x80>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1e      	ldr	r2, [pc, #120]	; (8004298 <HAL_TIM_Base_Start_IT+0xe0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x80>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <HAL_TIM_Base_Start_IT+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x80>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d115      	bne.n	8004264 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_TIM_Base_Start_IT+0xec>)
 8004240:	4013      	ands	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b06      	cmp	r3, #6
 8004248:	d015      	beq.n	8004276 <HAL_TIM_Base_Start_IT+0xbe>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d011      	beq.n	8004276 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	e008      	b.n	8004276 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e000      	b.n	8004278 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800
 8004294:	40000c00 	.word	0x40000c00
 8004298:	40010400 	.word	0x40010400
 800429c:	40001800 	.word	0x40001800
 80042a0:	40014000 	.word	0x40014000
 80042a4:	00010007 	.word	0x00010007

080042a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0202 	mvn.w	r2, #2
 80042dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f9e2 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9d4 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f9e5 	bl	80046d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0204 	mvn.w	r2, #4
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9bc 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9ae 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9bf 	bl	80046d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0208 	mvn.w	r2, #8
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2204      	movs	r2, #4
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f996 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f988 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f999 	bl	80046d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0210 	mvn.w	r2, #16
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2208      	movs	r2, #8
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f970 	bl	80046bc <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f962 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f973 	bl	80046d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0201 	mvn.w	r2, #1
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fb08 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00c      	beq.n	8004442 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fb37 	bl	8004ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00c      	beq.n	8004466 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fb2f 	bl	8004ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00c      	beq.n	800448a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f92d 	bl	80046e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0220 	mvn.w	r2, #32
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 faf7 	bl	8004a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIM_ConfigClockSource+0x1c>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0dc      	b.n	800468e <HAL_TIM_ConfigClockSource+0x1d6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <HAL_TIM_ConfigClockSource+0x1e0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a64      	ldr	r2, [pc, #400]	; (800469c <HAL_TIM_ConfigClockSource+0x1e4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	f000 80a9 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 8004510:	4a62      	ldr	r2, [pc, #392]	; (800469c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	f200 80ae 	bhi.w	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004518:	4a61      	ldr	r2, [pc, #388]	; (80046a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	f000 80a1 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 8004520:	4a5f      	ldr	r2, [pc, #380]	; (80046a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	f200 80a6 	bhi.w	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004528:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800452a:	4293      	cmp	r3, r2
 800452c:	f000 8099 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 8004530:	4a5c      	ldr	r2, [pc, #368]	; (80046a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004532:	4293      	cmp	r3, r2
 8004534:	f200 809e 	bhi.w	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004538:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800453c:	f000 8091 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 8004540:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004544:	f200 8096 	bhi.w	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454c:	f000 8089 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 8004550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004554:	f200 808e 	bhi.w	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455c:	d03e      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x124>
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004562:	f200 8087 	bhi.w	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	f000 8086 	beq.w	800467a <HAL_TIM_ConfigClockSource+0x1c2>
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004572:	d87f      	bhi.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004574:	2b70      	cmp	r3, #112	; 0x70
 8004576:	d01a      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0xf6>
 8004578:	2b70      	cmp	r3, #112	; 0x70
 800457a:	d87b      	bhi.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 800457c:	2b60      	cmp	r3, #96	; 0x60
 800457e:	d050      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0x16a>
 8004580:	2b60      	cmp	r3, #96	; 0x60
 8004582:	d877      	bhi.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004584:	2b50      	cmp	r3, #80	; 0x50
 8004586:	d03c      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x14a>
 8004588:	2b50      	cmp	r3, #80	; 0x50
 800458a:	d873      	bhi.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d058      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x18a>
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d86f      	bhi.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	d064      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 8004598:	2b30      	cmp	r3, #48	; 0x30
 800459a:	d86b      	bhi.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 800459c:	2b20      	cmp	r3, #32
 800459e:	d060      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d867      	bhi.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05c      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d05a      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x1aa>
 80045ac:	e062      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6899      	ldr	r1, [r3, #8]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f000 f9bf 	bl	8004940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	609a      	str	r2, [r3, #8]
      break;
 80045da:	e04f      	b.n	800467c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6899      	ldr	r1, [r3, #8]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f000 f9a8 	bl	8004940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fe:	609a      	str	r2, [r3, #8]
      break;
 8004600:	e03c      	b.n	800467c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	461a      	mov	r2, r3
 8004610:	f000 f918 	bl	8004844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2150      	movs	r1, #80	; 0x50
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f972 	bl	8004904 <TIM_ITRx_SetConfig>
      break;
 8004620:	e02c      	b.n	800467c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	f000 f937 	bl	80048a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2160      	movs	r1, #96	; 0x60
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f962 	bl	8004904 <TIM_ITRx_SetConfig>
      break;
 8004640:	e01c      	b.n	800467c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	f000 f8f8 	bl	8004844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2140      	movs	r1, #64	; 0x40
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f952 	bl	8004904 <TIM_ITRx_SetConfig>
      break;
 8004660:	e00c      	b.n	800467c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f000 f949 	bl	8004904 <TIM_ITRx_SetConfig>
      break;
 8004672:	e003      	b.n	800467c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      break;
 8004678:	e000      	b.n	800467c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800467a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	ffceff88 	.word	0xffceff88
 800469c:	00100040 	.word	0x00100040
 80046a0:	00100030 	.word	0x00100030
 80046a4:	00100020 	.word	0x00100020

080046a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a46      	ldr	r2, [pc, #280]	; (8004824 <TIM_Base_SetConfig+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d00f      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a43      	ldr	r2, [pc, #268]	; (8004828 <TIM_Base_SetConfig+0x130>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00b      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a42      	ldr	r2, [pc, #264]	; (800482c <TIM_Base_SetConfig+0x134>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a41      	ldr	r2, [pc, #260]	; (8004830 <TIM_Base_SetConfig+0x138>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a40      	ldr	r2, [pc, #256]	; (8004834 <TIM_Base_SetConfig+0x13c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d108      	bne.n	800474a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a35      	ldr	r2, [pc, #212]	; (8004824 <TIM_Base_SetConfig+0x12c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01f      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d01b      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a32      	ldr	r2, [pc, #200]	; (8004828 <TIM_Base_SetConfig+0x130>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d017      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a31      	ldr	r2, [pc, #196]	; (800482c <TIM_Base_SetConfig+0x134>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a30      	ldr	r2, [pc, #192]	; (8004830 <TIM_Base_SetConfig+0x138>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00f      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <TIM_Base_SetConfig+0x13c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00b      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <TIM_Base_SetConfig+0x140>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2d      	ldr	r2, [pc, #180]	; (800483c <TIM_Base_SetConfig+0x144>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d003      	beq.n	8004792 <TIM_Base_SetConfig+0x9a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <TIM_Base_SetConfig+0x148>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d108      	bne.n	80047a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a16      	ldr	r2, [pc, #88]	; (8004824 <TIM_Base_SetConfig+0x12c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00f      	beq.n	80047f0 <TIM_Base_SetConfig+0xf8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a18      	ldr	r2, [pc, #96]	; (8004834 <TIM_Base_SetConfig+0x13c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <TIM_Base_SetConfig+0xf8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <TIM_Base_SetConfig+0x140>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d007      	beq.n	80047f0 <TIM_Base_SetConfig+0xf8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a16      	ldr	r2, [pc, #88]	; (800483c <TIM_Base_SetConfig+0x144>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_Base_SetConfig+0xf8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <TIM_Base_SetConfig+0x148>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]
  }
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40010400 	.word	0x40010400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 030a 	bic.w	r3, r3, #10
 8004880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f023 0210 	bic.w	r2, r3, #16
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <TIM_ITRx_SetConfig+0x38>)
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	f043 0307 	orr.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	609a      	str	r2, [r3, #8]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	ffcfff8f 	.word	0xffcfff8f

08004940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800495a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	431a      	orrs	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	609a      	str	r2, [r3, #8]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004994:	2302      	movs	r3, #2
 8004996:	e06d      	b.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d022      	beq.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d01d      	beq.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d018      	beq.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00e      	beq.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d009      	beq.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10c      	bne.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40001800 	.word	0x40001800
 8004a98:	40014000 	.word	0x40014000

08004a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e042      	b.n	8004b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc f8e9 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2224      	movs	r2, #36	; 0x24
 8004b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fe94 	bl	8005850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f825 	bl	8004b78 <UART_SetConfig>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e01b      	b.n	8004b70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ff13 	bl	8005994 <UART_CheckIdleState>
 8004b6e:	4603      	mov	r3, r0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b7c:	b092      	sub	sp, #72	; 0x48
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4bbe      	ldr	r3, [pc, #760]	; (8004ea0 <UART_SetConfig+0x328>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4ab3      	ldr	r2, [pc, #716]	; (8004ea4 <UART_SetConfig+0x32c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004be0:	4313      	orrs	r3, r2
 8004be2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	4baf      	ldr	r3, [pc, #700]	; (8004ea8 <UART_SetConfig+0x330>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	f023 010f 	bic.w	r1, r3, #15
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4aa6      	ldr	r2, [pc, #664]	; (8004eac <UART_SetConfig+0x334>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d177      	bne.n	8004d08 <UART_SetConfig+0x190>
 8004c18:	4ba5      	ldr	r3, [pc, #660]	; (8004eb0 <UART_SetConfig+0x338>)
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c20:	2b28      	cmp	r3, #40	; 0x28
 8004c22:	d86d      	bhi.n	8004d00 <UART_SetConfig+0x188>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0xb4>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004cd1 	.word	0x08004cd1
 8004c30:	08004d01 	.word	0x08004d01
 8004c34:	08004d01 	.word	0x08004d01
 8004c38:	08004d01 	.word	0x08004d01
 8004c3c:	08004d01 	.word	0x08004d01
 8004c40:	08004d01 	.word	0x08004d01
 8004c44:	08004d01 	.word	0x08004d01
 8004c48:	08004d01 	.word	0x08004d01
 8004c4c:	08004cd9 	.word	0x08004cd9
 8004c50:	08004d01 	.word	0x08004d01
 8004c54:	08004d01 	.word	0x08004d01
 8004c58:	08004d01 	.word	0x08004d01
 8004c5c:	08004d01 	.word	0x08004d01
 8004c60:	08004d01 	.word	0x08004d01
 8004c64:	08004d01 	.word	0x08004d01
 8004c68:	08004d01 	.word	0x08004d01
 8004c6c:	08004ce1 	.word	0x08004ce1
 8004c70:	08004d01 	.word	0x08004d01
 8004c74:	08004d01 	.word	0x08004d01
 8004c78:	08004d01 	.word	0x08004d01
 8004c7c:	08004d01 	.word	0x08004d01
 8004c80:	08004d01 	.word	0x08004d01
 8004c84:	08004d01 	.word	0x08004d01
 8004c88:	08004d01 	.word	0x08004d01
 8004c8c:	08004ce9 	.word	0x08004ce9
 8004c90:	08004d01 	.word	0x08004d01
 8004c94:	08004d01 	.word	0x08004d01
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004d01 	.word	0x08004d01
 8004ca0:	08004d01 	.word	0x08004d01
 8004ca4:	08004d01 	.word	0x08004d01
 8004ca8:	08004d01 	.word	0x08004d01
 8004cac:	08004cf1 	.word	0x08004cf1
 8004cb0:	08004d01 	.word	0x08004d01
 8004cb4:	08004d01 	.word	0x08004d01
 8004cb8:	08004d01 	.word	0x08004d01
 8004cbc:	08004d01 	.word	0x08004d01
 8004cc0:	08004d01 	.word	0x08004d01
 8004cc4:	08004d01 	.word	0x08004d01
 8004cc8:	08004d01 	.word	0x08004d01
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e326      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e322      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e31e      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e31a      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e316      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004cf8:	2340      	movs	r3, #64	; 0x40
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e312      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e30e      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a69      	ldr	r2, [pc, #420]	; (8004eb4 <UART_SetConfig+0x33c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d130      	bne.n	8004d74 <UART_SetConfig+0x1fc>
 8004d12:	4b67      	ldr	r3, [pc, #412]	; (8004eb0 <UART_SetConfig+0x338>)
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d826      	bhi.n	8004d6c <UART_SetConfig+0x1f4>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x1ac>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d3d 	.word	0x08004d3d
 8004d28:	08004d45 	.word	0x08004d45
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e2f0      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d44:	2304      	movs	r3, #4
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e2ec      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e2e8      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e2e4      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e2e0      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d64:	2340      	movs	r3, #64	; 0x40
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e2dc      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e2d8      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a4f      	ldr	r2, [pc, #316]	; (8004eb8 <UART_SetConfig+0x340>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d130      	bne.n	8004de0 <UART_SetConfig+0x268>
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	; (8004eb0 <UART_SetConfig+0x338>)
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d826      	bhi.n	8004dd8 <UART_SetConfig+0x260>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x218>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004db1 	.word	0x08004db1
 8004d98:	08004db9 	.word	0x08004db9
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	2300      	movs	r3, #0
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e2ba      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db6:	e2b6      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e2b2      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e2ae      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e2aa      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e2a6      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e2a2      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <UART_SetConfig+0x344>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d130      	bne.n	8004e4c <UART_SetConfig+0x2d4>
 8004dea:	4b31      	ldr	r3, [pc, #196]	; (8004eb0 <UART_SetConfig+0x338>)
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d826      	bhi.n	8004e44 <UART_SetConfig+0x2cc>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0x284>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e15 	.word	0x08004e15
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	08004e25 	.word	0x08004e25
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e284      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e22:	e280      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e24:	2308      	movs	r3, #8
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2a:	e27c      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e278      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e34:	2320      	movs	r3, #32
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3a:	e274      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e3c:	2340      	movs	r3, #64	; 0x40
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e42:	e270      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4a:	e26c      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <UART_SetConfig+0x348>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d142      	bne.n	8004edc <UART_SetConfig+0x364>
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <UART_SetConfig+0x338>)
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d838      	bhi.n	8004ed4 <UART_SetConfig+0x35c>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0x2f0>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e81 	.word	0x08004e81
 8004e6c:	08004e89 	.word	0x08004e89
 8004e70:	08004e91 	.word	0x08004e91
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004ec5 	.word	0x08004ec5
 8004e7c:	08004ecd 	.word	0x08004ecd
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e86:	e24e      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8e:	e24a      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e90:	2308      	movs	r3, #8
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e96:	e246      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9e:	e242      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004ea0:	cfff69f3 	.word	0xcfff69f3
 8004ea4:	58000c00 	.word	0x58000c00
 8004ea8:	11fff4ff 	.word	0x11fff4ff
 8004eac:	40011000 	.word	0x40011000
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	40004400 	.word	0x40004400
 8004eb8:	40004800 	.word	0x40004800
 8004ebc:	40004c00 	.word	0x40004c00
 8004ec0:	40005000 	.word	0x40005000
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e22c      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004ecc:	2340      	movs	r3, #64	; 0x40
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e228      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e224      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4ab1      	ldr	r2, [pc, #708]	; (80051a8 <UART_SetConfig+0x630>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d176      	bne.n	8004fd4 <UART_SetConfig+0x45c>
 8004ee6:	4bb1      	ldr	r3, [pc, #708]	; (80051ac <UART_SetConfig+0x634>)
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eee:	2b28      	cmp	r3, #40	; 0x28
 8004ef0:	d86c      	bhi.n	8004fcc <UART_SetConfig+0x454>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <UART_SetConfig+0x380>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f9d 	.word	0x08004f9d
 8004efc:	08004fcd 	.word	0x08004fcd
 8004f00:	08004fcd 	.word	0x08004fcd
 8004f04:	08004fcd 	.word	0x08004fcd
 8004f08:	08004fcd 	.word	0x08004fcd
 8004f0c:	08004fcd 	.word	0x08004fcd
 8004f10:	08004fcd 	.word	0x08004fcd
 8004f14:	08004fcd 	.word	0x08004fcd
 8004f18:	08004fa5 	.word	0x08004fa5
 8004f1c:	08004fcd 	.word	0x08004fcd
 8004f20:	08004fcd 	.word	0x08004fcd
 8004f24:	08004fcd 	.word	0x08004fcd
 8004f28:	08004fcd 	.word	0x08004fcd
 8004f2c:	08004fcd 	.word	0x08004fcd
 8004f30:	08004fcd 	.word	0x08004fcd
 8004f34:	08004fcd 	.word	0x08004fcd
 8004f38:	08004fad 	.word	0x08004fad
 8004f3c:	08004fcd 	.word	0x08004fcd
 8004f40:	08004fcd 	.word	0x08004fcd
 8004f44:	08004fcd 	.word	0x08004fcd
 8004f48:	08004fcd 	.word	0x08004fcd
 8004f4c:	08004fcd 	.word	0x08004fcd
 8004f50:	08004fcd 	.word	0x08004fcd
 8004f54:	08004fcd 	.word	0x08004fcd
 8004f58:	08004fb5 	.word	0x08004fb5
 8004f5c:	08004fcd 	.word	0x08004fcd
 8004f60:	08004fcd 	.word	0x08004fcd
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08004fcd 	.word	0x08004fcd
 8004f6c:	08004fcd 	.word	0x08004fcd
 8004f70:	08004fcd 	.word	0x08004fcd
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	08004fbd 	.word	0x08004fbd
 8004f7c:	08004fcd 	.word	0x08004fcd
 8004f80:	08004fcd 	.word	0x08004fcd
 8004f84:	08004fcd 	.word	0x08004fcd
 8004f88:	08004fcd 	.word	0x08004fcd
 8004f8c:	08004fcd 	.word	0x08004fcd
 8004f90:	08004fcd 	.word	0x08004fcd
 8004f94:	08004fcd 	.word	0x08004fcd
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e1c0      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e1bc      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e1b8      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e1b4      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e1b0      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e1ac      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e1a8      	b.n	8005326 <UART_SetConfig+0x7ae>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a75      	ldr	r2, [pc, #468]	; (80051b0 <UART_SetConfig+0x638>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d130      	bne.n	8005040 <UART_SetConfig+0x4c8>
 8004fde:	4b73      	ldr	r3, [pc, #460]	; (80051ac <UART_SetConfig+0x634>)
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d826      	bhi.n	8005038 <UART_SetConfig+0x4c0>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x478>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005009 	.word	0x08005009
 8004ff4:	08005011 	.word	0x08005011
 8004ff8:	08005019 	.word	0x08005019
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005029 	.word	0x08005029
 8005004:	08005031 	.word	0x08005031
 8005008:	2300      	movs	r3, #0
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e18a      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005010:	2304      	movs	r3, #4
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e186      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005018:	2308      	movs	r3, #8
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e182      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005020:	2310      	movs	r3, #16
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e17e      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005028:	2320      	movs	r3, #32
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e17a      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e176      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e172      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5b      	ldr	r2, [pc, #364]	; (80051b4 <UART_SetConfig+0x63c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d130      	bne.n	80050ac <UART_SetConfig+0x534>
 800504a:	4b58      	ldr	r3, [pc, #352]	; (80051ac <UART_SetConfig+0x634>)
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	2b05      	cmp	r3, #5
 8005054:	d826      	bhi.n	80050a4 <UART_SetConfig+0x52c>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x4e4>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005075 	.word	0x08005075
 8005060:	0800507d 	.word	0x0800507d
 8005064:	08005085 	.word	0x08005085
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005095 	.word	0x08005095
 8005070:	0800509d 	.word	0x0800509d
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e154      	b.n	8005326 <UART_SetConfig+0x7ae>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e150      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e14c      	b.n	8005326 <UART_SetConfig+0x7ae>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e148      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005094:	2320      	movs	r3, #32
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e144      	b.n	8005326 <UART_SetConfig+0x7ae>
 800509c:	2340      	movs	r3, #64	; 0x40
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e140      	b.n	8005326 <UART_SetConfig+0x7ae>
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e13c      	b.n	8005326 <UART_SetConfig+0x7ae>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a41      	ldr	r2, [pc, #260]	; (80051b8 <UART_SetConfig+0x640>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	f040 8082 	bne.w	80051bc <UART_SetConfig+0x644>
 80050b8:	4b3c      	ldr	r3, [pc, #240]	; (80051ac <UART_SetConfig+0x634>)
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c0:	2b28      	cmp	r3, #40	; 0x28
 80050c2:	d86d      	bhi.n	80051a0 <UART_SetConfig+0x628>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x554>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005171 	.word	0x08005171
 80050d0:	080051a1 	.word	0x080051a1
 80050d4:	080051a1 	.word	0x080051a1
 80050d8:	080051a1 	.word	0x080051a1
 80050dc:	080051a1 	.word	0x080051a1
 80050e0:	080051a1 	.word	0x080051a1
 80050e4:	080051a1 	.word	0x080051a1
 80050e8:	080051a1 	.word	0x080051a1
 80050ec:	08005179 	.word	0x08005179
 80050f0:	080051a1 	.word	0x080051a1
 80050f4:	080051a1 	.word	0x080051a1
 80050f8:	080051a1 	.word	0x080051a1
 80050fc:	080051a1 	.word	0x080051a1
 8005100:	080051a1 	.word	0x080051a1
 8005104:	080051a1 	.word	0x080051a1
 8005108:	080051a1 	.word	0x080051a1
 800510c:	08005181 	.word	0x08005181
 8005110:	080051a1 	.word	0x080051a1
 8005114:	080051a1 	.word	0x080051a1
 8005118:	080051a1 	.word	0x080051a1
 800511c:	080051a1 	.word	0x080051a1
 8005120:	080051a1 	.word	0x080051a1
 8005124:	080051a1 	.word	0x080051a1
 8005128:	080051a1 	.word	0x080051a1
 800512c:	08005189 	.word	0x08005189
 8005130:	080051a1 	.word	0x080051a1
 8005134:	080051a1 	.word	0x080051a1
 8005138:	080051a1 	.word	0x080051a1
 800513c:	080051a1 	.word	0x080051a1
 8005140:	080051a1 	.word	0x080051a1
 8005144:	080051a1 	.word	0x080051a1
 8005148:	080051a1 	.word	0x080051a1
 800514c:	08005191 	.word	0x08005191
 8005150:	080051a1 	.word	0x080051a1
 8005154:	080051a1 	.word	0x080051a1
 8005158:	080051a1 	.word	0x080051a1
 800515c:	080051a1 	.word	0x080051a1
 8005160:	080051a1 	.word	0x080051a1
 8005164:	080051a1 	.word	0x080051a1
 8005168:	080051a1 	.word	0x080051a1
 800516c:	08005199 	.word	0x08005199
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e0d6      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e0d2      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e0ce      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e0ca      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005190:	2320      	movs	r3, #32
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e0c6      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e0c2      	b.n	8005326 <UART_SetConfig+0x7ae>
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e0be      	b.n	8005326 <UART_SetConfig+0x7ae>
 80051a8:	40011400 	.word	0x40011400
 80051ac:	58024400 	.word	0x58024400
 80051b0:	40007800 	.word	0x40007800
 80051b4:	40007c00 	.word	0x40007c00
 80051b8:	40011800 	.word	0x40011800
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4aad      	ldr	r2, [pc, #692]	; (8005478 <UART_SetConfig+0x900>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d176      	bne.n	80052b4 <UART_SetConfig+0x73c>
 80051c6:	4bad      	ldr	r3, [pc, #692]	; (800547c <UART_SetConfig+0x904>)
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ce:	2b28      	cmp	r3, #40	; 0x28
 80051d0:	d86c      	bhi.n	80052ac <UART_SetConfig+0x734>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x660>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	0800527d 	.word	0x0800527d
 80051dc:	080052ad 	.word	0x080052ad
 80051e0:	080052ad 	.word	0x080052ad
 80051e4:	080052ad 	.word	0x080052ad
 80051e8:	080052ad 	.word	0x080052ad
 80051ec:	080052ad 	.word	0x080052ad
 80051f0:	080052ad 	.word	0x080052ad
 80051f4:	080052ad 	.word	0x080052ad
 80051f8:	08005285 	.word	0x08005285
 80051fc:	080052ad 	.word	0x080052ad
 8005200:	080052ad 	.word	0x080052ad
 8005204:	080052ad 	.word	0x080052ad
 8005208:	080052ad 	.word	0x080052ad
 800520c:	080052ad 	.word	0x080052ad
 8005210:	080052ad 	.word	0x080052ad
 8005214:	080052ad 	.word	0x080052ad
 8005218:	0800528d 	.word	0x0800528d
 800521c:	080052ad 	.word	0x080052ad
 8005220:	080052ad 	.word	0x080052ad
 8005224:	080052ad 	.word	0x080052ad
 8005228:	080052ad 	.word	0x080052ad
 800522c:	080052ad 	.word	0x080052ad
 8005230:	080052ad 	.word	0x080052ad
 8005234:	080052ad 	.word	0x080052ad
 8005238:	08005295 	.word	0x08005295
 800523c:	080052ad 	.word	0x080052ad
 8005240:	080052ad 	.word	0x080052ad
 8005244:	080052ad 	.word	0x080052ad
 8005248:	080052ad 	.word	0x080052ad
 800524c:	080052ad 	.word	0x080052ad
 8005250:	080052ad 	.word	0x080052ad
 8005254:	080052ad 	.word	0x080052ad
 8005258:	0800529d 	.word	0x0800529d
 800525c:	080052ad 	.word	0x080052ad
 8005260:	080052ad 	.word	0x080052ad
 8005264:	080052ad 	.word	0x080052ad
 8005268:	080052ad 	.word	0x080052ad
 800526c:	080052ad 	.word	0x080052ad
 8005270:	080052ad 	.word	0x080052ad
 8005274:	080052ad 	.word	0x080052ad
 8005278:	080052a5 	.word	0x080052a5
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e050      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e04c      	b.n	8005326 <UART_SetConfig+0x7ae>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e048      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e044      	b.n	8005326 <UART_SetConfig+0x7ae>
 800529c:	2320      	movs	r3, #32
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e040      	b.n	8005326 <UART_SetConfig+0x7ae>
 80052a4:	2340      	movs	r3, #64	; 0x40
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e03c      	b.n	8005326 <UART_SetConfig+0x7ae>
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e038      	b.n	8005326 <UART_SetConfig+0x7ae>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a71      	ldr	r2, [pc, #452]	; (8005480 <UART_SetConfig+0x908>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d130      	bne.n	8005320 <UART_SetConfig+0x7a8>
 80052be:	4b6f      	ldr	r3, [pc, #444]	; (800547c <UART_SetConfig+0x904>)
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d826      	bhi.n	8005318 <UART_SetConfig+0x7a0>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x758>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052e9 	.word	0x080052e9
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	080052f9 	.word	0x080052f9
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005311 	.word	0x08005311
 80052e8:	2302      	movs	r3, #2
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e01a      	b.n	8005326 <UART_SetConfig+0x7ae>
 80052f0:	2304      	movs	r3, #4
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e016      	b.n	8005326 <UART_SetConfig+0x7ae>
 80052f8:	2308      	movs	r3, #8
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e012      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e00e      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005308:	2320      	movs	r3, #32
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e00a      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005310:	2340      	movs	r3, #64	; 0x40
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e006      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e002      	b.n	8005326 <UART_SetConfig+0x7ae>
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a55      	ldr	r2, [pc, #340]	; (8005480 <UART_SetConfig+0x908>)
 800532c:	4293      	cmp	r3, r2
 800532e:	f040 80f8 	bne.w	8005522 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005332:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005336:	2b20      	cmp	r3, #32
 8005338:	dc46      	bgt.n	80053c8 <UART_SetConfig+0x850>
 800533a:	2b02      	cmp	r3, #2
 800533c:	db75      	blt.n	800542a <UART_SetConfig+0x8b2>
 800533e:	3b02      	subs	r3, #2
 8005340:	2b1e      	cmp	r3, #30
 8005342:	d872      	bhi.n	800542a <UART_SetConfig+0x8b2>
 8005344:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0x7d4>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	080053cf 	.word	0x080053cf
 8005350:	0800542b 	.word	0x0800542b
 8005354:	080053d7 	.word	0x080053d7
 8005358:	0800542b 	.word	0x0800542b
 800535c:	0800542b 	.word	0x0800542b
 8005360:	0800542b 	.word	0x0800542b
 8005364:	080053e7 	.word	0x080053e7
 8005368:	0800542b 	.word	0x0800542b
 800536c:	0800542b 	.word	0x0800542b
 8005370:	0800542b 	.word	0x0800542b
 8005374:	0800542b 	.word	0x0800542b
 8005378:	0800542b 	.word	0x0800542b
 800537c:	0800542b 	.word	0x0800542b
 8005380:	0800542b 	.word	0x0800542b
 8005384:	080053f7 	.word	0x080053f7
 8005388:	0800542b 	.word	0x0800542b
 800538c:	0800542b 	.word	0x0800542b
 8005390:	0800542b 	.word	0x0800542b
 8005394:	0800542b 	.word	0x0800542b
 8005398:	0800542b 	.word	0x0800542b
 800539c:	0800542b 	.word	0x0800542b
 80053a0:	0800542b 	.word	0x0800542b
 80053a4:	0800542b 	.word	0x0800542b
 80053a8:	0800542b 	.word	0x0800542b
 80053ac:	0800542b 	.word	0x0800542b
 80053b0:	0800542b 	.word	0x0800542b
 80053b4:	0800542b 	.word	0x0800542b
 80053b8:	0800542b 	.word	0x0800542b
 80053bc:	0800542b 	.word	0x0800542b
 80053c0:	0800542b 	.word	0x0800542b
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d02a      	beq.n	8005422 <UART_SetConfig+0x8aa>
 80053cc:	e02d      	b.n	800542a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053ce:	f7fe fa79 	bl	80038c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80053d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053d4:	e02f      	b.n	8005436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fa88 	bl	80038f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053e4:	e027      	b.n	8005436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e6:	f107 0318 	add.w	r3, r7, #24
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fbd4 	bl	8003b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053f4:	e01f      	b.n	8005436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053f6:	4b21      	ldr	r3, [pc, #132]	; (800547c <UART_SetConfig+0x904>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <UART_SetConfig+0x904>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	08db      	lsrs	r3, r3, #3
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <UART_SetConfig+0x90c>)
 800540e:	fa22 f303 	lsr.w	r3, r2, r3
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005414:	e00f      	b.n	8005436 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <UART_SetConfig+0x90c>)
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541a:	e00c      	b.n	8005436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <UART_SetConfig+0x910>)
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005420:	e009      	b.n	8005436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005428:	e005      	b.n	8005436 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005434:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 81ee 	beq.w	800581a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	4a12      	ldr	r2, [pc, #72]	; (800548c <UART_SetConfig+0x914>)
 8005444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005448:	461a      	mov	r2, r3
 800544a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005450:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545e:	429a      	cmp	r2, r3
 8005460:	d305      	bcc.n	800546e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546a:	429a      	cmp	r2, r3
 800546c:	d910      	bls.n	8005490 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005474:	e1d1      	b.n	800581a <UART_SetConfig+0xca2>
 8005476:	bf00      	nop
 8005478:	40011c00 	.word	0x40011c00
 800547c:	58024400 	.word	0x58024400
 8005480:	58000c00 	.word	0x58000c00
 8005484:	03d09000 	.word	0x03d09000
 8005488:	003d0900 	.word	0x003d0900
 800548c:	08005f18 	.word	0x08005f18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005492:	2200      	movs	r2, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	60fa      	str	r2, [r7, #12]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	4ac0      	ldr	r2, [pc, #768]	; (80057a0 <UART_SetConfig+0xc28>)
 800549e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2200      	movs	r2, #0
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054b2:	f7fa ff1b 	bl	80002ec <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4610      	mov	r0, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	020b      	lsls	r3, r1, #8
 80054c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054cc:	0202      	lsls	r2, r0, #8
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	6849      	ldr	r1, [r1, #4]
 80054d2:	0849      	lsrs	r1, r1, #1
 80054d4:	2000      	movs	r0, #0
 80054d6:	460c      	mov	r4, r1
 80054d8:	4605      	mov	r5, r0
 80054da:	eb12 0804 	adds.w	r8, r2, r4
 80054de:	eb43 0905 	adc.w	r9, r3, r5
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	469a      	mov	sl, r3
 80054ea:	4693      	mov	fp, r2
 80054ec:	4652      	mov	r2, sl
 80054ee:	465b      	mov	r3, fp
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fa fefa 	bl	80002ec <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4613      	mov	r3, r2
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005506:	d308      	bcc.n	800551a <UART_SetConfig+0x9a2>
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550e:	d204      	bcs.n	800551a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	e17f      	b.n	800581a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005520:	e17b      	b.n	800581a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552a:	f040 80bd 	bne.w	80056a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800552e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005532:	2b20      	cmp	r3, #32
 8005534:	dc48      	bgt.n	80055c8 <UART_SetConfig+0xa50>
 8005536:	2b00      	cmp	r3, #0
 8005538:	db7b      	blt.n	8005632 <UART_SetConfig+0xaba>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d879      	bhi.n	8005632 <UART_SetConfig+0xaba>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x9cc>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	080055cf 	.word	0x080055cf
 8005548:	080055d7 	.word	0x080055d7
 800554c:	08005633 	.word	0x08005633
 8005550:	08005633 	.word	0x08005633
 8005554:	080055df 	.word	0x080055df
 8005558:	08005633 	.word	0x08005633
 800555c:	08005633 	.word	0x08005633
 8005560:	08005633 	.word	0x08005633
 8005564:	080055ef 	.word	0x080055ef
 8005568:	08005633 	.word	0x08005633
 800556c:	08005633 	.word	0x08005633
 8005570:	08005633 	.word	0x08005633
 8005574:	08005633 	.word	0x08005633
 8005578:	08005633 	.word	0x08005633
 800557c:	08005633 	.word	0x08005633
 8005580:	08005633 	.word	0x08005633
 8005584:	080055ff 	.word	0x080055ff
 8005588:	08005633 	.word	0x08005633
 800558c:	08005633 	.word	0x08005633
 8005590:	08005633 	.word	0x08005633
 8005594:	08005633 	.word	0x08005633
 8005598:	08005633 	.word	0x08005633
 800559c:	08005633 	.word	0x08005633
 80055a0:	08005633 	.word	0x08005633
 80055a4:	08005633 	.word	0x08005633
 80055a8:	08005633 	.word	0x08005633
 80055ac:	08005633 	.word	0x08005633
 80055b0:	08005633 	.word	0x08005633
 80055b4:	08005633 	.word	0x08005633
 80055b8:	08005633 	.word	0x08005633
 80055bc:	08005633 	.word	0x08005633
 80055c0:	08005633 	.word	0x08005633
 80055c4:	08005625 	.word	0x08005625
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d02e      	beq.n	800562a <UART_SetConfig+0xab2>
 80055cc:	e031      	b.n	8005632 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ce:	f7fc ff8f 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 80055d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055d4:	e033      	b.n	800563e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d6:	f7fc ffa1 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 80055da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055dc:	e02f      	b.n	800563e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe f984 	bl	80038f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ec:	e027      	b.n	800563e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ee:	f107 0318 	add.w	r3, r7, #24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fad0 	bl	8003b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055fc:	e01f      	b.n	800563e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055fe:	4b69      	ldr	r3, [pc, #420]	; (80057a4 <UART_SetConfig+0xc2c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800560a:	4b66      	ldr	r3, [pc, #408]	; (80057a4 <UART_SetConfig+0xc2c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	08db      	lsrs	r3, r3, #3
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	4a64      	ldr	r2, [pc, #400]	; (80057a8 <UART_SetConfig+0xc30>)
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800561c:	e00f      	b.n	800563e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800561e:	4b62      	ldr	r3, [pc, #392]	; (80057a8 <UART_SetConfig+0xc30>)
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005622:	e00c      	b.n	800563e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005624:	4b61      	ldr	r3, [pc, #388]	; (80057ac <UART_SetConfig+0xc34>)
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005628:	e009      	b.n	800563e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005630:	e005      	b.n	800563e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800563c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80ea 	beq.w	800581a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	4a55      	ldr	r2, [pc, #340]	; (80057a0 <UART_SetConfig+0xc28>)
 800564c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005650:	461a      	mov	r2, r3
 8005652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005654:	fbb3 f3f2 	udiv	r3, r3, r2
 8005658:	005a      	lsls	r2, r3, #1
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	441a      	add	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b0f      	cmp	r3, #15
 8005670:	d916      	bls.n	80056a0 <UART_SetConfig+0xb28>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005678:	d212      	bcs.n	80056a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	b29b      	uxth	r3, r3
 800567e:	f023 030f 	bic.w	r3, r3, #15
 8005682:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	b29b      	uxth	r3, r3
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	b29a      	uxth	r2, r3
 8005690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005692:	4313      	orrs	r3, r2
 8005694:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	e0bc      	b.n	800581a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056a6:	e0b8      	b.n	800581a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	dc4b      	bgt.n	8005748 <UART_SetConfig+0xbd0>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f2c0 8087 	blt.w	80057c4 <UART_SetConfig+0xc4c>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	f200 8084 	bhi.w	80057c4 <UART_SetConfig+0xc4c>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0xb4c>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	0800574f 	.word	0x0800574f
 80056c8:	08005757 	.word	0x08005757
 80056cc:	080057c5 	.word	0x080057c5
 80056d0:	080057c5 	.word	0x080057c5
 80056d4:	0800575f 	.word	0x0800575f
 80056d8:	080057c5 	.word	0x080057c5
 80056dc:	080057c5 	.word	0x080057c5
 80056e0:	080057c5 	.word	0x080057c5
 80056e4:	0800576f 	.word	0x0800576f
 80056e8:	080057c5 	.word	0x080057c5
 80056ec:	080057c5 	.word	0x080057c5
 80056f0:	080057c5 	.word	0x080057c5
 80056f4:	080057c5 	.word	0x080057c5
 80056f8:	080057c5 	.word	0x080057c5
 80056fc:	080057c5 	.word	0x080057c5
 8005700:	080057c5 	.word	0x080057c5
 8005704:	0800577f 	.word	0x0800577f
 8005708:	080057c5 	.word	0x080057c5
 800570c:	080057c5 	.word	0x080057c5
 8005710:	080057c5 	.word	0x080057c5
 8005714:	080057c5 	.word	0x080057c5
 8005718:	080057c5 	.word	0x080057c5
 800571c:	080057c5 	.word	0x080057c5
 8005720:	080057c5 	.word	0x080057c5
 8005724:	080057c5 	.word	0x080057c5
 8005728:	080057c5 	.word	0x080057c5
 800572c:	080057c5 	.word	0x080057c5
 8005730:	080057c5 	.word	0x080057c5
 8005734:	080057c5 	.word	0x080057c5
 8005738:	080057c5 	.word	0x080057c5
 800573c:	080057c5 	.word	0x080057c5
 8005740:	080057c5 	.word	0x080057c5
 8005744:	080057b7 	.word	0x080057b7
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d037      	beq.n	80057bc <UART_SetConfig+0xc44>
 800574c:	e03a      	b.n	80057c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574e:	f7fc fecf 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8005752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005754:	e03c      	b.n	80057d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005756:	f7fc fee1 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 800575a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800575c:	e038      	b.n	80057d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800575e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe f8c4 	bl	80038f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800576c:	e030      	b.n	80057d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800576e:	f107 0318 	add.w	r3, r7, #24
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fa10 	bl	8003b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800577c:	e028      	b.n	80057d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <UART_SetConfig+0xc2c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d012      	beq.n	80057b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <UART_SetConfig+0xc2c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	08db      	lsrs	r3, r3, #3
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <UART_SetConfig+0xc30>)
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800579c:	e018      	b.n	80057d0 <UART_SetConfig+0xc58>
 800579e:	bf00      	nop
 80057a0:	08005f18 	.word	0x08005f18
 80057a4:	58024400 	.word	0x58024400
 80057a8:	03d09000 	.word	0x03d09000
 80057ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80057b0:	4b24      	ldr	r3, [pc, #144]	; (8005844 <UART_SetConfig+0xccc>)
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b4:	e00c      	b.n	80057d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057b6:	4b24      	ldr	r3, [pc, #144]	; (8005848 <UART_SetConfig+0xcd0>)
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ba:	e009      	b.n	80057d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c2:	e005      	b.n	80057d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057ce:	bf00      	nop
    }

    if (pclk != 0U)
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d021      	beq.n	800581a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	4a1c      	ldr	r2, [pc, #112]	; (800584c <UART_SetConfig+0xcd4>)
 80057dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	441a      	add	r2, r3
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	2b0f      	cmp	r3, #15
 80057fe:	d909      	bls.n	8005814 <UART_SetConfig+0xc9c>
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005806:	d205      	bcs.n	8005814 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	b29a      	uxth	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	e002      	b.n	800581a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2201      	movs	r2, #1
 800581e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2201      	movs	r2, #1
 8005826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2200      	movs	r2, #0
 800582e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005836:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800583a:	4618      	mov	r0, r3
 800583c:	3748      	adds	r7, #72	; 0x48
 800583e:	46bd      	mov	sp, r7
 8005840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005844:	03d09000 	.word	0x03d09000
 8005848:	003d0900 	.word	0x003d0900
 800584c:	08005f18 	.word	0x08005f18

08005850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01a      	beq.n	8005966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594e:	d10a      	bne.n	8005966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	605a      	str	r2, [r3, #4]
  }
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b098      	sub	sp, #96	; 0x60
 8005998:	af02      	add	r7, sp, #8
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059a4:	f7fb fab8 	bl	8000f18 <HAL_GetTick>
 80059a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d12f      	bne.n	8005a18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c0:	2200      	movs	r2, #0
 80059c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f88e 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d022      	beq.n	8005a18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
 80059f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e6      	bne.n	80059d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e063      	b.n	8005ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d149      	bne.n	8005aba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f857 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d03c      	beq.n	8005aba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e6      	bne.n	8005a40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	69b9      	ldr	r1, [r7, #24]
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e012      	b.n	8005ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3758      	adds	r7, #88	; 0x58
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	e04f      	b.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d04b      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b02:	f7fb fa09 	bl	8000f18 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d302      	bcc.n	8005b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e04e      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d037      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	d034      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d031      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d110      	bne.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f839 	bl	8005bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2208      	movs	r2, #8
 8005b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e029      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b74:	d111      	bne.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f81f 	bl	8005bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e00f      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d0a0      	beq.n	8005afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b095      	sub	sp, #84	; 0x54
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bea:	643b      	str	r3, [r7, #64]	; 0x40
 8005bec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e6      	bne.n	8005bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <UART_EndRxTransfer+0xc8>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e5      	bne.n	8005bfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d118      	bne.n	8005c6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f023 0310 	bic.w	r3, r3, #16
 8005c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6979      	ldr	r1, [r7, #20]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	613b      	str	r3, [r7, #16]
   return(result);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e6      	bne.n	8005c3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c80:	bf00      	nop
 8005c82:	3754      	adds	r7, #84	; 0x54
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	effffffe 	.word	0xeffffffe

08005c90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e027      	b.n	8005cf6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2224      	movs	r2, #36	; 0x24
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e02d      	b.n	8005d76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2224      	movs	r2, #36	; 0x24
 8005d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f850 	bl	8005dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e02d      	b.n	8005df2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2224      	movs	r2, #36	; 0x24
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f812 	bl	8005dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d108      	bne.n	8005e1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e1c:	e031      	b.n	8005e82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e1e:	2310      	movs	r3, #16
 8005e20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e22:	2310      	movs	r3, #16
 8005e24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	0e5b      	lsrs	r3, r3, #25
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	0f5b      	lsrs	r3, r3, #29
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	7b3a      	ldrb	r2, [r7, #12]
 8005e4a:	4911      	ldr	r1, [pc, #68]	; (8005e90 <UARTEx_SetNbDataToProcess+0x94>)
 8005e4c:	5c8a      	ldrb	r2, [r1, r2]
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e52:	7b3a      	ldrb	r2, [r7, #12]
 8005e54:	490f      	ldr	r1, [pc, #60]	; (8005e94 <UARTEx_SetNbDataToProcess+0x98>)
 8005e56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	7b7a      	ldrb	r2, [r7, #13]
 8005e68:	4909      	ldr	r1, [pc, #36]	; (8005e90 <UARTEx_SetNbDataToProcess+0x94>)
 8005e6a:	5c8a      	ldrb	r2, [r1, r2]
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e70:	7b7a      	ldrb	r2, [r7, #13]
 8005e72:	4908      	ldr	r1, [pc, #32]	; (8005e94 <UARTEx_SetNbDataToProcess+0x98>)
 8005e74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e76:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	08005f30 	.word	0x08005f30
 8005e94:	08005f38 	.word	0x08005f38

08005e98 <__libc_init_array>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	4d0d      	ldr	r5, [pc, #52]	; (8005ed0 <__libc_init_array+0x38>)
 8005e9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ed4 <__libc_init_array+0x3c>)
 8005e9e:	1b64      	subs	r4, r4, r5
 8005ea0:	10a4      	asrs	r4, r4, #2
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	42a6      	cmp	r6, r4
 8005ea6:	d109      	bne.n	8005ebc <__libc_init_array+0x24>
 8005ea8:	4d0b      	ldr	r5, [pc, #44]	; (8005ed8 <__libc_init_array+0x40>)
 8005eaa:	4c0c      	ldr	r4, [pc, #48]	; (8005edc <__libc_init_array+0x44>)
 8005eac:	f000 f820 	bl	8005ef0 <_init>
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	42a6      	cmp	r6, r4
 8005eb8:	d105      	bne.n	8005ec6 <__libc_init_array+0x2e>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec0:	4798      	blx	r3
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__libc_init_array+0xc>
 8005ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eca:	4798      	blx	r3
 8005ecc:	3601      	adds	r6, #1
 8005ece:	e7f2      	b.n	8005eb6 <__libc_init_array+0x1e>
 8005ed0:	08005f48 	.word	0x08005f48
 8005ed4:	08005f48 	.word	0x08005f48
 8005ed8:	08005f48 	.word	0x08005f48
 8005edc:	08005f4c 	.word	0x08005f4c

08005ee0 <memset>:
 8005ee0:	4402      	add	r2, r0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d100      	bne.n	8005eea <memset+0xa>
 8005ee8:	4770      	bx	lr
 8005eea:	f803 1b01 	strb.w	r1, [r3], #1
 8005eee:	e7f9      	b.n	8005ee4 <memset+0x4>

08005ef0 <_init>:
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef2:	bf00      	nop
 8005ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef6:	bc08      	pop	{r3}
 8005ef8:	469e      	mov	lr, r3
 8005efa:	4770      	bx	lr

08005efc <_fini>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	bf00      	nop
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr
