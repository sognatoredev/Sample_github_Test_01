
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a60c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800a8bc  0800a8bc  0001a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab08  0800ab08  0001ab08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab10  0800ab10  0001ab10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800ab18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a88  24000074  0800ab8c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000afc  0800ab8c  00020afc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a1ee  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000306e  00000000  00000000  0003a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011f0  00000000  00000000  0003d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001098  00000000  00000000  0003e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000323bc  00000000  00000000  0003f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b217  00000000  00000000  00071944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014097a  00000000  00000000  0008cb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cd4d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004da0  00000000  00000000  001cd528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a8a4 	.word	0x0800a8a4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a8a4 	.word	0x0800a8a4

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <LED_Dimming>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
static void LED_Dimming (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
    if (dutycontrol_flag == 0x00)
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <LED_Dimming+0x74>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d116      	bne.n	80006de <LED_Dimming+0x3a>
    {
        if (TIM1_DutyControl_cnt > 20)
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <LED_Dimming+0x78>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b14      	cmp	r3, #20
 80006b6:	d907      	bls.n	80006c8 <LED_Dimming+0x24>
        {
            TIM1_DutyControl_cnt = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <LED_Dimming+0x78>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

            htim12.Instance->CCR1++;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <LED_Dimming+0x7c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c4:	3201      	adds	r2, #1
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (htim12.Instance->CCR1 >= htim12.Init.Period)
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <LED_Dimming+0x7c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <LED_Dimming+0x7c>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d31b      	bcc.n	800070e <LED_Dimming+0x6a>
        {
            dutycontrol_flag = 0x01;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <LED_Dimming+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]

            // sprintf(uart3_tx_buf, " TIM12 CCR1 : %d\r\n", );
            // HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
        }
    }
}
 80006dc:	e017      	b.n	800070e <LED_Dimming+0x6a>
    else if (dutycontrol_flag == 0x01)
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <LED_Dimming+0x74>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d113      	bne.n	800070e <LED_Dimming+0x6a>
        if (TIM1_DutyControl_cnt > 20)
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <LED_Dimming+0x78>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d907      	bls.n	80006fe <LED_Dimming+0x5a>
            TIM1_DutyControl_cnt = 0;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <LED_Dimming+0x78>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
            htim12.Instance->CCR1--;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <LED_Dimming+0x7c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fa:	3a01      	subs	r2, #1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
        if (htim12.Instance->CCR1 == 0)
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <LED_Dimming+0x7c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <LED_Dimming+0x6a>
            dutycontrol_flag = 0x00;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <LED_Dimming+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	24000ae5 	.word	0x24000ae5
 800071c:	240002d4 	.word	0x240002d4
 8000720:	24000178 	.word	0x24000178

08000724 <LED_Process>:

void LED_Process (void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    //if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
    if (TIM1_CNT >= 500) // 1ms period Timer2 Counter.
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <LED_Process+0x50>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000730:	d307      	bcc.n	8000742 <LED_Process+0x1e>
    {
        TIM1_CNT = 0;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <LED_Process+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]

        HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000738:	2101      	movs	r1, #1
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <LED_Process+0x54>)
 800073c:	f003 fd7b 	bl	8004236 <HAL_GPIO_TogglePin>
 8000740:	e013      	b.n	800076a <LED_Process+0x46>
        // HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
        //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    }
    else if (TIM2_CNT >= 10) // 100ms * 9 period Timer2 Counter.
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <LED_Process+0x58>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b09      	cmp	r3, #9
 8000748:	d907      	bls.n	800075a <LED_Process+0x36>
    {
        TIM2_CNT = 0;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <LED_Process+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000750:	2102      	movs	r1, #2
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LED_Process+0x5c>)
 8000754:	f003 fd6f 	bl	8004236 <HAL_GPIO_TogglePin>
 8000758:	e007      	b.n	800076a <LED_Process+0x46>
    }
    else if (TIM8_CNT >= 100000) // 10us * 99999 period Timer8 Counter.
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <LED_Process+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LED_Process+0x64>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d902      	bls.n	800076a <LED_Process+0x46>
    {
        TIM8_CNT = 0;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LED_Process+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
        //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    }

    LED_Dimming();
 800076a:	f7ff ff9b 	bl	80006a4 <LED_Dimming>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	240002d0 	.word	0x240002d0
 8000778:	58020400 	.word	0x58020400
 800077c:	240002d8 	.word	0x240002d8
 8000780:	58021000 	.word	0x58021000
 8000784:	240002dc 	.word	0x240002dc
 8000788:	0001869f 	.word	0x0001869f

0800078c <Button_Process>:
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
    }
}
#else
void Button_Process (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  if (userButton_state == 0x01)
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <Button_Process+0x3c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d114      	bne.n	80007c2 <Button_Process+0x36>
  {
    userButton_state = 0x00;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <Button_Process+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
    sprintf(uart3_tx_buf, " Button Interrupt callback. Input Count : %d\r\n", userButton_cnt);
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <Button_Process+0x40>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	490a      	ldr	r1, [pc, #40]	; (80007d0 <Button_Process+0x44>)
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <Button_Process+0x48>)
 80007a8:	f009 fc0e 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <Button_Process+0x48>)
 80007ae:	f7ff fd9f 	bl	80002f0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	4906      	ldr	r1, [pc, #24]	; (80007d4 <Button_Process+0x48>)
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <Button_Process+0x4c>)
 80007be:	f007 ff79 	bl	80086b4 <HAL_UART_Transmit>
  }
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24000ae4 	.word	0x24000ae4
 80007cc:	24000ae2 	.word	0x24000ae2
 80007d0:	0800a8bc 	.word	0x0800a8bc
 80007d4:	240006e0 	.word	0x240006e0
 80007d8:	240001c4 	.word	0x240001c4

080007dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_DMA_Init+0x3c>)
 80007e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_DMA_Init+0x3c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x3c>)
 80007f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	200b      	movs	r0, #11
 8000806:	f001 f99c 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800080a:	200b      	movs	r0, #11
 800080c:	f001 f9b3 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a81      	ldr	r2, [pc, #516]	; (8000a40 <MX_GPIO_Init+0x224>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000850:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a7a      	ldr	r2, [pc, #488]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a72      	ldr	r2, [pc, #456]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b6c      	ldr	r3, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x224>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a6b      	ldr	r2, [pc, #428]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b68      	ldr	r3, [pc, #416]	; (8000a40 <MX_GPIO_Init+0x224>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a63      	ldr	r2, [pc, #396]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a5c      	ldr	r2, [pc, #368]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a54      	ldr	r2, [pc, #336]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000904:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	4a4d      	ldr	r2, [pc, #308]	; (8000a40 <MX_GPIO_Init+0x224>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000914:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4846      	ldr	r0, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x228>)
 800092a:	f003 fc6b 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2101      	movs	r1, #1
 8000932:	4845      	ldr	r0, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x22c>)
 8000934:	f003 fc66 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4843      	ldr	r0, [pc, #268]	; (8000a4c <MX_GPIO_Init+0x230>)
 800093e:	f003 fc61 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	483d      	ldr	r0, [pc, #244]	; (8000a50 <MX_GPIO_Init+0x234>)
 800095a:	f003 faa3 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x228>)
 8000978:	f003 fa94 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	482d      	ldr	r0, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x22c>)
 8000994:	f003 fa86 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4829      	ldr	r0, [pc, #164]	; (8000a54 <MX_GPIO_Init+0x238>)
 80009ae:	f003 fa79 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_GPIO_Init+0x23c>)
 80009c8:	f003 fa6c 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009de:	230a      	movs	r3, #10
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <MX_GPIO_Init+0x23c>)
 80009ea:	f003 fa5b 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_GPIO_Init+0x23c>)
 8000a08:	f003 fa4c 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a24:	f003 fa3e 	bl	8003ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 f888 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f001 f89f 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58021400 	.word	0x58021400
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58021000 	.word	0x58021000
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58021800 	.word	0x58021800
 8000a58:	58020000 	.word	0x58020000

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f000 fede 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f83c 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f7ff fed8 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6c:	f7ff feb6 	bl	80007dc <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a70:	f000 fd9a 	bl	80015a8 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000a74:	f000 fa78 	bl	8000f68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a78:	f000 faca 	bl	8001010 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a7c:	f000 fb18 	bl	80010b0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000a80:	f000 fcaa 	bl	80013d8 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8000a84:	f000 fb68 	bl	8001158 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  BootMessagePrint();
 8000a88:	f000 fd96 	bl	80015b8 <BootMessagePrint>
  GetClockSourcePrint();
 8000a8c:	f000 fe10 	bl	80016b0 <GetClockSourcePrint>

  HAL_TIM_Base_Start_IT(&htim1);
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <main+0x6c>)
 8000a92:	f006 fa55 	bl	8006f40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <main+0x70>)
 8000a98:	f006 fa52 	bl	8006f40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <main+0x74>)
 8000a9e:	f006 fa4f 	bl	8006f40 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <main+0x78>)
 8000aa6:	f006 fb25 	bl	80070f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <main+0x78>)
 8000aae:	f006 fc2f 	bl	8007310 <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_DMA(&huart3, &uart3_rx_buf, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <main+0x7c>)
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <main+0x80>)
 8000ab8:	f007 fe8a 	bl	80087d0 <HAL_UART_Receive_DMA>
    // {
    //   htim12.Instance->CCR1 = i;
    //   //HAL_Delay(20);  // 
    // }

    LED_Process();
 8000abc:	f7ff fe32 	bl	8000724 <LED_Process>
    Button_Process();
 8000ac0:	f7ff fe64 	bl	800078c <Button_Process>
    LED_Process();
 8000ac4:	e7fa      	b.n	8000abc <main+0x60>
 8000ac6:	bf00      	nop
 8000ac8:	24000094 	.word	0x24000094
 8000acc:	240000e0 	.word	0x240000e0
 8000ad0:	2400012c 	.word	0x2400012c
 8000ad4:	24000178 	.word	0x24000178
 8000ad8:	240002e0 	.word	0x240002e0
 8000adc:	240001c4 	.word	0x240001c4

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09c      	sub	sp, #112	; 0x70
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	224c      	movs	r2, #76	; 0x4c
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f009 fa62 	bl	8009fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2220      	movs	r2, #32
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f009 fa5c 	bl	8009fb8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b00:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <SystemClock_Config+0xe4>)
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f003 fbc8 	bl	80042a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <SystemClock_Config+0xe8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <SystemClock_Config+0xe8>)
 8000b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <SystemClock_Config+0xe8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2c:	bf00      	nop
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SystemClock_Config+0xe8>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3a:	d1f8      	bne.n	8000b2e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b3c:	2321      	movs	r3, #33	; 0x21
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b46:	2301      	movs	r3, #1
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000b56:	2346      	movs	r3, #70	; 0x46
 8000b58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fbec 	bl	8004354 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b82:	f000 f823 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	233f      	movs	r3, #63	; 0x3f
 8000b88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2107      	movs	r1, #7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f004 f803 	bl	8004bb8 <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000bb8:	f000 f808 	bl	8000bcc <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3770      	adds	r7, #112	; 0x70
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58024800 	.word	0x58024800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_MspInit+0x30>)
 8000be0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x30>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	58024400 	.word	0x58024400

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1a:	f000 fe93 	bl	8001944 <HAL_Delay>
 8000c1e:	e7fa      	b.n	8000c16 <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 fe50 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA1_Stream0_IRQHandler+0x10>)
 8000c6e:	f001 fd97 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000258 	.word	0x24000258

08000c7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM1_UP_IRQHandler+0x10>)
 8000c82:	f006 fc9f 	bl	80075c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000094 	.word	0x24000094

08000c90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM2_IRQHandler+0x10>)
 8000c96:	f006 fc95 	bl	80075c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	240000e0 	.word	0x240000e0

08000ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cac:	f003 fadd 	bl	800426a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000cba:	f006 fc83 	bl	80075c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000cbe:	4803      	ldr	r0, [pc, #12]	; (8000ccc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000cc0:	f006 fc80 	bl	80075c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2400012c 	.word	0x2400012c
 8000ccc:	24000178 	.word	0x24000178

08000cd0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000cd6:	f006 fc75 	bl	80075c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2400012c 	.word	0x2400012c

08000ce4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10a      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        TIM1_CNT++;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cfe:	6013      	str	r3, [r2, #0]
        TIM1_DutyControl_cnt++;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d08:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
    {
        TIM8_CNT++;
    }
}
 8000d0a:	e014      	b.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x52>
    else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d14:	d105      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x3e>
        TIM2_CNT++;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	e009      	b.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x52>
    else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d104      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x52>
        TIM8_CNT++;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d34:	6013      	str	r3, [r2, #0]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40010000 	.word	0x40010000
 8000d48:	240002d0 	.word	0x240002d0
 8000d4c:	240002d4 	.word	0x240002d4
 8000d50:	240002d8 	.word	0x240002d8
 8000d54:	40010400 	.word	0x40010400
 8000d58:	240002dc 	.word	0x240002dc

08000d5c <HAL_GPIO_EXTI_Callback>:
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
    userButton_state = 0x01;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
    userButton_cnt++;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d76:	801a      	strh	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	24000ae4 	.word	0x24000ae4
 8000d88:	24000ae2 	.word	0x24000ae2

08000d8c <HAL_UARTEx_RxEventCallback>:
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <HAL_UARTEx_RxEventCallback+0x28>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d104      	bne.n	8000dac <HAL_UARTEx_RxEventCallback+0x20>
    {
        /* Process the received data */
        /* Size indicates the number of bytes received */

        /* Restart UART receive */
        HAL_UART_Receive_DMA(&huart3, &uart3_rx_buf, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x30>)
 8000da8:	f007 fd12 	bl	80087d0 <HAL_UART_Receive_DMA>
    }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40004800 	.word	0x40004800
 8000db8:	240002e0 	.word	0x240002e0
 8000dbc:	240001c4 	.word	0x240001c4

08000dc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_UART_RxCpltCallback+0x3c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10f      	bne.n	8000df2 <HAL_UART_RxCpltCallback+0x32>
    {
        /* Process the received data */
        /* Size indicates the number of bytes received */

        /* Restart UART receive */
        HAL_UART_Receive_DMA(&huart3, (uint8_t *) &uart3_rx_buf[++uart3_rx_index], 1);
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_UART_RxCpltCallback+0x40>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_UART_RxCpltCallback+0x40>)
 8000ddc:	801a      	strh	r2, [r3, #0]
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_UART_RxCpltCallback+0x40>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_UART_RxCpltCallback+0x44>)
 8000de6:	4413      	add	r3, r2
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_UART_RxCpltCallback+0x48>)
 8000dee:	f007 fcef 	bl	80087d0 <HAL_UART_Receive_DMA>
    }
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004800 	.word	0x40004800
 8000e00:	24000ae0 	.word	0x24000ae0
 8000e04:	240002e0 	.word	0x240002e0
 8000e08:	240001c4 	.word	0x240001c4

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f009 f892 	bl	8009f64 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	24100000 	.word	0x24100000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	24000090 	.word	0x24000090
 8000e74:	24000b00 	.word	0x24000b00

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <SystemInit+0xd0>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <SystemInit+0xd0>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <SystemInit+0xd4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 030f 	and.w	r3, r3, #15
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d807      	bhi.n	8000ea8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <SystemInit+0xd4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 030f 	bic.w	r3, r3, #15
 8000ea0:	4a2a      	ldr	r2, [pc, #168]	; (8000f4c <SystemInit+0xd4>)
 8000ea2:	f043 0303 	orr.w	r3, r3, #3
 8000ea6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <SystemInit+0xd8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <SystemInit+0xd8>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <SystemInit+0xd8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <SystemInit+0xd8>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4924      	ldr	r1, [pc, #144]	; (8000f50 <SystemInit+0xd8>)
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <SystemInit+0xdc>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <SystemInit+0xd4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <SystemInit+0xd4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 030f 	bic.w	r3, r3, #15
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <SystemInit+0xd4>)
 8000edc:	f043 0303 	orr.w	r3, r3, #3
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <SystemInit+0xd8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <SystemInit+0xd8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <SystemInit+0xd8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <SystemInit+0xd8>)
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <SystemInit+0xe0>)
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <SystemInit+0xd8>)
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <SystemInit+0xe4>)
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <SystemInit+0xd8>)
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <SystemInit+0xe8>)
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <SystemInit+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <SystemInit+0xd8>)
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <SystemInit+0xe8>)
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <SystemInit+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <SystemInit+0xd8>)
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <SystemInit+0xe8>)
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <SystemInit+0xd8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <SystemInit+0xd8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <SystemInit+0xd8>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <SystemInit+0xd8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <SystemInit+0xec>)
 8000f38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	52002000 	.word	0x52002000
 8000f50:	58024400 	.word	0x58024400
 8000f54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f58:	02020200 	.word	0x02020200
 8000f5c:	01ff0000 	.word	0x01ff0000
 8000f60:	01010280 	.word	0x01010280
 8000f64:	52004000 	.word	0x52004000

08000f68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f88:	4a20      	ldr	r2, [pc, #128]	; (800100c <MX_TIM1_Init+0xa4>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f8e:	f240 1217 	movw	r2, #279	; 0x117
 8000f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000f9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb4:	4814      	ldr	r0, [pc, #80]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fb6:	f005 ff6b 	bl	8006e90 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000fc0:	f7ff fe04 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000fd2:	f006 fd13 	bl	80079fc <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fdc:	f7ff fdf6 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_TIM1_Init+0xa0>)
 8000ff2:	f007 fa63 	bl	80084bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ffc:	f7ff fde6 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	24000094 	.word	0x24000094
 800100c:	40010000 	.word	0x40010000

08001010 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001034:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001038:	f240 1217 	movw	r2, #279	; 0x117
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001046:	4a19      	ldr	r2, [pc, #100]	; (80010ac <MX_TIM2_Init+0x9c>)
 8001048:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_TIM2_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001058:	f005 ff1a 	bl	8006e90 <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001062:	f7ff fdb3 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001074:	f006 fcc2 	bl	80079fc <HAL_TIM_ConfigClockSource>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800107e:	f7ff fda5 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001090:	f007 fa14 	bl	80084bc <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800109a:	f7ff fd97 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	240000e0 	.word	0x240000e0
 80010ac:	0001869f 	.word	0x0001869f

080010b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <MX_TIM8_Init+0xa4>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010d6:	f240 1217 	movw	r2, #279	; 0x117
 80010da:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010e4:	2209      	movs	r2, #9
 80010e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010fa:	4815      	ldr	r0, [pc, #84]	; (8001150 <MX_TIM8_Init+0xa0>)
 80010fc:	f005 fec8 	bl	8006e90 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001106:	f7ff fd61 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <MX_TIM8_Init+0xa0>)
 8001118:	f006 fc70 	bl	80079fc <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001122:	f7ff fd53 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_TIM8_Init+0xa0>)
 8001138:	f007 f9c0 	bl	80084bc <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001142:	f7ff fd43 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2400012c 	.word	0x2400012c
 8001154:	40010400 	.word	0x40010400

08001158 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	; 0x38
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <MX_TIM12_Init+0xe8>)
 800118c:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <MX_TIM12_Init+0xec>)
 800118e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 27999;
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <MX_TIM12_Init+0xe8>)
 8001192:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001196:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_TIM12_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_TIM12_Init+0xe8>)
 80011a0:	2263      	movs	r2, #99	; 0x63
 80011a2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_TIM12_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MX_TIM12_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80011b0:	4823      	ldr	r0, [pc, #140]	; (8001240 <MX_TIM12_Init+0xe8>)
 80011b2:	f005 fe6d 	bl	8006e90 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80011bc:	f7ff fd06 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	4619      	mov	r1, r3
 80011cc:	481c      	ldr	r0, [pc, #112]	; (8001240 <MX_TIM12_Init+0xe8>)
 80011ce:	f006 fc15 	bl	80079fc <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80011d8:	f7ff fcf8 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <MX_TIM12_Init+0xe8>)
 80011de:	f005 ff27 	bl	8007030 <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80011e8:	f7ff fcf0 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_TIM12_Init+0xe8>)
 80011fc:	f007 f95e 	bl	80084bc <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001206:	f7ff fce1 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120a:	2360      	movs	r3, #96	; 0x60
 800120c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_TIM12_Init+0xe8>)
 8001222:	f006 fad7 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 800122c:	f7ff fcce 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_TIM12_Init+0xe8>)
 8001232:	f000 f895 	bl	8001360 <HAL_TIM_MspPostInit>

}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000178 	.word	0x24000178
 8001244:	40001800 	.word	0x40001800

08001248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a3e      	ldr	r2, [pc, #248]	; (8001350 <HAL_TIM_Base_MspInit+0x108>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d117      	bne.n	800128a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 800125c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001260:	4a3c      	ldr	r2, [pc, #240]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800126a:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 800126c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2019      	movs	r0, #25
 800127e:	f000 fc60 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001282:	2019      	movs	r0, #25
 8001284:	f000 fc77 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001288:	e05d      	b.n	8001346 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001292:	d117      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 8001296:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800129a:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 80012a6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	201c      	movs	r0, #28
 80012b8:	f000 fc43 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012bc:	201c      	movs	r0, #28
 80012be:	f000 fc5a 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 80012c2:	e040      	b.n	8001346 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM8)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a23      	ldr	r2, [pc, #140]	; (8001358 <HAL_TIM_Base_MspInit+0x110>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d11f      	bne.n	800130e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 80012d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 80012e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	202b      	movs	r0, #43	; 0x2b
 80012f2:	f000 fc26 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80012f6:	202b      	movs	r0, #43	; 0x2b
 80012f8:	f000 fc3d 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	202c      	movs	r0, #44	; 0x2c
 8001302:	f000 fc1e 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001306:	202c      	movs	r0, #44	; 0x2c
 8001308:	f000 fc35 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 800130c:	e01b      	b.n	8001346 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM12)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_TIM_Base_MspInit+0x114>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d116      	bne.n	8001346 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 800131a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800131e:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_TIM_Base_MspInit+0x10c>)
 800132a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800132e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	202b      	movs	r0, #43	; 0x2b
 800133c:	f000 fc01 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001340:	202b      	movs	r0, #43	; 0x2b
 8001342:	f000 fc18 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010000 	.word	0x40010000
 8001354:	58024400 	.word	0x58024400
 8001358:	40010400 	.word	0x40010400
 800135c:	40001800 	.word	0x40001800

08001360 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_TIM_MspPostInit+0x6c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d11f      	bne.n	80013c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_TIM_MspPostInit+0x70>)
 8001384:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <HAL_TIM_MspPostInit+0x70>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_TIM_MspPostInit+0x70>)
 8001394:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_TIM_MspPostInit+0x74>)
 80013be:	f002 fd71 	bl	8003ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40001800 	.word	0x40001800
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020400 	.word	0x58020400

080013d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <MX_USART3_UART_Init+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_USART3_UART_Init+0x90>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_USART3_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_USART3_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001422:	f007 f8f7 	bl	8008614 <HAL_UART_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800142c:	f7ff fbce 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001430:	2100      	movs	r1, #0
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001434:	f008 fccc 	bl	8009dd0 <HAL_UARTEx_SetTxFifoThreshold>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800143e:	f7ff fbc5 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001446:	f008 fd01 	bl	8009e4c <HAL_UARTEx_SetRxFifoThreshold>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001450:	f7ff fbbc 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_USART3_UART_Init+0x90>)
 8001456:	f008 fc82 	bl	8009d5e <HAL_UARTEx_DisableFifoMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001460:	f7ff fbb4 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	240001c4 	.word	0x240001c4
 800146c:	40004800 	.word	0x40004800

08001470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ba      	sub	sp, #232	; 0xe8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	22c0      	movs	r2, #192	; 0xc0
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f008 fd91 	bl	8009fb8 <memset>
  if(uartHandle->Instance==USART3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a3e      	ldr	r2, [pc, #248]	; (8001594 <HAL_UART_MspInit+0x124>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d174      	bne.n	800158a <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014a0:	f04f 0202 	mov.w	r2, #2
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 ff0a 	bl	80052d0 <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014c2:	f7ff fb83 	bl	8000bcc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_UART_MspInit+0x128>)
 80014c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <HAL_UART_MspInit+0x128>)
 80014ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_UART_MspInit+0x128>)
 80014d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_UART_MspInit+0x128>)
 80014e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ea:	4a2b      	ldr	r2, [pc, #172]	; (8001598 <HAL_UART_MspInit+0x128>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_UART_MspInit+0x128>)
 80014f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800151c:	2307      	movs	r3, #7
 800151e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001522:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001526:	4619      	mov	r1, r3
 8001528:	481c      	ldr	r0, [pc, #112]	; (800159c <HAL_UART_MspInit+0x12c>)
 800152a:	f002 fcbb 	bl	8003ea4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0x134>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001536:	222d      	movs	r2, #45	; 0x2d
 8001538:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0x130>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0x130>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <HAL_UART_MspInit+0x130>)
 800156e:	f000 fb1d 	bl	8001bac <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001578:	f7ff fb28 	bl	8000bcc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_UART_MspInit+0x130>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800158a:	bf00      	nop
 800158c:	37e8      	adds	r7, #232	; 0xe8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40004800 	.word	0x40004800
 8001598:	58024400 	.word	0x58024400
 800159c:	58020c00 	.word	0x58020c00
 80015a0:	24000258 	.word	0x24000258
 80015a4:	40020010 	.word	0x40020010

080015a8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80015bc:	4930      	ldr	r1, [pc, #192]	; (8001680 <BootMessagePrint+0xc8>)
 80015be:	4831      	ldr	r0, [pc, #196]	; (8001684 <BootMessagePrint+0xcc>)
 80015c0:	f008 fd02 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80015c4:	482f      	ldr	r0, [pc, #188]	; (8001684 <BootMessagePrint+0xcc>)
 80015c6:	f7fe fe93 	bl	80002f0 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	492c      	ldr	r1, [pc, #176]	; (8001684 <BootMessagePrint+0xcc>)
 80015d4:	482c      	ldr	r0, [pc, #176]	; (8001688 <BootMessagePrint+0xd0>)
 80015d6:	f007 f86d 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 80015da:	4a2c      	ldr	r2, [pc, #176]	; (800168c <BootMessagePrint+0xd4>)
 80015dc:	492c      	ldr	r1, [pc, #176]	; (8001690 <BootMessagePrint+0xd8>)
 80015de:	4829      	ldr	r0, [pc, #164]	; (8001684 <BootMessagePrint+0xcc>)
 80015e0:	f008 fcf2 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80015e4:	4827      	ldr	r0, [pc, #156]	; (8001684 <BootMessagePrint+0xcc>)
 80015e6:	f7fe fe83 	bl	80002f0 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	4924      	ldr	r1, [pc, #144]	; (8001684 <BootMessagePrint+0xcc>)
 80015f4:	4824      	ldr	r0, [pc, #144]	; (8001688 <BootMessagePrint+0xd0>)
 80015f6:	f007 f85d 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 80015fa:	4a26      	ldr	r2, [pc, #152]	; (8001694 <BootMessagePrint+0xdc>)
 80015fc:	4926      	ldr	r1, [pc, #152]	; (8001698 <BootMessagePrint+0xe0>)
 80015fe:	4821      	ldr	r0, [pc, #132]	; (8001684 <BootMessagePrint+0xcc>)
 8001600:	f008 fce2 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001604:	481f      	ldr	r0, [pc, #124]	; (8001684 <BootMessagePrint+0xcc>)
 8001606:	f7fe fe73 	bl	80002f0 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	491c      	ldr	r1, [pc, #112]	; (8001684 <BootMessagePrint+0xcc>)
 8001614:	481c      	ldr	r0, [pc, #112]	; (8001688 <BootMessagePrint+0xd0>)
 8001616:	f007 f84d 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 800161a:	4a20      	ldr	r2, [pc, #128]	; (800169c <BootMessagePrint+0xe4>)
 800161c:	4920      	ldr	r1, [pc, #128]	; (80016a0 <BootMessagePrint+0xe8>)
 800161e:	4819      	ldr	r0, [pc, #100]	; (8001684 <BootMessagePrint+0xcc>)
 8001620:	f008 fcd2 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001624:	4817      	ldr	r0, [pc, #92]	; (8001684 <BootMessagePrint+0xcc>)
 8001626:	f7fe fe63 	bl	80002f0 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	4914      	ldr	r1, [pc, #80]	; (8001684 <BootMessagePrint+0xcc>)
 8001634:	4814      	ldr	r0, [pc, #80]	; (8001688 <BootMessagePrint+0xd0>)
 8001636:	f007 f83d 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <BootMessagePrint+0xec>)
 800163c:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <BootMessagePrint+0xf0>)
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <BootMessagePrint+0xf4>)
 8001640:	4810      	ldr	r0, [pc, #64]	; (8001684 <BootMessagePrint+0xcc>)
 8001642:	f008 fcc1 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <BootMessagePrint+0xcc>)
 8001648:	f7fe fe52 	bl	80002f0 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	490b      	ldr	r1, [pc, #44]	; (8001684 <BootMessagePrint+0xcc>)
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <BootMessagePrint+0xd0>)
 8001658:	f007 f82c 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800165c:	4908      	ldr	r1, [pc, #32]	; (8001680 <BootMessagePrint+0xc8>)
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <BootMessagePrint+0xcc>)
 8001660:	f008 fcb2 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <BootMessagePrint+0xcc>)
 8001666:	f7fe fe43 	bl	80002f0 <strlen>
 800166a:	4603      	mov	r3, r0
 800166c:	b29a      	uxth	r2, r3
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	4904      	ldr	r1, [pc, #16]	; (8001684 <BootMessagePrint+0xcc>)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <BootMessagePrint+0xd0>)
 8001676:	f007 f81d 	bl	80086b4 <HAL_UART_Transmit>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800a8ec 	.word	0x0800a8ec
 8001684:	240006e0 	.word	0x240006e0
 8001688:	240001c4 	.word	0x240001c4
 800168c:	0800a91c 	.word	0x0800a91c
 8001690:	0800a92c 	.word	0x0800a92c
 8001694:	0800a948 	.word	0x0800a948
 8001698:	0800a950 	.word	0x0800a950
 800169c:	0800a96c 	.word	0x0800a96c
 80016a0:	0800a980 	.word	0x0800a980
 80016a4:	0800a99c 	.word	0x0800a99c
 80016a8:	0800a9a8 	.word	0x0800a9a8
 80016ac:	0800a9b4 	.word	0x0800a9b4

080016b0 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80016b4:	493d      	ldr	r1, [pc, #244]	; (80017ac <GetClockSourcePrint+0xfc>)
 80016b6:	483e      	ldr	r0, [pc, #248]	; (80017b0 <GetClockSourcePrint+0x100>)
 80016b8:	f008 fc86 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80016bc:	483c      	ldr	r0, [pc, #240]	; (80017b0 <GetClockSourcePrint+0x100>)
 80016be:	f7fe fe17 	bl	80002f0 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	4939      	ldr	r1, [pc, #228]	; (80017b0 <GetClockSourcePrint+0x100>)
 80016cc:	4839      	ldr	r0, [pc, #228]	; (80017b4 <GetClockSourcePrint+0x104>)
 80016ce:	f006 fff1 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80016d2:	f003 fc27 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a37      	ldr	r2, [pc, #220]	; (80017b8 <GetClockSourcePrint+0x108>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0c9b      	lsrs	r3, r3, #18
 80016e0:	461a      	mov	r2, r3
 80016e2:	4936      	ldr	r1, [pc, #216]	; (80017bc <GetClockSourcePrint+0x10c>)
 80016e4:	4832      	ldr	r0, [pc, #200]	; (80017b0 <GetClockSourcePrint+0x100>)
 80016e6:	f008 fc6f 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80016ea:	4831      	ldr	r0, [pc, #196]	; (80017b0 <GetClockSourcePrint+0x100>)
 80016ec:	f7fe fe00 	bl	80002f0 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	492d      	ldr	r1, [pc, #180]	; (80017b0 <GetClockSourcePrint+0x100>)
 80016fa:	482e      	ldr	r0, [pc, #184]	; (80017b4 <GetClockSourcePrint+0x104>)
 80016fc:	f006 ffda 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001700:	f003 fd8a 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8001704:	4603      	mov	r3, r0
 8001706:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <GetClockSourcePrint+0x108>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0c9b      	lsrs	r3, r3, #18
 800170e:	461a      	mov	r2, r3
 8001710:	492b      	ldr	r1, [pc, #172]	; (80017c0 <GetClockSourcePrint+0x110>)
 8001712:	4827      	ldr	r0, [pc, #156]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001714:	f008 fc58 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001718:	4825      	ldr	r0, [pc, #148]	; (80017b0 <GetClockSourcePrint+0x100>)
 800171a:	f7fe fde9 	bl	80002f0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	4922      	ldr	r1, [pc, #136]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001728:	4822      	ldr	r0, [pc, #136]	; (80017b4 <GetClockSourcePrint+0x104>)
 800172a:	f006 ffc3 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 800172e:	f003 fda3 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 8001732:	4603      	mov	r3, r0
 8001734:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <GetClockSourcePrint+0x108>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	461a      	mov	r2, r3
 800173e:	4921      	ldr	r1, [pc, #132]	; (80017c4 <GetClockSourcePrint+0x114>)
 8001740:	481b      	ldr	r0, [pc, #108]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001742:	f008 fc41 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001746:	481a      	ldr	r0, [pc, #104]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001748:	f7fe fdd2 	bl	80002f0 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	4916      	ldr	r1, [pc, #88]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001756:	4817      	ldr	r0, [pc, #92]	; (80017b4 <GetClockSourcePrint+0x104>)
 8001758:	f006 ffac 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800175c:	f003 fda2 	bl	80052a4 <HAL_RCC_GetPCLK2Freq>
 8001760:	4603      	mov	r3, r0
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <GetClockSourcePrint+0x108>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	461a      	mov	r2, r3
 800176c:	4916      	ldr	r1, [pc, #88]	; (80017c8 <GetClockSourcePrint+0x118>)
 800176e:	4810      	ldr	r0, [pc, #64]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001770:	f008 fc2a 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001774:	480e      	ldr	r0, [pc, #56]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001776:	f7fe fdbb 	bl	80002f0 <strlen>
 800177a:	4603      	mov	r3, r0
 800177c:	b29a      	uxth	r2, r3
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	490b      	ldr	r1, [pc, #44]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <GetClockSourcePrint+0x104>)
 8001786:	f006 ff95 	bl	80086b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <GetClockSourcePrint+0xfc>)
 800178c:	4808      	ldr	r0, [pc, #32]	; (80017b0 <GetClockSourcePrint+0x100>)
 800178e:	f008 fc1b 	bl	8009fc8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <GetClockSourcePrint+0x100>)
 8001794:	f7fe fdac 	bl	80002f0 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	4903      	ldr	r1, [pc, #12]	; (80017b0 <GetClockSourcePrint+0x100>)
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <GetClockSourcePrint+0x104>)
 80017a4:	f006 ff86 	bl	80086b4 <HAL_UART_Transmit>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0800a8ec 	.word	0x0800a8ec
 80017b0:	240006e0 	.word	0x240006e0
 80017b4:	240001c4 	.word	0x240001c4
 80017b8:	431bde83 	.word	0x431bde83
 80017bc:	0800a9d4 	.word	0x0800a9d4
 80017c0:	0800aa04 	.word	0x0800aa04
 80017c4:	0800aa34 	.word	0x0800aa34
 80017c8:	0800aa64 	.word	0x0800aa64

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001804 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d0:	f7ff fb52 	bl	8000e78 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	; (800180c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	; (8001818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f008 fbb9 	bl	8009f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff f92d 	bl	8000a5c <main>
  bx  lr
 8001802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001804:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001808:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800180c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001810:	0800ab18 	.word	0x0800ab18
  ldr r2, =_sbss
 8001814:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001818:	24000afc 	.word	0x24000afc

0800181c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001826:	2003      	movs	r0, #3
 8001828:	f000 f980 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800182c:	f003 fb7a 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_Init+0x68>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	4913      	ldr	r1, [pc, #76]	; (800188c <HAL_Init+0x6c>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
 8001848:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_Init+0x68>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_Init+0x6c>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_Init+0x70>)
 8001862:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_Init+0x74>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f814 	bl	8001898 <HAL_InitTick>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e002      	b.n	8001880 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800187a:	f7ff f9ad 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	58024400 	.word	0x58024400
 800188c:	0800aa94 	.word	0x0800aa94
 8001890:	24000004 	.word	0x24000004
 8001894:	24000000 	.word	0x24000000

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_InitTick+0x60>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e021      	b.n	80018f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_InitTick+0x64>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_InitTick+0x60>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f965 	bl	8001b92 <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 f92f 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x68>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2400000c 	.word	0x2400000c
 80018fc:	24000000 	.word	0x24000000
 8001900:	24000008 	.word	0x24000008

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	2400000c 	.word	0x2400000c
 8001928:	24000ae8 	.word	0x24000ae8

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	24000ae8 	.word	0x24000ae8

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_Delay+0x44>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2400000c 	.word	0x2400000c

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <__NVIC_SetPriorityGrouping+0x40>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x40>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	05fa0000 	.word	0x05fa0000

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff40 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff90 	bl	8001a80 <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5f 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff33 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa4 	bl	8001ae8 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff feba 	bl	800192c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e37f      	b.n	80022c4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a66      	ldr	r2, [pc, #408]	; (8001d64 <HAL_DMA_Init+0x1b8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d04a      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_DMA_Init+0x1bc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d045      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a63      	ldr	r2, [pc, #396]	; (8001d6c <HAL_DMA_Init+0x1c0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d040      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a62      	ldr	r2, [pc, #392]	; (8001d70 <HAL_DMA_Init+0x1c4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d03b      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a60      	ldr	r2, [pc, #384]	; (8001d74 <HAL_DMA_Init+0x1c8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d036      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5f      	ldr	r2, [pc, #380]	; (8001d78 <HAL_DMA_Init+0x1cc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d031      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5d      	ldr	r2, [pc, #372]	; (8001d7c <HAL_DMA_Init+0x1d0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02c      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5c      	ldr	r2, [pc, #368]	; (8001d80 <HAL_DMA_Init+0x1d4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d027      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_DMA_Init+0x1d8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d022      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a59      	ldr	r2, [pc, #356]	; (8001d88 <HAL_DMA_Init+0x1dc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d01d      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <HAL_DMA_Init+0x1e0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <HAL_DMA_Init+0x1e4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a54      	ldr	r2, [pc, #336]	; (8001d94 <HAL_DMA_Init+0x1e8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <HAL_DMA_Init+0x1ec>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_DMA_Init+0x1f0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_Init+0xb8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <HAL_DMA_Init+0x1f4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_DMA_Init+0xbc>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_Init+0xbe>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 813c 	beq.w	8001ee8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a37      	ldr	r2, [pc, #220]	; (8001d64 <HAL_DMA_Init+0x1b8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d04a      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a36      	ldr	r2, [pc, #216]	; (8001d68 <HAL_DMA_Init+0x1bc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d045      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <HAL_DMA_Init+0x1c0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d040      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a33      	ldr	r2, [pc, #204]	; (8001d70 <HAL_DMA_Init+0x1c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d03b      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a31      	ldr	r2, [pc, #196]	; (8001d74 <HAL_DMA_Init+0x1c8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d036      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <HAL_DMA_Init+0x1cc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d031      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <HAL_DMA_Init+0x1d0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02c      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2d      	ldr	r2, [pc, #180]	; (8001d80 <HAL_DMA_Init+0x1d4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d027      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <HAL_DMA_Init+0x1d8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <HAL_DMA_Init+0x1dc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <HAL_DMA_Init+0x1e0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_DMA_Init+0x1e4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <HAL_DMA_Init+0x1e8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_DMA_Init+0x1ec>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a22      	ldr	r2, [pc, #136]	; (8001d9c <HAL_DMA_Init+0x1f0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Init+0x174>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <HAL_DMA_Init+0x1f4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <HAL_DMA_Init+0x186>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e007      	b.n	8001d42 <HAL_DMA_Init+0x196>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d42:	e02f      	b.n	8001da4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d44:	f7ff fdf2 	bl	800192c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d928      	bls.n	8001da4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2220      	movs	r2, #32
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e2af      	b.n	80022c4 <HAL_DMA_Init+0x718>
 8001d64:	40020010 	.word	0x40020010
 8001d68:	40020028 	.word	0x40020028
 8001d6c:	40020040 	.word	0x40020040
 8001d70:	40020058 	.word	0x40020058
 8001d74:	40020070 	.word	0x40020070
 8001d78:	40020088 	.word	0x40020088
 8001d7c:	400200a0 	.word	0x400200a0
 8001d80:	400200b8 	.word	0x400200b8
 8001d84:	40020410 	.word	0x40020410
 8001d88:	40020428 	.word	0x40020428
 8001d8c:	40020440 	.word	0x40020440
 8001d90:	40020458 	.word	0x40020458
 8001d94:	40020470 	.word	0x40020470
 8001d98:	40020488 	.word	0x40020488
 8001d9c:	400204a0 	.word	0x400204a0
 8001da0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1c8      	bne.n	8001d44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4b73      	ldr	r3, [pc, #460]	; (8001f8c <HAL_DMA_Init+0x3e0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d107      	bne.n	8001e08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4313      	orrs	r3, r2
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b28      	cmp	r3, #40	; 0x28
 8001e0e:	d903      	bls.n	8001e18 <HAL_DMA_Init+0x26c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b2e      	cmp	r3, #46	; 0x2e
 8001e16:	d91f      	bls.n	8001e58 <HAL_DMA_Init+0x2ac>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e1e:	d903      	bls.n	8001e28 <HAL_DMA_Init+0x27c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b42      	cmp	r3, #66	; 0x42
 8001e26:	d917      	bls.n	8001e58 <HAL_DMA_Init+0x2ac>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b46      	cmp	r3, #70	; 0x46
 8001e2e:	d903      	bls.n	8001e38 <HAL_DMA_Init+0x28c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b48      	cmp	r3, #72	; 0x48
 8001e36:	d90f      	bls.n	8001e58 <HAL_DMA_Init+0x2ac>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b4e      	cmp	r3, #78	; 0x4e
 8001e3e:	d903      	bls.n	8001e48 <HAL_DMA_Init+0x29c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b52      	cmp	r3, #82	; 0x52
 8001e46:	d907      	bls.n	8001e58 <HAL_DMA_Init+0x2ac>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b73      	cmp	r3, #115	; 0x73
 8001e4e:	d905      	bls.n	8001e5c <HAL_DMA_Init+0x2b0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b77      	cmp	r3, #119	; 0x77
 8001e56:	d801      	bhi.n	8001e5c <HAL_DMA_Init+0x2b0>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_DMA_Init+0x2b2>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e68:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f023 0307 	bic.w	r3, r3, #7
 8001e80:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d117      	bne.n	8001ec4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f001 fe72 	bl	8003b90 <DMA_CheckFifoParam>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e1ff      	b.n	80022c4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f001 fdad 	bl	8003a2c <DMA_CalcBaseAndBitshift>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	223f      	movs	r2, #63	; 0x3f
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	e0fe      	b.n	80020e6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_DMA_Init+0x3e4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d04a      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <HAL_DMA_Init+0x3e8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d045      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <HAL_DMA_Init+0x3ec>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d040      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <HAL_DMA_Init+0x3f0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d03b      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_DMA_Init+0x3f4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d036      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <HAL_DMA_Init+0x3f8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d031      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_DMA_Init+0x3fc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02c      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_DMA_Init+0x400>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d027      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_DMA_Init+0x404>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d022      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <HAL_DMA_Init+0x408>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d01d      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_DMA_Init+0x40c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d018      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_DMA_Init+0x410>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_DMA_Init+0x414>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00e      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <HAL_DMA_Init+0x418>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_DMA_Init+0x41c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_DMA_Init+0x3dc>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_DMA_Init+0x420>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d123      	bne.n	8001fd0 <HAL_DMA_Init+0x424>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e022      	b.n	8001fd2 <HAL_DMA_Init+0x426>
 8001f8c:	fe10803f 	.word	0xfe10803f
 8001f90:	48022c08 	.word	0x48022c08
 8001f94:	48022c1c 	.word	0x48022c1c
 8001f98:	48022c30 	.word	0x48022c30
 8001f9c:	48022c44 	.word	0x48022c44
 8001fa0:	48022c58 	.word	0x48022c58
 8001fa4:	48022c6c 	.word	0x48022c6c
 8001fa8:	48022c80 	.word	0x48022c80
 8001fac:	48022c94 	.word	0x48022c94
 8001fb0:	58025408 	.word	0x58025408
 8001fb4:	5802541c 	.word	0x5802541c
 8001fb8:	58025430 	.word	0x58025430
 8001fbc:	58025444 	.word	0x58025444
 8001fc0:	58025458 	.word	0x58025458
 8001fc4:	5802546c 	.word	0x5802546c
 8001fc8:	58025480 	.word	0x58025480
 8001fcc:	58025494 	.word	0x58025494
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d07e      	beq.n	80020d4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a80      	ldr	r2, [pc, #512]	; (80021dc <HAL_DMA_Init+0x630>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d021      	beq.n	8002024 <HAL_DMA_Init+0x478>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_DMA_Init+0x634>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01c      	beq.n	8002024 <HAL_DMA_Init+0x478>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7d      	ldr	r2, [pc, #500]	; (80021e4 <HAL_DMA_Init+0x638>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d017      	beq.n	8002024 <HAL_DMA_Init+0x478>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7b      	ldr	r2, [pc, #492]	; (80021e8 <HAL_DMA_Init+0x63c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d012      	beq.n	8002024 <HAL_DMA_Init+0x478>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7a      	ldr	r2, [pc, #488]	; (80021ec <HAL_DMA_Init+0x640>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <HAL_DMA_Init+0x478>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a78      	ldr	r2, [pc, #480]	; (80021f0 <HAL_DMA_Init+0x644>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d008      	beq.n	8002024 <HAL_DMA_Init+0x478>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a77      	ldr	r2, [pc, #476]	; (80021f4 <HAL_DMA_Init+0x648>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <HAL_DMA_Init+0x478>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_DMA_Init+0x64c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <HAL_DMA_Init+0x650>)
 8002042:	4013      	ands	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d008      	beq.n	8002060 <HAL_DMA_Init+0x4b4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d102      	bne.n	800205c <HAL_DMA_Init+0x4b0>
 8002056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800205a:	e002      	b.n	8002062 <HAL_DMA_Init+0x4b6>
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_DMA_Init+0x4b6>
 8002060:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002068:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002078:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002080:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002088:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002090:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b56      	ldr	r3, [pc, #344]	; (8002200 <HAL_DMA_Init+0x654>)
 80020a8:	4413      	add	r3, r2
 80020aa:	4a56      	ldr	r2, [pc, #344]	; (8002204 <HAL_DMA_Init+0x658>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	009a      	lsls	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f001 fcb7 	bl	8003a2c <DMA_CalcBaseAndBitshift>
 80020be:	4603      	mov	r3, r0
 80020c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2201      	movs	r2, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e008      	b.n	80020e6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2203      	movs	r2, #3
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0ee      	b.n	80022c4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_DMA_Init+0x65c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d072      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a45      	ldr	r2, [pc, #276]	; (800220c <HAL_DMA_Init+0x660>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d06d      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_DMA_Init+0x664>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d068      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a42      	ldr	r2, [pc, #264]	; (8002214 <HAL_DMA_Init+0x668>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d063      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a41      	ldr	r2, [pc, #260]	; (8002218 <HAL_DMA_Init+0x66c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d05e      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_DMA_Init+0x670>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d059      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3e      	ldr	r2, [pc, #248]	; (8002220 <HAL_DMA_Init+0x674>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d054      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_DMA_Init+0x678>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d04f      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_DMA_Init+0x67c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d04a      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a39      	ldr	r2, [pc, #228]	; (800222c <HAL_DMA_Init+0x680>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d045      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_DMA_Init+0x684>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d040      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <HAL_DMA_Init+0x688>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d03b      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a35      	ldr	r2, [pc, #212]	; (8002238 <HAL_DMA_Init+0x68c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d036      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a33      	ldr	r2, [pc, #204]	; (800223c <HAL_DMA_Init+0x690>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a32      	ldr	r2, [pc, #200]	; (8002240 <HAL_DMA_Init+0x694>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d02c      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a30      	ldr	r2, [pc, #192]	; (8002244 <HAL_DMA_Init+0x698>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d027      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_DMA_Init+0x630>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <HAL_DMA_Init+0x634>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_DMA_Init+0x638>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_DMA_Init+0x63c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_DMA_Init+0x640>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_DMA_Init+0x644>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_DMA_Init+0x648>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_Init+0x62a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_DMA_Init+0x64c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d138      	bne.n	8002248 <HAL_DMA_Init+0x69c>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e037      	b.n	800224a <HAL_DMA_Init+0x69e>
 80021da:	bf00      	nop
 80021dc:	58025408 	.word	0x58025408
 80021e0:	5802541c 	.word	0x5802541c
 80021e4:	58025430 	.word	0x58025430
 80021e8:	58025444 	.word	0x58025444
 80021ec:	58025458 	.word	0x58025458
 80021f0:	5802546c 	.word	0x5802546c
 80021f4:	58025480 	.word	0x58025480
 80021f8:	58025494 	.word	0x58025494
 80021fc:	fffe000f 	.word	0xfffe000f
 8002200:	a7fdabf8 	.word	0xa7fdabf8
 8002204:	cccccccd 	.word	0xcccccccd
 8002208:	40020010 	.word	0x40020010
 800220c:	40020028 	.word	0x40020028
 8002210:	40020040 	.word	0x40020040
 8002214:	40020058 	.word	0x40020058
 8002218:	40020070 	.word	0x40020070
 800221c:	40020088 	.word	0x40020088
 8002220:	400200a0 	.word	0x400200a0
 8002224:	400200b8 	.word	0x400200b8
 8002228:	40020410 	.word	0x40020410
 800222c:	40020428 	.word	0x40020428
 8002230:	40020440 	.word	0x40020440
 8002234:	40020458 	.word	0x40020458
 8002238:	40020470 	.word	0x40020470
 800223c:	40020488 	.word	0x40020488
 8002240:	400204a0 	.word	0x400204a0
 8002244:	400204b8 	.word	0x400204b8
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d032      	beq.n	80022b4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f001 fd1a 	bl	8003c88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b80      	cmp	r3, #128	; 0x80
 800225a:	d102      	bne.n	8002262 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002276:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_DMA_Init+0x6f6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d80c      	bhi.n	80022a2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 fd97 	bl	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	e008      	b.n	80022b4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e226      	b.n	8002736 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_DMA_Start_IT+0x2a>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e21f      	b.n	8002736 <HAL_DMA_Start_IT+0x46a>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 820a 	bne.w	8002720 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a68      	ldr	r2, [pc, #416]	; (80024c0 <HAL_DMA_Start_IT+0x1f4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d04a      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a66      	ldr	r2, [pc, #408]	; (80024c4 <HAL_DMA_Start_IT+0x1f8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d045      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a65      	ldr	r2, [pc, #404]	; (80024c8 <HAL_DMA_Start_IT+0x1fc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d040      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a63      	ldr	r2, [pc, #396]	; (80024cc <HAL_DMA_Start_IT+0x200>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d03b      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a62      	ldr	r2, [pc, #392]	; (80024d0 <HAL_DMA_Start_IT+0x204>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d036      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a60      	ldr	r2, [pc, #384]	; (80024d4 <HAL_DMA_Start_IT+0x208>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d031      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5f      	ldr	r2, [pc, #380]	; (80024d8 <HAL_DMA_Start_IT+0x20c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d02c      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_DMA_Start_IT+0x210>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d027      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a5c      	ldr	r2, [pc, #368]	; (80024e0 <HAL_DMA_Start_IT+0x214>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d022      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_DMA_Start_IT+0x218>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01d      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a59      	ldr	r2, [pc, #356]	; (80024e8 <HAL_DMA_Start_IT+0x21c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d018      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a57      	ldr	r2, [pc, #348]	; (80024ec <HAL_DMA_Start_IT+0x220>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_DMA_Start_IT+0x224>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00e      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a54      	ldr	r2, [pc, #336]	; (80024f4 <HAL_DMA_Start_IT+0x228>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a53      	ldr	r2, [pc, #332]	; (80024f8 <HAL_DMA_Start_IT+0x22c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_DMA_Start_IT+0xee>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a51      	ldr	r2, [pc, #324]	; (80024fc <HAL_DMA_Start_IT+0x230>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <HAL_DMA_Start_IT+0x100>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e007      	b.n	80023dc <HAL_DMA_Start_IT+0x110>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f001 f93e 	bl	8003664 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <HAL_DMA_Start_IT+0x1f4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d04a      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_DMA_Start_IT+0x1f8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d045      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a31      	ldr	r2, [pc, #196]	; (80024c8 <HAL_DMA_Start_IT+0x1fc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d040      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a30      	ldr	r2, [pc, #192]	; (80024cc <HAL_DMA_Start_IT+0x200>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d03b      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2e      	ldr	r2, [pc, #184]	; (80024d0 <HAL_DMA_Start_IT+0x204>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d036      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_DMA_Start_IT+0x208>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d031      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2b      	ldr	r2, [pc, #172]	; (80024d8 <HAL_DMA_Start_IT+0x20c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d02c      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <HAL_DMA_Start_IT+0x210>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d027      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <HAL_DMA_Start_IT+0x214>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d022      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_DMA_Start_IT+0x218>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d01d      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <HAL_DMA_Start_IT+0x21c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d018      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_DMA_Start_IT+0x220>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_DMA_Start_IT+0x224>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00e      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <HAL_DMA_Start_IT+0x228>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <HAL_DMA_Start_IT+0x22c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_DMA_Start_IT+0x1bc>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_DMA_Start_IT+0x230>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_DMA_Start_IT+0x1c0>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_DMA_Start_IT+0x1c2>
 800248c:	2300      	movs	r3, #0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d036      	beq.n	8002500 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 021e 	bic.w	r2, r3, #30
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0216 	orr.w	r2, r2, #22
 80024a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03e      	beq.n	800252c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0208 	orr.w	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e035      	b.n	800252c <HAL_DMA_Start_IT+0x260>
 80024c0:	40020010 	.word	0x40020010
 80024c4:	40020028 	.word	0x40020028
 80024c8:	40020040 	.word	0x40020040
 80024cc:	40020058 	.word	0x40020058
 80024d0:	40020070 	.word	0x40020070
 80024d4:	40020088 	.word	0x40020088
 80024d8:	400200a0 	.word	0x400200a0
 80024dc:	400200b8 	.word	0x400200b8
 80024e0:	40020410 	.word	0x40020410
 80024e4:	40020428 	.word	0x40020428
 80024e8:	40020440 	.word	0x40020440
 80024ec:	40020458 	.word	0x40020458
 80024f0:	40020470 	.word	0x40020470
 80024f4:	40020488 	.word	0x40020488
 80024f8:	400204a0 	.word	0x400204a0
 80024fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 020e 	bic.w	r2, r3, #14
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 020a 	orr.w	r2, r2, #10
 8002512:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0204 	orr.w	r2, r2, #4
 800252a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a83      	ldr	r2, [pc, #524]	; (8002740 <HAL_DMA_Start_IT+0x474>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d072      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a82      	ldr	r2, [pc, #520]	; (8002744 <HAL_DMA_Start_IT+0x478>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d06d      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a80      	ldr	r2, [pc, #512]	; (8002748 <HAL_DMA_Start_IT+0x47c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d068      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7f      	ldr	r2, [pc, #508]	; (800274c <HAL_DMA_Start_IT+0x480>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d063      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7d      	ldr	r2, [pc, #500]	; (8002750 <HAL_DMA_Start_IT+0x484>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d05e      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <HAL_DMA_Start_IT+0x488>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d059      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_DMA_Start_IT+0x48c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d054      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a79      	ldr	r2, [pc, #484]	; (800275c <HAL_DMA_Start_IT+0x490>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d04f      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a77      	ldr	r2, [pc, #476]	; (8002760 <HAL_DMA_Start_IT+0x494>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d04a      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a76      	ldr	r2, [pc, #472]	; (8002764 <HAL_DMA_Start_IT+0x498>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d045      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a74      	ldr	r2, [pc, #464]	; (8002768 <HAL_DMA_Start_IT+0x49c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d040      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a73      	ldr	r2, [pc, #460]	; (800276c <HAL_DMA_Start_IT+0x4a0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d03b      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a71      	ldr	r2, [pc, #452]	; (8002770 <HAL_DMA_Start_IT+0x4a4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d036      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a70      	ldr	r2, [pc, #448]	; (8002774 <HAL_DMA_Start_IT+0x4a8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d031      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_DMA_Start_IT+0x4ac>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02c      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6d      	ldr	r2, [pc, #436]	; (800277c <HAL_DMA_Start_IT+0x4b0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d027      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a6b      	ldr	r2, [pc, #428]	; (8002780 <HAL_DMA_Start_IT+0x4b4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d022      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_DMA_Start_IT+0x4b8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d01d      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a68      	ldr	r2, [pc, #416]	; (8002788 <HAL_DMA_Start_IT+0x4bc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d018      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a67      	ldr	r2, [pc, #412]	; (800278c <HAL_DMA_Start_IT+0x4c0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_DMA_Start_IT+0x4c4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a64      	ldr	r2, [pc, #400]	; (8002794 <HAL_DMA_Start_IT+0x4c8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a62      	ldr	r2, [pc, #392]	; (8002798 <HAL_DMA_Start_IT+0x4cc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Start_IT+0x350>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a61      	ldr	r2, [pc, #388]	; (800279c <HAL_DMA_Start_IT+0x4d0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_DMA_Start_IT+0x354>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_DMA_Start_IT+0x356>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01a      	beq.n	800265c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002642:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a37      	ldr	r2, [pc, #220]	; (8002740 <HAL_DMA_Start_IT+0x474>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d04a      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a36      	ldr	r2, [pc, #216]	; (8002744 <HAL_DMA_Start_IT+0x478>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d045      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a34      	ldr	r2, [pc, #208]	; (8002748 <HAL_DMA_Start_IT+0x47c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d040      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a33      	ldr	r2, [pc, #204]	; (800274c <HAL_DMA_Start_IT+0x480>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d03b      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_DMA_Start_IT+0x484>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d036      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a30      	ldr	r2, [pc, #192]	; (8002754 <HAL_DMA_Start_IT+0x488>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d031      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2e      	ldr	r2, [pc, #184]	; (8002758 <HAL_DMA_Start_IT+0x48c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02c      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2d      	ldr	r2, [pc, #180]	; (800275c <HAL_DMA_Start_IT+0x490>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d027      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <HAL_DMA_Start_IT+0x494>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d022      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <HAL_DMA_Start_IT+0x498>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d01d      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a28      	ldr	r2, [pc, #160]	; (8002768 <HAL_DMA_Start_IT+0x49c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d018      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_DMA_Start_IT+0x4a0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <HAL_DMA_Start_IT+0x4a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a24      	ldr	r2, [pc, #144]	; (8002774 <HAL_DMA_Start_IT+0x4a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_DMA_Start_IT+0x4ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Start_IT+0x430>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_DMA_Start_IT+0x4b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d108      	bne.n	800270e <HAL_DMA_Start_IT+0x442>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e012      	b.n	8002734 <HAL_DMA_Start_IT+0x468>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e009      	b.n	8002734 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002726:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40020010 	.word	0x40020010
 8002744:	40020028 	.word	0x40020028
 8002748:	40020040 	.word	0x40020040
 800274c:	40020058 	.word	0x40020058
 8002750:	40020070 	.word	0x40020070
 8002754:	40020088 	.word	0x40020088
 8002758:	400200a0 	.word	0x400200a0
 800275c:	400200b8 	.word	0x400200b8
 8002760:	40020410 	.word	0x40020410
 8002764:	40020428 	.word	0x40020428
 8002768:	40020440 	.word	0x40020440
 800276c:	40020458 	.word	0x40020458
 8002770:	40020470 	.word	0x40020470
 8002774:	40020488 	.word	0x40020488
 8002778:	400204a0 	.word	0x400204a0
 800277c:	400204b8 	.word	0x400204b8
 8002780:	58025408 	.word	0x58025408
 8002784:	5802541c 	.word	0x5802541c
 8002788:	58025430 	.word	0x58025430
 800278c:	58025444 	.word	0x58025444
 8002790:	58025458 	.word	0x58025458
 8002794:	5802546c 	.word	0x5802546c
 8002798:	58025480 	.word	0x58025480
 800279c:	58025494 	.word	0x58025494

080027a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ac:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_DMA_IRQHandler+0x1ac>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a67      	ldr	r2, [pc, #412]	; (8002950 <HAL_DMA_IRQHandler+0x1b0>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5f      	ldr	r2, [pc, #380]	; (8002954 <HAL_DMA_IRQHandler+0x1b4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04a      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_DMA_IRQHandler+0x1b8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d045      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5c      	ldr	r2, [pc, #368]	; (800295c <HAL_DMA_IRQHandler+0x1bc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d040      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_DMA_IRQHandler+0x1c0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d03b      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a59      	ldr	r2, [pc, #356]	; (8002964 <HAL_DMA_IRQHandler+0x1c4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d036      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_DMA_IRQHandler+0x1c8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_DMA_IRQHandler+0x1cc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d02c      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_DMA_IRQHandler+0x1d0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d027      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_DMA_IRQHandler+0x1d4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d022      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_DMA_IRQHandler+0x1d8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_DMA_IRQHandler+0x1dc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_DMA_IRQHandler+0x1e0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_DMA_IRQHandler+0x1e4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_DMA_IRQHandler+0x1e8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_DMA_IRQHandler+0x1ec>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a48      	ldr	r2, [pc, #288]	; (8002990 <HAL_DMA_IRQHandler+0x1f0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_DMA_IRQHandler+0xd6>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_DMA_IRQHandler+0xd8>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 842b 	beq.w	80030d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2208      	movs	r2, #8
 8002888:	409a      	lsls	r2, r3
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a2 	beq.w	80029d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2e      	ldr	r2, [pc, #184]	; (8002954 <HAL_DMA_IRQHandler+0x1b4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d04a      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <HAL_DMA_IRQHandler+0x1b8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d045      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_DMA_IRQHandler+0x1bc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d040      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <HAL_DMA_IRQHandler+0x1c0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d03b      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a28      	ldr	r2, [pc, #160]	; (8002964 <HAL_DMA_IRQHandler+0x1c4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d036      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a27      	ldr	r2, [pc, #156]	; (8002968 <HAL_DMA_IRQHandler+0x1c8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d031      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a25      	ldr	r2, [pc, #148]	; (800296c <HAL_DMA_IRQHandler+0x1cc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a24      	ldr	r2, [pc, #144]	; (8002970 <HAL_DMA_IRQHandler+0x1d0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d027      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <HAL_DMA_IRQHandler+0x1d4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d022      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a21      	ldr	r2, [pc, #132]	; (8002978 <HAL_DMA_IRQHandler+0x1d8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01d      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1f      	ldr	r2, [pc, #124]	; (800297c <HAL_DMA_IRQHandler+0x1dc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d018      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_DMA_IRQHandler+0x1e0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <HAL_DMA_IRQHandler+0x1e4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00e      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_DMA_IRQHandler+0x1e8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <HAL_DMA_IRQHandler+0x1ec>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_DMA_IRQHandler+0x1f0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d12f      	bne.n	8002994 <HAL_DMA_IRQHandler+0x1f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	e02e      	b.n	80029a8 <HAL_DMA_IRQHandler+0x208>
 800294a:	bf00      	nop
 800294c:	24000000 	.word	0x24000000
 8002950:	1b4e81b5 	.word	0x1b4e81b5
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0204 	bic.w	r2, r2, #4
 80029ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2208      	movs	r2, #8
 80029c6:	409a      	lsls	r2, r3
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d06e      	beq.n	8002acc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_DMA_IRQHandler+0x3f8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04a      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a67      	ldr	r2, [pc, #412]	; (8002b9c <HAL_DMA_IRQHandler+0x3fc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d045      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_DMA_IRQHandler+0x400>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d040      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a64      	ldr	r2, [pc, #400]	; (8002ba4 <HAL_DMA_IRQHandler+0x404>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d03b      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_DMA_IRQHandler+0x408>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d036      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a61      	ldr	r2, [pc, #388]	; (8002bac <HAL_DMA_IRQHandler+0x40c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d031      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a60      	ldr	r2, [pc, #384]	; (8002bb0 <HAL_DMA_IRQHandler+0x410>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d02c      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5e      	ldr	r2, [pc, #376]	; (8002bb4 <HAL_DMA_IRQHandler+0x414>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d027      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <HAL_DMA_IRQHandler+0x418>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_DMA_IRQHandler+0x41c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5a      	ldr	r2, [pc, #360]	; (8002bc0 <HAL_DMA_IRQHandler+0x420>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d018      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a58      	ldr	r2, [pc, #352]	; (8002bc4 <HAL_DMA_IRQHandler+0x424>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a57      	ldr	r2, [pc, #348]	; (8002bc8 <HAL_DMA_IRQHandler+0x428>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a55      	ldr	r2, [pc, #340]	; (8002bcc <HAL_DMA_IRQHandler+0x42c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a54      	ldr	r2, [pc, #336]	; (8002bd0 <HAL_DMA_IRQHandler+0x430>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_DMA_IRQHandler+0x434>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x304>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e003      	b.n	8002aac <HAL_DMA_IRQHandler+0x30c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2201      	movs	r2, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0202 	orr.w	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 808f 	beq.w	8002c00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <HAL_DMA_IRQHandler+0x3f8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04a      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <HAL_DMA_IRQHandler+0x3fc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d045      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <HAL_DMA_IRQHandler+0x400>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d040      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <HAL_DMA_IRQHandler+0x404>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_DMA_IRQHandler+0x408>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d036      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_DMA_IRQHandler+0x40c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <HAL_DMA_IRQHandler+0x410>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02c      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <HAL_DMA_IRQHandler+0x414>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d027      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <HAL_DMA_IRQHandler+0x418>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_DMA_IRQHandler+0x41c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_DMA_IRQHandler+0x420>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_DMA_IRQHandler+0x424>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_DMA_IRQHandler+0x428>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <HAL_DMA_IRQHandler+0x42c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <HAL_DMA_IRQHandler+0x430>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <HAL_DMA_IRQHandler+0x434>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12a      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x438>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e023      	b.n	8002be0 <HAL_DMA_IRQHandler+0x440>
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2210      	movs	r2, #16
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a6 	beq.w	8002d62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a85      	ldr	r2, [pc, #532]	; (8002e30 <HAL_DMA_IRQHandler+0x690>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a83      	ldr	r2, [pc, #524]	; (8002e34 <HAL_DMA_IRQHandler+0x694>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a82      	ldr	r2, [pc, #520]	; (8002e38 <HAL_DMA_IRQHandler+0x698>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a80      	ldr	r2, [pc, #512]	; (8002e3c <HAL_DMA_IRQHandler+0x69c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7f      	ldr	r2, [pc, #508]	; (8002e40 <HAL_DMA_IRQHandler+0x6a0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7d      	ldr	r2, [pc, #500]	; (8002e44 <HAL_DMA_IRQHandler+0x6a4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7c      	ldr	r2, [pc, #496]	; (8002e48 <HAL_DMA_IRQHandler+0x6a8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7a      	ldr	r2, [pc, #488]	; (8002e4c <HAL_DMA_IRQHandler+0x6ac>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a79      	ldr	r2, [pc, #484]	; (8002e50 <HAL_DMA_IRQHandler+0x6b0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a77      	ldr	r2, [pc, #476]	; (8002e54 <HAL_DMA_IRQHandler+0x6b4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a76      	ldr	r2, [pc, #472]	; (8002e58 <HAL_DMA_IRQHandler+0x6b8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a74      	ldr	r2, [pc, #464]	; (8002e5c <HAL_DMA_IRQHandler+0x6bc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a73      	ldr	r2, [pc, #460]	; (8002e60 <HAL_DMA_IRQHandler+0x6c0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a71      	ldr	r2, [pc, #452]	; (8002e64 <HAL_DMA_IRQHandler+0x6c4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a70      	ldr	r2, [pc, #448]	; (8002e68 <HAL_DMA_IRQHandler+0x6c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_DMA_IRQHandler+0x6cc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10a      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x52c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e009      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x540>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d03e      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2210      	movs	r2, #16
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d108      	bne.n	8002d22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d024      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e01f      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01b      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	e016      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0208 	bic.w	r2, r2, #8
 8002d50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8110 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <HAL_DMA_IRQHandler+0x690>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04a      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <HAL_DMA_IRQHandler+0x694>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d045      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <HAL_DMA_IRQHandler+0x698>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d040      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a28      	ldr	r2, [pc, #160]	; (8002e3c <HAL_DMA_IRQHandler+0x69c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d03b      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <HAL_DMA_IRQHandler+0x6a0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d036      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <HAL_DMA_IRQHandler+0x6a4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d031      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_DMA_IRQHandler+0x6a8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <HAL_DMA_IRQHandler+0x6ac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d027      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <HAL_DMA_IRQHandler+0x6b0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <HAL_DMA_IRQHandler+0x6b4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01d      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_DMA_IRQHandler+0x6b8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <HAL_DMA_IRQHandler+0x6bc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_DMA_IRQHandler+0x6c0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_DMA_IRQHandler+0x6c4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_DMA_IRQHandler+0x6c8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_DMA_IRQHandler+0x6cc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d12b      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x6d0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e02a      	b.n	8002e84 <HAL_DMA_IRQHandler+0x6e4>
 8002e2e:	bf00      	nop
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8087 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2220      	movs	r2, #32
 8002e94:	409a      	lsls	r2, r3
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d139      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0216 	bic.w	r2, r2, #22
 8002eb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_DMA_IRQHandler+0x736>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0208 	bic.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	223f      	movs	r2, #63	; 0x3f
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8382 	beq.w	8003614 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
          }
          return;
 8002f18:	e37c      	b.n	8003614 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d018      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02c      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
 8002f46:	e027      	b.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e01e      	b.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 833e 	beq.w	800361e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8088 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a89      	ldr	r2, [pc, #548]	; (80031e4 <HAL_DMA_IRQHandler+0xa44>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a88      	ldr	r2, [pc, #544]	; (80031e8 <HAL_DMA_IRQHandler+0xa48>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a86      	ldr	r2, [pc, #536]	; (80031ec <HAL_DMA_IRQHandler+0xa4c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a85      	ldr	r2, [pc, #532]	; (80031f0 <HAL_DMA_IRQHandler+0xa50>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a83      	ldr	r2, [pc, #524]	; (80031f4 <HAL_DMA_IRQHandler+0xa54>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a82      	ldr	r2, [pc, #520]	; (80031f8 <HAL_DMA_IRQHandler+0xa58>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a80      	ldr	r2, [pc, #512]	; (80031fc <HAL_DMA_IRQHandler+0xa5c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7f      	ldr	r2, [pc, #508]	; (8003200 <HAL_DMA_IRQHandler+0xa60>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <HAL_DMA_IRQHandler+0xa64>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <HAL_DMA_IRQHandler+0xa68>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a7a      	ldr	r2, [pc, #488]	; (800320c <HAL_DMA_IRQHandler+0xa6c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a79      	ldr	r2, [pc, #484]	; (8003210 <HAL_DMA_IRQHandler+0xa70>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_DMA_IRQHandler+0xa74>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a76      	ldr	r2, [pc, #472]	; (8003218 <HAL_DMA_IRQHandler+0xa78>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a74      	ldr	r2, [pc, #464]	; (800321c <HAL_DMA_IRQHandler+0xa7c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a73      	ldr	r2, [pc, #460]	; (8003220 <HAL_DMA_IRQHandler+0xa80>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <HAL_DMA_IRQHandler+0x8ca>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e007      	b.n	800307a <HAL_DMA_IRQHandler+0x8da>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3301      	adds	r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	429a      	cmp	r2, r3
 8003084:	d307      	bcc.n	8003096 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f2      	bne.n	800307a <HAL_DMA_IRQHandler+0x8da>
 8003094:	e000      	b.n	8003098 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003096:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80030ae:	e003      	b.n	80030b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 82aa 	beq.w	800361e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
 80030d2:	e2a4      	b.n	800361e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_DMA_IRQHandler+0xa84>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04a      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a51      	ldr	r2, [pc, #324]	; (8003228 <HAL_DMA_IRQHandler+0xa88>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d045      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_DMA_IRQHandler+0xa8c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d040      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a4e      	ldr	r2, [pc, #312]	; (8003230 <HAL_DMA_IRQHandler+0xa90>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d03b      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a4c      	ldr	r2, [pc, #304]	; (8003234 <HAL_DMA_IRQHandler+0xa94>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d036      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a4b      	ldr	r2, [pc, #300]	; (8003238 <HAL_DMA_IRQHandler+0xa98>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d031      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_DMA_IRQHandler+0xa9c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02c      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a48      	ldr	r2, [pc, #288]	; (8003240 <HAL_DMA_IRQHandler+0xaa0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d027      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a46      	ldr	r2, [pc, #280]	; (8003244 <HAL_DMA_IRQHandler+0xaa4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d022      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a45      	ldr	r2, [pc, #276]	; (8003248 <HAL_DMA_IRQHandler+0xaa8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01d      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a43      	ldr	r2, [pc, #268]	; (800324c <HAL_DMA_IRQHandler+0xaac>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a42      	ldr	r2, [pc, #264]	; (8003250 <HAL_DMA_IRQHandler+0xab0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a40      	ldr	r2, [pc, #256]	; (8003254 <HAL_DMA_IRQHandler+0xab4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <HAL_DMA_IRQHandler+0xab8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3d      	ldr	r2, [pc, #244]	; (800325c <HAL_DMA_IRQHandler+0xabc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_DMA_IRQHandler+0x9d4>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a3c      	ldr	r2, [pc, #240]	; (8003260 <HAL_DMA_IRQHandler+0xac0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_DMA_IRQHandler+0x9d8>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_DMA_IRQHandler+0x9da>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 824f 	beq.w	800361e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2204      	movs	r2, #4
 8003192:	409a      	lsls	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80dd 	beq.w	8003358 <HAL_DMA_IRQHandler+0xbb8>
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80d7 	beq.w	8003358 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2204      	movs	r2, #4
 80031b4:	409a      	lsls	r2, r3
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d059      	beq.n	8003278 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d14a      	bne.n	8003264 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8220 	beq.w	8003618 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031e0:	e21a      	b.n	8003618 <HAL_DMA_IRQHandler+0xe78>
 80031e2:	bf00      	nop
 80031e4:	40020010 	.word	0x40020010
 80031e8:	40020028 	.word	0x40020028
 80031ec:	40020040 	.word	0x40020040
 80031f0:	40020058 	.word	0x40020058
 80031f4:	40020070 	.word	0x40020070
 80031f8:	40020088 	.word	0x40020088
 80031fc:	400200a0 	.word	0x400200a0
 8003200:	400200b8 	.word	0x400200b8
 8003204:	40020410 	.word	0x40020410
 8003208:	40020428 	.word	0x40020428
 800320c:	40020440 	.word	0x40020440
 8003210:	40020458 	.word	0x40020458
 8003214:	40020470 	.word	0x40020470
 8003218:	40020488 	.word	0x40020488
 800321c:	400204a0 	.word	0x400204a0
 8003220:	400204b8 	.word	0x400204b8
 8003224:	48022c08 	.word	0x48022c08
 8003228:	48022c1c 	.word	0x48022c1c
 800322c:	48022c30 	.word	0x48022c30
 8003230:	48022c44 	.word	0x48022c44
 8003234:	48022c58 	.word	0x48022c58
 8003238:	48022c6c 	.word	0x48022c6c
 800323c:	48022c80 	.word	0x48022c80
 8003240:	48022c94 	.word	0x48022c94
 8003244:	58025408 	.word	0x58025408
 8003248:	5802541c 	.word	0x5802541c
 800324c:	58025430 	.word	0x58025430
 8003250:	58025444 	.word	0x58025444
 8003254:	58025458 	.word	0x58025458
 8003258:	5802546c 	.word	0x5802546c
 800325c:	58025480 	.word	0x58025480
 8003260:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 81d5 	beq.w	8003618 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003276:	e1cf      	b.n	8003618 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d160      	bne.n	8003344 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7f      	ldr	r2, [pc, #508]	; (8003484 <HAL_DMA_IRQHandler+0xce4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04a      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a7d      	ldr	r2, [pc, #500]	; (8003488 <HAL_DMA_IRQHandler+0xce8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d045      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7c      	ldr	r2, [pc, #496]	; (800348c <HAL_DMA_IRQHandler+0xcec>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d040      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a7a      	ldr	r2, [pc, #488]	; (8003490 <HAL_DMA_IRQHandler+0xcf0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d03b      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a79      	ldr	r2, [pc, #484]	; (8003494 <HAL_DMA_IRQHandler+0xcf4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d036      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a77      	ldr	r2, [pc, #476]	; (8003498 <HAL_DMA_IRQHandler+0xcf8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a76      	ldr	r2, [pc, #472]	; (800349c <HAL_DMA_IRQHandler+0xcfc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02c      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a74      	ldr	r2, [pc, #464]	; (80034a0 <HAL_DMA_IRQHandler+0xd00>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d027      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a73      	ldr	r2, [pc, #460]	; (80034a4 <HAL_DMA_IRQHandler+0xd04>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a71      	ldr	r2, [pc, #452]	; (80034a8 <HAL_DMA_IRQHandler+0xd08>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01d      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a70      	ldr	r2, [pc, #448]	; (80034ac <HAL_DMA_IRQHandler+0xd0c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6e      	ldr	r2, [pc, #440]	; (80034b0 <HAL_DMA_IRQHandler+0xd10>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a6d      	ldr	r2, [pc, #436]	; (80034b4 <HAL_DMA_IRQHandler+0xd14>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a6b      	ldr	r2, [pc, #428]	; (80034b8 <HAL_DMA_IRQHandler+0xd18>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6a      	ldr	r2, [pc, #424]	; (80034bc <HAL_DMA_IRQHandler+0xd1c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_DMA_IRQHandler+0xb82>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a68      	ldr	r2, [pc, #416]	; (80034c0 <HAL_DMA_IRQHandler+0xd20>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d108      	bne.n	8003334 <HAL_DMA_IRQHandler+0xb94>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0208 	bic.w	r2, r2, #8
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e007      	b.n	8003344 <HAL_DMA_IRQHandler+0xba4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8165 	beq.w	8003618 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003356:	e15f      	b.n	8003618 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2202      	movs	r2, #2
 8003362:	409a      	lsls	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80c5 	beq.w	80034f8 <HAL_DMA_IRQHandler+0xd58>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80bf 	beq.w	80034f8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2202      	movs	r2, #2
 8003384:	409a      	lsls	r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 813a 	beq.w	800361c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033b0:	e134      	b.n	800361c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8130 	beq.w	800361c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033c4:	e12a      	b.n	800361c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f040 8089 	bne.w	80034e4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <HAL_DMA_IRQHandler+0xce4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d04a      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a29      	ldr	r2, [pc, #164]	; (8003488 <HAL_DMA_IRQHandler+0xce8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d045      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_DMA_IRQHandler+0xcec>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d040      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a26      	ldr	r2, [pc, #152]	; (8003490 <HAL_DMA_IRQHandler+0xcf0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d03b      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a25      	ldr	r2, [pc, #148]	; (8003494 <HAL_DMA_IRQHandler+0xcf4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d036      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <HAL_DMA_IRQHandler+0xcf8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a22      	ldr	r2, [pc, #136]	; (800349c <HAL_DMA_IRQHandler+0xcfc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d02c      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <HAL_DMA_IRQHandler+0xd00>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d027      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_DMA_IRQHandler+0xd04>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <HAL_DMA_IRQHandler+0xd08>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01d      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_DMA_IRQHandler+0xd0c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d018      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_DMA_IRQHandler+0xd10>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <HAL_DMA_IRQHandler+0xd14>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00e      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <HAL_DMA_IRQHandler+0xd18>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_DMA_IRQHandler+0xd1c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_DMA_IRQHandler+0xcd2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <HAL_DMA_IRQHandler+0xd20>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d128      	bne.n	80034c4 <HAL_DMA_IRQHandler+0xd24>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0214 	bic.w	r2, r2, #20
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e027      	b.n	80034d4 <HAL_DMA_IRQHandler+0xd34>
 8003484:	40020010 	.word	0x40020010
 8003488:	40020028 	.word	0x40020028
 800348c:	40020040 	.word	0x40020040
 8003490:	40020058 	.word	0x40020058
 8003494:	40020070 	.word	0x40020070
 8003498:	40020088 	.word	0x40020088
 800349c:	400200a0 	.word	0x400200a0
 80034a0:	400200b8 	.word	0x400200b8
 80034a4:	40020410 	.word	0x40020410
 80034a8:	40020428 	.word	0x40020428
 80034ac:	40020440 	.word	0x40020440
 80034b0:	40020458 	.word	0x40020458
 80034b4:	40020470 	.word	0x40020470
 80034b8:	40020488 	.word	0x40020488
 80034bc:	400204a0 	.word	0x400204a0
 80034c0:	400204b8 	.word	0x400204b8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020a 	bic.w	r2, r2, #10
 80034d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8097 	beq.w	800361c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f6:	e091      	b.n	800361c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2208      	movs	r2, #8
 8003502:	409a      	lsls	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8088 	beq.w	800361e <HAL_DMA_IRQHandler+0xe7e>
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8082 	beq.w	800361e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a41      	ldr	r2, [pc, #260]	; (8003624 <HAL_DMA_IRQHandler+0xe84>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04a      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_DMA_IRQHandler+0xe88>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d045      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3e      	ldr	r2, [pc, #248]	; (800362c <HAL_DMA_IRQHandler+0xe8c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <HAL_DMA_IRQHandler+0xe90>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d03b      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <HAL_DMA_IRQHandler+0xe94>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d036      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a39      	ldr	r2, [pc, #228]	; (8003638 <HAL_DMA_IRQHandler+0xe98>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d031      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_DMA_IRQHandler+0xe9c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d02c      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a36      	ldr	r2, [pc, #216]	; (8003640 <HAL_DMA_IRQHandler+0xea0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d027      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a35      	ldr	r2, [pc, #212]	; (8003644 <HAL_DMA_IRQHandler+0xea4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a33      	ldr	r2, [pc, #204]	; (8003648 <HAL_DMA_IRQHandler+0xea8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a32      	ldr	r2, [pc, #200]	; (800364c <HAL_DMA_IRQHandler+0xeac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a30      	ldr	r2, [pc, #192]	; (8003650 <HAL_DMA_IRQHandler+0xeb0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <HAL_DMA_IRQHandler+0xeb4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2d      	ldr	r2, [pc, #180]	; (8003658 <HAL_DMA_IRQHandler+0xeb8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2c      	ldr	r2, [pc, #176]	; (800365c <HAL_DMA_IRQHandler+0xebc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_IRQHandler+0xe1a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <HAL_DMA_IRQHandler+0xec0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d108      	bne.n	80035cc <HAL_DMA_IRQHandler+0xe2c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 021c 	bic.w	r2, r2, #28
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e007      	b.n	80035dc <HAL_DMA_IRQHandler+0xe3c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 020e 	bic.w	r2, r2, #14
 80035da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
 8003612:	e004      	b.n	800361e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800361c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8

08003664 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7f      	ldr	r2, [pc, #508]	; (8003880 <DMA_SetConfig+0x21c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d072      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a7d      	ldr	r2, [pc, #500]	; (8003884 <DMA_SetConfig+0x220>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d06d      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7c      	ldr	r2, [pc, #496]	; (8003888 <DMA_SetConfig+0x224>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d068      	beq.n	800376e <DMA_SetConfig+0x10a>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7a      	ldr	r2, [pc, #488]	; (800388c <DMA_SetConfig+0x228>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d063      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a79      	ldr	r2, [pc, #484]	; (8003890 <DMA_SetConfig+0x22c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d05e      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a77      	ldr	r2, [pc, #476]	; (8003894 <DMA_SetConfig+0x230>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d059      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a76      	ldr	r2, [pc, #472]	; (8003898 <DMA_SetConfig+0x234>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d054      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a74      	ldr	r2, [pc, #464]	; (800389c <DMA_SetConfig+0x238>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d04f      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a73      	ldr	r2, [pc, #460]	; (80038a0 <DMA_SetConfig+0x23c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d04a      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a71      	ldr	r2, [pc, #452]	; (80038a4 <DMA_SetConfig+0x240>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d045      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a70      	ldr	r2, [pc, #448]	; (80038a8 <DMA_SetConfig+0x244>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d040      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <DMA_SetConfig+0x248>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d03b      	beq.n	800376e <DMA_SetConfig+0x10a>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6d      	ldr	r2, [pc, #436]	; (80038b0 <DMA_SetConfig+0x24c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d036      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6b      	ldr	r2, [pc, #428]	; (80038b4 <DMA_SetConfig+0x250>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d031      	beq.n	800376e <DMA_SetConfig+0x10a>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6a      	ldr	r2, [pc, #424]	; (80038b8 <DMA_SetConfig+0x254>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d02c      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	; (80038bc <DMA_SetConfig+0x258>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d027      	beq.n	800376e <DMA_SetConfig+0x10a>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a67      	ldr	r2, [pc, #412]	; (80038c0 <DMA_SetConfig+0x25c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d022      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <DMA_SetConfig+0x260>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a64      	ldr	r2, [pc, #400]	; (80038c8 <DMA_SetConfig+0x264>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d018      	beq.n	800376e <DMA_SetConfig+0x10a>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a62      	ldr	r2, [pc, #392]	; (80038cc <DMA_SetConfig+0x268>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a61      	ldr	r2, [pc, #388]	; (80038d0 <DMA_SetConfig+0x26c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a5f      	ldr	r2, [pc, #380]	; (80038d4 <DMA_SetConfig+0x270>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <DMA_SetConfig+0x10a>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a5e      	ldr	r2, [pc, #376]	; (80038d8 <DMA_SetConfig+0x274>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <DMA_SetConfig+0x10a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <DMA_SetConfig+0x278>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <DMA_SetConfig+0x10e>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <DMA_SetConfig+0x110>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003780:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003792:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a39      	ldr	r2, [pc, #228]	; (8003880 <DMA_SetConfig+0x21c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d04a      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a38      	ldr	r2, [pc, #224]	; (8003884 <DMA_SetConfig+0x220>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d045      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a36      	ldr	r2, [pc, #216]	; (8003888 <DMA_SetConfig+0x224>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d040      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a35      	ldr	r2, [pc, #212]	; (800388c <DMA_SetConfig+0x228>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d03b      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a33      	ldr	r2, [pc, #204]	; (8003890 <DMA_SetConfig+0x22c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d036      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a32      	ldr	r2, [pc, #200]	; (8003894 <DMA_SetConfig+0x230>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d031      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a30      	ldr	r2, [pc, #192]	; (8003898 <DMA_SetConfig+0x234>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02c      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2f      	ldr	r2, [pc, #188]	; (800389c <DMA_SetConfig+0x238>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d027      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2d      	ldr	r2, [pc, #180]	; (80038a0 <DMA_SetConfig+0x23c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d022      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2c      	ldr	r2, [pc, #176]	; (80038a4 <DMA_SetConfig+0x240>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d01d      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <DMA_SetConfig+0x244>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d018      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a29      	ldr	r2, [pc, #164]	; (80038ac <DMA_SetConfig+0x248>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <DMA_SetConfig+0x24c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <DMA_SetConfig+0x250>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <DMA_SetConfig+0x254>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <DMA_SetConfig+0x1d0>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a23      	ldr	r2, [pc, #140]	; (80038bc <DMA_SetConfig+0x258>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <DMA_SetConfig+0x1d4>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <DMA_SetConfig+0x1d6>
 8003838:	2300      	movs	r3, #0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d059      	beq.n	80038f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	223f      	movs	r2, #63	; 0x3f
 8003848:	409a      	lsls	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800385c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d138      	bne.n	80038e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800387e:	e0ae      	b.n	80039de <DMA_SetConfig+0x37a>
 8003880:	40020010 	.word	0x40020010
 8003884:	40020028 	.word	0x40020028
 8003888:	40020040 	.word	0x40020040
 800388c:	40020058 	.word	0x40020058
 8003890:	40020070 	.word	0x40020070
 8003894:	40020088 	.word	0x40020088
 8003898:	400200a0 	.word	0x400200a0
 800389c:	400200b8 	.word	0x400200b8
 80038a0:	40020410 	.word	0x40020410
 80038a4:	40020428 	.word	0x40020428
 80038a8:	40020440 	.word	0x40020440
 80038ac:	40020458 	.word	0x40020458
 80038b0:	40020470 	.word	0x40020470
 80038b4:	40020488 	.word	0x40020488
 80038b8:	400204a0 	.word	0x400204a0
 80038bc:	400204b8 	.word	0x400204b8
 80038c0:	58025408 	.word	0x58025408
 80038c4:	5802541c 	.word	0x5802541c
 80038c8:	58025430 	.word	0x58025430
 80038cc:	58025444 	.word	0x58025444
 80038d0:	58025458 	.word	0x58025458
 80038d4:	5802546c 	.word	0x5802546c
 80038d8:	58025480 	.word	0x58025480
 80038dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	60da      	str	r2, [r3, #12]
}
 80038f0:	e075      	b.n	80039de <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <DMA_SetConfig+0x388>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d04a      	beq.n	8003992 <DMA_SetConfig+0x32e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3b      	ldr	r2, [pc, #236]	; (80039f0 <DMA_SetConfig+0x38c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d045      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a3a      	ldr	r2, [pc, #232]	; (80039f4 <DMA_SetConfig+0x390>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d040      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <DMA_SetConfig+0x394>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d03b      	beq.n	8003992 <DMA_SetConfig+0x32e>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a37      	ldr	r2, [pc, #220]	; (80039fc <DMA_SetConfig+0x398>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d036      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a35      	ldr	r2, [pc, #212]	; (8003a00 <DMA_SetConfig+0x39c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d031      	beq.n	8003992 <DMA_SetConfig+0x32e>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a34      	ldr	r2, [pc, #208]	; (8003a04 <DMA_SetConfig+0x3a0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d02c      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <DMA_SetConfig+0x3a4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d027      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <DMA_SetConfig+0x3a8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d022      	beq.n	8003992 <DMA_SetConfig+0x32e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <DMA_SetConfig+0x3ac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01d      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2e      	ldr	r2, [pc, #184]	; (8003a14 <DMA_SetConfig+0x3b0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d018      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2c      	ldr	r2, [pc, #176]	; (8003a18 <DMA_SetConfig+0x3b4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <DMA_SetConfig+0x32e>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2b      	ldr	r2, [pc, #172]	; (8003a1c <DMA_SetConfig+0x3b8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <DMA_SetConfig+0x3bc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <DMA_SetConfig+0x32e>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <DMA_SetConfig+0x3c0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <DMA_SetConfig+0x32e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <DMA_SetConfig+0x3c4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <DMA_SetConfig+0x332>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <DMA_SetConfig+0x334>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d108      	bne.n	80039ce <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	60da      	str	r2, [r3, #12]
}
 80039cc:	e007      	b.n	80039de <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	48022c08 	.word	0x48022c08
 80039f0:	48022c1c 	.word	0x48022c1c
 80039f4:	48022c30 	.word	0x48022c30
 80039f8:	48022c44 	.word	0x48022c44
 80039fc:	48022c58 	.word	0x48022c58
 8003a00:	48022c6c 	.word	0x48022c6c
 8003a04:	48022c80 	.word	0x48022c80
 8003a08:	48022c94 	.word	0x48022c94
 8003a0c:	58025408 	.word	0x58025408
 8003a10:	5802541c 	.word	0x5802541c
 8003a14:	58025430 	.word	0x58025430
 8003a18:	58025444 	.word	0x58025444
 8003a1c:	58025458 	.word	0x58025458
 8003a20:	5802546c 	.word	0x5802546c
 8003a24:	58025480 	.word	0x58025480
 8003a28:	58025494 	.word	0x58025494

08003a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <DMA_CalcBaseAndBitshift+0x118>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d04a      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a41      	ldr	r2, [pc, #260]	; (8003b48 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d045      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3f      	ldr	r2, [pc, #252]	; (8003b4c <DMA_CalcBaseAndBitshift+0x120>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d040      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3e      	ldr	r2, [pc, #248]	; (8003b50 <DMA_CalcBaseAndBitshift+0x124>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d03b      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a3c      	ldr	r2, [pc, #240]	; (8003b54 <DMA_CalcBaseAndBitshift+0x128>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d036      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d031      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a39      	ldr	r2, [pc, #228]	; (8003b5c <DMA_CalcBaseAndBitshift+0x130>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02c      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <DMA_CalcBaseAndBitshift+0x134>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d027      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a36      	ldr	r2, [pc, #216]	; (8003b64 <DMA_CalcBaseAndBitshift+0x138>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d022      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d01d      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a33      	ldr	r2, [pc, #204]	; (8003b6c <DMA_CalcBaseAndBitshift+0x140>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d018      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a32      	ldr	r2, [pc, #200]	; (8003b70 <DMA_CalcBaseAndBitshift+0x144>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d013      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <DMA_CalcBaseAndBitshift+0x148>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00e      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2f      	ldr	r2, [pc, #188]	; (8003b78 <DMA_CalcBaseAndBitshift+0x14c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d009      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2d      	ldr	r2, [pc, #180]	; (8003b7c <DMA_CalcBaseAndBitshift+0x150>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d004      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <DMA_CalcBaseAndBitshift+0x154>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <DMA_CalcBaseAndBitshift+0xac>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <DMA_CalcBaseAndBitshift+0xae>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d024      	beq.n	8003b28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3b10      	subs	r3, #16
 8003ae6:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <DMA_CalcBaseAndBitshift+0x158>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <DMA_CalcBaseAndBitshift+0x15c>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	461a      	mov	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d908      	bls.n	8003b18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <DMA_CalcBaseAndBitshift+0x160>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	659a      	str	r2, [r3, #88]	; 0x58
 8003b16:	e00d      	b.n	8003b34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <DMA_CalcBaseAndBitshift+0x160>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6593      	str	r3, [r2, #88]	; 0x58
 8003b26:	e005      	b.n	8003b34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
 8003b84:	aaaaaaab 	.word	0xaaaaaaab
 8003b88:	0800aaa4 	.word	0x0800aaa4
 8003b8c:	fffffc00 	.word	0xfffffc00

08003b90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d120      	bne.n	8003be6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d858      	bhi.n	8003c5e <DMA_CheckFifoParam+0xce>
 8003bac:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <DMA_CheckFifoParam+0x24>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bd7 	.word	0x08003bd7
 8003bbc:	08003bc5 	.word	0x08003bc5
 8003bc0:	08003c5f 	.word	0x08003c5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d048      	beq.n	8003c62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bd4:	e045      	b.n	8003c62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bde:	d142      	bne.n	8003c66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003be4:	e03f      	b.n	8003c66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bee:	d123      	bne.n	8003c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d838      	bhi.n	8003c6a <DMA_CheckFifoParam+0xda>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <DMA_CheckFifoParam+0x70>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c17 	.word	0x08003c17
 8003c08:	08003c11 	.word	0x08003c11
 8003c0c:	08003c29 	.word	0x08003c29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
        break;
 8003c14:	e030      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d025      	beq.n	8003c6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c26:	e022      	b.n	8003c6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c30:	d11f      	bne.n	8003c72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c36:	e01c      	b.n	8003c72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d902      	bls.n	8003c46 <DMA_CheckFifoParam+0xb6>
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d003      	beq.n	8003c4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c44:	e018      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
        break;
 8003c4a:	e015      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8003c5c:	e00b      	b.n	8003c76 <DMA_CheckFifoParam+0xe6>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e00a      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
        break;
 8003c62:	bf00      	nop
 8003c64:	e008      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
        break;
 8003c66:	bf00      	nop
 8003c68:	e006      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e004      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
        break;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
    break;
 8003c76:	bf00      	nop
    }
  }

  return status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a38      	ldr	r2, [pc, #224]	; (8003d7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a36      	ldr	r2, [pc, #216]	; (8003d80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a32      	ldr	r2, [pc, #200]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01a      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3b08      	subs	r3, #8
 8003cf8:	4a28      	ldr	r2, [pc, #160]	; (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d24:	e024      	b.n	8003d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3b10      	subs	r3, #16
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d806      	bhi.n	8003d4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d902      	bls.n	8003d4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	58025408 	.word	0x58025408
 8003d80:	5802541c 	.word	0x5802541c
 8003d84:	58025430 	.word	0x58025430
 8003d88:	58025444 	.word	0x58025444
 8003d8c:	58025458 	.word	0x58025458
 8003d90:	5802546c 	.word	0x5802546c
 8003d94:	58025480 	.word	0x58025480
 8003d98:	58025494 	.word	0x58025494
 8003d9c:	cccccccd 	.word	0xcccccccd
 8003da0:	16009600 	.word	0x16009600
 8003da4:	58025880 	.word	0x58025880
 8003da8:	aaaaaaab 	.word	0xaaaaaaab
 8003dac:	400204b8 	.word	0x400204b8
 8003db0:	4002040f 	.word	0x4002040f
 8003db4:	10008200 	.word	0x10008200
 8003db8:	40020880 	.word	0x40020880

08003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d04a      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d847      	bhi.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01d      	beq.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e44:	671a      	str	r2, [r3, #112]	; 0x70
 8003e46:	e009      	b.n	8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	461a      	mov	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	58025408 	.word	0x58025408
 8003e78:	5802541c 	.word	0x5802541c
 8003e7c:	58025430 	.word	0x58025430
 8003e80:	58025444 	.word	0x58025444
 8003e84:	58025458 	.word	0x58025458
 8003e88:	5802546c 	.word	0x5802546c
 8003e8c:	58025480 	.word	0x58025480
 8003e90:	58025494 	.word	0x58025494
 8003e94:	1600963f 	.word	0x1600963f
 8003e98:	58025940 	.word	0x58025940
 8003e9c:	1000823f 	.word	0x1000823f
 8003ea0:	40020940 	.word	0x40020940

08003ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003eb2:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <HAL_GPIO_Init+0x234>)
 8003eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eb6:	e194      	b.n	80041e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8186 	beq.w	80041dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d005      	beq.n	8003ee8 <HAL_GPIO_Init+0x44>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d130      	bne.n	8003f4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 0201 	and.w	r2, r3, #1
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d017      	beq.n	8003f86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d123      	bne.n	8003fda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	220f      	movs	r2, #15
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0203 	and.w	r2, r3, #3
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80e0 	beq.w	80041dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401c:	4b2f      	ldr	r3, [pc, #188]	; (80040dc <HAL_GPIO_Init+0x238>)
 800401e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004022:	4a2e      	ldr	r2, [pc, #184]	; (80040dc <HAL_GPIO_Init+0x238>)
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800402c:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <HAL_GPIO_Init+0x238>)
 800402e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800403a:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <HAL_GPIO_Init+0x23c>)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	3302      	adds	r3, #2
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <HAL_GPIO_Init+0x240>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d052      	beq.n	800410c <HAL_GPIO_Init+0x268>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <HAL_GPIO_Init+0x244>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d031      	beq.n	80040d2 <HAL_GPIO_Init+0x22e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_GPIO_Init+0x248>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02b      	beq.n	80040ce <HAL_GPIO_Init+0x22a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_GPIO_Init+0x24c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d025      	beq.n	80040ca <HAL_GPIO_Init+0x226>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_GPIO_Init+0x250>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01f      	beq.n	80040c6 <HAL_GPIO_Init+0x222>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <HAL_GPIO_Init+0x254>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d019      	beq.n	80040c2 <HAL_GPIO_Init+0x21e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <HAL_GPIO_Init+0x258>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_GPIO_Init+0x21a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_GPIO_Init+0x25c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00d      	beq.n	80040ba <HAL_GPIO_Init+0x216>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_GPIO_Init+0x260>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <HAL_GPIO_Init+0x212>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_GPIO_Init+0x264>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_GPIO_Init+0x20e>
 80040ae:	2309      	movs	r3, #9
 80040b0:	e02d      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040b2:	230a      	movs	r3, #10
 80040b4:	e02b      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040b6:	2308      	movs	r3, #8
 80040b8:	e029      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040ba:	2307      	movs	r3, #7
 80040bc:	e027      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040be:	2306      	movs	r3, #6
 80040c0:	e025      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040c2:	2305      	movs	r3, #5
 80040c4:	e023      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040c6:	2304      	movs	r3, #4
 80040c8:	e021      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e01f      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e01d      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e01b      	b.n	800410e <HAL_GPIO_Init+0x26a>
 80040d6:	bf00      	nop
 80040d8:	58000080 	.word	0x58000080
 80040dc:	58024400 	.word	0x58024400
 80040e0:	58000400 	.word	0x58000400
 80040e4:	58020000 	.word	0x58020000
 80040e8:	58020400 	.word	0x58020400
 80040ec:	58020800 	.word	0x58020800
 80040f0:	58020c00 	.word	0x58020c00
 80040f4:	58021000 	.word	0x58021000
 80040f8:	58021400 	.word	0x58021400
 80040fc:	58021800 	.word	0x58021800
 8004100:	58021c00 	.word	0x58021c00
 8004104:	58022000 	.word	0x58022000
 8004108:	58022400 	.word	0x58022400
 800410c:	2300      	movs	r3, #0
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	f002 0203 	and.w	r2, r2, #3
 8004114:	0092      	lsls	r2, r2, #2
 8004116:	4093      	lsls	r3, r2
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800411e:	4938      	ldr	r1, [pc, #224]	; (8004200 <HAL_GPIO_Init+0x35c>)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	3302      	adds	r3, #2
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	3301      	adds	r3, #1
 80041e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f47f ae63 	bne.w	8003eb8 <HAL_GPIO_Init+0x14>
  }
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	3724      	adds	r7, #36	; 0x24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	58000400 	.word	0x58000400

08004204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
 8004210:	4613      	mov	r3, r2
 8004212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004214:	787b      	ldrb	r3, [r7, #1]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004220:	e003      	b.n	800422a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004222:	887b      	ldrh	r3, [r7, #2]
 8004224:	041a      	lsls	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	619a      	str	r2, [r3, #24]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004248:	887a      	ldrh	r2, [r7, #2]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	041a      	lsls	r2, r3, #16
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43d9      	mvns	r1, r3
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	400b      	ands	r3, r1
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	619a      	str	r2, [r3, #24]
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	4603      	mov	r3, r0
 8004272:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc fd63 	bl	8000d5c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_PWREx_ConfigSupply+0xb0>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d00a      	beq.n	80042ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042b4:	4b26      	ldr	r3, [pc, #152]	; (8004350 <HAL_PWREx_ConfigSupply+0xb0>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d001      	beq.n	80042c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e040      	b.n	8004348 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e03e      	b.n	8004348 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <HAL_PWREx_ConfigSupply+0xb0>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80042d2:	491f      	ldr	r1, [pc, #124]	; (8004350 <HAL_PWREx_ConfigSupply+0xb0>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042da:	f7fd fb27 	bl	800192c <HAL_GetTick>
 80042de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042e0:	e009      	b.n	80042f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042e2:	f7fd fb23 	bl	800192c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f0:	d901      	bls.n	80042f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e028      	b.n	8004348 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042f6:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_PWREx_ConfigSupply+0xb0>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004302:	d1ee      	bne.n	80042e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b1e      	cmp	r3, #30
 8004308:	d008      	beq.n	800431c <HAL_PWREx_ConfigSupply+0x7c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b2e      	cmp	r3, #46	; 0x2e
 800430e:	d005      	beq.n	800431c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b1d      	cmp	r3, #29
 8004314:	d002      	beq.n	800431c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b2d      	cmp	r3, #45	; 0x2d
 800431a:	d114      	bne.n	8004346 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800431c:	f7fd fb06 	bl	800192c <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004322:	e009      	b.n	8004338 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004324:	f7fd fb02 	bl	800192c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004332:	d901      	bls.n	8004338 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e007      	b.n	8004348 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_PWREx_ConfigSupply+0xb0>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d1ee      	bne.n	8004324 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	58024800 	.word	0x58024800

08004354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	; 0x30
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f000 bc1f 	b.w	8004ba6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80b3 	beq.w	80044dc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004376:	4b95      	ldr	r3, [pc, #596]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004380:	4b92      	ldr	r3, [pc, #584]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	2b10      	cmp	r3, #16
 800438a:	d007      	beq.n	800439c <HAL_RCC_OscConfig+0x48>
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b18      	cmp	r3, #24
 8004390:	d112      	bne.n	80043b8 <HAL_RCC_OscConfig+0x64>
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d10d      	bne.n	80043b8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	4b8b      	ldr	r3, [pc, #556]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8098 	beq.w	80044da <HAL_RCC_OscConfig+0x186>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 8093 	bne.w	80044da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e3f6      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d106      	bne.n	80043d0 <HAL_RCC_OscConfig+0x7c>
 80043c2:	4b82      	ldr	r3, [pc, #520]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a81      	ldr	r2, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e058      	b.n	8004482 <HAL_RCC_OscConfig+0x12e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d112      	bne.n	80043fe <HAL_RCC_OscConfig+0xaa>
 80043d8:	4b7c      	ldr	r3, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a7b      	ldr	r2, [pc, #492]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b79      	ldr	r3, [pc, #484]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a78      	ldr	r2, [pc, #480]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b76      	ldr	r3, [pc, #472]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a75      	ldr	r2, [pc, #468]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e041      	b.n	8004482 <HAL_RCC_OscConfig+0x12e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004406:	d112      	bne.n	800442e <HAL_RCC_OscConfig+0xda>
 8004408:	4b70      	ldr	r3, [pc, #448]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6f      	ldr	r2, [pc, #444]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800440e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b6d      	ldr	r3, [pc, #436]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6c      	ldr	r2, [pc, #432]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800441a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a69      	ldr	r2, [pc, #420]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	e029      	b.n	8004482 <HAL_RCC_OscConfig+0x12e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004436:	d112      	bne.n	800445e <HAL_RCC_OscConfig+0x10a>
 8004438:	4b64      	ldr	r3, [pc, #400]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a63      	ldr	r2, [pc, #396]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800443e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a60      	ldr	r2, [pc, #384]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800444a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5d      	ldr	r2, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	e011      	b.n	8004482 <HAL_RCC_OscConfig+0x12e>
 800445e:	4b5b      	ldr	r3, [pc, #364]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a5a      	ldr	r2, [pc, #360]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b58      	ldr	r3, [pc, #352]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a57      	ldr	r2, [pc, #348]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b55      	ldr	r3, [pc, #340]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a54      	ldr	r2, [pc, #336]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800447c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004480:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d013      	beq.n	80044b2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fd fa4f 	bl	800192c <HAL_GetTick>
 800448e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004492:	f7fd fa4b 	bl	800192c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b64      	cmp	r3, #100	; 0x64
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e380      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044a4:	4b49      	ldr	r3, [pc, #292]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x13e>
 80044b0:	e014      	b.n	80044dc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fd fa3b 	bl	800192c <HAL_GetTick>
 80044b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ba:	f7fd fa37 	bl	800192c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e36c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044cc:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f0      	bne.n	80044ba <HAL_RCC_OscConfig+0x166>
 80044d8:	e000      	b.n	80044dc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 808c 	beq.w	8004602 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ea:	4b38      	ldr	r3, [pc, #224]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044f4:	4b35      	ldr	r3, [pc, #212]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <HAL_RCC_OscConfig+0x1bc>
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2b18      	cmp	r3, #24
 8004504:	d137      	bne.n	8004576 <HAL_RCC_OscConfig+0x222>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d132      	bne.n	8004576 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004510:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_OscConfig+0x1d4>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e33e      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004528:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f023 0219 	bic.w	r2, r3, #25
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4925      	ldr	r1, [pc, #148]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7fd f9f7 	bl	800192c <HAL_GetTick>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004542:	f7fd f9f3 	bl	800192c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e328      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004560:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	4917      	ldr	r1, [pc, #92]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004574:	e045      	b.n	8004602 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d028      	beq.n	80045d0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 0219 	bic.w	r2, r3, #25
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4910      	ldr	r1, [pc, #64]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fd f9cc 	bl	800192c <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004598:	f7fd f9c8 	bl	800192c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e2fd      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	4901      	ldr	r1, [pc, #4]	; (80045cc <HAL_RCC_OscConfig+0x278>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
 80045ca:	e01a      	b.n	8004602 <HAL_RCC_OscConfig+0x2ae>
 80045cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d0:	4b97      	ldr	r3, [pc, #604]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a96      	ldr	r2, [pc, #600]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd f9a6 	bl	800192c <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fd f9a2 	bl	800192c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e2d7      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f6:	4b8e      	ldr	r3, [pc, #568]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d06a      	beq.n	80046e4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460e:	4b88      	ldr	r3, [pc, #544]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004616:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004618:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d007      	beq.n	8004634 <HAL_RCC_OscConfig+0x2e0>
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b18      	cmp	r3, #24
 8004628:	d11b      	bne.n	8004662 <HAL_RCC_OscConfig+0x30e>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d116      	bne.n	8004662 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004634:	4b7e      	ldr	r3, [pc, #504]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_OscConfig+0x2f8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d001      	beq.n	800464c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e2ac      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800464c:	4b78      	ldr	r3, [pc, #480]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	4975      	ldr	r1, [pc, #468]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004660:	e040      	b.n	80046e4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d023      	beq.n	80046b2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800466a:	4b71      	ldr	r3, [pc, #452]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a70      	ldr	r2, [pc, #448]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd f959 	bl	800192c <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800467e:	f7fd f955 	bl	800192c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e28a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004690:	4b67      	ldr	r3, [pc, #412]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800469c:	4b64      	ldr	r3, [pc, #400]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	4961      	ldr	r1, [pc, #388]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60cb      	str	r3, [r1, #12]
 80046b0:	e018      	b.n	80046e4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046b2:	4b5f      	ldr	r3, [pc, #380]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5e      	ldr	r2, [pc, #376]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80046b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fd f935 	bl	800192c <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046c6:	f7fd f931 	bl	800192c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e266      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046d8:	4b55      	ldr	r3, [pc, #340]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d036      	beq.n	800475e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d019      	beq.n	800472c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f8:	4b4d      	ldr	r3, [pc, #308]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80046fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fc:	4a4c      	ldr	r2, [pc, #304]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd f912 	bl	800192c <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470c:	f7fd f90e 	bl	800192c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e243      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x3b8>
 800472a:	e018      	b.n	800475e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800472c:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	4a3f      	ldr	r2, [pc, #252]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd f8f8 	bl	800192c <HAL_GetTick>
 800473c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004740:	f7fd f8f4 	bl	800192c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e229      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d036      	beq.n	80047d8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d019      	beq.n	80047a6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004772:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800477c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800477e:	f7fd f8d5 	bl	800192c <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004786:	f7fd f8d1 	bl	800192c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e206      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x432>
 80047a4:	e018      	b.n	80047d8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047a6:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a21      	ldr	r2, [pc, #132]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80047ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047b2:	f7fd f8bb 	bl	800192c <HAL_GetTick>
 80047b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ba:	f7fd f8b7 	bl	800192c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e1ec      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80af 	beq.w	8004944 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <HAL_RCC_OscConfig+0x4e0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <HAL_RCC_OscConfig+0x4e0>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047f2:	f7fd f89b 	bl	800192c <HAL_GetTick>
 80047f6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fd f897 	bl	800192c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b64      	cmp	r3, #100	; 0x64
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e1cc      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCC_OscConfig+0x4e0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10b      	bne.n	8004838 <HAL_RCC_OscConfig+0x4e4>
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a02      	ldr	r2, [pc, #8]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	e05b      	b.n	80048e6 <HAL_RCC_OscConfig+0x592>
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
 8004834:	58024800 	.word	0x58024800
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d112      	bne.n	8004866 <HAL_RCC_OscConfig+0x512>
 8004840:	4b9d      	ldr	r3, [pc, #628]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a9c      	ldr	r2, [pc, #624]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	4b9a      	ldr	r3, [pc, #616]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a99      	ldr	r2, [pc, #612]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
 8004858:	4b97      	ldr	r3, [pc, #604]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485c:	4a96      	ldr	r2, [pc, #600]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800485e:	f023 0304 	bic.w	r3, r3, #4
 8004862:	6713      	str	r3, [r2, #112]	; 0x70
 8004864:	e03f      	b.n	80048e6 <HAL_RCC_OscConfig+0x592>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b05      	cmp	r3, #5
 800486c:	d112      	bne.n	8004894 <HAL_RCC_OscConfig+0x540>
 800486e:	4b92      	ldr	r3, [pc, #584]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a91      	ldr	r2, [pc, #580]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	6713      	str	r3, [r2, #112]	; 0x70
 800487a:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	4a8e      	ldr	r2, [pc, #568]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004884:	6713      	str	r3, [r2, #112]	; 0x70
 8004886:	4b8c      	ldr	r3, [pc, #560]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	4a8b      	ldr	r2, [pc, #556]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6713      	str	r3, [r2, #112]	; 0x70
 8004892:	e028      	b.n	80048e6 <HAL_RCC_OscConfig+0x592>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b85      	cmp	r3, #133	; 0x85
 800489a:	d112      	bne.n	80048c2 <HAL_RCC_OscConfig+0x56e>
 800489c:	4b86      	ldr	r3, [pc, #536]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a85      	ldr	r2, [pc, #532]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
 80048a8:	4b83      	ldr	r3, [pc, #524]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4a82      	ldr	r2, [pc, #520]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
 80048b4:	4b80      	ldr	r3, [pc, #512]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	4a7f      	ldr	r2, [pc, #508]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6713      	str	r3, [r2, #112]	; 0x70
 80048c0:	e011      	b.n	80048e6 <HAL_RCC_OscConfig+0x592>
 80048c2:	4b7d      	ldr	r3, [pc, #500]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	4a7c      	ldr	r2, [pc, #496]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	6713      	str	r3, [r2, #112]	; 0x70
 80048ce:	4b7a      	ldr	r3, [pc, #488]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	4a79      	ldr	r2, [pc, #484]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	6713      	str	r3, [r2, #112]	; 0x70
 80048da:	4b77      	ldr	r3, [pc, #476]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	4a76      	ldr	r2, [pc, #472]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80048e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d015      	beq.n	800491a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ee:	f7fd f81d 	bl	800192c <HAL_GetTick>
 80048f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f4:	e00a      	b.n	800490c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd f819 	bl	800192c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e14c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800490c:	4b6a      	ldr	r3, [pc, #424]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ee      	beq.n	80048f6 <HAL_RCC_OscConfig+0x5a2>
 8004918:	e014      	b.n	8004944 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd f807 	bl	800192c <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fd f803 	bl	800192c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e136      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004938:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ee      	bne.n	8004922 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 812b 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800494e:	4b5a      	ldr	r3, [pc, #360]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004956:	2b18      	cmp	r3, #24
 8004958:	f000 80bb 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b02      	cmp	r3, #2
 8004962:	f040 8095 	bne.w	8004a90 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004966:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a53      	ldr	r2, [pc, #332]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800496c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fc ffdb 	bl	800192c <HAL_GetTick>
 8004976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497a:	f7fc ffd7 	bl	800192c <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e10c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800498c:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004998:	4b47      	ldr	r3, [pc, #284]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 800499a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800499c:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_OscConfig+0x768>)
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	430a      	orrs	r2, r1
 80049ac:	4942      	ldr	r1, [pc, #264]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	628b      	str	r3, [r1, #40]	; 0x28
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	3b01      	subs	r3, #1
 80049b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	3b01      	subs	r3, #1
 80049c2:	025b      	lsls	r3, r3, #9
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	3b01      	subs	r3, #1
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	3b01      	subs	r3, #1
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049e2:	4935      	ldr	r1, [pc, #212]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80049e8:	4b33      	ldr	r3, [pc, #204]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	4a32      	ldr	r2, [pc, #200]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049f4:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 80049f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049f8:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <HAL_RCC_OscConfig+0x76c>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a00:	00d2      	lsls	r2, r2, #3
 8004a02:	492d      	ldr	r1, [pc, #180]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f023 020c 	bic.w	r2, r3, #12
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	4928      	ldr	r1, [pc, #160]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f023 0202 	bic.w	r2, r3, #2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	4924      	ldr	r1, [pc, #144]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a2c:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a38:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a44:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a50:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5c:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fc ff60 	bl	800192c <HAL_GetTick>
 8004a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fc ff5c 	bl	800192c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e091      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x71c>
 8004a8e:	e089      	b.n	8004ba4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <HAL_RCC_OscConfig+0x764>)
 8004a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fc ff46 	bl	800192c <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa2:	e00f      	b.n	8004ac4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fc ff42 	bl	800192c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d908      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e077      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	fffffc0c 	.word	0xfffffc0c
 8004ac0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e9      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x750>
 8004ad0:	e068      	b.n	8004ba4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ad8:	4b35      	ldr	r3, [pc, #212]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d031      	beq.n	8004b4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f003 0203 	and.w	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d12a      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d122      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d11a      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	0a5b      	lsrs	r3, r3, #9
 8004b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d111      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d108      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	0e1b      	lsrs	r3, r3, #24
 8004b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d001      	beq.n	8004b4e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e02b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b4e:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	08db      	lsrs	r3, r3, #3
 8004b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b58:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d01f      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b70:	f7fc fedc 	bl	800192c <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b76:	bf00      	nop
 8004b78:	f7fc fed8 	bl	800192c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d0f9      	beq.n	8004b78 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_RCC_OscConfig+0x860>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b90:	00d2      	lsls	r2, r2, #3
 8004b92:	4907      	ldr	r1, [pc, #28]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <HAL_RCC_OscConfig+0x85c>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3730      	adds	r7, #48	; 0x30
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	ffff0007 	.word	0xffff0007

08004bb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e19c      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b8a      	ldr	r3, [pc, #552]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d910      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b87      	ldr	r3, [pc, #540]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 020f 	bic.w	r2, r3, #15
 8004be2:	4985      	ldr	r1, [pc, #532]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b83      	ldr	r3, [pc, #524]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e184      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	4b7b      	ldr	r3, [pc, #492]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d908      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c18:	4b78      	ldr	r3, [pc, #480]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4975      	ldr	r1, [pc, #468]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	4b70      	ldr	r3, [pc, #448]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d908      	bls.n	8004c58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c46:	4b6d      	ldr	r3, [pc, #436]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	496a      	ldr	r1, [pc, #424]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d010      	beq.n	8004c86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	4b64      	ldr	r3, [pc, #400]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d908      	bls.n	8004c86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c74:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	495e      	ldr	r1, [pc, #376]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d010      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	4b59      	ldr	r3, [pc, #356]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d908      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ca2:	4b56      	ldr	r3, [pc, #344]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	4953      	ldr	r1, [pc, #332]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d010      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	4b4d      	ldr	r3, [pc, #308]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d908      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd0:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f023 020f 	bic.w	r2, r3, #15
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4947      	ldr	r1, [pc, #284]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d055      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cee:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	4940      	ldr	r1, [pc, #256]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d08:	4b3c      	ldr	r3, [pc, #240]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d121      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0f6      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d20:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d115      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0ea      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d38:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0de      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d48:	4b2c      	ldr	r3, [pc, #176]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0d6      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d58:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f023 0207 	bic.w	r2, r3, #7
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4925      	ldr	r1, [pc, #148]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fc fddf 	bl	800192c <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d72:	f7fc fddb 	bl	800192c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e0be      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d88:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d1eb      	bne.n	8004d72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d208      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f023 020f 	bic.w	r2, r3, #15
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	490e      	ldr	r1, [pc, #56]	; (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d214      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 020f 	bic.w	r2, r3, #15
 8004dde:	4906      	ldr	r1, [pc, #24]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e086      	b.n	8004f06 <HAL_RCC_ClockConfig+0x34e>
 8004df8:	52002000 	.word	0x52002000
 8004dfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d208      	bcs.n	8004e2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e1c:	4b3c      	ldr	r3, [pc, #240]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	4939      	ldr	r1, [pc, #228]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d010      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	4b34      	ldr	r3, [pc, #208]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d208      	bcs.n	8004e5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e4a:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	492e      	ldr	r1, [pc, #184]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699a      	ldr	r2, [r3, #24]
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d208      	bcs.n	8004e8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	4922      	ldr	r1, [pc, #136]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d010      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d208      	bcs.n	8004eb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4917      	ldr	r1, [pc, #92]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004eb8:	f000 f834 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	4912      	ldr	r1, [pc, #72]	; (8004f14 <HAL_RCC_ClockConfig+0x35c>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <HAL_RCC_ClockConfig+0x358>)
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <HAL_RCC_ClockConfig+0x35c>)
 8004ee0:	5cd3      	ldrb	r3, [r2, r3]
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <HAL_RCC_ClockConfig+0x360>)
 8004eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_RCC_ClockConfig+0x364>)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_RCC_ClockConfig+0x368>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fc fccc 	bl	8001898 <HAL_InitTick>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	58024400 	.word	0x58024400
 8004f14:	0800aa94 	.word	0x0800aa94
 8004f18:	24000004 	.word	0x24000004
 8004f1c:	24000000 	.word	0x24000000
 8004f20:	24000008 	.word	0x24000008

08004f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f2a:	4bb3      	ldr	r3, [pc, #716]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f32:	2b18      	cmp	r3, #24
 8004f34:	f200 8155 	bhi.w	80051e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004fa5 	.word	0x08004fa5
 8004f44:	080051e3 	.word	0x080051e3
 8004f48:	080051e3 	.word	0x080051e3
 8004f4c:	080051e3 	.word	0x080051e3
 8004f50:	080051e3 	.word	0x080051e3
 8004f54:	080051e3 	.word	0x080051e3
 8004f58:	080051e3 	.word	0x080051e3
 8004f5c:	080051e3 	.word	0x080051e3
 8004f60:	08004fcb 	.word	0x08004fcb
 8004f64:	080051e3 	.word	0x080051e3
 8004f68:	080051e3 	.word	0x080051e3
 8004f6c:	080051e3 	.word	0x080051e3
 8004f70:	080051e3 	.word	0x080051e3
 8004f74:	080051e3 	.word	0x080051e3
 8004f78:	080051e3 	.word	0x080051e3
 8004f7c:	080051e3 	.word	0x080051e3
 8004f80:	08004fd1 	.word	0x08004fd1
 8004f84:	080051e3 	.word	0x080051e3
 8004f88:	080051e3 	.word	0x080051e3
 8004f8c:	080051e3 	.word	0x080051e3
 8004f90:	080051e3 	.word	0x080051e3
 8004f94:	080051e3 	.word	0x080051e3
 8004f98:	080051e3 	.word	0x080051e3
 8004f9c:	080051e3 	.word	0x080051e3
 8004fa0:	08004fd7 	.word	0x08004fd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa4:	4b94      	ldr	r3, [pc, #592]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fb0:	4b91      	ldr	r3, [pc, #580]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	08db      	lsrs	r3, r3, #3
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	4a90      	ldr	r2, [pc, #576]	; (80051fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004fc2:	e111      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fc4:	4b8d      	ldr	r3, [pc, #564]	; (80051fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fc6:	61bb      	str	r3, [r7, #24]
      break;
 8004fc8:	e10e      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004fca:	4b8d      	ldr	r3, [pc, #564]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fcc:	61bb      	str	r3, [r7, #24]
      break;
 8004fce:	e10b      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004fd0:	4b8c      	ldr	r3, [pc, #560]	; (8005204 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fd2:	61bb      	str	r3, [r7, #24]
      break;
 8004fd4:	e108      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fd6:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004fe0:	4b85      	ldr	r3, [pc, #532]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fec:	4b82      	ldr	r3, [pc, #520]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ff6:	4b80      	ldr	r3, [pc, #512]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80e1 	beq.w	80051dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b02      	cmp	r3, #2
 800501e:	f000 8083 	beq.w	8005128 <HAL_RCC_GetSysClockFreq+0x204>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b02      	cmp	r3, #2
 8005026:	f200 80a1 	bhi.w	800516c <HAL_RCC_GetSysClockFreq+0x248>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x114>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d056      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005036:	e099      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005038:	4b6f      	ldr	r3, [pc, #444]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d02d      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005044:	4b6c      	ldr	r3, [pc, #432]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	08db      	lsrs	r3, r3, #3
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	4a6b      	ldr	r2, [pc, #428]	; (80051fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506e:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005082:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800509e:	e087      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800520c <HAL_RCC_GetSysClockFreq+0x2e8>
 80050ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b2:	4b51      	ldr	r3, [pc, #324]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005208 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050e2:	e065      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f6:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005106:	ed97 6a02 	vldr	s12, [r7, #8]
 800510a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800510e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005126:	e043      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005214 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b2f      	ldr	r3, [pc, #188]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a02 	vldr	s12, [r7, #8]
 800514e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800516a:	e021      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2ec>
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005192:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	0a5b      	lsrs	r3, r3, #9
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	3301      	adds	r3, #1
 80051bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	ee07 3a90 	vmov	s15, r3
 80051c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d4:	ee17 3a90 	vmov	r3, s15
 80051d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80051da:	e005      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
      break;
 80051e0:	e002      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051e4:	61bb      	str	r3, [r7, #24]
      break;
 80051e6:	bf00      	nop
  }

  return sysclockfreq;
 80051e8:	69bb      	ldr	r3, [r7, #24]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3724      	adds	r7, #36	; 0x24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	58024400 	.word	0x58024400
 80051fc:	03d09000 	.word	0x03d09000
 8005200:	003d0900 	.word	0x003d0900
 8005204:	007a1200 	.word	0x007a1200
 8005208:	46000000 	.word	0x46000000
 800520c:	4c742400 	.word	0x4c742400
 8005210:	4a742400 	.word	0x4a742400
 8005214:	4af42400 	.word	0x4af42400

08005218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800521e:	f7ff fe81 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8005222:	4602      	mov	r2, r0
 8005224:	4b10      	ldr	r3, [pc, #64]	; (8005268 <HAL_RCC_GetHCLKFreq+0x50>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	490f      	ldr	r1, [pc, #60]	; (800526c <HAL_RCC_GetHCLKFreq+0x54>)
 8005230:	5ccb      	ldrb	r3, [r1, r3]
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_RCC_GetHCLKFreq+0x50>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	4a09      	ldr	r2, [pc, #36]	; (800526c <HAL_RCC_GetHCLKFreq+0x54>)
 8005246:	5cd3      	ldrb	r3, [r2, r3]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	4a07      	ldr	r2, [pc, #28]	; (8005270 <HAL_RCC_GetHCLKFreq+0x58>)
 8005254:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005256:	4a07      	ldr	r2, [pc, #28]	; (8005274 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <HAL_RCC_GetHCLKFreq+0x58>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	58024400 	.word	0x58024400
 800526c:	0800aa94 	.word	0x0800aa94
 8005270:	24000004 	.word	0x24000004
 8005274:	24000000 	.word	0x24000000

08005278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800527c:	f7ff ffcc 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4904      	ldr	r1, [pc, #16]	; (80052a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	58024400 	.word	0x58024400
 80052a0:	0800aa94 	.word	0x0800aa94

080052a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80052a8:	f7ff ffb6 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4904      	ldr	r1, [pc, #16]	; (80052cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	58024400 	.word	0x58024400
 80052cc:	0800aa94 	.word	0x0800aa94

080052d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d4:	b0c8      	sub	sp, #288	; 0x120
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052e2:	2300      	movs	r3, #0
 80052e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80052f4:	2500      	movs	r5, #0
 80052f6:	ea54 0305 	orrs.w	r3, r4, r5
 80052fa:	d049      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80052fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005306:	d02f      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800530c:	d828      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800530e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005312:	d01a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005318:	d822      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800531e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005322:	d007      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005324:	e01c      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005326:	4ba7      	ldr	r3, [pc, #668]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	4aa6      	ldr	r2, [pc, #664]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800532c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005332:	e01a      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005338:	3308      	adds	r3, #8
 800533a:	2102      	movs	r1, #2
 800533c:	4618      	mov	r0, r3
 800533e:	f001 fc43 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005348:	e00f      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800534a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534e:	3328      	adds	r3, #40	; 0x28
 8005350:	2102      	movs	r1, #2
 8005352:	4618      	mov	r0, r3
 8005354:	f001 fcea 	bl	8006d2c <RCCEx_PLL3_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800535e:	e004      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005366:	e000      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005372:	4b94      	ldr	r3, [pc, #592]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005376:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800537a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005380:	4a90      	ldr	r2, [pc, #576]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005382:	430b      	orrs	r3, r1
 8005384:	6513      	str	r3, [r2, #80]	; 0x50
 8005386:	e003      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800538c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800539c:	f04f 0900 	mov.w	r9, #0
 80053a0:	ea58 0309 	orrs.w	r3, r8, r9
 80053a4:	d047      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d82a      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053b0:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053cd 	.word	0x080053cd
 80053bc:	080053db 	.word	0x080053db
 80053c0:	080053f1 	.word	0x080053f1
 80053c4:	0800540f 	.word	0x0800540f
 80053c8:	0800540f 	.word	0x0800540f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053cc:	4b7d      	ldr	r3, [pc, #500]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a7c      	ldr	r2, [pc, #496]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053d8:	e01a      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053de:	3308      	adds	r3, #8
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fbf0 	bl	8006bc8 <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ee:	e00f      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f4:	3328      	adds	r3, #40	; 0x28
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 fc97 	bl	8006d2c <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005404:	e004      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800540c:	e000      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800540e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005410:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005418:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800541a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541c:	f023 0107 	bic.w	r1, r3, #7
 8005420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6513      	str	r3, [r2, #80]	; 0x50
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005432:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005442:	f04f 0b00 	mov.w	fp, #0
 8005446:	ea5a 030b 	orrs.w	r3, sl, fp
 800544a:	d054      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800544c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005452:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005456:	d036      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005458:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800545c:	d82f      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800545e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005462:	d032      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005468:	d829      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800546a:	2bc0      	cmp	r3, #192	; 0xc0
 800546c:	d02f      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800546e:	2bc0      	cmp	r3, #192	; 0xc0
 8005470:	d825      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d018      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d821      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d007      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005482:	e01c      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005484:	4b4f      	ldr	r3, [pc, #316]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800548a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005490:	e01e      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005496:	3308      	adds	r3, #8
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fb94 	bl	8006bc8 <RCCEx_PLL2_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80054a6:	e013      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ac:	3328      	adds	r3, #40	; 0x28
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fc3b 	bl	8006d2c <RCCEx_PLL3_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054c4:	e004      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80054c6:	bf00      	nop
 80054c8:	e002      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80054ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80054d8:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80054e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	4a37      	ldr	r2, [pc, #220]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6513      	str	r3, [r2, #80]	; 0x50
 80054ec:	e003      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80054f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005502:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005506:	2300      	movs	r3, #0
 8005508:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800550c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d05c      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005520:	d03b      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005522:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005526:	d834      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552c:	d037      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005532:	d82e      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005534:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005538:	d033      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800553a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800553e:	d828      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d01a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554a:	d822      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005554:	d007      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005556:	e01c      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005558:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800555e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005564:	e01e      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556a:	3308      	adds	r3, #8
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f001 fb2a 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800557a:	e013      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800557c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005580:	3328      	adds	r3, #40	; 0x28
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fbd1 	bl	8006d2c <RCCEx_PLL3_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005590:	e008      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005598:	e004      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800559a:	bf00      	nop
 800559c:	e002      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800559e:	bf00      	nop
 80055a0:	e000      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80055a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10d      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80055b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	4a02      	ldr	r2, [pc, #8]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055bc:	430b      	orrs	r3, r1
 80055be:	6513      	str	r3, [r2, #80]	; 0x50
 80055c0:	e006      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80055dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055e0:	2300      	movs	r3, #0
 80055e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80055ea:	460b      	mov	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	d03a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80055f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d01f      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80055fa:	2b30      	cmp	r3, #48	; 0x30
 80055fc:	d819      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d00c      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005602:	2b20      	cmp	r3, #32
 8005604:	d815      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d019      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800560a:	2b10      	cmp	r3, #16
 800560c:	d111      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560e:	4bae      	ldr	r3, [pc, #696]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	4aad      	ldr	r2, [pc, #692]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005618:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800561c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005620:	3308      	adds	r3, #8
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f001 facf 	bl	8006bc8 <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005648:	4b9f      	ldr	r3, [pc, #636]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800564a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	4a9c      	ldr	r2, [pc, #624]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005658:	430b      	orrs	r3, r1
 800565a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005662:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005672:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800567c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d051      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800568c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005690:	d035      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005696:	d82e      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005698:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800569c:	d031      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800569e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056a2:	d828      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80056a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a8:	d01a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	d822      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80056b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b8:	d007      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80056ba:	e01c      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056bc:	4b82      	ldr	r3, [pc, #520]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	4a81      	ldr	r2, [pc, #516]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056c8:	e01c      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ce:	3308      	adds	r3, #8
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fa78 	bl	8006bc8 <RCCEx_PLL2_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056de:	e011      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e4:	3328      	adds	r3, #40	; 0x28
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fb1f 	bl	8006d2c <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056f4:	e006      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056fc:	e002      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005704:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800570c:	4b6e      	ldr	r3, [pc, #440]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800571a:	4a6b      	ldr	r2, [pc, #428]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6513      	str	r3, [r2, #80]	; 0x50
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005726:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800572a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005740:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d053      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800574a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005754:	d033      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800575a:	d82c      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800575c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005760:	d02f      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005766:	d826      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005768:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800576c:	d02b      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800576e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005772:	d820      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005778:	d012      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800577a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800577e:	d81a      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d022      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d115      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	3308      	adds	r3, #8
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fa18 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800579e:	e015      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a4:	3328      	adds	r3, #40	; 0x28
 80057a6:	2101      	movs	r1, #1
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 fabf 	bl	8006d2c <RCCEx_PLL3_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057b4:	e00a      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057bc:	e006      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057be:	bf00      	nop
 80057c0:	e004      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057c2:	bf00      	nop
 80057c4:	e002      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057d4:	4b3c      	ldr	r3, [pc, #240]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80057dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e2:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	6513      	str	r3, [r2, #80]	; 0x50
 80057e8:	e003      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80057fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005802:	2300      	movs	r3, #0
 8005804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005808:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800580c:	460b      	mov	r3, r1
 800580e:	4313      	orrs	r3, r2
 8005810:	d060      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800581a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800581e:	d039      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005820:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005824:	d832      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800582a:	d035      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800582c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005830:	d82c      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d031      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583c:	d826      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800583e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005842:	d02d      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005844:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005848:	d820      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800584a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584e:	d012      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005854:	d81a      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d024      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800585a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800585e:	d115      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005864:	3308      	adds	r3, #8
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f001 f9ad 	bl	8006bc8 <RCCEx_PLL2_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005874:	e017      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587a:	3328      	adds	r3, #40	; 0x28
 800587c:	2101      	movs	r1, #1
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fa54 	bl	8006d2c <RCCEx_PLL3_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800588a:	e00c      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005892:	e008      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005894:	bf00      	nop
 8005896:	e006      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005898:	bf00      	nop
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800589c:	bf00      	nop
 800589e:	e002      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80058a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10e      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80058b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058be:	4a02      	ldr	r2, [pc, #8]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6593      	str	r3, [r2, #88]	; 0x58
 80058c4:	e006      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80058e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058ee:	460b      	mov	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	d037      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80058f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fe:	d00e      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005904:	d816      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800590a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800590e:	d111      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005910:	4bc4      	ldr	r3, [pc, #784]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4ac3      	ldr	r2, [pc, #780]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800591a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800591c:	e00f      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800591e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005922:	3308      	adds	r3, #8
 8005924:	2101      	movs	r1, #1
 8005926:	4618      	mov	r0, r3
 8005928:	f001 f94e 	bl	8006bc8 <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005932:	e004      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800593a:	e000      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800593c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800593e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005946:	4bb7      	ldr	r3, [pc, #732]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800594e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005954:	4ab3      	ldr	r2, [pc, #716]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005956:	430b      	orrs	r3, r1
 8005958:	6513      	str	r3, [r2, #80]	; 0x50
 800595a:	e003      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005960:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005974:	2300      	movs	r3, #0
 8005976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800597a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800597e:	460b      	mov	r3, r1
 8005980:	4313      	orrs	r3, r2
 8005982:	d039      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598a:	2b03      	cmp	r3, #3
 800598c:	d81c      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059d1 	.word	0x080059d1
 8005998:	080059a5 	.word	0x080059a5
 800599c:	080059b3 	.word	0x080059b3
 80059a0:	080059d1 	.word	0x080059d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a4:	4b9f      	ldr	r3, [pc, #636]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	4a9e      	ldr	r2, [pc, #632]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059b0:	e00f      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b6:	3308      	adds	r3, #8
 80059b8:	2102      	movs	r1, #2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 f904 	bl	8006bc8 <RCCEx_PLL2_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059c6:	e004      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059ce:	e000      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80059d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059da:	4b92      	ldr	r3, [pc, #584]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	f023 0103 	bic.w	r1, r3, #3
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e8:	4a8e      	ldr	r2, [pc, #568]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059ea:	430b      	orrs	r3, r1
 80059ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ee:	e003      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005a12:	460b      	mov	r3, r1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f000 8099 	beq.w	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a1a:	4b83      	ldr	r3, [pc, #524]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a82      	ldr	r2, [pc, #520]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a26:	f7fb ff81 	bl	800192c <HAL_GetTick>
 8005a2a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a30:	f7fb ff7c 	bl	800192c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b64      	cmp	r3, #100	; 0x64
 8005a3e:	d903      	bls.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a46:	e005      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a48:	4b77      	ldr	r3, [pc, #476]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0ed      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005a54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d173      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a5c:	4b71      	ldr	r3, [pc, #452]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a68:	4053      	eors	r3, r2
 8005a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d015      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a72:	4b6c      	ldr	r3, [pc, #432]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a7e:	4b69      	ldr	r3, [pc, #420]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	4a68      	ldr	r2, [pc, #416]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a8a:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	4a65      	ldr	r2, [pc, #404]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a96:	4a63      	ldr	r2, [pc, #396]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aaa:	d118      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fb ff3e 	bl	800192c <HAL_GetTick>
 8005ab0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ab4:	e00d      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab6:	f7fb ff39 	bl	800192c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ac0:	1ad2      	subs	r2, r2, r3
 8005ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d903      	bls.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005ad0:	e005      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad2:	4b54      	ldr	r3, [pc, #336]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0eb      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005ade:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d129      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af6:	d10e      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005af8:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b08:	091a      	lsrs	r2, r3, #4
 8005b0a:	4b48      	ldr	r3, [pc, #288]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	4a45      	ldr	r2, [pc, #276]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6113      	str	r3, [r2, #16]
 8005b14:	e005      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005b16:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	4a42      	ldr	r2, [pc, #264]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b20:	6113      	str	r3, [r2, #16]
 8005b22:	4b40      	ldr	r3, [pc, #256]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6713      	str	r3, [r2, #112]	; 0x70
 8005b38:	e008      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f002 0301 	and.w	r3, r2, #1
 8005b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f000 8090 	beq.w	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	2b28      	cmp	r3, #40	; 0x28
 8005b78:	d870      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005c65 	.word	0x08005c65
 8005b84:	08005c5d 	.word	0x08005c5d
 8005b88:	08005c5d 	.word	0x08005c5d
 8005b8c:	08005c5d 	.word	0x08005c5d
 8005b90:	08005c5d 	.word	0x08005c5d
 8005b94:	08005c5d 	.word	0x08005c5d
 8005b98:	08005c5d 	.word	0x08005c5d
 8005b9c:	08005c5d 	.word	0x08005c5d
 8005ba0:	08005c31 	.word	0x08005c31
 8005ba4:	08005c5d 	.word	0x08005c5d
 8005ba8:	08005c5d 	.word	0x08005c5d
 8005bac:	08005c5d 	.word	0x08005c5d
 8005bb0:	08005c5d 	.word	0x08005c5d
 8005bb4:	08005c5d 	.word	0x08005c5d
 8005bb8:	08005c5d 	.word	0x08005c5d
 8005bbc:	08005c5d 	.word	0x08005c5d
 8005bc0:	08005c47 	.word	0x08005c47
 8005bc4:	08005c5d 	.word	0x08005c5d
 8005bc8:	08005c5d 	.word	0x08005c5d
 8005bcc:	08005c5d 	.word	0x08005c5d
 8005bd0:	08005c5d 	.word	0x08005c5d
 8005bd4:	08005c5d 	.word	0x08005c5d
 8005bd8:	08005c5d 	.word	0x08005c5d
 8005bdc:	08005c5d 	.word	0x08005c5d
 8005be0:	08005c65 	.word	0x08005c65
 8005be4:	08005c5d 	.word	0x08005c5d
 8005be8:	08005c5d 	.word	0x08005c5d
 8005bec:	08005c5d 	.word	0x08005c5d
 8005bf0:	08005c5d 	.word	0x08005c5d
 8005bf4:	08005c5d 	.word	0x08005c5d
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005c5d 	.word	0x08005c5d
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005c5d 	.word	0x08005c5d
 8005c08:	08005c5d 	.word	0x08005c5d
 8005c0c:	08005c5d 	.word	0x08005c5d
 8005c10:	08005c5d 	.word	0x08005c5d
 8005c14:	08005c5d 	.word	0x08005c5d
 8005c18:	08005c5d 	.word	0x08005c5d
 8005c1c:	08005c5d 	.word	0x08005c5d
 8005c20:	08005c65 	.word	0x08005c65
 8005c24:	58024400 	.word	0x58024400
 8005c28:	58024800 	.word	0x58024800
 8005c2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c34:	3308      	adds	r3, #8
 8005c36:	2101      	movs	r1, #1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 ffc5 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c44:	e00f      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4a:	3328      	adds	r3, #40	; 0x28
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 f86c 	bl	8006d2c <RCCEx_PLL3_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c5a:	e004      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c62:	e000      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c6e:	4bc0      	ldr	r3, [pc, #768]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c7e:	4abc      	ldr	r2, [pc, #752]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6553      	str	r3, [r2, #84]	; 0x54
 8005c84:	e003      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f002 0302 	and.w	r3, r2, #2
 8005c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ca4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4313      	orrs	r3, r2
 8005cac:	d043      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d824      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005d0d 	.word	0x08005d0d
 8005cc4:	08005cd9 	.word	0x08005cd9
 8005cc8:	08005cef 	.word	0x08005cef
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d0d 	.word	0x08005d0d
 8005cd4:	08005d0d 	.word	0x08005d0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cdc:	3308      	adds	r3, #8
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 ff71 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cec:	e00f      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf2:	3328      	adds	r3, #40	; 0x28
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f818 	bl	8006d2c <RCCEx_PLL3_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d02:	e004      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d0a:	e000      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d16:	4b96      	ldr	r3, [pc, #600]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f023 0107 	bic.w	r1, r3, #7
 8005d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d26:	4a92      	ldr	r2, [pc, #584]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6553      	str	r3, [r2, #84]	; 0x54
 8005d2c:	e003      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f002 0304 	and.w	r3, r2, #4
 8005d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d46:	2300      	movs	r3, #0
 8005d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d4c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d043      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d5e:	2b05      	cmp	r3, #5
 8005d60:	d824      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005d62:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d68:	08005db5 	.word	0x08005db5
 8005d6c:	08005d81 	.word	0x08005d81
 8005d70:	08005d97 	.word	0x08005d97
 8005d74:	08005db5 	.word	0x08005db5
 8005d78:	08005db5 	.word	0x08005db5
 8005d7c:	08005db5 	.word	0x08005db5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d84:	3308      	adds	r3, #8
 8005d86:	2101      	movs	r1, #1
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 ff1d 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d94:	e00f      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9a:	3328      	adds	r3, #40	; 0x28
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 ffc4 	bl	8006d2c <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005daa:	e004      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005db2:	e000      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dbe:	4b6c      	ldr	r3, [pc, #432]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc2:	f023 0107 	bic.w	r1, r3, #7
 8005dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dce:	4a68      	ldr	r2, [pc, #416]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd4:	e003      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f002 0320 	and.w	r3, r2, #32
 8005dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	d055      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e0a:	d033      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e10:	d82c      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d02f      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d826      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005e1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e22:	d02b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005e24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e28:	d820      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2e:	d012      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e34:	d81a      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d022      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3e:	d115      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e44:	3308      	adds	r3, #8
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 febd 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e54:	e015      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5a:	3328      	adds	r3, #40	; 0x28
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 ff64 	bl	8006d2c <RCCEx_PLL3_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e72:	e006      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e74:	bf00      	nop
 8005e76:	e004      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e78:	bf00      	nop
 8005e7a:	e002      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e8a:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e9a:	4a35      	ldr	r2, [pc, #212]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6553      	str	r3, [r2, #84]	; 0x54
 8005ea0:	e003      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ea6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ec0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d058      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ece:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ed2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ed6:	d033      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005ed8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005edc:	d82c      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d02f      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d826      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005eea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eee:	d02b      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ef4:	d820      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efa:	d012      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f00:	d81a      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d022      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0a:	d115      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f10:	3308      	adds	r3, #8
 8005f12:	2100      	movs	r1, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fe57 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f20:	e015      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f26:	3328      	adds	r3, #40	; 0x28
 8005f28:	2102      	movs	r1, #2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fefe 	bl	8006d2c <RCCEx_PLL3_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f36:	e00a      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f3e:	e006      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f40:	bf00      	nop
 8005f42:	e004      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f44:	bf00      	nop
 8005f46:	e002      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10e      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f56:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f66:	4a02      	ldr	r2, [pc, #8]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f6c:	e006      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005f6e:	bf00      	nop
 8005f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f96:	460b      	mov	r3, r1
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	d055      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fa4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fa8:	d033      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005faa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fae:	d82c      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d02f      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fba:	d826      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005fbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fc0:	d02b      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005fc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fc6:	d820      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fcc:	d012      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd2:	d81a      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d022      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fdc:	d115      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fdee 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ff2:	e015      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff8:	3328      	adds	r3, #40	; 0x28
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fe95 	bl	8006d2c <RCCEx_PLL3_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006008:	e00a      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006010:	e006      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006012:	bf00      	nop
 8006014:	e004      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006016:	bf00      	nop
 8006018:	e002      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800601e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006028:	4ba1      	ldr	r3, [pc, #644]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006034:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006038:	4a9d      	ldr	r2, [pc, #628]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800603a:	430b      	orrs	r3, r1
 800603c:	6593      	str	r3, [r2, #88]	; 0x58
 800603e:	e003      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006044:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f002 0308 	and.w	r3, r2, #8
 8006054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006058:	2300      	movs	r3, #0
 800605a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800605e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	d01e      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006074:	d10c      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607a:	3328      	adds	r3, #40	; 0x28
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fe54 	bl	8006d2c <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006090:	4b87      	ldr	r3, [pc, #540]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006094:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a0:	4a83      	ldr	r2, [pc, #524]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f002 0310 	and.w	r3, r2, #16
 80060b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060b6:	2300      	movs	r3, #0
 80060b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80060bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80060c0:	460b      	mov	r3, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d01e      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d2:	d10c      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d8:	3328      	adds	r3, #40	; 0x28
 80060da:	2102      	movs	r1, #2
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fe25 	bl	8006d2c <RCCEx_PLL3_Config>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060ee:	4b70      	ldr	r3, [pc, #448]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060fe:	4a6c      	ldr	r2, [pc, #432]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006100:	430b      	orrs	r3, r1
 8006102:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006110:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006114:	2300      	movs	r3, #0
 8006116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800611a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800611e:	460b      	mov	r3, r1
 8006120:	4313      	orrs	r3, r2
 8006122:	d03e      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800612c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006130:	d022      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006136:	d81b      	bhi.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d00b      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006142:	e015      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006148:	3308      	adds	r3, #8
 800614a:	2100      	movs	r1, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fd3b 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006158:	e00f      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800615a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800615e:	3328      	adds	r3, #40	; 0x28
 8006160:	2102      	movs	r1, #2
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fde2 	bl	8006d2c <RCCEx_PLL3_Config>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800616e:	e004      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006176:	e000      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006182:	4b4b      	ldr	r3, [pc, #300]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006186:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800618a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006192:	4a47      	ldr	r2, [pc, #284]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006194:	430b      	orrs	r3, r1
 8006196:	6593      	str	r3, [r2, #88]	; 0x58
 8006198:	e003      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800619e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80061ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80061b0:	2300      	movs	r3, #0
 80061b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80061b8:	460b      	mov	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	d03b      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061ca:	d01f      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80061cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061d0:	d818      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80061d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d6:	d003      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80061d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061dc:	d007      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80061de:	e011      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e0:	4b33      	ldr	r3, [pc, #204]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4a32      	ldr	r2, [pc, #200]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80061ec:	e00f      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f2:	3328      	adds	r3, #40	; 0x28
 80061f4:	2101      	movs	r1, #1
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fd98 	bl	8006d2c <RCCEx_PLL3_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006202:	e004      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800620c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006216:	4b26      	ldr	r3, [pc, #152]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800621e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006226:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006228:	430b      	orrs	r3, r1
 800622a:	6553      	str	r3, [r2, #84]	; 0x54
 800622c:	e003      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006232:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006242:	673b      	str	r3, [r7, #112]	; 0x70
 8006244:	2300      	movs	r3, #0
 8006246:	677b      	str	r3, [r7, #116]	; 0x74
 8006248:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d034      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006260:	d007      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006262:	e011      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006264:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	4a11      	ldr	r2, [pc, #68]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800626a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006270:	e00e      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006276:	3308      	adds	r3, #8
 8006278:	2102      	movs	r1, #2
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fca4 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800628e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10d      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006298:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	4a02      	ldr	r2, [pc, #8]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80062ae:	bf00      	nop
 80062b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80062c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062ca:	2300      	movs	r3, #0
 80062cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80062d2:	460b      	mov	r3, r1
 80062d4:	4313      	orrs	r3, r2
 80062d6:	d00c      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062dc:	3328      	adds	r3, #40	; 0x28
 80062de:	2102      	movs	r1, #2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fd23 	bl	8006d2c <RCCEx_PLL3_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80062fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006300:	2300      	movs	r3, #0
 8006302:	667b      	str	r3, [r7, #100]	; 0x64
 8006304:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006308:	460b      	mov	r3, r1
 800630a:	4313      	orrs	r3, r2
 800630c:	d038      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800630e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631a:	d018      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800631c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006320:	d811      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006326:	d014      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632c:	d80b      	bhi.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d011      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006336:	d106      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006338:	4bc3      	ldr	r3, [pc, #780]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4ac2      	ldr	r2, [pc, #776]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800633e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006344:	e008      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800634c:	e004      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006360:	4bb9      	ldr	r3, [pc, #740]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	4ab5      	ldr	r2, [pc, #724]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006372:	430b      	orrs	r3, r1
 8006374:	6553      	str	r3, [r2, #84]	; 0x54
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800637c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800638c:	65bb      	str	r3, [r7, #88]	; 0x58
 800638e:	2300      	movs	r3, #0
 8006390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006392:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006396:	460b      	mov	r3, r1
 8006398:	4313      	orrs	r3, r2
 800639a:	d009      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800639c:	4baa      	ldr	r3, [pc, #680]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80063a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063aa:	4aa7      	ldr	r2, [pc, #668]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80063bc:	653b      	str	r3, [r7, #80]	; 0x50
 80063be:	2300      	movs	r3, #0
 80063c0:	657b      	str	r3, [r7, #84]	; 0x54
 80063c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80063c6:	460b      	mov	r3, r1
 80063c8:	4313      	orrs	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063cc:	4b9e      	ldr	r3, [pc, #632]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80063d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4a9b      	ldr	r2, [pc, #620]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80063e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80063ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ee:	2300      	movs	r3, #0
 80063f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d009      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80063fc:	4b92      	ldr	r3, [pc, #584]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640a:	4a8f      	ldr	r2, [pc, #572]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800640c:	430b      	orrs	r3, r1
 800640e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800641c:	643b      	str	r3, [r7, #64]	; 0x40
 800641e:	2300      	movs	r3, #0
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
 8006422:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006426:	460b      	mov	r3, r1
 8006428:	4313      	orrs	r3, r2
 800642a:	d00e      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800642c:	4b86      	ldr	r3, [pc, #536]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	4a85      	ldr	r2, [pc, #532]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006432:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006436:	6113      	str	r3, [r2, #16]
 8006438:	4b83      	ldr	r3, [pc, #524]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800643a:	6919      	ldr	r1, [r3, #16]
 800643c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006440:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006444:	4a80      	ldr	r2, [pc, #512]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006446:	430b      	orrs	r3, r1
 8006448:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800644a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006456:	63bb      	str	r3, [r7, #56]	; 0x38
 8006458:	2300      	movs	r3, #0
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006466:	4b78      	ldr	r3, [pc, #480]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800646e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006474:	4a74      	ldr	r2, [pc, #464]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006476:	430b      	orrs	r3, r1
 8006478:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800647a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
 8006488:	2300      	movs	r3, #0
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
 800648c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006490:	460b      	mov	r3, r1
 8006492:	4313      	orrs	r3, r2
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006496:	4b6c      	ldr	r3, [pc, #432]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800649e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a6:	4a68      	ldr	r2, [pc, #416]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064a8:	430b      	orrs	r3, r1
 80064aa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80064ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	2100      	movs	r1, #0
 80064b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80064c2:	460b      	mov	r3, r1
 80064c4:	4313      	orrs	r3, r2
 80064c6:	d011      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	3308      	adds	r3, #8
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fb79 	bl	8006bc8 <RCCEx_PLL2_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80064dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	2100      	movs	r1, #0
 80064f6:	6239      	str	r1, [r7, #32]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d011      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650c:	3308      	adds	r3, #8
 800650e:	2101      	movs	r1, #1
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fb59 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800651c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006528:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800652c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	2100      	movs	r1, #0
 8006536:	61b9      	str	r1, [r7, #24]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006542:	460b      	mov	r3, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	d011      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800654c:	3308      	adds	r3, #8
 800654e:	2102      	movs	r1, #2
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fb39 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800655c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006564:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006568:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800656c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	2100      	movs	r1, #0
 8006576:	6139      	str	r1, [r7, #16]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006582:	460b      	mov	r3, r1
 8006584:	4313      	orrs	r3, r2
 8006586:	d011      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800658c:	3328      	adds	r3, #40	; 0x28
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fbcb 	bl	8006d2c <RCCEx_PLL3_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800659c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	2100      	movs	r1, #0
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d011      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065cc:	3328      	adds	r3, #40	; 0x28
 80065ce:	2101      	movs	r1, #1
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fbab 	bl	8006d2c <RCCEx_PLL3_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80065dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	2100      	movs	r1, #0
 80065f6:	6039      	str	r1, [r7, #0]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	607b      	str	r3, [r7, #4]
 80065fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d011      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660c:	3328      	adds	r3, #40	; 0x28
 800660e:	2102      	movs	r1, #2
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fb8b 	bl	8006d2c <RCCEx_PLL3_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800661c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006628:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800662c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e000      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
}
 800663a:	4618      	mov	r0, r3
 800663c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006640:	46bd      	mov	sp, r7
 8006642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400

0800664c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006650:	f7fe fde2 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4904      	ldr	r1, [pc, #16]	; (8006674 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	58024400 	.word	0x58024400
 8006674:	0800aa94 	.word	0x0800aa94

08006678 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006680:	4ba1      	ldr	r3, [pc, #644]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800668a:	4b9f      	ldr	r3, [pc, #636]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	0b1b      	lsrs	r3, r3, #12
 8006690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006694:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006696:	4b9c      	ldr	r3, [pc, #624]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80066a2:	4b99      	ldr	r3, [pc, #612]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8111 	beq.w	80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	f000 8083 	beq.w	80067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	f200 80a1 	bhi.w	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d056      	beq.n	8006790 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066e2:	e099      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e4:	4b88      	ldr	r3, [pc, #544]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02d      	beq.n	800674c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066f0:	4b85      	ldr	r3, [pc, #532]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	08db      	lsrs	r3, r3, #3
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	4a84      	ldr	r2, [pc, #528]	; (800690c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006700:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a03 	vldr	s12, [r7, #12]
 800672e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800674a:	e087      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006756:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675e:	4b6a      	ldr	r3, [pc, #424]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006772:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800678e:	e065      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800679e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a2:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067d2:	e043      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800691c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e6:	4b48      	ldr	r3, [pc, #288]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006816:	e021      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006822:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682a:	4b37      	ldr	r3, [pc, #220]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683a:	ed97 6a03 	vldr	s12, [r7, #12]
 800683e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800684a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800684e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800685a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800685c:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	0a5b      	lsrs	r3, r3, #9
 8006862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006876:	edd7 6a07 	vldr	s13, [r7, #28]
 800687a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800687e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006882:	ee17 2a90 	vmov	r2, s15
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800688a:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b0:	ee17 2a90 	vmov	r2, s15
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80068b8:	4b13      	ldr	r3, [pc, #76]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068de:	ee17 2a90 	vmov	r2, s15
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068e6:	e008      	b.n	80068fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	609a      	str	r2, [r3, #8]
}
 80068fa:	bf00      	nop
 80068fc:	3724      	adds	r7, #36	; 0x24
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	03d09000 	.word	0x03d09000
 8006910:	46000000 	.word	0x46000000
 8006914:	4c742400 	.word	0x4c742400
 8006918:	4a742400 	.word	0x4a742400
 800691c:	4af42400 	.word	0x4af42400

08006920 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006920:	b480      	push	{r7}
 8006922:	b089      	sub	sp, #36	; 0x24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006928:	4ba1      	ldr	r3, [pc, #644]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006932:	4b9f      	ldr	r3, [pc, #636]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	0d1b      	lsrs	r3, r3, #20
 8006938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800693c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800693e:	4b9c      	ldr	r3, [pc, #624]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800694a:	4b99      	ldr	r3, [pc, #612]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	08db      	lsrs	r3, r3, #3
 8006950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8111 	beq.w	8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b02      	cmp	r3, #2
 8006972:	f000 8083 	beq.w	8006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b02      	cmp	r3, #2
 800697a:	f200 80a1 	bhi.w	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d056      	beq.n	8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800698a:	e099      	b.n	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800698c:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d02d      	beq.n	80069f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006998:	4b85      	ldr	r3, [pc, #532]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	08db      	lsrs	r3, r3, #3
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	4a84      	ldr	r2, [pc, #528]	; (8006bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	ee07 3a90 	vmov	s15, r3
 80069b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c2:	4b7b      	ldr	r3, [pc, #492]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069f2:	e087      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a06:	4b6a      	ldr	r3, [pc, #424]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a36:	e065      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a7a:	e043      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b48      	ldr	r3, [pc, #288]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006abe:	e021      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	4b37      	ldr	r3, [pc, #220]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	0a5b      	lsrs	r3, r3, #9
 8006b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2a:	ee17 2a90 	vmov	r2, s15
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b32:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	0c1b      	lsrs	r3, r3, #16
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b58:	ee17 2a90 	vmov	r2, s15
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b60:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	0e1b      	lsrs	r3, r3, #24
 8006b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b86:	ee17 2a90 	vmov	r2, s15
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	609a      	str	r2, [r3, #8]
}
 8006ba2:	bf00      	nop
 8006ba4:	3724      	adds	r7, #36	; 0x24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	03d09000 	.word	0x03d09000
 8006bb8:	46000000 	.word	0x46000000
 8006bbc:	4c742400 	.word	0x4c742400
 8006bc0:	4a742400 	.word	0x4a742400
 8006bc4:	4af42400 	.word	0x4af42400

08006bc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bd6:	4b53      	ldr	r3, [pc, #332]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d101      	bne.n	8006be6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e099      	b.n	8006d1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006be6:	4b4f      	ldr	r3, [pc, #316]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4e      	ldr	r2, [pc, #312]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006bec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf2:	f7fa fe9b 	bl	800192c <HAL_GetTick>
 8006bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bf8:	e008      	b.n	8006c0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bfa:	f7fa fe97 	bl	800192c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e086      	b.n	8006d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c0c:	4b45      	ldr	r3, [pc, #276]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1f0      	bne.n	8006bfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c18:	4b42      	ldr	r3, [pc, #264]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	493f      	ldr	r1, [pc, #252]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	628b      	str	r3, [r1, #40]	; 0x28
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	025b      	lsls	r3, r3, #9
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	061b      	lsls	r3, r3, #24
 8006c58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c5c:	4931      	ldr	r1, [pc, #196]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c62:	4b30      	ldr	r3, [pc, #192]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	492d      	ldr	r1, [pc, #180]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	f023 0220 	bic.w	r2, r3, #32
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	4928      	ldr	r1, [pc, #160]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c86:	4b27      	ldr	r3, [pc, #156]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	4a26      	ldr	r2, [pc, #152]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	f023 0310 	bic.w	r3, r3, #16
 8006c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c92:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <RCCEx_PLL2_Config+0x160>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	69d2      	ldr	r2, [r2, #28]
 8006c9e:	00d2      	lsls	r2, r2, #3
 8006ca0:	4920      	ldr	r1, [pc, #128]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	f043 0310 	orr.w	r3, r3, #16
 8006cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d106      	bne.n	8006cc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cc4:	e00f      	b.n	8006ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ccc:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	4a14      	ldr	r2, [pc, #80]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cd8:	e005      	b.n	8006ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cde:	4a11      	ldr	r2, [pc, #68]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf2:	f7fa fe1b 	bl	800192c <HAL_GetTick>
 8006cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cf8:	e008      	b.n	8006d0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cfa:	f7fa fe17 	bl	800192c <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e006      	b.n	8006d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	58024400 	.word	0x58024400
 8006d28:	ffff0007 	.word	0xffff0007

08006d2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d3a:	4b53      	ldr	r3, [pc, #332]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d101      	bne.n	8006d4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e099      	b.n	8006e7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d4a:	4b4f      	ldr	r3, [pc, #316]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a4e      	ldr	r2, [pc, #312]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d56:	f7fa fde9 	bl	800192c <HAL_GetTick>
 8006d5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d5c:	e008      	b.n	8006d70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d5e:	f7fa fde5 	bl	800192c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e086      	b.n	8006e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d70:	4b45      	ldr	r3, [pc, #276]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1f0      	bne.n	8006d5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d7c:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	051b      	lsls	r3, r3, #20
 8006d8a:	493f      	ldr	r1, [pc, #252]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	628b      	str	r3, [r1, #40]	; 0x28
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	025b      	lsls	r3, r3, #9
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	041b      	lsls	r3, r3, #16
 8006dae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	061b      	lsls	r3, r3, #24
 8006dbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006dc0:	4931      	ldr	r1, [pc, #196]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006dc6:	4b30      	ldr	r3, [pc, #192]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	492d      	ldr	r1, [pc, #180]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	4928      	ldr	r1, [pc, #160]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dea:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	4a26      	ldr	r2, [pc, #152]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <RCCEx_PLL3_Config+0x160>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	69d2      	ldr	r2, [r2, #28]
 8006e02:	00d2      	lsls	r2, r2, #3
 8006e04:	4920      	ldr	r1, [pc, #128]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e0a:	4b1f      	ldr	r3, [pc, #124]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e1c:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e28:	e00f      	b.n	8006e4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d106      	bne.n	8006e3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e30:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a14      	ldr	r2, [pc, #80]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e3c:	e005      	b.n	8006e4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	4a11      	ldr	r2, [pc, #68]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e4a:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a0e      	ldr	r2, [pc, #56]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e56:	f7fa fd69 	bl	800192c <HAL_GetTick>
 8006e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e5c:	e008      	b.n	8006e70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e5e:	f7fa fd65 	bl	800192c <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e006      	b.n	8006e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e70:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	ffff0007 	.word	0xffff0007

08006e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e049      	b.n	8006f36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fa f9c6 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f000 feb4 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e054      	b.n	8007002 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a26      	ldr	r2, [pc, #152]	; (8007010 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d022      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x80>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f82:	d01d      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x80>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a22      	ldr	r2, [pc, #136]	; (8007014 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d018      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x80>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a21      	ldr	r2, [pc, #132]	; (8007018 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x80>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a1f      	ldr	r2, [pc, #124]	; (800701c <HAL_TIM_Base_Start_IT+0xdc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x80>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a1e      	ldr	r2, [pc, #120]	; (8007020 <HAL_TIM_Base_Start_IT+0xe0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x80>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <HAL_TIM_Base_Start_IT+0xe4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_TIM_Base_Start_IT+0x80>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1b      	ldr	r2, [pc, #108]	; (8007028 <HAL_TIM_Base_Start_IT+0xe8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d115      	bne.n	8006fec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	4b19      	ldr	r3, [pc, #100]	; (800702c <HAL_TIM_Base_Start_IT+0xec>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b06      	cmp	r3, #6
 8006fd0:	d015      	beq.n	8006ffe <HAL_TIM_Base_Start_IT+0xbe>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd8:	d011      	beq.n	8006ffe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0201 	orr.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fea:	e008      	b.n	8006ffe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e000      	b.n	8007000 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40010000 	.word	0x40010000
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	40010400 	.word	0x40010400
 8007024:	40001800 	.word	0x40001800
 8007028:	40014000 	.word	0x40014000
 800702c:	00010007 	.word	0x00010007

08007030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e049      	b.n	80070d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f841 	bl	80070de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4610      	mov	r0, r2
 8007070:	f000 fde4 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
	...

080070f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <HAL_TIM_PWM_Start+0x24>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	e03c      	b.n	8007192 <HAL_TIM_PWM_Start+0x9e>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b04      	cmp	r3, #4
 800711c:	d109      	bne.n	8007132 <HAL_TIM_PWM_Start+0x3e>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b01      	cmp	r3, #1
 8007128:	bf14      	ite	ne
 800712a:	2301      	movne	r3, #1
 800712c:	2300      	moveq	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	e02f      	b.n	8007192 <HAL_TIM_PWM_Start+0x9e>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d109      	bne.n	800714c <HAL_TIM_PWM_Start+0x58>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	e022      	b.n	8007192 <HAL_TIM_PWM_Start+0x9e>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b0c      	cmp	r3, #12
 8007150:	d109      	bne.n	8007166 <HAL_TIM_PWM_Start+0x72>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b01      	cmp	r3, #1
 800715c:	bf14      	ite	ne
 800715e:	2301      	movne	r3, #1
 8007160:	2300      	moveq	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	e015      	b.n	8007192 <HAL_TIM_PWM_Start+0x9e>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b10      	cmp	r3, #16
 800716a:	d109      	bne.n	8007180 <HAL_TIM_PWM_Start+0x8c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b01      	cmp	r3, #1
 8007176:	bf14      	ite	ne
 8007178:	2301      	movne	r3, #1
 800717a:	2300      	moveq	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	e008      	b.n	8007192 <HAL_TIM_PWM_Start+0x9e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e0a1      	b.n	80072de <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_TIM_PWM_Start+0xb6>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071a8:	e023      	b.n	80071f2 <HAL_TIM_PWM_Start+0xfe>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_PWM_Start+0xc6>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071b8:	e01b      	b.n	80071f2 <HAL_TIM_PWM_Start+0xfe>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d104      	bne.n	80071ca <HAL_TIM_PWM_Start+0xd6>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c8:	e013      	b.n	80071f2 <HAL_TIM_PWM_Start+0xfe>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b0c      	cmp	r3, #12
 80071ce:	d104      	bne.n	80071da <HAL_TIM_PWM_Start+0xe6>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071d8:	e00b      	b.n	80071f2 <HAL_TIM_PWM_Start+0xfe>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d104      	bne.n	80071ea <HAL_TIM_PWM_Start+0xf6>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e8:	e003      	b.n	80071f2 <HAL_TIM_PWM_Start+0xfe>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2201      	movs	r2, #1
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f938 	bl	8008470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a38      	ldr	r2, [pc, #224]	; (80072e8 <HAL_TIM_PWM_Start+0x1f4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_TIM_PWM_Start+0x13e>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a37      	ldr	r2, [pc, #220]	; (80072ec <HAL_TIM_PWM_Start+0x1f8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00e      	beq.n	8007232 <HAL_TIM_PWM_Start+0x13e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a35      	ldr	r2, [pc, #212]	; (80072f0 <HAL_TIM_PWM_Start+0x1fc>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_TIM_PWM_Start+0x13e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a34      	ldr	r2, [pc, #208]	; (80072f4 <HAL_TIM_PWM_Start+0x200>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_TIM_PWM_Start+0x13e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a32      	ldr	r2, [pc, #200]	; (80072f8 <HAL_TIM_PWM_Start+0x204>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <HAL_TIM_PWM_Start+0x142>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <HAL_TIM_PWM_Start+0x144>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800724a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a25      	ldr	r2, [pc, #148]	; (80072e8 <HAL_TIM_PWM_Start+0x1f4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d022      	beq.n	800729c <HAL_TIM_PWM_Start+0x1a8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725e:	d01d      	beq.n	800729c <HAL_TIM_PWM_Start+0x1a8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a25      	ldr	r2, [pc, #148]	; (80072fc <HAL_TIM_PWM_Start+0x208>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d018      	beq.n	800729c <HAL_TIM_PWM_Start+0x1a8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a24      	ldr	r2, [pc, #144]	; (8007300 <HAL_TIM_PWM_Start+0x20c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d013      	beq.n	800729c <HAL_TIM_PWM_Start+0x1a8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a22      	ldr	r2, [pc, #136]	; (8007304 <HAL_TIM_PWM_Start+0x210>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00e      	beq.n	800729c <HAL_TIM_PWM_Start+0x1a8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <HAL_TIM_PWM_Start+0x1f8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d009      	beq.n	800729c <HAL_TIM_PWM_Start+0x1a8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1e      	ldr	r2, [pc, #120]	; (8007308 <HAL_TIM_PWM_Start+0x214>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <HAL_TIM_PWM_Start+0x1a8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <HAL_TIM_PWM_Start+0x1fc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d115      	bne.n	80072c8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	4b1a      	ldr	r3, [pc, #104]	; (800730c <HAL_TIM_PWM_Start+0x218>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b06      	cmp	r3, #6
 80072ac:	d015      	beq.n	80072da <HAL_TIM_PWM_Start+0x1e6>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b4:	d011      	beq.n	80072da <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0201 	orr.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c6:	e008      	b.n	80072da <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	e000      	b.n	80072dc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40001800 	.word	0x40001800
 800730c:	00010007 	.word	0x00010007

08007310 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <HAL_TIM_PWM_Start_IT+0x28>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	e03c      	b.n	80073b2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b04      	cmp	r3, #4
 800733c:	d109      	bne.n	8007352 <HAL_TIM_PWM_Start_IT+0x42>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b01      	cmp	r3, #1
 8007348:	bf14      	ite	ne
 800734a:	2301      	movne	r3, #1
 800734c:	2300      	moveq	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	e02f      	b.n	80073b2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d109      	bne.n	800736c <HAL_TIM_PWM_Start_IT+0x5c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	bf14      	ite	ne
 8007364:	2301      	movne	r3, #1
 8007366:	2300      	moveq	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	e022      	b.n	80073b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b0c      	cmp	r3, #12
 8007370:	d109      	bne.n	8007386 <HAL_TIM_PWM_Start_IT+0x76>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b01      	cmp	r3, #1
 800737c:	bf14      	ite	ne
 800737e:	2301      	movne	r3, #1
 8007380:	2300      	moveq	r3, #0
 8007382:	b2db      	uxtb	r3, r3
 8007384:	e015      	b.n	80073b2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b10      	cmp	r3, #16
 800738a:	d109      	bne.n	80073a0 <HAL_TIM_PWM_Start_IT+0x90>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	bf14      	ite	ne
 8007398:	2301      	movne	r3, #1
 800739a:	2300      	moveq	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	e008      	b.n	80073b2 <HAL_TIM_PWM_Start_IT+0xa2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	bf14      	ite	ne
 80073ac:	2301      	movne	r3, #1
 80073ae:	2300      	moveq	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e0ec      	b.n	8007594 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <HAL_TIM_PWM_Start_IT+0xba>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073c8:	e023      	b.n	8007412 <HAL_TIM_PWM_Start_IT+0x102>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d104      	bne.n	80073da <HAL_TIM_PWM_Start_IT+0xca>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d8:	e01b      	b.n	8007412 <HAL_TIM_PWM_Start_IT+0x102>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d104      	bne.n	80073ea <HAL_TIM_PWM_Start_IT+0xda>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e8:	e013      	b.n	8007412 <HAL_TIM_PWM_Start_IT+0x102>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b0c      	cmp	r3, #12
 80073ee:	d104      	bne.n	80073fa <HAL_TIM_PWM_Start_IT+0xea>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073f8:	e00b      	b.n	8007412 <HAL_TIM_PWM_Start_IT+0x102>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d104      	bne.n	800740a <HAL_TIM_PWM_Start_IT+0xfa>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007408:	e003      	b.n	8007412 <HAL_TIM_PWM_Start_IT+0x102>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b0c      	cmp	r3, #12
 8007416:	d841      	bhi.n	800749c <HAL_TIM_PWM_Start_IT+0x18c>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_TIM_PWM_Start_IT+0x110>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007455 	.word	0x08007455
 8007424:	0800749d 	.word	0x0800749d
 8007428:	0800749d 	.word	0x0800749d
 800742c:	0800749d 	.word	0x0800749d
 8007430:	08007467 	.word	0x08007467
 8007434:	0800749d 	.word	0x0800749d
 8007438:	0800749d 	.word	0x0800749d
 800743c:	0800749d 	.word	0x0800749d
 8007440:	08007479 	.word	0x08007479
 8007444:	0800749d 	.word	0x0800749d
 8007448:	0800749d 	.word	0x0800749d
 800744c:	0800749d 	.word	0x0800749d
 8007450:	0800748b 	.word	0x0800748b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0202 	orr.w	r2, r2, #2
 8007462:	60da      	str	r2, [r3, #12]
      break;
 8007464:	e01d      	b.n	80074a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0204 	orr.w	r2, r2, #4
 8007474:	60da      	str	r2, [r3, #12]
      break;
 8007476:	e014      	b.n	80074a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0208 	orr.w	r2, r2, #8
 8007486:	60da      	str	r2, [r3, #12]
      break;
 8007488:	e00b      	b.n	80074a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0210 	orr.w	r2, r2, #16
 8007498:	60da      	str	r2, [r3, #12]
      break;
 800749a:	e002      	b.n	80074a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
      break;
 80074a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d174      	bne.n	8007592 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2201      	movs	r2, #1
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 ffdd 	bl	8008470 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a38      	ldr	r2, [pc, #224]	; (800759c <HAL_TIM_PWM_Start_IT+0x28c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a36      	ldr	r2, [pc, #216]	; (80075a0 <HAL_TIM_PWM_Start_IT+0x290>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a35      	ldr	r2, [pc, #212]	; (80075a4 <HAL_TIM_PWM_Start_IT+0x294>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a33      	ldr	r2, [pc, #204]	; (80075a8 <HAL_TIM_PWM_Start_IT+0x298>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a32      	ldr	r2, [pc, #200]	; (80075ac <HAL_TIM_PWM_Start_IT+0x29c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d101      	bne.n	80074ec <HAL_TIM_PWM_Start_IT+0x1dc>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e000      	b.n	80074ee <HAL_TIM_PWM_Start_IT+0x1de>
 80074ec:	2300      	movs	r3, #0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007500:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a25      	ldr	r2, [pc, #148]	; (800759c <HAL_TIM_PWM_Start_IT+0x28c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d022      	beq.n	8007552 <HAL_TIM_PWM_Start_IT+0x242>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007514:	d01d      	beq.n	8007552 <HAL_TIM_PWM_Start_IT+0x242>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a25      	ldr	r2, [pc, #148]	; (80075b0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d018      	beq.n	8007552 <HAL_TIM_PWM_Start_IT+0x242>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a23      	ldr	r2, [pc, #140]	; (80075b4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <HAL_TIM_PWM_Start_IT+0x242>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a22      	ldr	r2, [pc, #136]	; (80075b8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00e      	beq.n	8007552 <HAL_TIM_PWM_Start_IT+0x242>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a19      	ldr	r2, [pc, #100]	; (80075a0 <HAL_TIM_PWM_Start_IT+0x290>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_TIM_PWM_Start_IT+0x242>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_TIM_PWM_Start_IT+0x242>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <HAL_TIM_PWM_Start_IT+0x294>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d115      	bne.n	800757e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800755a:	4013      	ands	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b06      	cmp	r3, #6
 8007562:	d015      	beq.n	8007590 <HAL_TIM_PWM_Start_IT+0x280>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756a:	d011      	beq.n	8007590 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757c:	e008      	b.n	8007590 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0201 	orr.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e000      	b.n	8007592 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007590:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40010000 	.word	0x40010000
 80075a0:	40010400 	.word	0x40010400
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800
 80075b0:	40000400 	.word	0x40000400
 80075b4:	40000800 	.word	0x40000800
 80075b8:	40000c00 	.word	0x40000c00
 80075bc:	40001800 	.word	0x40001800
 80075c0:	00010007 	.word	0x00010007

080075c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d020      	beq.n	8007628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01b      	beq.n	8007628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0202 	mvn.w	r2, #2
 80075f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 faf6 	bl	8007c00 <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fae8 	bl	8007bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 faf9 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d020      	beq.n	8007674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01b      	beq.n	8007674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0204 	mvn.w	r2, #4
 8007644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fad0 	bl	8007c00 <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fac2 	bl	8007bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fad3 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d020      	beq.n	80076c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01b      	beq.n	80076c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0208 	mvn.w	r2, #8
 8007690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2204      	movs	r2, #4
 8007696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 faaa 	bl	8007c00 <HAL_TIM_IC_CaptureCallback>
 80076ac:	e005      	b.n	80076ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa9c 	bl	8007bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 faad 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 0310 	and.w	r3, r3, #16
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d020      	beq.n	800770c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01b      	beq.n	800770c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0210 	mvn.w	r2, #16
 80076dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2208      	movs	r2, #8
 80076e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa84 	bl	8007c00 <HAL_TIM_IC_CaptureCallback>
 80076f8:	e005      	b.n	8007706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa76 	bl	8007bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa87 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00c      	beq.n	8007730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0201 	mvn.w	r2, #1
 8007728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7f9 fada 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00c      	beq.n	800775e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 ff47 	bl	80085ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00c      	beq.n	8007782 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800777a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 ff3f 	bl	8008600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00c      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d007      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800779e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa41 	bl	8007c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00c      	beq.n	80077ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f06f 0220 	mvn.w	r2, #32
 80077c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 ff07 	bl	80085d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077ca:	bf00      	nop
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e0ff      	b.n	80079f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b14      	cmp	r3, #20
 80077fe:	f200 80f0 	bhi.w	80079e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	0800785d 	.word	0x0800785d
 800780c:	080079e3 	.word	0x080079e3
 8007810:	080079e3 	.word	0x080079e3
 8007814:	080079e3 	.word	0x080079e3
 8007818:	0800789d 	.word	0x0800789d
 800781c:	080079e3 	.word	0x080079e3
 8007820:	080079e3 	.word	0x080079e3
 8007824:	080079e3 	.word	0x080079e3
 8007828:	080078df 	.word	0x080078df
 800782c:	080079e3 	.word	0x080079e3
 8007830:	080079e3 	.word	0x080079e3
 8007834:	080079e3 	.word	0x080079e3
 8007838:	0800791f 	.word	0x0800791f
 800783c:	080079e3 	.word	0x080079e3
 8007840:	080079e3 	.word	0x080079e3
 8007844:	080079e3 	.word	0x080079e3
 8007848:	08007961 	.word	0x08007961
 800784c:	080079e3 	.word	0x080079e3
 8007850:	080079e3 	.word	0x080079e3
 8007854:	080079e3 	.word	0x080079e3
 8007858:	080079a1 	.word	0x080079a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fa90 	bl	8007d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0208 	orr.w	r2, r2, #8
 8007876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0204 	bic.w	r2, r2, #4
 8007886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6999      	ldr	r1, [r3, #24]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	619a      	str	r2, [r3, #24]
      break;
 800789a:	e0a5      	b.n	80079e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fb00 	bl	8007ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6999      	ldr	r1, [r3, #24]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	021a      	lsls	r2, r3, #8
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	619a      	str	r2, [r3, #24]
      break;
 80078dc:	e084      	b.n	80079e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fb69 	bl	8007fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0208 	orr.w	r2, r2, #8
 80078f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0204 	bic.w	r2, r2, #4
 8007908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69d9      	ldr	r1, [r3, #28]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	61da      	str	r2, [r3, #28]
      break;
 800791c:	e064      	b.n	80079e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fbd1 	bl	80080cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69d9      	ldr	r1, [r3, #28]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	021a      	lsls	r2, r3, #8
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	61da      	str	r2, [r3, #28]
      break;
 800795e:	e043      	b.n	80079e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fc1a 	bl	80081a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0208 	orr.w	r2, r2, #8
 800797a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0204 	bic.w	r2, r2, #4
 800798a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800799e:	e023      	b.n	80079e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fc5e 	bl	8008268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	021a      	lsls	r2, r3, #8
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079e0:	e002      	b.n	80079e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
      break;
 80079e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_TIM_ConfigClockSource+0x1c>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e0dc      	b.n	8007bd2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	4b6a      	ldr	r3, [pc, #424]	; (8007bdc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a64      	ldr	r2, [pc, #400]	; (8007be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	f000 80a9 	beq.w	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007a54:	4a62      	ldr	r2, [pc, #392]	; (8007be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	f200 80ae 	bhi.w	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a5c:	4a61      	ldr	r2, [pc, #388]	; (8007be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	f000 80a1 	beq.w	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007a64:	4a5f      	ldr	r2, [pc, #380]	; (8007be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	f200 80a6 	bhi.w	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a6c:	4a5e      	ldr	r2, [pc, #376]	; (8007be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	f000 8099 	beq.w	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007a74:	4a5c      	ldr	r2, [pc, #368]	; (8007be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	f200 809e 	bhi.w	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a80:	f000 8091 	beq.w	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007a84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a88:	f200 8096 	bhi.w	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a90:	f000 8089 	beq.w	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a98:	f200 808e 	bhi.w	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa0:	d03e      	beq.n	8007b20 <HAL_TIM_ConfigClockSource+0x124>
 8007aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa6:	f200 8087 	bhi.w	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aae:	f000 8086 	beq.w	8007bbe <HAL_TIM_ConfigClockSource+0x1c2>
 8007ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab6:	d87f      	bhi.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ab8:	2b70      	cmp	r3, #112	; 0x70
 8007aba:	d01a      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0xf6>
 8007abc:	2b70      	cmp	r3, #112	; 0x70
 8007abe:	d87b      	bhi.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ac0:	2b60      	cmp	r3, #96	; 0x60
 8007ac2:	d050      	beq.n	8007b66 <HAL_TIM_ConfigClockSource+0x16a>
 8007ac4:	2b60      	cmp	r3, #96	; 0x60
 8007ac6:	d877      	bhi.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ac8:	2b50      	cmp	r3, #80	; 0x50
 8007aca:	d03c      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x14a>
 8007acc:	2b50      	cmp	r3, #80	; 0x50
 8007ace:	d873      	bhi.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d058      	beq.n	8007b86 <HAL_TIM_ConfigClockSource+0x18a>
 8007ad4:	2b40      	cmp	r3, #64	; 0x40
 8007ad6:	d86f      	bhi.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ad8:	2b30      	cmp	r3, #48	; 0x30
 8007ada:	d064      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d86b      	bhi.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d060      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d867      	bhi.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d05c      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d05a      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007af0:	e062      	b.n	8007bb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	6899      	ldr	r1, [r3, #8]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f000 fc95 	bl	8008430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	609a      	str	r2, [r3, #8]
      break;
 8007b1e:	e04f      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6899      	ldr	r1, [r3, #8]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f000 fc7e 	bl	8008430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b42:	609a      	str	r2, [r3, #8]
      break;
 8007b44:	e03c      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	6859      	ldr	r1, [r3, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f000 fbee 	bl	8008334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2150      	movs	r1, #80	; 0x50
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fc48 	bl	80083f4 <TIM_ITRx_SetConfig>
      break;
 8007b64:	e02c      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	6859      	ldr	r1, [r3, #4]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f000 fc0d 	bl	8008392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2160      	movs	r1, #96	; 0x60
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fc38 	bl	80083f4 <TIM_ITRx_SetConfig>
      break;
 8007b84:	e01c      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6859      	ldr	r1, [r3, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f000 fbce 	bl	8008334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2140      	movs	r1, #64	; 0x40
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fc28 	bl	80083f4 <TIM_ITRx_SetConfig>
      break;
 8007ba4:	e00c      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f000 fc1f 	bl	80083f4 <TIM_ITRx_SetConfig>
      break;
 8007bb6:	e003      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
      break;
 8007bbc:	e000      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	ffceff88 	.word	0xffceff88
 8007be0:	00100040 	.word	0x00100040
 8007be4:	00100030 	.word	0x00100030
 8007be8:	00100020 	.word	0x00100020

08007bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a46      	ldr	r2, [pc, #280]	; (8007d68 <TIM_Base_SetConfig+0x12c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d013      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5a:	d00f      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a43      	ldr	r2, [pc, #268]	; (8007d6c <TIM_Base_SetConfig+0x130>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00b      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a42      	ldr	r2, [pc, #264]	; (8007d70 <TIM_Base_SetConfig+0x134>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d007      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a41      	ldr	r2, [pc, #260]	; (8007d74 <TIM_Base_SetConfig+0x138>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d003      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a40      	ldr	r2, [pc, #256]	; (8007d78 <TIM_Base_SetConfig+0x13c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d108      	bne.n	8007c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a35      	ldr	r2, [pc, #212]	; (8007d68 <TIM_Base_SetConfig+0x12c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d01f      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9c:	d01b      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a32      	ldr	r2, [pc, #200]	; (8007d6c <TIM_Base_SetConfig+0x130>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d017      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a31      	ldr	r2, [pc, #196]	; (8007d70 <TIM_Base_SetConfig+0x134>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d013      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a30      	ldr	r2, [pc, #192]	; (8007d74 <TIM_Base_SetConfig+0x138>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00f      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a2f      	ldr	r2, [pc, #188]	; (8007d78 <TIM_Base_SetConfig+0x13c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00b      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a2e      	ldr	r2, [pc, #184]	; (8007d7c <TIM_Base_SetConfig+0x140>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d007      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a2d      	ldr	r2, [pc, #180]	; (8007d80 <TIM_Base_SetConfig+0x144>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d003      	beq.n	8007cd6 <TIM_Base_SetConfig+0x9a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a2c      	ldr	r2, [pc, #176]	; (8007d84 <TIM_Base_SetConfig+0x148>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d108      	bne.n	8007ce8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <TIM_Base_SetConfig+0x12c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00f      	beq.n	8007d34 <TIM_Base_SetConfig+0xf8>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a18      	ldr	r2, [pc, #96]	; (8007d78 <TIM_Base_SetConfig+0x13c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00b      	beq.n	8007d34 <TIM_Base_SetConfig+0xf8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a17      	ldr	r2, [pc, #92]	; (8007d7c <TIM_Base_SetConfig+0x140>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <TIM_Base_SetConfig+0xf8>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <TIM_Base_SetConfig+0x144>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_Base_SetConfig+0xf8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <TIM_Base_SetConfig+0x148>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d103      	bne.n	8007d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d105      	bne.n	8007d5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f023 0201 	bic.w	r2, r3, #1
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	611a      	str	r2, [r3, #16]
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40000800 	.word	0x40000800
 8007d74:	40000c00 	.word	0x40000c00
 8007d78:	40010400 	.word	0x40010400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40014400 	.word	0x40014400
 8007d84:	40014800 	.word	0x40014800

08007d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	f023 0201 	bic.w	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4b37      	ldr	r3, [pc, #220]	; (8007e90 <TIM_OC1_SetConfig+0x108>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f023 0302 	bic.w	r3, r3, #2
 8007dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a2d      	ldr	r2, [pc, #180]	; (8007e94 <TIM_OC1_SetConfig+0x10c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00f      	beq.n	8007e04 <TIM_OC1_SetConfig+0x7c>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <TIM_OC1_SetConfig+0x110>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00b      	beq.n	8007e04 <TIM_OC1_SetConfig+0x7c>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a2b      	ldr	r2, [pc, #172]	; (8007e9c <TIM_OC1_SetConfig+0x114>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d007      	beq.n	8007e04 <TIM_OC1_SetConfig+0x7c>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <TIM_OC1_SetConfig+0x118>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d003      	beq.n	8007e04 <TIM_OC1_SetConfig+0x7c>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a29      	ldr	r2, [pc, #164]	; (8007ea4 <TIM_OC1_SetConfig+0x11c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d10c      	bne.n	8007e1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 0308 	bic.w	r3, r3, #8
 8007e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f023 0304 	bic.w	r3, r3, #4
 8007e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1c      	ldr	r2, [pc, #112]	; (8007e94 <TIM_OC1_SetConfig+0x10c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00f      	beq.n	8007e46 <TIM_OC1_SetConfig+0xbe>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1b      	ldr	r2, [pc, #108]	; (8007e98 <TIM_OC1_SetConfig+0x110>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <TIM_OC1_SetConfig+0xbe>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1a      	ldr	r2, [pc, #104]	; (8007e9c <TIM_OC1_SetConfig+0x114>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d007      	beq.n	8007e46 <TIM_OC1_SetConfig+0xbe>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a19      	ldr	r2, [pc, #100]	; (8007ea0 <TIM_OC1_SetConfig+0x118>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC1_SetConfig+0xbe>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <TIM_OC1_SetConfig+0x11c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d111      	bne.n	8007e6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	621a      	str	r2, [r3, #32]
}
 8007e84:	bf00      	nop
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	fffeff8f 	.word	0xfffeff8f
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40010400 	.word	0x40010400
 8007e9c:	40014000 	.word	0x40014000
 8007ea0:	40014400 	.word	0x40014400
 8007ea4:	40014800 	.word	0x40014800

08007ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f023 0210 	bic.w	r2, r3, #16
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4b34      	ldr	r3, [pc, #208]	; (8007fa4 <TIM_OC2_SetConfig+0xfc>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f023 0320 	bic.w	r3, r3, #32
 8007ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a29      	ldr	r2, [pc, #164]	; (8007fa8 <TIM_OC2_SetConfig+0x100>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_OC2_SetConfig+0x68>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a28      	ldr	r2, [pc, #160]	; (8007fac <TIM_OC2_SetConfig+0x104>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d10d      	bne.n	8007f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <TIM_OC2_SetConfig+0x100>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00f      	beq.n	8007f54 <TIM_OC2_SetConfig+0xac>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a1d      	ldr	r2, [pc, #116]	; (8007fac <TIM_OC2_SetConfig+0x104>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00b      	beq.n	8007f54 <TIM_OC2_SetConfig+0xac>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a1c      	ldr	r2, [pc, #112]	; (8007fb0 <TIM_OC2_SetConfig+0x108>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d007      	beq.n	8007f54 <TIM_OC2_SetConfig+0xac>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a1b      	ldr	r2, [pc, #108]	; (8007fb4 <TIM_OC2_SetConfig+0x10c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_OC2_SetConfig+0xac>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a1a      	ldr	r2, [pc, #104]	; (8007fb8 <TIM_OC2_SetConfig+0x110>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d113      	bne.n	8007f7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	621a      	str	r2, [r3, #32]
}
 8007f96:	bf00      	nop
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	feff8fff 	.word	0xfeff8fff
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40010400 	.word	0x40010400
 8007fb0:	40014000 	.word	0x40014000
 8007fb4:	40014400 	.word	0x40014400
 8007fb8:	40014800 	.word	0x40014800

08007fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	4b33      	ldr	r3, [pc, #204]	; (80080b4 <TIM_OC3_SetConfig+0xf8>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0303 	bic.w	r3, r3, #3
 8007ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a28      	ldr	r2, [pc, #160]	; (80080b8 <TIM_OC3_SetConfig+0xfc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d003      	beq.n	8008022 <TIM_OC3_SetConfig+0x66>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a27      	ldr	r2, [pc, #156]	; (80080bc <TIM_OC3_SetConfig+0x100>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d10d      	bne.n	800803e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	021b      	lsls	r3, r3, #8
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800803c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a1d      	ldr	r2, [pc, #116]	; (80080b8 <TIM_OC3_SetConfig+0xfc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00f      	beq.n	8008066 <TIM_OC3_SetConfig+0xaa>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <TIM_OC3_SetConfig+0x100>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00b      	beq.n	8008066 <TIM_OC3_SetConfig+0xaa>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <TIM_OC3_SetConfig+0x104>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d007      	beq.n	8008066 <TIM_OC3_SetConfig+0xaa>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <TIM_OC3_SetConfig+0x108>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d003      	beq.n	8008066 <TIM_OC3_SetConfig+0xaa>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a19      	ldr	r2, [pc, #100]	; (80080c8 <TIM_OC3_SetConfig+0x10c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d113      	bne.n	800808e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800806c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	621a      	str	r2, [r3, #32]
}
 80080a8:	bf00      	nop
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	fffeff8f 	.word	0xfffeff8f
 80080b8:	40010000 	.word	0x40010000
 80080bc:	40010400 	.word	0x40010400
 80080c0:	40014000 	.word	0x40014000
 80080c4:	40014400 	.word	0x40014400
 80080c8:	40014800 	.word	0x40014800

080080cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4b24      	ldr	r3, [pc, #144]	; (8008188 <TIM_OC4_SetConfig+0xbc>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	031b      	lsls	r3, r3, #12
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a19      	ldr	r2, [pc, #100]	; (800818c <TIM_OC4_SetConfig+0xc0>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00f      	beq.n	800814c <TIM_OC4_SetConfig+0x80>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a18      	ldr	r2, [pc, #96]	; (8008190 <TIM_OC4_SetConfig+0xc4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00b      	beq.n	800814c <TIM_OC4_SetConfig+0x80>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a17      	ldr	r2, [pc, #92]	; (8008194 <TIM_OC4_SetConfig+0xc8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d007      	beq.n	800814c <TIM_OC4_SetConfig+0x80>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a16      	ldr	r2, [pc, #88]	; (8008198 <TIM_OC4_SetConfig+0xcc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d003      	beq.n	800814c <TIM_OC4_SetConfig+0x80>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a15      	ldr	r2, [pc, #84]	; (800819c <TIM_OC4_SetConfig+0xd0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d109      	bne.n	8008160 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	019b      	lsls	r3, r3, #6
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	621a      	str	r2, [r3, #32]
}
 800817a:	bf00      	nop
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	feff8fff 	.word	0xfeff8fff
 800818c:	40010000 	.word	0x40010000
 8008190:	40010400 	.word	0x40010400
 8008194:	40014000 	.word	0x40014000
 8008198:	40014400 	.word	0x40014400
 800819c:	40014800 	.word	0x40014800

080081a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4b21      	ldr	r3, [pc, #132]	; (8008250 <TIM_OC5_SetConfig+0xb0>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a18      	ldr	r2, [pc, #96]	; (8008254 <TIM_OC5_SetConfig+0xb4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00f      	beq.n	8008216 <TIM_OC5_SetConfig+0x76>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a17      	ldr	r2, [pc, #92]	; (8008258 <TIM_OC5_SetConfig+0xb8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00b      	beq.n	8008216 <TIM_OC5_SetConfig+0x76>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a16      	ldr	r2, [pc, #88]	; (800825c <TIM_OC5_SetConfig+0xbc>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d007      	beq.n	8008216 <TIM_OC5_SetConfig+0x76>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a15      	ldr	r2, [pc, #84]	; (8008260 <TIM_OC5_SetConfig+0xc0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC5_SetConfig+0x76>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a14      	ldr	r2, [pc, #80]	; (8008264 <TIM_OC5_SetConfig+0xc4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d109      	bne.n	800822a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800821c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	621a      	str	r2, [r3, #32]
}
 8008244:	bf00      	nop
 8008246:	371c      	adds	r7, #28
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	fffeff8f 	.word	0xfffeff8f
 8008254:	40010000 	.word	0x40010000
 8008258:	40010400 	.word	0x40010400
 800825c:	40014000 	.word	0x40014000
 8008260:	40014400 	.word	0x40014400
 8008264:	40014800 	.word	0x40014800

08008268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4b22      	ldr	r3, [pc, #136]	; (800831c <TIM_OC6_SetConfig+0xb4>)
 8008294:	4013      	ands	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	051b      	lsls	r3, r3, #20
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a19      	ldr	r2, [pc, #100]	; (8008320 <TIM_OC6_SetConfig+0xb8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00f      	beq.n	80082e0 <TIM_OC6_SetConfig+0x78>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a18      	ldr	r2, [pc, #96]	; (8008324 <TIM_OC6_SetConfig+0xbc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00b      	beq.n	80082e0 <TIM_OC6_SetConfig+0x78>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a17      	ldr	r2, [pc, #92]	; (8008328 <TIM_OC6_SetConfig+0xc0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d007      	beq.n	80082e0 <TIM_OC6_SetConfig+0x78>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a16      	ldr	r2, [pc, #88]	; (800832c <TIM_OC6_SetConfig+0xc4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC6_SetConfig+0x78>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a15      	ldr	r2, [pc, #84]	; (8008330 <TIM_OC6_SetConfig+0xc8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d109      	bne.n	80082f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	feff8fff 	.word	0xfeff8fff
 8008320:	40010000 	.word	0x40010000
 8008324:	40010400 	.word	0x40010400
 8008328:	40014000 	.word	0x40014000
 800832c:	40014400 	.word	0x40014400
 8008330:	40014800 	.word	0x40014800

08008334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f023 030a 	bic.w	r3, r3, #10
 8008370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	621a      	str	r2, [r3, #32]
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008392:	b480      	push	{r7}
 8008394:	b087      	sub	sp, #28
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f023 0210 	bic.w	r2, r3, #16
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	031b      	lsls	r3, r3, #12
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4b09      	ldr	r3, [pc, #36]	; (800842c <TIM_ITRx_SetConfig+0x38>)
 8008408:	4013      	ands	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	f043 0307 	orr.w	r3, r3, #7
 8008416:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	609a      	str	r2, [r3, #8]
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	ffcfff8f 	.word	0xffcfff8f

08008430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800844a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	021a      	lsls	r2, r3, #8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	431a      	orrs	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4313      	orrs	r3, r2
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	609a      	str	r2, [r3, #8]
}
 8008464:	bf00      	nop
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	2201      	movs	r2, #1
 8008484:	fa02 f303 	lsl.w	r3, r2, r3
 8008488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a1a      	ldr	r2, [r3, #32]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	43db      	mvns	r3, r3
 8008492:	401a      	ands	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a1a      	ldr	r2, [r3, #32]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f003 031f 	and.w	r3, r3, #31
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	fa01 f303 	lsl.w	r3, r1, r3
 80084a8:	431a      	orrs	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	621a      	str	r2, [r3, #32]
}
 80084ae:	bf00      	nop
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e06d      	b.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a30      	ldr	r2, [pc, #192]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d004      	beq.n	8008508 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a2f      	ldr	r2, [pc, #188]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d108      	bne.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800850e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a20      	ldr	r2, [pc, #128]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d022      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008546:	d01d      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d018      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d013      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1a      	ldr	r2, [pc, #104]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00e      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d009      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a16      	ldr	r2, [pc, #88]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d10c      	bne.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800858a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	4313      	orrs	r3, r2
 8008594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	40010000 	.word	0x40010000
 80085c0:	40010400 	.word	0x40010400
 80085c4:	40000400 	.word	0x40000400
 80085c8:	40000800 	.word	0x40000800
 80085cc:	40000c00 	.word	0x40000c00
 80085d0:	40001800 	.word	0x40001800
 80085d4:	40014000 	.word	0x40014000

080085d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e042      	b.n	80086ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862c:	2b00      	cmp	r3, #0
 800862e:	d106      	bne.n	800863e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7f8 ff19 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2224      	movs	r2, #36	; 0x24
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0201 	bic.w	r2, r2, #1
 8008654:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 ff82 	bl	8009568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f913 	bl	8008890 <UART_SetConfig>
 800866a:	4603      	mov	r3, r0
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e01b      	b.n	80086ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0201 	orr.w	r2, r2, #1
 80086a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 f801 	bl	80096ac <UART_CheckIdleState>
 80086aa:	4603      	mov	r3, r0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	; 0x28
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4613      	mov	r3, r2
 80086c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d17b      	bne.n	80087c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <HAL_UART_Transmit+0x26>
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e074      	b.n	80087c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2221      	movs	r2, #33	; 0x21
 80086ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086ee:	f7f9 f91d 	bl	800192c <HAL_GetTick>
 80086f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	88fa      	ldrh	r2, [r7, #6]
 80086f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	88fa      	ldrh	r2, [r7, #6]
 8008700:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870c:	d108      	bne.n	8008720 <HAL_UART_Transmit+0x6c>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d104      	bne.n	8008720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	e003      	b.n	8008728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008728:	e030      	b.n	800878c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2200      	movs	r2, #0
 8008732:	2180      	movs	r1, #128	; 0x80
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f001 f863 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e03d      	b.n	80087c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10b      	bne.n	800876a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008760:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	3302      	adds	r3, #2
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	e007      	b.n	800877a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	3301      	adds	r3, #1
 8008778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008792:	b29b      	uxth	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1c8      	bne.n	800872a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2200      	movs	r2, #0
 80087a0:	2140      	movs	r1, #64	; 0x40
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f001 f82c 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e006      	b.n	80087c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e000      	b.n	80087c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80087c6:	2302      	movs	r3, #2
  }
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3720      	adds	r7, #32
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087e4:	2b20      	cmp	r3, #32
 80087e6:	d137      	bne.n	8008858 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <HAL_UART_Receive_DMA+0x24>
 80087ee:	88fb      	ldrh	r3, [r7, #6]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e030      	b.n	800885a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a18      	ldr	r2, [pc, #96]	; (8008864 <HAL_UART_Receive_DMA+0x94>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d01f      	beq.n	8008848 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d018      	beq.n	8008848 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	613b      	str	r3, [r7, #16]
   return(result);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	623b      	str	r3, [r7, #32]
 8008836:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	69f9      	ldr	r1, [r7, #28]
 800883a:	6a3a      	ldr	r2, [r7, #32]
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	61bb      	str	r3, [r7, #24]
   return(result);
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e6      	bne.n	8008816 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	461a      	mov	r2, r3
 800884c:	68b9      	ldr	r1, [r7, #8]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f001 f844 	bl	80098dc <UART_Start_Receive_DMA>
 8008854:	4603      	mov	r3, r0
 8008856:	e000      	b.n	800885a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008858:	2302      	movs	r3, #2
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3728      	adds	r7, #40	; 0x28
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	58000c00 	.word	0x58000c00

08008868 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008894:	b092      	sub	sp, #72	; 0x48
 8008896:	af00      	add	r7, sp, #0
 8008898:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	431a      	orrs	r2, r3
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	4bbe      	ldr	r3, [pc, #760]	; (8008bb8 <UART_SetConfig+0x328>)
 80088c0:	4013      	ands	r3, r2
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	6812      	ldr	r2, [r2, #0]
 80088c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088c8:	430b      	orrs	r3, r1
 80088ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4ab3      	ldr	r2, [pc, #716]	; (8008bbc <UART_SetConfig+0x32c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d004      	beq.n	80088fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088f8:	4313      	orrs	r3, r2
 80088fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	4baf      	ldr	r3, [pc, #700]	; (8008bc0 <UART_SetConfig+0x330>)
 8008904:	4013      	ands	r3, r2
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800890c:	430b      	orrs	r3, r1
 800890e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008916:	f023 010f 	bic.w	r1, r3, #15
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4aa6      	ldr	r2, [pc, #664]	; (8008bc4 <UART_SetConfig+0x334>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d177      	bne.n	8008a20 <UART_SetConfig+0x190>
 8008930:	4ba5      	ldr	r3, [pc, #660]	; (8008bc8 <UART_SetConfig+0x338>)
 8008932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008938:	2b28      	cmp	r3, #40	; 0x28
 800893a:	d86d      	bhi.n	8008a18 <UART_SetConfig+0x188>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <UART_SetConfig+0xb4>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	080089e9 	.word	0x080089e9
 8008948:	08008a19 	.word	0x08008a19
 800894c:	08008a19 	.word	0x08008a19
 8008950:	08008a19 	.word	0x08008a19
 8008954:	08008a19 	.word	0x08008a19
 8008958:	08008a19 	.word	0x08008a19
 800895c:	08008a19 	.word	0x08008a19
 8008960:	08008a19 	.word	0x08008a19
 8008964:	080089f1 	.word	0x080089f1
 8008968:	08008a19 	.word	0x08008a19
 800896c:	08008a19 	.word	0x08008a19
 8008970:	08008a19 	.word	0x08008a19
 8008974:	08008a19 	.word	0x08008a19
 8008978:	08008a19 	.word	0x08008a19
 800897c:	08008a19 	.word	0x08008a19
 8008980:	08008a19 	.word	0x08008a19
 8008984:	080089f9 	.word	0x080089f9
 8008988:	08008a19 	.word	0x08008a19
 800898c:	08008a19 	.word	0x08008a19
 8008990:	08008a19 	.word	0x08008a19
 8008994:	08008a19 	.word	0x08008a19
 8008998:	08008a19 	.word	0x08008a19
 800899c:	08008a19 	.word	0x08008a19
 80089a0:	08008a19 	.word	0x08008a19
 80089a4:	08008a01 	.word	0x08008a01
 80089a8:	08008a19 	.word	0x08008a19
 80089ac:	08008a19 	.word	0x08008a19
 80089b0:	08008a19 	.word	0x08008a19
 80089b4:	08008a19 	.word	0x08008a19
 80089b8:	08008a19 	.word	0x08008a19
 80089bc:	08008a19 	.word	0x08008a19
 80089c0:	08008a19 	.word	0x08008a19
 80089c4:	08008a09 	.word	0x08008a09
 80089c8:	08008a19 	.word	0x08008a19
 80089cc:	08008a19 	.word	0x08008a19
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a19 	.word	0x08008a19
 80089e0:	08008a19 	.word	0x08008a19
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ee:	e326      	b.n	800903e <UART_SetConfig+0x7ae>
 80089f0:	2304      	movs	r3, #4
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f6:	e322      	b.n	800903e <UART_SetConfig+0x7ae>
 80089f8:	2308      	movs	r3, #8
 80089fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fe:	e31e      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a00:	2310      	movs	r3, #16
 8008a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a06:	e31a      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0e:	e316      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a10:	2340      	movs	r3, #64	; 0x40
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a16:	e312      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a18:	2380      	movs	r3, #128	; 0x80
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1e:	e30e      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a69      	ldr	r2, [pc, #420]	; (8008bcc <UART_SetConfig+0x33c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d130      	bne.n	8008a8c <UART_SetConfig+0x1fc>
 8008a2a:	4b67      	ldr	r3, [pc, #412]	; (8008bc8 <UART_SetConfig+0x338>)
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b05      	cmp	r3, #5
 8008a34:	d826      	bhi.n	8008a84 <UART_SetConfig+0x1f4>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <UART_SetConfig+0x1ac>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a55 	.word	0x08008a55
 8008a40:	08008a5d 	.word	0x08008a5d
 8008a44:	08008a65 	.word	0x08008a65
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e2f0      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e2ec      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a64:	2308      	movs	r3, #8
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e2e8      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a72:	e2e4      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a74:	2320      	movs	r3, #32
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7a:	e2e0      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a7c:	2340      	movs	r3, #64	; 0x40
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a82:	e2dc      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a84:	2380      	movs	r3, #128	; 0x80
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8a:	e2d8      	b.n	800903e <UART_SetConfig+0x7ae>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a4f      	ldr	r2, [pc, #316]	; (8008bd0 <UART_SetConfig+0x340>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d130      	bne.n	8008af8 <UART_SetConfig+0x268>
 8008a96:	4b4c      	ldr	r3, [pc, #304]	; (8008bc8 <UART_SetConfig+0x338>)
 8008a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	2b05      	cmp	r3, #5
 8008aa0:	d826      	bhi.n	8008af0 <UART_SetConfig+0x260>
 8008aa2:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <UART_SetConfig+0x218>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008ac1 	.word	0x08008ac1
 8008aac:	08008ac9 	.word	0x08008ac9
 8008ab0:	08008ad1 	.word	0x08008ad1
 8008ab4:	08008ad9 	.word	0x08008ad9
 8008ab8:	08008ae1 	.word	0x08008ae1
 8008abc:	08008ae9 	.word	0x08008ae9
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e2ba      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ac8:	2304      	movs	r3, #4
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e2b6      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e2b2      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ad8:	2310      	movs	r3, #16
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e2ae      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae6:	e2aa      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ae8:	2340      	movs	r3, #64	; 0x40
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e2a6      	b.n	800903e <UART_SetConfig+0x7ae>
 8008af0:	2380      	movs	r3, #128	; 0x80
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e2a2      	b.n	800903e <UART_SetConfig+0x7ae>
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a35      	ldr	r2, [pc, #212]	; (8008bd4 <UART_SetConfig+0x344>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d130      	bne.n	8008b64 <UART_SetConfig+0x2d4>
 8008b02:	4b31      	ldr	r3, [pc, #196]	; (8008bc8 <UART_SetConfig+0x338>)
 8008b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	2b05      	cmp	r3, #5
 8008b0c:	d826      	bhi.n	8008b5c <UART_SetConfig+0x2cc>
 8008b0e:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <UART_SetConfig+0x284>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b2d 	.word	0x08008b2d
 8008b18:	08008b35 	.word	0x08008b35
 8008b1c:	08008b3d 	.word	0x08008b3d
 8008b20:	08008b45 	.word	0x08008b45
 8008b24:	08008b4d 	.word	0x08008b4d
 8008b28:	08008b55 	.word	0x08008b55
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e284      	b.n	800903e <UART_SetConfig+0x7ae>
 8008b34:	2304      	movs	r3, #4
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e280      	b.n	800903e <UART_SetConfig+0x7ae>
 8008b3c:	2308      	movs	r3, #8
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e27c      	b.n	800903e <UART_SetConfig+0x7ae>
 8008b44:	2310      	movs	r3, #16
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e278      	b.n	800903e <UART_SetConfig+0x7ae>
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b52:	e274      	b.n	800903e <UART_SetConfig+0x7ae>
 8008b54:	2340      	movs	r3, #64	; 0x40
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e270      	b.n	800903e <UART_SetConfig+0x7ae>
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b62:	e26c      	b.n	800903e <UART_SetConfig+0x7ae>
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a1b      	ldr	r2, [pc, #108]	; (8008bd8 <UART_SetConfig+0x348>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d142      	bne.n	8008bf4 <UART_SetConfig+0x364>
 8008b6e:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <UART_SetConfig+0x338>)
 8008b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b05      	cmp	r3, #5
 8008b78:	d838      	bhi.n	8008bec <UART_SetConfig+0x35c>
 8008b7a:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <UART_SetConfig+0x2f0>)
 8008b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b80:	08008b99 	.word	0x08008b99
 8008b84:	08008ba1 	.word	0x08008ba1
 8008b88:	08008ba9 	.word	0x08008ba9
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bdd 	.word	0x08008bdd
 8008b94:	08008be5 	.word	0x08008be5
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e24e      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e24a      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e246      	b.n	800903e <UART_SetConfig+0x7ae>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e242      	b.n	800903e <UART_SetConfig+0x7ae>
 8008bb8:	cfff69f3 	.word	0xcfff69f3
 8008bbc:	58000c00 	.word	0x58000c00
 8008bc0:	11fff4ff 	.word	0x11fff4ff
 8008bc4:	40011000 	.word	0x40011000
 8008bc8:	58024400 	.word	0x58024400
 8008bcc:	40004400 	.word	0x40004400
 8008bd0:	40004800 	.word	0x40004800
 8008bd4:	40004c00 	.word	0x40004c00
 8008bd8:	40005000 	.word	0x40005000
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e22c      	b.n	800903e <UART_SetConfig+0x7ae>
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e228      	b.n	800903e <UART_SetConfig+0x7ae>
 8008bec:	2380      	movs	r3, #128	; 0x80
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e224      	b.n	800903e <UART_SetConfig+0x7ae>
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4ab1      	ldr	r2, [pc, #708]	; (8008ec0 <UART_SetConfig+0x630>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d176      	bne.n	8008cec <UART_SetConfig+0x45c>
 8008bfe:	4bb1      	ldr	r3, [pc, #708]	; (8008ec4 <UART_SetConfig+0x634>)
 8008c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c06:	2b28      	cmp	r3, #40	; 0x28
 8008c08:	d86c      	bhi.n	8008ce4 <UART_SetConfig+0x454>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <UART_SetConfig+0x380>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008cb5 	.word	0x08008cb5
 8008c14:	08008ce5 	.word	0x08008ce5
 8008c18:	08008ce5 	.word	0x08008ce5
 8008c1c:	08008ce5 	.word	0x08008ce5
 8008c20:	08008ce5 	.word	0x08008ce5
 8008c24:	08008ce5 	.word	0x08008ce5
 8008c28:	08008ce5 	.word	0x08008ce5
 8008c2c:	08008ce5 	.word	0x08008ce5
 8008c30:	08008cbd 	.word	0x08008cbd
 8008c34:	08008ce5 	.word	0x08008ce5
 8008c38:	08008ce5 	.word	0x08008ce5
 8008c3c:	08008ce5 	.word	0x08008ce5
 8008c40:	08008ce5 	.word	0x08008ce5
 8008c44:	08008ce5 	.word	0x08008ce5
 8008c48:	08008ce5 	.word	0x08008ce5
 8008c4c:	08008ce5 	.word	0x08008ce5
 8008c50:	08008cc5 	.word	0x08008cc5
 8008c54:	08008ce5 	.word	0x08008ce5
 8008c58:	08008ce5 	.word	0x08008ce5
 8008c5c:	08008ce5 	.word	0x08008ce5
 8008c60:	08008ce5 	.word	0x08008ce5
 8008c64:	08008ce5 	.word	0x08008ce5
 8008c68:	08008ce5 	.word	0x08008ce5
 8008c6c:	08008ce5 	.word	0x08008ce5
 8008c70:	08008ccd 	.word	0x08008ccd
 8008c74:	08008ce5 	.word	0x08008ce5
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008ce5 	.word	0x08008ce5
 8008c80:	08008ce5 	.word	0x08008ce5
 8008c84:	08008ce5 	.word	0x08008ce5
 8008c88:	08008ce5 	.word	0x08008ce5
 8008c8c:	08008ce5 	.word	0x08008ce5
 8008c90:	08008cd5 	.word	0x08008cd5
 8008c94:	08008ce5 	.word	0x08008ce5
 8008c98:	08008ce5 	.word	0x08008ce5
 8008c9c:	08008ce5 	.word	0x08008ce5
 8008ca0:	08008ce5 	.word	0x08008ce5
 8008ca4:	08008ce5 	.word	0x08008ce5
 8008ca8:	08008ce5 	.word	0x08008ce5
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e1c0      	b.n	800903e <UART_SetConfig+0x7ae>
 8008cbc:	2304      	movs	r3, #4
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc2:	e1bc      	b.n	800903e <UART_SetConfig+0x7ae>
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e1b8      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e1b4      	b.n	800903e <UART_SetConfig+0x7ae>
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e1b0      	b.n	800903e <UART_SetConfig+0x7ae>
 8008cdc:	2340      	movs	r3, #64	; 0x40
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce2:	e1ac      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ce4:	2380      	movs	r3, #128	; 0x80
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cea:	e1a8      	b.n	800903e <UART_SetConfig+0x7ae>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a75      	ldr	r2, [pc, #468]	; (8008ec8 <UART_SetConfig+0x638>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d130      	bne.n	8008d58 <UART_SetConfig+0x4c8>
 8008cf6:	4b73      	ldr	r3, [pc, #460]	; (8008ec4 <UART_SetConfig+0x634>)
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d826      	bhi.n	8008d50 <UART_SetConfig+0x4c0>
 8008d02:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <UART_SetConfig+0x478>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d21 	.word	0x08008d21
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	08008d31 	.word	0x08008d31
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d41 	.word	0x08008d41
 8008d1c:	08008d49 	.word	0x08008d49
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d26:	e18a      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d28:	2304      	movs	r3, #4
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2e:	e186      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d30:	2308      	movs	r3, #8
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d36:	e182      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d38:	2310      	movs	r3, #16
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3e:	e17e      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d40:	2320      	movs	r3, #32
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d46:	e17a      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d48:	2340      	movs	r3, #64	; 0x40
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4e:	e176      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d50:	2380      	movs	r3, #128	; 0x80
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d56:	e172      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a5b      	ldr	r2, [pc, #364]	; (8008ecc <UART_SetConfig+0x63c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d130      	bne.n	8008dc4 <UART_SetConfig+0x534>
 8008d62:	4b58      	ldr	r3, [pc, #352]	; (8008ec4 <UART_SetConfig+0x634>)
 8008d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b05      	cmp	r3, #5
 8008d6c:	d826      	bhi.n	8008dbc <UART_SetConfig+0x52c>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <UART_SetConfig+0x4e4>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008d8d 	.word	0x08008d8d
 8008d78:	08008d95 	.word	0x08008d95
 8008d7c:	08008d9d 	.word	0x08008d9d
 8008d80:	08008da5 	.word	0x08008da5
 8008d84:	08008dad 	.word	0x08008dad
 8008d88:	08008db5 	.word	0x08008db5
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d92:	e154      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d94:	2304      	movs	r3, #4
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9a:	e150      	b.n	800903e <UART_SetConfig+0x7ae>
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e14c      	b.n	800903e <UART_SetConfig+0x7ae>
 8008da4:	2310      	movs	r3, #16
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e148      	b.n	800903e <UART_SetConfig+0x7ae>
 8008dac:	2320      	movs	r3, #32
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e144      	b.n	800903e <UART_SetConfig+0x7ae>
 8008db4:	2340      	movs	r3, #64	; 0x40
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dba:	e140      	b.n	800903e <UART_SetConfig+0x7ae>
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e13c      	b.n	800903e <UART_SetConfig+0x7ae>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a41      	ldr	r2, [pc, #260]	; (8008ed0 <UART_SetConfig+0x640>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	f040 8082 	bne.w	8008ed4 <UART_SetConfig+0x644>
 8008dd0:	4b3c      	ldr	r3, [pc, #240]	; (8008ec4 <UART_SetConfig+0x634>)
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dd8:	2b28      	cmp	r3, #40	; 0x28
 8008dda:	d86d      	bhi.n	8008eb8 <UART_SetConfig+0x628>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <UART_SetConfig+0x554>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e89 	.word	0x08008e89
 8008de8:	08008eb9 	.word	0x08008eb9
 8008dec:	08008eb9 	.word	0x08008eb9
 8008df0:	08008eb9 	.word	0x08008eb9
 8008df4:	08008eb9 	.word	0x08008eb9
 8008df8:	08008eb9 	.word	0x08008eb9
 8008dfc:	08008eb9 	.word	0x08008eb9
 8008e00:	08008eb9 	.word	0x08008eb9
 8008e04:	08008e91 	.word	0x08008e91
 8008e08:	08008eb9 	.word	0x08008eb9
 8008e0c:	08008eb9 	.word	0x08008eb9
 8008e10:	08008eb9 	.word	0x08008eb9
 8008e14:	08008eb9 	.word	0x08008eb9
 8008e18:	08008eb9 	.word	0x08008eb9
 8008e1c:	08008eb9 	.word	0x08008eb9
 8008e20:	08008eb9 	.word	0x08008eb9
 8008e24:	08008e99 	.word	0x08008e99
 8008e28:	08008eb9 	.word	0x08008eb9
 8008e2c:	08008eb9 	.word	0x08008eb9
 8008e30:	08008eb9 	.word	0x08008eb9
 8008e34:	08008eb9 	.word	0x08008eb9
 8008e38:	08008eb9 	.word	0x08008eb9
 8008e3c:	08008eb9 	.word	0x08008eb9
 8008e40:	08008eb9 	.word	0x08008eb9
 8008e44:	08008ea1 	.word	0x08008ea1
 8008e48:	08008eb9 	.word	0x08008eb9
 8008e4c:	08008eb9 	.word	0x08008eb9
 8008e50:	08008eb9 	.word	0x08008eb9
 8008e54:	08008eb9 	.word	0x08008eb9
 8008e58:	08008eb9 	.word	0x08008eb9
 8008e5c:	08008eb9 	.word	0x08008eb9
 8008e60:	08008eb9 	.word	0x08008eb9
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	08008eb9 	.word	0x08008eb9
 8008e70:	08008eb9 	.word	0x08008eb9
 8008e74:	08008eb9 	.word	0x08008eb9
 8008e78:	08008eb9 	.word	0x08008eb9
 8008e7c:	08008eb9 	.word	0x08008eb9
 8008e80:	08008eb9 	.word	0x08008eb9
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e0d6      	b.n	800903e <UART_SetConfig+0x7ae>
 8008e90:	2304      	movs	r3, #4
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e0d2      	b.n	800903e <UART_SetConfig+0x7ae>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9e:	e0ce      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e0ca      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e0c6      	b.n	800903e <UART_SetConfig+0x7ae>
 8008eb0:	2340      	movs	r3, #64	; 0x40
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb6:	e0c2      	b.n	800903e <UART_SetConfig+0x7ae>
 8008eb8:	2380      	movs	r3, #128	; 0x80
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ebe:	e0be      	b.n	800903e <UART_SetConfig+0x7ae>
 8008ec0:	40011400 	.word	0x40011400
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	40007800 	.word	0x40007800
 8008ecc:	40007c00 	.word	0x40007c00
 8008ed0:	40011800 	.word	0x40011800
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4aad      	ldr	r2, [pc, #692]	; (8009190 <UART_SetConfig+0x900>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d176      	bne.n	8008fcc <UART_SetConfig+0x73c>
 8008ede:	4bad      	ldr	r3, [pc, #692]	; (8009194 <UART_SetConfig+0x904>)
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ee6:	2b28      	cmp	r3, #40	; 0x28
 8008ee8:	d86c      	bhi.n	8008fc4 <UART_SetConfig+0x734>
 8008eea:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <UART_SetConfig+0x660>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f95 	.word	0x08008f95
 8008ef4:	08008fc5 	.word	0x08008fc5
 8008ef8:	08008fc5 	.word	0x08008fc5
 8008efc:	08008fc5 	.word	0x08008fc5
 8008f00:	08008fc5 	.word	0x08008fc5
 8008f04:	08008fc5 	.word	0x08008fc5
 8008f08:	08008fc5 	.word	0x08008fc5
 8008f0c:	08008fc5 	.word	0x08008fc5
 8008f10:	08008f9d 	.word	0x08008f9d
 8008f14:	08008fc5 	.word	0x08008fc5
 8008f18:	08008fc5 	.word	0x08008fc5
 8008f1c:	08008fc5 	.word	0x08008fc5
 8008f20:	08008fc5 	.word	0x08008fc5
 8008f24:	08008fc5 	.word	0x08008fc5
 8008f28:	08008fc5 	.word	0x08008fc5
 8008f2c:	08008fc5 	.word	0x08008fc5
 8008f30:	08008fa5 	.word	0x08008fa5
 8008f34:	08008fc5 	.word	0x08008fc5
 8008f38:	08008fc5 	.word	0x08008fc5
 8008f3c:	08008fc5 	.word	0x08008fc5
 8008f40:	08008fc5 	.word	0x08008fc5
 8008f44:	08008fc5 	.word	0x08008fc5
 8008f48:	08008fc5 	.word	0x08008fc5
 8008f4c:	08008fc5 	.word	0x08008fc5
 8008f50:	08008fad 	.word	0x08008fad
 8008f54:	08008fc5 	.word	0x08008fc5
 8008f58:	08008fc5 	.word	0x08008fc5
 8008f5c:	08008fc5 	.word	0x08008fc5
 8008f60:	08008fc5 	.word	0x08008fc5
 8008f64:	08008fc5 	.word	0x08008fc5
 8008f68:	08008fc5 	.word	0x08008fc5
 8008f6c:	08008fc5 	.word	0x08008fc5
 8008f70:	08008fb5 	.word	0x08008fb5
 8008f74:	08008fc5 	.word	0x08008fc5
 8008f78:	08008fc5 	.word	0x08008fc5
 8008f7c:	08008fc5 	.word	0x08008fc5
 8008f80:	08008fc5 	.word	0x08008fc5
 8008f84:	08008fc5 	.word	0x08008fc5
 8008f88:	08008fc5 	.word	0x08008fc5
 8008f8c:	08008fc5 	.word	0x08008fc5
 8008f90:	08008fbd 	.word	0x08008fbd
 8008f94:	2301      	movs	r3, #1
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9a:	e050      	b.n	800903e <UART_SetConfig+0x7ae>
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e04c      	b.n	800903e <UART_SetConfig+0x7ae>
 8008fa4:	2308      	movs	r3, #8
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e048      	b.n	800903e <UART_SetConfig+0x7ae>
 8008fac:	2310      	movs	r3, #16
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e044      	b.n	800903e <UART_SetConfig+0x7ae>
 8008fb4:	2320      	movs	r3, #32
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fba:	e040      	b.n	800903e <UART_SetConfig+0x7ae>
 8008fbc:	2340      	movs	r3, #64	; 0x40
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc2:	e03c      	b.n	800903e <UART_SetConfig+0x7ae>
 8008fc4:	2380      	movs	r3, #128	; 0x80
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fca:	e038      	b.n	800903e <UART_SetConfig+0x7ae>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a71      	ldr	r2, [pc, #452]	; (8009198 <UART_SetConfig+0x908>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d130      	bne.n	8009038 <UART_SetConfig+0x7a8>
 8008fd6:	4b6f      	ldr	r3, [pc, #444]	; (8009194 <UART_SetConfig+0x904>)
 8008fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	2b05      	cmp	r3, #5
 8008fe0:	d826      	bhi.n	8009030 <UART_SetConfig+0x7a0>
 8008fe2:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <UART_SetConfig+0x758>)
 8008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe8:	08009001 	.word	0x08009001
 8008fec:	08009009 	.word	0x08009009
 8008ff0:	08009011 	.word	0x08009011
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	08009021 	.word	0x08009021
 8008ffc:	08009029 	.word	0x08009029
 8009000:	2302      	movs	r3, #2
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e01a      	b.n	800903e <UART_SetConfig+0x7ae>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e016      	b.n	800903e <UART_SetConfig+0x7ae>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e012      	b.n	800903e <UART_SetConfig+0x7ae>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e00e      	b.n	800903e <UART_SetConfig+0x7ae>
 8009020:	2320      	movs	r3, #32
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e00a      	b.n	800903e <UART_SetConfig+0x7ae>
 8009028:	2340      	movs	r3, #64	; 0x40
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902e:	e006      	b.n	800903e <UART_SetConfig+0x7ae>
 8009030:	2380      	movs	r3, #128	; 0x80
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009036:	e002      	b.n	800903e <UART_SetConfig+0x7ae>
 8009038:	2380      	movs	r3, #128	; 0x80
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a55      	ldr	r2, [pc, #340]	; (8009198 <UART_SetConfig+0x908>)
 8009044:	4293      	cmp	r3, r2
 8009046:	f040 80f8 	bne.w	800923a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800904a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800904e:	2b20      	cmp	r3, #32
 8009050:	dc46      	bgt.n	80090e0 <UART_SetConfig+0x850>
 8009052:	2b02      	cmp	r3, #2
 8009054:	db75      	blt.n	8009142 <UART_SetConfig+0x8b2>
 8009056:	3b02      	subs	r3, #2
 8009058:	2b1e      	cmp	r3, #30
 800905a:	d872      	bhi.n	8009142 <UART_SetConfig+0x8b2>
 800905c:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <UART_SetConfig+0x7d4>)
 800905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009062:	bf00      	nop
 8009064:	080090e7 	.word	0x080090e7
 8009068:	08009143 	.word	0x08009143
 800906c:	080090ef 	.word	0x080090ef
 8009070:	08009143 	.word	0x08009143
 8009074:	08009143 	.word	0x08009143
 8009078:	08009143 	.word	0x08009143
 800907c:	080090ff 	.word	0x080090ff
 8009080:	08009143 	.word	0x08009143
 8009084:	08009143 	.word	0x08009143
 8009088:	08009143 	.word	0x08009143
 800908c:	08009143 	.word	0x08009143
 8009090:	08009143 	.word	0x08009143
 8009094:	08009143 	.word	0x08009143
 8009098:	08009143 	.word	0x08009143
 800909c:	0800910f 	.word	0x0800910f
 80090a0:	08009143 	.word	0x08009143
 80090a4:	08009143 	.word	0x08009143
 80090a8:	08009143 	.word	0x08009143
 80090ac:	08009143 	.word	0x08009143
 80090b0:	08009143 	.word	0x08009143
 80090b4:	08009143 	.word	0x08009143
 80090b8:	08009143 	.word	0x08009143
 80090bc:	08009143 	.word	0x08009143
 80090c0:	08009143 	.word	0x08009143
 80090c4:	08009143 	.word	0x08009143
 80090c8:	08009143 	.word	0x08009143
 80090cc:	08009143 	.word	0x08009143
 80090d0:	08009143 	.word	0x08009143
 80090d4:	08009143 	.word	0x08009143
 80090d8:	08009143 	.word	0x08009143
 80090dc:	08009135 	.word	0x08009135
 80090e0:	2b40      	cmp	r3, #64	; 0x40
 80090e2:	d02a      	beq.n	800913a <UART_SetConfig+0x8aa>
 80090e4:	e02d      	b.n	8009142 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80090e6:	f7fd fab1 	bl	800664c <HAL_RCCEx_GetD3PCLK1Freq>
 80090ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090ec:	e02f      	b.n	800914e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fd fac0 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090fc:	e027      	b.n	800914e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090fe:	f107 0318 	add.w	r3, r7, #24
 8009102:	4618      	mov	r0, r3
 8009104:	f7fd fc0c 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800910c:	e01f      	b.n	800914e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800910e:	4b21      	ldr	r3, [pc, #132]	; (8009194 <UART_SetConfig+0x904>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	d009      	beq.n	800912e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800911a:	4b1e      	ldr	r3, [pc, #120]	; (8009194 <UART_SetConfig+0x904>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	08db      	lsrs	r3, r3, #3
 8009120:	f003 0303 	and.w	r3, r3, #3
 8009124:	4a1d      	ldr	r2, [pc, #116]	; (800919c <UART_SetConfig+0x90c>)
 8009126:	fa22 f303 	lsr.w	r3, r2, r3
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800912c:	e00f      	b.n	800914e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800912e:	4b1b      	ldr	r3, [pc, #108]	; (800919c <UART_SetConfig+0x90c>)
 8009130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009132:	e00c      	b.n	800914e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009134:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <UART_SetConfig+0x910>)
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009138:	e009      	b.n	800914e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800913a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009140:	e005      	b.n	800914e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800914c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800914e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 81ee 	beq.w	8009532 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	4a12      	ldr	r2, [pc, #72]	; (80091a4 <UART_SetConfig+0x914>)
 800915c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009160:	461a      	mov	r2, r3
 8009162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009164:	fbb3 f3f2 	udiv	r3, r3, r2
 8009168:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	4613      	mov	r3, r2
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	4413      	add	r3, r2
 8009174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009176:	429a      	cmp	r2, r3
 8009178:	d305      	bcc.n	8009186 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009182:	429a      	cmp	r2, r3
 8009184:	d910      	bls.n	80091a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800918c:	e1d1      	b.n	8009532 <UART_SetConfig+0xca2>
 800918e:	bf00      	nop
 8009190:	40011c00 	.word	0x40011c00
 8009194:	58024400 	.word	0x58024400
 8009198:	58000c00 	.word	0x58000c00
 800919c:	03d09000 	.word	0x03d09000
 80091a0:	003d0900 	.word	0x003d0900
 80091a4:	0800aaac 	.word	0x0800aaac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091aa:	2200      	movs	r2, #0
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	60fa      	str	r2, [r7, #12]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	4ac0      	ldr	r2, [pc, #768]	; (80094b8 <UART_SetConfig+0xc28>)
 80091b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2200      	movs	r2, #0
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	607a      	str	r2, [r7, #4]
 80091c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091ca:	f7f7 f8e9 	bl	80003a0 <__aeabi_uldivmod>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4610      	mov	r0, r2
 80091d4:	4619      	mov	r1, r3
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	020b      	lsls	r3, r1, #8
 80091e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091e4:	0202      	lsls	r2, r0, #8
 80091e6:	6979      	ldr	r1, [r7, #20]
 80091e8:	6849      	ldr	r1, [r1, #4]
 80091ea:	0849      	lsrs	r1, r1, #1
 80091ec:	2000      	movs	r0, #0
 80091ee:	460c      	mov	r4, r1
 80091f0:	4605      	mov	r5, r0
 80091f2:	eb12 0804 	adds.w	r8, r2, r4
 80091f6:	eb43 0905 	adc.w	r9, r3, r5
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	469a      	mov	sl, r3
 8009202:	4693      	mov	fp, r2
 8009204:	4652      	mov	r2, sl
 8009206:	465b      	mov	r3, fp
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 f8c8 	bl	80003a0 <__aeabi_uldivmod>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4613      	mov	r3, r2
 8009216:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800921e:	d308      	bcc.n	8009232 <UART_SetConfig+0x9a2>
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009226:	d204      	bcs.n	8009232 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800922e:	60da      	str	r2, [r3, #12]
 8009230:	e17f      	b.n	8009532 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009238:	e17b      	b.n	8009532 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009242:	f040 80bd 	bne.w	80093c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009246:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800924a:	2b20      	cmp	r3, #32
 800924c:	dc48      	bgt.n	80092e0 <UART_SetConfig+0xa50>
 800924e:	2b00      	cmp	r3, #0
 8009250:	db7b      	blt.n	800934a <UART_SetConfig+0xaba>
 8009252:	2b20      	cmp	r3, #32
 8009254:	d879      	bhi.n	800934a <UART_SetConfig+0xaba>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x9cc>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	080092e7 	.word	0x080092e7
 8009260:	080092ef 	.word	0x080092ef
 8009264:	0800934b 	.word	0x0800934b
 8009268:	0800934b 	.word	0x0800934b
 800926c:	080092f7 	.word	0x080092f7
 8009270:	0800934b 	.word	0x0800934b
 8009274:	0800934b 	.word	0x0800934b
 8009278:	0800934b 	.word	0x0800934b
 800927c:	08009307 	.word	0x08009307
 8009280:	0800934b 	.word	0x0800934b
 8009284:	0800934b 	.word	0x0800934b
 8009288:	0800934b 	.word	0x0800934b
 800928c:	0800934b 	.word	0x0800934b
 8009290:	0800934b 	.word	0x0800934b
 8009294:	0800934b 	.word	0x0800934b
 8009298:	0800934b 	.word	0x0800934b
 800929c:	08009317 	.word	0x08009317
 80092a0:	0800934b 	.word	0x0800934b
 80092a4:	0800934b 	.word	0x0800934b
 80092a8:	0800934b 	.word	0x0800934b
 80092ac:	0800934b 	.word	0x0800934b
 80092b0:	0800934b 	.word	0x0800934b
 80092b4:	0800934b 	.word	0x0800934b
 80092b8:	0800934b 	.word	0x0800934b
 80092bc:	0800934b 	.word	0x0800934b
 80092c0:	0800934b 	.word	0x0800934b
 80092c4:	0800934b 	.word	0x0800934b
 80092c8:	0800934b 	.word	0x0800934b
 80092cc:	0800934b 	.word	0x0800934b
 80092d0:	0800934b 	.word	0x0800934b
 80092d4:	0800934b 	.word	0x0800934b
 80092d8:	0800934b 	.word	0x0800934b
 80092dc:	0800933d 	.word	0x0800933d
 80092e0:	2b40      	cmp	r3, #64	; 0x40
 80092e2:	d02e      	beq.n	8009342 <UART_SetConfig+0xab2>
 80092e4:	e031      	b.n	800934a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092e6:	f7fb ffc7 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 80092ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092ec:	e033      	b.n	8009356 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092ee:	f7fb ffd9 	bl	80052a4 <HAL_RCC_GetPCLK2Freq>
 80092f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092f4:	e02f      	b.n	8009356 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fd f9bc 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009304:	e027      	b.n	8009356 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009306:	f107 0318 	add.w	r3, r7, #24
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd fb08 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009314:	e01f      	b.n	8009356 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009316:	4b69      	ldr	r3, [pc, #420]	; (80094bc <UART_SetConfig+0xc2c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b00      	cmp	r3, #0
 8009320:	d009      	beq.n	8009336 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009322:	4b66      	ldr	r3, [pc, #408]	; (80094bc <UART_SetConfig+0xc2c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	08db      	lsrs	r3, r3, #3
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	4a64      	ldr	r2, [pc, #400]	; (80094c0 <UART_SetConfig+0xc30>)
 800932e:	fa22 f303 	lsr.w	r3, r2, r3
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009334:	e00f      	b.n	8009356 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009336:	4b62      	ldr	r3, [pc, #392]	; (80094c0 <UART_SetConfig+0xc30>)
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800933a:	e00c      	b.n	8009356 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800933c:	4b61      	ldr	r3, [pc, #388]	; (80094c4 <UART_SetConfig+0xc34>)
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009340:	e009      	b.n	8009356 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009348:	e005      	b.n	8009356 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 80ea 	beq.w	8009532 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	4a55      	ldr	r2, [pc, #340]	; (80094b8 <UART_SetConfig+0xc28>)
 8009364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009368:	461a      	mov	r2, r3
 800936a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009370:	005a      	lsls	r2, r3, #1
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	085b      	lsrs	r3, r3, #1
 8009378:	441a      	add	r2, r3
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009382:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	2b0f      	cmp	r3, #15
 8009388:	d916      	bls.n	80093b8 <UART_SetConfig+0xb28>
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009390:	d212      	bcs.n	80093b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	b29b      	uxth	r3, r3
 8009396:	f023 030f 	bic.w	r3, r3, #15
 800939a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	085b      	lsrs	r3, r3, #1
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093aa:	4313      	orrs	r3, r2
 80093ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80093b4:	60da      	str	r2, [r3, #12]
 80093b6:	e0bc      	b.n	8009532 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80093be:	e0b8      	b.n	8009532 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	dc4b      	bgt.n	8009460 <UART_SetConfig+0xbd0>
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f2c0 8087 	blt.w	80094dc <UART_SetConfig+0xc4c>
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	f200 8084 	bhi.w	80094dc <UART_SetConfig+0xc4c>
 80093d4:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <UART_SetConfig+0xb4c>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	08009467 	.word	0x08009467
 80093e0:	0800946f 	.word	0x0800946f
 80093e4:	080094dd 	.word	0x080094dd
 80093e8:	080094dd 	.word	0x080094dd
 80093ec:	08009477 	.word	0x08009477
 80093f0:	080094dd 	.word	0x080094dd
 80093f4:	080094dd 	.word	0x080094dd
 80093f8:	080094dd 	.word	0x080094dd
 80093fc:	08009487 	.word	0x08009487
 8009400:	080094dd 	.word	0x080094dd
 8009404:	080094dd 	.word	0x080094dd
 8009408:	080094dd 	.word	0x080094dd
 800940c:	080094dd 	.word	0x080094dd
 8009410:	080094dd 	.word	0x080094dd
 8009414:	080094dd 	.word	0x080094dd
 8009418:	080094dd 	.word	0x080094dd
 800941c:	08009497 	.word	0x08009497
 8009420:	080094dd 	.word	0x080094dd
 8009424:	080094dd 	.word	0x080094dd
 8009428:	080094dd 	.word	0x080094dd
 800942c:	080094dd 	.word	0x080094dd
 8009430:	080094dd 	.word	0x080094dd
 8009434:	080094dd 	.word	0x080094dd
 8009438:	080094dd 	.word	0x080094dd
 800943c:	080094dd 	.word	0x080094dd
 8009440:	080094dd 	.word	0x080094dd
 8009444:	080094dd 	.word	0x080094dd
 8009448:	080094dd 	.word	0x080094dd
 800944c:	080094dd 	.word	0x080094dd
 8009450:	080094dd 	.word	0x080094dd
 8009454:	080094dd 	.word	0x080094dd
 8009458:	080094dd 	.word	0x080094dd
 800945c:	080094cf 	.word	0x080094cf
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d037      	beq.n	80094d4 <UART_SetConfig+0xc44>
 8009464:	e03a      	b.n	80094dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009466:	f7fb ff07 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 800946a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800946c:	e03c      	b.n	80094e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800946e:	f7fb ff19 	bl	80052a4 <HAL_RCC_GetPCLK2Freq>
 8009472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009474:	e038      	b.n	80094e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800947a:	4618      	mov	r0, r3
 800947c:	f7fd f8fc 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009484:	e030      	b.n	80094e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009486:	f107 0318 	add.w	r3, r7, #24
 800948a:	4618      	mov	r0, r3
 800948c:	f7fd fa48 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009494:	e028      	b.n	80094e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009496:	4b09      	ldr	r3, [pc, #36]	; (80094bc <UART_SetConfig+0xc2c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d012      	beq.n	80094c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094a2:	4b06      	ldr	r3, [pc, #24]	; (80094bc <UART_SetConfig+0xc2c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	08db      	lsrs	r3, r3, #3
 80094a8:	f003 0303 	and.w	r3, r3, #3
 80094ac:	4a04      	ldr	r2, [pc, #16]	; (80094c0 <UART_SetConfig+0xc30>)
 80094ae:	fa22 f303 	lsr.w	r3, r2, r3
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094b4:	e018      	b.n	80094e8 <UART_SetConfig+0xc58>
 80094b6:	bf00      	nop
 80094b8:	0800aaac 	.word	0x0800aaac
 80094bc:	58024400 	.word	0x58024400
 80094c0:	03d09000 	.word	0x03d09000
 80094c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80094c8:	4b24      	ldr	r3, [pc, #144]	; (800955c <UART_SetConfig+0xccc>)
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094cc:	e00c      	b.n	80094e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094ce:	4b24      	ldr	r3, [pc, #144]	; (8009560 <UART_SetConfig+0xcd0>)
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d2:	e009      	b.n	80094e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094da:	e005      	b.n	80094e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80094e6:	bf00      	nop
    }

    if (pclk != 0U)
 80094e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d021      	beq.n	8009532 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	4a1c      	ldr	r2, [pc, #112]	; (8009564 <UART_SetConfig+0xcd4>)
 80094f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	085b      	lsrs	r3, r3, #1
 8009506:	441a      	add	r2, r3
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009510:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	2b0f      	cmp	r3, #15
 8009516:	d909      	bls.n	800952c <UART_SetConfig+0xc9c>
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800951e:	d205      	bcs.n	800952c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	b29a      	uxth	r2, r3
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60da      	str	r2, [r3, #12]
 800952a:	e002      	b.n	8009532 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2201      	movs	r2, #1
 8009536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2201      	movs	r2, #1
 800953e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2200      	movs	r2, #0
 8009546:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2200      	movs	r2, #0
 800954c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800954e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009552:	4618      	mov	r0, r3
 8009554:	3748      	adds	r7, #72	; 0x48
 8009556:	46bd      	mov	sp, r7
 8009558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800955c:	03d09000 	.word	0x03d09000
 8009560:	003d0900 	.word	0x003d0900
 8009564:	0800aaac 	.word	0x0800aaac

08009568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fc:	f003 0310 	and.w	r3, r3, #16
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00a      	beq.n	800961a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01a      	beq.n	800967e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009666:	d10a      	bne.n	800967e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	605a      	str	r2, [r3, #4]
  }
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b098      	sub	sp, #96	; 0x60
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096bc:	f7f8 f936 	bl	800192c <HAL_GetTick>
 80096c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d12f      	bne.n	8009730 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d8:	2200      	movs	r2, #0
 80096da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f88e 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d022      	beq.n	8009730 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096fe:	653b      	str	r3, [r7, #80]	; 0x50
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009708:	647b      	str	r3, [r7, #68]	; 0x44
 800970a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800970e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e6      	bne.n	80096ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2220      	movs	r2, #32
 8009720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e063      	b.n	80097f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	2b04      	cmp	r3, #4
 800973c:	d149      	bne.n	80097d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800973e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009746:	2200      	movs	r2, #0
 8009748:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f857 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d03c      	beq.n	80097d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	623b      	str	r3, [r7, #32]
   return(result);
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800976c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009776:	633b      	str	r3, [r7, #48]	; 0x30
 8009778:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800977c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e6      	bne.n	8009758 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	60fb      	str	r3, [r7, #12]
   return(result);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f023 0301 	bic.w	r3, r3, #1
 80097a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097aa:	61fa      	str	r2, [r7, #28]
 80097ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	69b9      	ldr	r1, [r7, #24]
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	617b      	str	r3, [r7, #20]
   return(result);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e5      	bne.n	800978a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e012      	b.n	80097f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2220      	movs	r2, #32
 80097de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3758      	adds	r7, #88	; 0x58
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	4613      	mov	r3, r2
 800980e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009810:	e04f      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009818:	d04b      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981a:	f7f8 f887 	bl	800192c <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	429a      	cmp	r2, r3
 8009828:	d302      	bcc.n	8009830 <UART_WaitOnFlagUntilTimeout+0x30>
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e04e      	b.n	80098d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d037      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b80      	cmp	r3, #128	; 0x80
 8009846:	d034      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b40      	cmp	r3, #64	; 0x40
 800984c:	d031      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b08      	cmp	r3, #8
 800985a:	d110      	bne.n	800987e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2208      	movs	r2, #8
 8009862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f921 	bl	8009aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2208      	movs	r2, #8
 800986e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e029      	b.n	80098d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800988c:	d111      	bne.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 f907 	bl	8009aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e00f      	b.n	80098d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69da      	ldr	r2, [r3, #28]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4013      	ands	r3, r2
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	429a      	cmp	r2, r3
 80098c0:	bf0c      	ite	eq
 80098c2:	2301      	moveq	r3, #1
 80098c4:	2300      	movne	r3, #0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d0a0      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b096      	sub	sp, #88	; 0x58
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	88fa      	ldrh	r2, [r7, #6]
 80098f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2222      	movs	r2, #34	; 0x22
 8009904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02d      	beq.n	800996e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009918:	4a40      	ldr	r2, [pc, #256]	; (8009a1c <UART_Start_Receive_DMA+0x140>)
 800991a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009922:	4a3f      	ldr	r2, [pc, #252]	; (8009a20 <UART_Start_Receive_DMA+0x144>)
 8009924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800992c:	4a3d      	ldr	r2, [pc, #244]	; (8009a24 <UART_Start_Receive_DMA+0x148>)
 800992e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009936:	2200      	movs	r2, #0
 8009938:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3324      	adds	r3, #36	; 0x24
 8009946:	4619      	mov	r1, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994c:	461a      	mov	r2, r3
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	f7f8 fcbc 	bl	80022cc <HAL_DMA_Start_IT>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2210      	movs	r2, #16
 800995e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2220      	movs	r2, #32
 8009966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e051      	b.n	8009a12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d018      	beq.n	80099a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800998a:	657b      	str	r3, [r7, #84]	; 0x54
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009994:	64bb      	str	r3, [r7, #72]	; 0x48
 8009996:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800999a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80099a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e6      	bne.n	8009976 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	f043 0301 	orr.w	r3, r3, #1
 80099be:	653b      	str	r3, [r7, #80]	; 0x50
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3308      	adds	r3, #8
 80099c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099c8:	637a      	str	r2, [r7, #52]	; 0x34
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3308      	adds	r3, #8
 80099e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	613b      	str	r3, [r7, #16]
   return(result);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099fc:	623a      	str	r2, [r7, #32]
 80099fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	69f9      	ldr	r1, [r7, #28]
 8009a02:	6a3a      	ldr	r2, [r7, #32]
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e5      	bne.n	80099dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3758      	adds	r7, #88	; 0x58
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	08009b79 	.word	0x08009b79
 8009a20:	08009ca1 	.word	0x08009ca1
 8009a24:	08009cdf 	.word	0x08009cdf

08009a28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b08f      	sub	sp, #60	; 0x3c
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a44:	637b      	str	r3, [r7, #52]	; 0x34
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a50:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e6      	bne.n	8009a30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3308      	adds	r3, #8
 8009a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	e853 3f00 	ldrex	r3, [r3]
 8009a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009a78:	633b      	str	r3, [r7, #48]	; 0x30
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a82:	61ba      	str	r2, [r7, #24]
 8009a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6979      	ldr	r1, [r7, #20]
 8009a88:	69ba      	ldr	r2, [r7, #24]
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e5      	bne.n	8009a62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009a9e:	bf00      	nop
 8009aa0:	373c      	adds	r7, #60	; 0x3c
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
	...

08009aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b095      	sub	sp, #84	; 0x54
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e6      	bne.n	8009ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3308      	adds	r3, #8
 8009aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	4b1e      	ldr	r3, [pc, #120]	; (8009b74 <UART_EndRxTransfer+0xc8>)
 8009afa:	4013      	ands	r3, r2
 8009afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3308      	adds	r3, #8
 8009b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e5      	bne.n	8009ae6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d118      	bne.n	8009b54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f023 0310 	bic.w	r3, r3, #16
 8009b36:	647b      	str	r3, [r7, #68]	; 0x44
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6979      	ldr	r1, [r7, #20]
 8009b46:	69ba      	ldr	r2, [r7, #24]
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e6      	bne.n	8009b22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009b68:	bf00      	nop
 8009b6a:	3754      	adds	r7, #84	; 0x54
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	effffffe 	.word	0xeffffffe

08009b78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b09c      	sub	sp, #112	; 0x70
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b84:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b8e:	d071      	beq.n	8009c74 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e6      	bne.n	8009b98 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bdc:	f023 0301 	bic.w	r3, r3, #1
 8009be0:	667b      	str	r3, [r7, #100]	; 0x64
 8009be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3308      	adds	r3, #8
 8009be8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bea:	647a      	str	r2, [r7, #68]	; 0x44
 8009bec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e5      	bne.n	8009bca <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c14:	663b      	str	r3, [r7, #96]	; 0x60
 8009c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c1e:	633a      	str	r2, [r7, #48]	; 0x30
 8009c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e5      	bne.n	8009bfe <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c34:	2220      	movs	r2, #32
 8009c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d118      	bne.n	8009c74 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 0310 	bic.w	r3, r3, #16
 8009c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	69b9      	ldr	r1, [r7, #24]
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e6      	bne.n	8009c42 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c76:	2200      	movs	r2, #0
 8009c78:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d107      	bne.n	8009c92 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c8c:	f7f7 f87e 	bl	8000d8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c90:	e002      	b.n	8009c98 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009c92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c94:	f7f7 f894 	bl	8000dc0 <HAL_UART_RxCpltCallback>
}
 8009c98:	bf00      	nop
 8009c9a:	3770      	adds	r7, #112	; 0x70
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d109      	bne.n	8009cd0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7f7 f85f 	bl	8000d8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cce:	e002      	b.n	8009cd6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7fe fdc9 	bl	8008868 <HAL_UART_RxHalfCpltCallback>
}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b086      	sub	sp, #24
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d06:	2b80      	cmp	r3, #128	; 0x80
 8009d08:	d109      	bne.n	8009d1e <UART_DMAError+0x40>
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b21      	cmp	r3, #33	; 0x21
 8009d0e:	d106      	bne.n	8009d1e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009d18:	6978      	ldr	r0, [r7, #20]
 8009d1a:	f7ff fe85 	bl	8009a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d28:	2b40      	cmp	r3, #64	; 0x40
 8009d2a:	d109      	bne.n	8009d40 <UART_DMAError+0x62>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b22      	cmp	r3, #34	; 0x22
 8009d30:	d106      	bne.n	8009d40 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009d3a:	6978      	ldr	r0, [r7, #20]
 8009d3c:	f7ff feb6 	bl	8009aac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d46:	f043 0210 	orr.w	r2, r3, #16
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d50:	6978      	ldr	r0, [r7, #20]
 8009d52:	f7fe fd93 	bl	800887c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d56:	bf00      	nop
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b085      	sub	sp, #20
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e027      	b.n	8009dc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2224      	movs	r2, #36	; 0x24
 8009d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0201 	bic.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009da2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e02d      	b.n	8009e44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2224      	movs	r2, #36	; 0x24
 8009df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0201 	bic.w	r2, r2, #1
 8009e0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f84f 	bl	8009ec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d101      	bne.n	8009e64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e60:	2302      	movs	r3, #2
 8009e62:	e02d      	b.n	8009ec0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2224      	movs	r2, #36	; 0x24
 8009e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0201 	bic.w	r2, r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f811 	bl	8009ec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d108      	bne.n	8009eea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ee8:	e031      	b.n	8009f4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009eea:	2310      	movs	r3, #16
 8009eec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009eee:	2310      	movs	r3, #16
 8009ef0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	0e5b      	lsrs	r3, r3, #25
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 0307 	and.w	r3, r3, #7
 8009f00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	0f5b      	lsrs	r3, r3, #29
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0307 	and.w	r3, r3, #7
 8009f10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	7b3a      	ldrb	r2, [r7, #12]
 8009f16:	4911      	ldr	r1, [pc, #68]	; (8009f5c <UARTEx_SetNbDataToProcess+0x94>)
 8009f18:	5c8a      	ldrb	r2, [r1, r2]
 8009f1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f1e:	7b3a      	ldrb	r2, [r7, #12]
 8009f20:	490f      	ldr	r1, [pc, #60]	; (8009f60 <UARTEx_SetNbDataToProcess+0x98>)
 8009f22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f24:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	7b7a      	ldrb	r2, [r7, #13]
 8009f34:	4909      	ldr	r1, [pc, #36]	; (8009f5c <UARTEx_SetNbDataToProcess+0x94>)
 8009f36:	5c8a      	ldrb	r2, [r1, r2]
 8009f38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f3c:	7b7a      	ldrb	r2, [r7, #13]
 8009f3e:	4908      	ldr	r1, [pc, #32]	; (8009f60 <UARTEx_SetNbDataToProcess+0x98>)
 8009f40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f42:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f4e:	bf00      	nop
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	0800aac4 	.word	0x0800aac4
 8009f60:	0800aacc 	.word	0x0800aacc

08009f64 <__errno>:
 8009f64:	4b01      	ldr	r3, [pc, #4]	; (8009f6c <__errno+0x8>)
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	24000010 	.word	0x24000010

08009f70 <__libc_init_array>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	4d0d      	ldr	r5, [pc, #52]	; (8009fa8 <__libc_init_array+0x38>)
 8009f74:	4c0d      	ldr	r4, [pc, #52]	; (8009fac <__libc_init_array+0x3c>)
 8009f76:	1b64      	subs	r4, r4, r5
 8009f78:	10a4      	asrs	r4, r4, #2
 8009f7a:	2600      	movs	r6, #0
 8009f7c:	42a6      	cmp	r6, r4
 8009f7e:	d109      	bne.n	8009f94 <__libc_init_array+0x24>
 8009f80:	4d0b      	ldr	r5, [pc, #44]	; (8009fb0 <__libc_init_array+0x40>)
 8009f82:	4c0c      	ldr	r4, [pc, #48]	; (8009fb4 <__libc_init_array+0x44>)
 8009f84:	f000 fc8e 	bl	800a8a4 <_init>
 8009f88:	1b64      	subs	r4, r4, r5
 8009f8a:	10a4      	asrs	r4, r4, #2
 8009f8c:	2600      	movs	r6, #0
 8009f8e:	42a6      	cmp	r6, r4
 8009f90:	d105      	bne.n	8009f9e <__libc_init_array+0x2e>
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f98:	4798      	blx	r3
 8009f9a:	3601      	adds	r6, #1
 8009f9c:	e7ee      	b.n	8009f7c <__libc_init_array+0xc>
 8009f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa2:	4798      	blx	r3
 8009fa4:	3601      	adds	r6, #1
 8009fa6:	e7f2      	b.n	8009f8e <__libc_init_array+0x1e>
 8009fa8:	0800ab10 	.word	0x0800ab10
 8009fac:	0800ab10 	.word	0x0800ab10
 8009fb0:	0800ab10 	.word	0x0800ab10
 8009fb4:	0800ab14 	.word	0x0800ab14

08009fb8 <memset>:
 8009fb8:	4402      	add	r2, r0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d100      	bne.n	8009fc2 <memset+0xa>
 8009fc0:	4770      	bx	lr
 8009fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc6:	e7f9      	b.n	8009fbc <memset+0x4>

08009fc8 <siprintf>:
 8009fc8:	b40e      	push	{r1, r2, r3}
 8009fca:	b500      	push	{lr}
 8009fcc:	b09c      	sub	sp, #112	; 0x70
 8009fce:	ab1d      	add	r3, sp, #116	; 0x74
 8009fd0:	9002      	str	r0, [sp, #8]
 8009fd2:	9006      	str	r0, [sp, #24]
 8009fd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fd8:	4809      	ldr	r0, [pc, #36]	; (800a000 <siprintf+0x38>)
 8009fda:	9107      	str	r1, [sp, #28]
 8009fdc:	9104      	str	r1, [sp, #16]
 8009fde:	4909      	ldr	r1, [pc, #36]	; (800a004 <siprintf+0x3c>)
 8009fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe4:	9105      	str	r1, [sp, #20]
 8009fe6:	6800      	ldr	r0, [r0, #0]
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	a902      	add	r1, sp, #8
 8009fec:	f000 f868 	bl	800a0c0 <_svfiprintf_r>
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	b01c      	add	sp, #112	; 0x70
 8009ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ffc:	b003      	add	sp, #12
 8009ffe:	4770      	bx	lr
 800a000:	24000010 	.word	0x24000010
 800a004:	ffff0208 	.word	0xffff0208

0800a008 <__ssputs_r>:
 800a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	688e      	ldr	r6, [r1, #8]
 800a00e:	429e      	cmp	r6, r3
 800a010:	4682      	mov	sl, r0
 800a012:	460c      	mov	r4, r1
 800a014:	4690      	mov	r8, r2
 800a016:	461f      	mov	r7, r3
 800a018:	d838      	bhi.n	800a08c <__ssputs_r+0x84>
 800a01a:	898a      	ldrh	r2, [r1, #12]
 800a01c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a020:	d032      	beq.n	800a088 <__ssputs_r+0x80>
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	6909      	ldr	r1, [r1, #16]
 800a026:	eba5 0901 	sub.w	r9, r5, r1
 800a02a:	6965      	ldr	r5, [r4, #20]
 800a02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a034:	3301      	adds	r3, #1
 800a036:	444b      	add	r3, r9
 800a038:	106d      	asrs	r5, r5, #1
 800a03a:	429d      	cmp	r5, r3
 800a03c:	bf38      	it	cc
 800a03e:	461d      	movcc	r5, r3
 800a040:	0553      	lsls	r3, r2, #21
 800a042:	d531      	bpl.n	800a0a8 <__ssputs_r+0xa0>
 800a044:	4629      	mov	r1, r5
 800a046:	f000 fb63 	bl	800a710 <_malloc_r>
 800a04a:	4606      	mov	r6, r0
 800a04c:	b950      	cbnz	r0, 800a064 <__ssputs_r+0x5c>
 800a04e:	230c      	movs	r3, #12
 800a050:	f8ca 3000 	str.w	r3, [sl]
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	6921      	ldr	r1, [r4, #16]
 800a066:	464a      	mov	r2, r9
 800a068:	f000 fabe 	bl	800a5e8 <memcpy>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a076:	81a3      	strh	r3, [r4, #12]
 800a078:	6126      	str	r6, [r4, #16]
 800a07a:	6165      	str	r5, [r4, #20]
 800a07c:	444e      	add	r6, r9
 800a07e:	eba5 0509 	sub.w	r5, r5, r9
 800a082:	6026      	str	r6, [r4, #0]
 800a084:	60a5      	str	r5, [r4, #8]
 800a086:	463e      	mov	r6, r7
 800a088:	42be      	cmp	r6, r7
 800a08a:	d900      	bls.n	800a08e <__ssputs_r+0x86>
 800a08c:	463e      	mov	r6, r7
 800a08e:	6820      	ldr	r0, [r4, #0]
 800a090:	4632      	mov	r2, r6
 800a092:	4641      	mov	r1, r8
 800a094:	f000 fab6 	bl	800a604 <memmove>
 800a098:	68a3      	ldr	r3, [r4, #8]
 800a09a:	1b9b      	subs	r3, r3, r6
 800a09c:	60a3      	str	r3, [r4, #8]
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	4433      	add	r3, r6
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	e7db      	b.n	800a060 <__ssputs_r+0x58>
 800a0a8:	462a      	mov	r2, r5
 800a0aa:	f000 fba5 	bl	800a7f8 <_realloc_r>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d1e1      	bne.n	800a078 <__ssputs_r+0x70>
 800a0b4:	6921      	ldr	r1, [r4, #16]
 800a0b6:	4650      	mov	r0, sl
 800a0b8:	f000 fabe 	bl	800a638 <_free_r>
 800a0bc:	e7c7      	b.n	800a04e <__ssputs_r+0x46>
	...

0800a0c0 <_svfiprintf_r>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	4698      	mov	r8, r3
 800a0c6:	898b      	ldrh	r3, [r1, #12]
 800a0c8:	061b      	lsls	r3, r3, #24
 800a0ca:	b09d      	sub	sp, #116	; 0x74
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	4614      	mov	r4, r2
 800a0d2:	d50e      	bpl.n	800a0f2 <_svfiprintf_r+0x32>
 800a0d4:	690b      	ldr	r3, [r1, #16]
 800a0d6:	b963      	cbnz	r3, 800a0f2 <_svfiprintf_r+0x32>
 800a0d8:	2140      	movs	r1, #64	; 0x40
 800a0da:	f000 fb19 	bl	800a710 <_malloc_r>
 800a0de:	6028      	str	r0, [r5, #0]
 800a0e0:	6128      	str	r0, [r5, #16]
 800a0e2:	b920      	cbnz	r0, 800a0ee <_svfiprintf_r+0x2e>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	e0d1      	b.n	800a292 <_svfiprintf_r+0x1d2>
 800a0ee:	2340      	movs	r3, #64	; 0x40
 800a0f0:	616b      	str	r3, [r5, #20]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f6:	2320      	movs	r3, #32
 800a0f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a100:	2330      	movs	r3, #48	; 0x30
 800a102:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a2ac <_svfiprintf_r+0x1ec>
 800a106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a10a:	f04f 0901 	mov.w	r9, #1
 800a10e:	4623      	mov	r3, r4
 800a110:	469a      	mov	sl, r3
 800a112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a116:	b10a      	cbz	r2, 800a11c <_svfiprintf_r+0x5c>
 800a118:	2a25      	cmp	r2, #37	; 0x25
 800a11a:	d1f9      	bne.n	800a110 <_svfiprintf_r+0x50>
 800a11c:	ebba 0b04 	subs.w	fp, sl, r4
 800a120:	d00b      	beq.n	800a13a <_svfiprintf_r+0x7a>
 800a122:	465b      	mov	r3, fp
 800a124:	4622      	mov	r2, r4
 800a126:	4629      	mov	r1, r5
 800a128:	4638      	mov	r0, r7
 800a12a:	f7ff ff6d 	bl	800a008 <__ssputs_r>
 800a12e:	3001      	adds	r0, #1
 800a130:	f000 80aa 	beq.w	800a288 <_svfiprintf_r+0x1c8>
 800a134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a136:	445a      	add	r2, fp
 800a138:	9209      	str	r2, [sp, #36]	; 0x24
 800a13a:	f89a 3000 	ldrb.w	r3, [sl]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 80a2 	beq.w	800a288 <_svfiprintf_r+0x1c8>
 800a144:	2300      	movs	r3, #0
 800a146:	f04f 32ff 	mov.w	r2, #4294967295
 800a14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a14e:	f10a 0a01 	add.w	sl, sl, #1
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	9307      	str	r3, [sp, #28]
 800a156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a15a:	931a      	str	r3, [sp, #104]	; 0x68
 800a15c:	4654      	mov	r4, sl
 800a15e:	2205      	movs	r2, #5
 800a160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a164:	4851      	ldr	r0, [pc, #324]	; (800a2ac <_svfiprintf_r+0x1ec>)
 800a166:	f7f6 f8cb 	bl	8000300 <memchr>
 800a16a:	9a04      	ldr	r2, [sp, #16]
 800a16c:	b9d8      	cbnz	r0, 800a1a6 <_svfiprintf_r+0xe6>
 800a16e:	06d0      	lsls	r0, r2, #27
 800a170:	bf44      	itt	mi
 800a172:	2320      	movmi	r3, #32
 800a174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a178:	0711      	lsls	r1, r2, #28
 800a17a:	bf44      	itt	mi
 800a17c:	232b      	movmi	r3, #43	; 0x2b
 800a17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a182:	f89a 3000 	ldrb.w	r3, [sl]
 800a186:	2b2a      	cmp	r3, #42	; 0x2a
 800a188:	d015      	beq.n	800a1b6 <_svfiprintf_r+0xf6>
 800a18a:	9a07      	ldr	r2, [sp, #28]
 800a18c:	4654      	mov	r4, sl
 800a18e:	2000      	movs	r0, #0
 800a190:	f04f 0c0a 	mov.w	ip, #10
 800a194:	4621      	mov	r1, r4
 800a196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a19a:	3b30      	subs	r3, #48	; 0x30
 800a19c:	2b09      	cmp	r3, #9
 800a19e:	d94e      	bls.n	800a23e <_svfiprintf_r+0x17e>
 800a1a0:	b1b0      	cbz	r0, 800a1d0 <_svfiprintf_r+0x110>
 800a1a2:	9207      	str	r2, [sp, #28]
 800a1a4:	e014      	b.n	800a1d0 <_svfiprintf_r+0x110>
 800a1a6:	eba0 0308 	sub.w	r3, r0, r8
 800a1aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	46a2      	mov	sl, r4
 800a1b4:	e7d2      	b.n	800a15c <_svfiprintf_r+0x9c>
 800a1b6:	9b03      	ldr	r3, [sp, #12]
 800a1b8:	1d19      	adds	r1, r3, #4
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	9103      	str	r1, [sp, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bfbb      	ittet	lt
 800a1c2:	425b      	neglt	r3, r3
 800a1c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c8:	9307      	strge	r3, [sp, #28]
 800a1ca:	9307      	strlt	r3, [sp, #28]
 800a1cc:	bfb8      	it	lt
 800a1ce:	9204      	strlt	r2, [sp, #16]
 800a1d0:	7823      	ldrb	r3, [r4, #0]
 800a1d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1d4:	d10c      	bne.n	800a1f0 <_svfiprintf_r+0x130>
 800a1d6:	7863      	ldrb	r3, [r4, #1]
 800a1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1da:	d135      	bne.n	800a248 <_svfiprintf_r+0x188>
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	1d1a      	adds	r2, r3, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	9203      	str	r2, [sp, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bfb8      	it	lt
 800a1e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ec:	3402      	adds	r4, #2
 800a1ee:	9305      	str	r3, [sp, #20]
 800a1f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a2bc <_svfiprintf_r+0x1fc>
 800a1f4:	7821      	ldrb	r1, [r4, #0]
 800a1f6:	2203      	movs	r2, #3
 800a1f8:	4650      	mov	r0, sl
 800a1fa:	f7f6 f881 	bl	8000300 <memchr>
 800a1fe:	b140      	cbz	r0, 800a212 <_svfiprintf_r+0x152>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	eba0 000a 	sub.w	r0, r0, sl
 800a206:	fa03 f000 	lsl.w	r0, r3, r0
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	4303      	orrs	r3, r0
 800a20e:	3401      	adds	r4, #1
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a216:	4826      	ldr	r0, [pc, #152]	; (800a2b0 <_svfiprintf_r+0x1f0>)
 800a218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a21c:	2206      	movs	r2, #6
 800a21e:	f7f6 f86f 	bl	8000300 <memchr>
 800a222:	2800      	cmp	r0, #0
 800a224:	d038      	beq.n	800a298 <_svfiprintf_r+0x1d8>
 800a226:	4b23      	ldr	r3, [pc, #140]	; (800a2b4 <_svfiprintf_r+0x1f4>)
 800a228:	bb1b      	cbnz	r3, 800a272 <_svfiprintf_r+0x1b2>
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	3307      	adds	r3, #7
 800a22e:	f023 0307 	bic.w	r3, r3, #7
 800a232:	3308      	adds	r3, #8
 800a234:	9303      	str	r3, [sp, #12]
 800a236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a238:	4433      	add	r3, r6
 800a23a:	9309      	str	r3, [sp, #36]	; 0x24
 800a23c:	e767      	b.n	800a10e <_svfiprintf_r+0x4e>
 800a23e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a242:	460c      	mov	r4, r1
 800a244:	2001      	movs	r0, #1
 800a246:	e7a5      	b.n	800a194 <_svfiprintf_r+0xd4>
 800a248:	2300      	movs	r3, #0
 800a24a:	3401      	adds	r4, #1
 800a24c:	9305      	str	r3, [sp, #20]
 800a24e:	4619      	mov	r1, r3
 800a250:	f04f 0c0a 	mov.w	ip, #10
 800a254:	4620      	mov	r0, r4
 800a256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a25a:	3a30      	subs	r2, #48	; 0x30
 800a25c:	2a09      	cmp	r2, #9
 800a25e:	d903      	bls.n	800a268 <_svfiprintf_r+0x1a8>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0c5      	beq.n	800a1f0 <_svfiprintf_r+0x130>
 800a264:	9105      	str	r1, [sp, #20]
 800a266:	e7c3      	b.n	800a1f0 <_svfiprintf_r+0x130>
 800a268:	fb0c 2101 	mla	r1, ip, r1, r2
 800a26c:	4604      	mov	r4, r0
 800a26e:	2301      	movs	r3, #1
 800a270:	e7f0      	b.n	800a254 <_svfiprintf_r+0x194>
 800a272:	ab03      	add	r3, sp, #12
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	462a      	mov	r2, r5
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <_svfiprintf_r+0x1f8>)
 800a27a:	a904      	add	r1, sp, #16
 800a27c:	4638      	mov	r0, r7
 800a27e:	f3af 8000 	nop.w
 800a282:	1c42      	adds	r2, r0, #1
 800a284:	4606      	mov	r6, r0
 800a286:	d1d6      	bne.n	800a236 <_svfiprintf_r+0x176>
 800a288:	89ab      	ldrh	r3, [r5, #12]
 800a28a:	065b      	lsls	r3, r3, #25
 800a28c:	f53f af2c 	bmi.w	800a0e8 <_svfiprintf_r+0x28>
 800a290:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a292:	b01d      	add	sp, #116	; 0x74
 800a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a298:	ab03      	add	r3, sp, #12
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	462a      	mov	r2, r5
 800a29e:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <_svfiprintf_r+0x1f8>)
 800a2a0:	a904      	add	r1, sp, #16
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f000 f87a 	bl	800a39c <_printf_i>
 800a2a8:	e7eb      	b.n	800a282 <_svfiprintf_r+0x1c2>
 800a2aa:	bf00      	nop
 800a2ac:	0800aad4 	.word	0x0800aad4
 800a2b0:	0800aade 	.word	0x0800aade
 800a2b4:	00000000 	.word	0x00000000
 800a2b8:	0800a009 	.word	0x0800a009
 800a2bc:	0800aada 	.word	0x0800aada

0800a2c0 <_printf_common>:
 800a2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c4:	4616      	mov	r6, r2
 800a2c6:	4699      	mov	r9, r3
 800a2c8:	688a      	ldr	r2, [r1, #8]
 800a2ca:	690b      	ldr	r3, [r1, #16]
 800a2cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	bfb8      	it	lt
 800a2d4:	4613      	movlt	r3, r2
 800a2d6:	6033      	str	r3, [r6, #0]
 800a2d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2dc:	4607      	mov	r7, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	b10a      	cbz	r2, 800a2e6 <_printf_common+0x26>
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	6033      	str	r3, [r6, #0]
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	0699      	lsls	r1, r3, #26
 800a2ea:	bf42      	ittt	mi
 800a2ec:	6833      	ldrmi	r3, [r6, #0]
 800a2ee:	3302      	addmi	r3, #2
 800a2f0:	6033      	strmi	r3, [r6, #0]
 800a2f2:	6825      	ldr	r5, [r4, #0]
 800a2f4:	f015 0506 	ands.w	r5, r5, #6
 800a2f8:	d106      	bne.n	800a308 <_printf_common+0x48>
 800a2fa:	f104 0a19 	add.w	sl, r4, #25
 800a2fe:	68e3      	ldr	r3, [r4, #12]
 800a300:	6832      	ldr	r2, [r6, #0]
 800a302:	1a9b      	subs	r3, r3, r2
 800a304:	42ab      	cmp	r3, r5
 800a306:	dc26      	bgt.n	800a356 <_printf_common+0x96>
 800a308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a30c:	1e13      	subs	r3, r2, #0
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	bf18      	it	ne
 800a312:	2301      	movne	r3, #1
 800a314:	0692      	lsls	r2, r2, #26
 800a316:	d42b      	bmi.n	800a370 <_printf_common+0xb0>
 800a318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a31c:	4649      	mov	r1, r9
 800a31e:	4638      	mov	r0, r7
 800a320:	47c0      	blx	r8
 800a322:	3001      	adds	r0, #1
 800a324:	d01e      	beq.n	800a364 <_printf_common+0xa4>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	68e5      	ldr	r5, [r4, #12]
 800a32a:	6832      	ldr	r2, [r6, #0]
 800a32c:	f003 0306 	and.w	r3, r3, #6
 800a330:	2b04      	cmp	r3, #4
 800a332:	bf08      	it	eq
 800a334:	1aad      	subeq	r5, r5, r2
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	6922      	ldr	r2, [r4, #16]
 800a33a:	bf0c      	ite	eq
 800a33c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a340:	2500      	movne	r5, #0
 800a342:	4293      	cmp	r3, r2
 800a344:	bfc4      	itt	gt
 800a346:	1a9b      	subgt	r3, r3, r2
 800a348:	18ed      	addgt	r5, r5, r3
 800a34a:	2600      	movs	r6, #0
 800a34c:	341a      	adds	r4, #26
 800a34e:	42b5      	cmp	r5, r6
 800a350:	d11a      	bne.n	800a388 <_printf_common+0xc8>
 800a352:	2000      	movs	r0, #0
 800a354:	e008      	b.n	800a368 <_printf_common+0xa8>
 800a356:	2301      	movs	r3, #1
 800a358:	4652      	mov	r2, sl
 800a35a:	4649      	mov	r1, r9
 800a35c:	4638      	mov	r0, r7
 800a35e:	47c0      	blx	r8
 800a360:	3001      	adds	r0, #1
 800a362:	d103      	bne.n	800a36c <_printf_common+0xac>
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36c:	3501      	adds	r5, #1
 800a36e:	e7c6      	b.n	800a2fe <_printf_common+0x3e>
 800a370:	18e1      	adds	r1, r4, r3
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	2030      	movs	r0, #48	; 0x30
 800a376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a37a:	4422      	add	r2, r4
 800a37c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a384:	3302      	adds	r3, #2
 800a386:	e7c7      	b.n	800a318 <_printf_common+0x58>
 800a388:	2301      	movs	r3, #1
 800a38a:	4622      	mov	r2, r4
 800a38c:	4649      	mov	r1, r9
 800a38e:	4638      	mov	r0, r7
 800a390:	47c0      	blx	r8
 800a392:	3001      	adds	r0, #1
 800a394:	d0e6      	beq.n	800a364 <_printf_common+0xa4>
 800a396:	3601      	adds	r6, #1
 800a398:	e7d9      	b.n	800a34e <_printf_common+0x8e>
	...

0800a39c <_printf_i>:
 800a39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a0:	7e0f      	ldrb	r7, [r1, #24]
 800a3a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3a4:	2f78      	cmp	r7, #120	; 0x78
 800a3a6:	4691      	mov	r9, r2
 800a3a8:	4680      	mov	r8, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	469a      	mov	sl, r3
 800a3ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3b2:	d807      	bhi.n	800a3c4 <_printf_i+0x28>
 800a3b4:	2f62      	cmp	r7, #98	; 0x62
 800a3b6:	d80a      	bhi.n	800a3ce <_printf_i+0x32>
 800a3b8:	2f00      	cmp	r7, #0
 800a3ba:	f000 80d8 	beq.w	800a56e <_printf_i+0x1d2>
 800a3be:	2f58      	cmp	r7, #88	; 0x58
 800a3c0:	f000 80a3 	beq.w	800a50a <_printf_i+0x16e>
 800a3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3cc:	e03a      	b.n	800a444 <_printf_i+0xa8>
 800a3ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3d2:	2b15      	cmp	r3, #21
 800a3d4:	d8f6      	bhi.n	800a3c4 <_printf_i+0x28>
 800a3d6:	a101      	add	r1, pc, #4	; (adr r1, 800a3dc <_printf_i+0x40>)
 800a3d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3dc:	0800a435 	.word	0x0800a435
 800a3e0:	0800a449 	.word	0x0800a449
 800a3e4:	0800a3c5 	.word	0x0800a3c5
 800a3e8:	0800a3c5 	.word	0x0800a3c5
 800a3ec:	0800a3c5 	.word	0x0800a3c5
 800a3f0:	0800a3c5 	.word	0x0800a3c5
 800a3f4:	0800a449 	.word	0x0800a449
 800a3f8:	0800a3c5 	.word	0x0800a3c5
 800a3fc:	0800a3c5 	.word	0x0800a3c5
 800a400:	0800a3c5 	.word	0x0800a3c5
 800a404:	0800a3c5 	.word	0x0800a3c5
 800a408:	0800a555 	.word	0x0800a555
 800a40c:	0800a479 	.word	0x0800a479
 800a410:	0800a537 	.word	0x0800a537
 800a414:	0800a3c5 	.word	0x0800a3c5
 800a418:	0800a3c5 	.word	0x0800a3c5
 800a41c:	0800a577 	.word	0x0800a577
 800a420:	0800a3c5 	.word	0x0800a3c5
 800a424:	0800a479 	.word	0x0800a479
 800a428:	0800a3c5 	.word	0x0800a3c5
 800a42c:	0800a3c5 	.word	0x0800a3c5
 800a430:	0800a53f 	.word	0x0800a53f
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	1d1a      	adds	r2, r3, #4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	602a      	str	r2, [r5, #0]
 800a43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a444:	2301      	movs	r3, #1
 800a446:	e0a3      	b.n	800a590 <_printf_i+0x1f4>
 800a448:	6820      	ldr	r0, [r4, #0]
 800a44a:	6829      	ldr	r1, [r5, #0]
 800a44c:	0606      	lsls	r6, r0, #24
 800a44e:	f101 0304 	add.w	r3, r1, #4
 800a452:	d50a      	bpl.n	800a46a <_printf_i+0xce>
 800a454:	680e      	ldr	r6, [r1, #0]
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	2e00      	cmp	r6, #0
 800a45a:	da03      	bge.n	800a464 <_printf_i+0xc8>
 800a45c:	232d      	movs	r3, #45	; 0x2d
 800a45e:	4276      	negs	r6, r6
 800a460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a464:	485e      	ldr	r0, [pc, #376]	; (800a5e0 <_printf_i+0x244>)
 800a466:	230a      	movs	r3, #10
 800a468:	e019      	b.n	800a49e <_printf_i+0x102>
 800a46a:	680e      	ldr	r6, [r1, #0]
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a472:	bf18      	it	ne
 800a474:	b236      	sxthne	r6, r6
 800a476:	e7ef      	b.n	800a458 <_printf_i+0xbc>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	6820      	ldr	r0, [r4, #0]
 800a47c:	1d19      	adds	r1, r3, #4
 800a47e:	6029      	str	r1, [r5, #0]
 800a480:	0601      	lsls	r1, r0, #24
 800a482:	d501      	bpl.n	800a488 <_printf_i+0xec>
 800a484:	681e      	ldr	r6, [r3, #0]
 800a486:	e002      	b.n	800a48e <_printf_i+0xf2>
 800a488:	0646      	lsls	r6, r0, #25
 800a48a:	d5fb      	bpl.n	800a484 <_printf_i+0xe8>
 800a48c:	881e      	ldrh	r6, [r3, #0]
 800a48e:	4854      	ldr	r0, [pc, #336]	; (800a5e0 <_printf_i+0x244>)
 800a490:	2f6f      	cmp	r7, #111	; 0x6f
 800a492:	bf0c      	ite	eq
 800a494:	2308      	moveq	r3, #8
 800a496:	230a      	movne	r3, #10
 800a498:	2100      	movs	r1, #0
 800a49a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a49e:	6865      	ldr	r5, [r4, #4]
 800a4a0:	60a5      	str	r5, [r4, #8]
 800a4a2:	2d00      	cmp	r5, #0
 800a4a4:	bfa2      	ittt	ge
 800a4a6:	6821      	ldrge	r1, [r4, #0]
 800a4a8:	f021 0104 	bicge.w	r1, r1, #4
 800a4ac:	6021      	strge	r1, [r4, #0]
 800a4ae:	b90e      	cbnz	r6, 800a4b4 <_printf_i+0x118>
 800a4b0:	2d00      	cmp	r5, #0
 800a4b2:	d04d      	beq.n	800a550 <_printf_i+0x1b4>
 800a4b4:	4615      	mov	r5, r2
 800a4b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4ba:	fb03 6711 	mls	r7, r3, r1, r6
 800a4be:	5dc7      	ldrb	r7, [r0, r7]
 800a4c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4c4:	4637      	mov	r7, r6
 800a4c6:	42bb      	cmp	r3, r7
 800a4c8:	460e      	mov	r6, r1
 800a4ca:	d9f4      	bls.n	800a4b6 <_printf_i+0x11a>
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d10b      	bne.n	800a4e8 <_printf_i+0x14c>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	07de      	lsls	r6, r3, #31
 800a4d4:	d508      	bpl.n	800a4e8 <_printf_i+0x14c>
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	bfde      	ittt	le
 800a4de:	2330      	movle	r3, #48	; 0x30
 800a4e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4e8:	1b52      	subs	r2, r2, r5
 800a4ea:	6122      	str	r2, [r4, #16]
 800a4ec:	f8cd a000 	str.w	sl, [sp]
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	aa03      	add	r2, sp, #12
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f7ff fee2 	bl	800a2c0 <_printf_common>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d14c      	bne.n	800a59a <_printf_i+0x1fe>
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	b004      	add	sp, #16
 800a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50a:	4835      	ldr	r0, [pc, #212]	; (800a5e0 <_printf_i+0x244>)
 800a50c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a510:	6829      	ldr	r1, [r5, #0]
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	f851 6b04 	ldr.w	r6, [r1], #4
 800a518:	6029      	str	r1, [r5, #0]
 800a51a:	061d      	lsls	r5, r3, #24
 800a51c:	d514      	bpl.n	800a548 <_printf_i+0x1ac>
 800a51e:	07df      	lsls	r7, r3, #31
 800a520:	bf44      	itt	mi
 800a522:	f043 0320 	orrmi.w	r3, r3, #32
 800a526:	6023      	strmi	r3, [r4, #0]
 800a528:	b91e      	cbnz	r6, 800a532 <_printf_i+0x196>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	f023 0320 	bic.w	r3, r3, #32
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	2310      	movs	r3, #16
 800a534:	e7b0      	b.n	800a498 <_printf_i+0xfc>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	f043 0320 	orr.w	r3, r3, #32
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	2378      	movs	r3, #120	; 0x78
 800a540:	4828      	ldr	r0, [pc, #160]	; (800a5e4 <_printf_i+0x248>)
 800a542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a546:	e7e3      	b.n	800a510 <_printf_i+0x174>
 800a548:	0659      	lsls	r1, r3, #25
 800a54a:	bf48      	it	mi
 800a54c:	b2b6      	uxthmi	r6, r6
 800a54e:	e7e6      	b.n	800a51e <_printf_i+0x182>
 800a550:	4615      	mov	r5, r2
 800a552:	e7bb      	b.n	800a4cc <_printf_i+0x130>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	6826      	ldr	r6, [r4, #0]
 800a558:	6961      	ldr	r1, [r4, #20]
 800a55a:	1d18      	adds	r0, r3, #4
 800a55c:	6028      	str	r0, [r5, #0]
 800a55e:	0635      	lsls	r5, r6, #24
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	d501      	bpl.n	800a568 <_printf_i+0x1cc>
 800a564:	6019      	str	r1, [r3, #0]
 800a566:	e002      	b.n	800a56e <_printf_i+0x1d2>
 800a568:	0670      	lsls	r0, r6, #25
 800a56a:	d5fb      	bpl.n	800a564 <_printf_i+0x1c8>
 800a56c:	8019      	strh	r1, [r3, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	6123      	str	r3, [r4, #16]
 800a572:	4615      	mov	r5, r2
 800a574:	e7ba      	b.n	800a4ec <_printf_i+0x150>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	1d1a      	adds	r2, r3, #4
 800a57a:	602a      	str	r2, [r5, #0]
 800a57c:	681d      	ldr	r5, [r3, #0]
 800a57e:	6862      	ldr	r2, [r4, #4]
 800a580:	2100      	movs	r1, #0
 800a582:	4628      	mov	r0, r5
 800a584:	f7f5 febc 	bl	8000300 <memchr>
 800a588:	b108      	cbz	r0, 800a58e <_printf_i+0x1f2>
 800a58a:	1b40      	subs	r0, r0, r5
 800a58c:	6060      	str	r0, [r4, #4]
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	2300      	movs	r3, #0
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a598:	e7a8      	b.n	800a4ec <_printf_i+0x150>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4649      	mov	r1, r9
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	47d0      	blx	sl
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d0ab      	beq.n	800a500 <_printf_i+0x164>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	079b      	lsls	r3, r3, #30
 800a5ac:	d413      	bmi.n	800a5d6 <_printf_i+0x23a>
 800a5ae:	68e0      	ldr	r0, [r4, #12]
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	4298      	cmp	r0, r3
 800a5b4:	bfb8      	it	lt
 800a5b6:	4618      	movlt	r0, r3
 800a5b8:	e7a4      	b.n	800a504 <_printf_i+0x168>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	47d0      	blx	sl
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d09b      	beq.n	800a500 <_printf_i+0x164>
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	9903      	ldr	r1, [sp, #12]
 800a5ce:	1a5b      	subs	r3, r3, r1
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dcf2      	bgt.n	800a5ba <_printf_i+0x21e>
 800a5d4:	e7eb      	b.n	800a5ae <_printf_i+0x212>
 800a5d6:	2500      	movs	r5, #0
 800a5d8:	f104 0619 	add.w	r6, r4, #25
 800a5dc:	e7f5      	b.n	800a5ca <_printf_i+0x22e>
 800a5de:	bf00      	nop
 800a5e0:	0800aae5 	.word	0x0800aae5
 800a5e4:	0800aaf6 	.word	0x0800aaf6

0800a5e8 <memcpy>:
 800a5e8:	440a      	add	r2, r1
 800a5ea:	4291      	cmp	r1, r2
 800a5ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5f0:	d100      	bne.n	800a5f4 <memcpy+0xc>
 800a5f2:	4770      	bx	lr
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5fe:	4291      	cmp	r1, r2
 800a600:	d1f9      	bne.n	800a5f6 <memcpy+0xe>
 800a602:	bd10      	pop	{r4, pc}

0800a604 <memmove>:
 800a604:	4288      	cmp	r0, r1
 800a606:	b510      	push	{r4, lr}
 800a608:	eb01 0402 	add.w	r4, r1, r2
 800a60c:	d902      	bls.n	800a614 <memmove+0x10>
 800a60e:	4284      	cmp	r4, r0
 800a610:	4623      	mov	r3, r4
 800a612:	d807      	bhi.n	800a624 <memmove+0x20>
 800a614:	1e43      	subs	r3, r0, #1
 800a616:	42a1      	cmp	r1, r4
 800a618:	d008      	beq.n	800a62c <memmove+0x28>
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a622:	e7f8      	b.n	800a616 <memmove+0x12>
 800a624:	4402      	add	r2, r0
 800a626:	4601      	mov	r1, r0
 800a628:	428a      	cmp	r2, r1
 800a62a:	d100      	bne.n	800a62e <memmove+0x2a>
 800a62c:	bd10      	pop	{r4, pc}
 800a62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a636:	e7f7      	b.n	800a628 <memmove+0x24>

0800a638 <_free_r>:
 800a638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a63a:	2900      	cmp	r1, #0
 800a63c:	d044      	beq.n	800a6c8 <_free_r+0x90>
 800a63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a642:	9001      	str	r0, [sp, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	f1a1 0404 	sub.w	r4, r1, #4
 800a64a:	bfb8      	it	lt
 800a64c:	18e4      	addlt	r4, r4, r3
 800a64e:	f000 f913 	bl	800a878 <__malloc_lock>
 800a652:	4a1e      	ldr	r2, [pc, #120]	; (800a6cc <_free_r+0x94>)
 800a654:	9801      	ldr	r0, [sp, #4]
 800a656:	6813      	ldr	r3, [r2, #0]
 800a658:	b933      	cbnz	r3, 800a668 <_free_r+0x30>
 800a65a:	6063      	str	r3, [r4, #4]
 800a65c:	6014      	str	r4, [r2, #0]
 800a65e:	b003      	add	sp, #12
 800a660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a664:	f000 b90e 	b.w	800a884 <__malloc_unlock>
 800a668:	42a3      	cmp	r3, r4
 800a66a:	d908      	bls.n	800a67e <_free_r+0x46>
 800a66c:	6825      	ldr	r5, [r4, #0]
 800a66e:	1961      	adds	r1, r4, r5
 800a670:	428b      	cmp	r3, r1
 800a672:	bf01      	itttt	eq
 800a674:	6819      	ldreq	r1, [r3, #0]
 800a676:	685b      	ldreq	r3, [r3, #4]
 800a678:	1949      	addeq	r1, r1, r5
 800a67a:	6021      	streq	r1, [r4, #0]
 800a67c:	e7ed      	b.n	800a65a <_free_r+0x22>
 800a67e:	461a      	mov	r2, r3
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	b10b      	cbz	r3, 800a688 <_free_r+0x50>
 800a684:	42a3      	cmp	r3, r4
 800a686:	d9fa      	bls.n	800a67e <_free_r+0x46>
 800a688:	6811      	ldr	r1, [r2, #0]
 800a68a:	1855      	adds	r5, r2, r1
 800a68c:	42a5      	cmp	r5, r4
 800a68e:	d10b      	bne.n	800a6a8 <_free_r+0x70>
 800a690:	6824      	ldr	r4, [r4, #0]
 800a692:	4421      	add	r1, r4
 800a694:	1854      	adds	r4, r2, r1
 800a696:	42a3      	cmp	r3, r4
 800a698:	6011      	str	r1, [r2, #0]
 800a69a:	d1e0      	bne.n	800a65e <_free_r+0x26>
 800a69c:	681c      	ldr	r4, [r3, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	6053      	str	r3, [r2, #4]
 800a6a2:	4421      	add	r1, r4
 800a6a4:	6011      	str	r1, [r2, #0]
 800a6a6:	e7da      	b.n	800a65e <_free_r+0x26>
 800a6a8:	d902      	bls.n	800a6b0 <_free_r+0x78>
 800a6aa:	230c      	movs	r3, #12
 800a6ac:	6003      	str	r3, [r0, #0]
 800a6ae:	e7d6      	b.n	800a65e <_free_r+0x26>
 800a6b0:	6825      	ldr	r5, [r4, #0]
 800a6b2:	1961      	adds	r1, r4, r5
 800a6b4:	428b      	cmp	r3, r1
 800a6b6:	bf04      	itt	eq
 800a6b8:	6819      	ldreq	r1, [r3, #0]
 800a6ba:	685b      	ldreq	r3, [r3, #4]
 800a6bc:	6063      	str	r3, [r4, #4]
 800a6be:	bf04      	itt	eq
 800a6c0:	1949      	addeq	r1, r1, r5
 800a6c2:	6021      	streq	r1, [r4, #0]
 800a6c4:	6054      	str	r4, [r2, #4]
 800a6c6:	e7ca      	b.n	800a65e <_free_r+0x26>
 800a6c8:	b003      	add	sp, #12
 800a6ca:	bd30      	pop	{r4, r5, pc}
 800a6cc:	24000aec 	.word	0x24000aec

0800a6d0 <sbrk_aligned>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	4e0e      	ldr	r6, [pc, #56]	; (800a70c <sbrk_aligned+0x3c>)
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	6831      	ldr	r1, [r6, #0]
 800a6d8:	4605      	mov	r5, r0
 800a6da:	b911      	cbnz	r1, 800a6e2 <sbrk_aligned+0x12>
 800a6dc:	f000 f8bc 	bl	800a858 <_sbrk_r>
 800a6e0:	6030      	str	r0, [r6, #0]
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f000 f8b7 	bl	800a858 <_sbrk_r>
 800a6ea:	1c43      	adds	r3, r0, #1
 800a6ec:	d00a      	beq.n	800a704 <sbrk_aligned+0x34>
 800a6ee:	1cc4      	adds	r4, r0, #3
 800a6f0:	f024 0403 	bic.w	r4, r4, #3
 800a6f4:	42a0      	cmp	r0, r4
 800a6f6:	d007      	beq.n	800a708 <sbrk_aligned+0x38>
 800a6f8:	1a21      	subs	r1, r4, r0
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 f8ac 	bl	800a858 <_sbrk_r>
 800a700:	3001      	adds	r0, #1
 800a702:	d101      	bne.n	800a708 <sbrk_aligned+0x38>
 800a704:	f04f 34ff 	mov.w	r4, #4294967295
 800a708:	4620      	mov	r0, r4
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	24000af0 	.word	0x24000af0

0800a710 <_malloc_r>:
 800a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a714:	1ccd      	adds	r5, r1, #3
 800a716:	f025 0503 	bic.w	r5, r5, #3
 800a71a:	3508      	adds	r5, #8
 800a71c:	2d0c      	cmp	r5, #12
 800a71e:	bf38      	it	cc
 800a720:	250c      	movcc	r5, #12
 800a722:	2d00      	cmp	r5, #0
 800a724:	4607      	mov	r7, r0
 800a726:	db01      	blt.n	800a72c <_malloc_r+0x1c>
 800a728:	42a9      	cmp	r1, r5
 800a72a:	d905      	bls.n	800a738 <_malloc_r+0x28>
 800a72c:	230c      	movs	r3, #12
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	2600      	movs	r6, #0
 800a732:	4630      	mov	r0, r6
 800a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a738:	4e2e      	ldr	r6, [pc, #184]	; (800a7f4 <_malloc_r+0xe4>)
 800a73a:	f000 f89d 	bl	800a878 <__malloc_lock>
 800a73e:	6833      	ldr	r3, [r6, #0]
 800a740:	461c      	mov	r4, r3
 800a742:	bb34      	cbnz	r4, 800a792 <_malloc_r+0x82>
 800a744:	4629      	mov	r1, r5
 800a746:	4638      	mov	r0, r7
 800a748:	f7ff ffc2 	bl	800a6d0 <sbrk_aligned>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	4604      	mov	r4, r0
 800a750:	d14d      	bne.n	800a7ee <_malloc_r+0xde>
 800a752:	6834      	ldr	r4, [r6, #0]
 800a754:	4626      	mov	r6, r4
 800a756:	2e00      	cmp	r6, #0
 800a758:	d140      	bne.n	800a7dc <_malloc_r+0xcc>
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	4631      	mov	r1, r6
 800a75e:	4638      	mov	r0, r7
 800a760:	eb04 0803 	add.w	r8, r4, r3
 800a764:	f000 f878 	bl	800a858 <_sbrk_r>
 800a768:	4580      	cmp	r8, r0
 800a76a:	d13a      	bne.n	800a7e2 <_malloc_r+0xd2>
 800a76c:	6821      	ldr	r1, [r4, #0]
 800a76e:	3503      	adds	r5, #3
 800a770:	1a6d      	subs	r5, r5, r1
 800a772:	f025 0503 	bic.w	r5, r5, #3
 800a776:	3508      	adds	r5, #8
 800a778:	2d0c      	cmp	r5, #12
 800a77a:	bf38      	it	cc
 800a77c:	250c      	movcc	r5, #12
 800a77e:	4629      	mov	r1, r5
 800a780:	4638      	mov	r0, r7
 800a782:	f7ff ffa5 	bl	800a6d0 <sbrk_aligned>
 800a786:	3001      	adds	r0, #1
 800a788:	d02b      	beq.n	800a7e2 <_malloc_r+0xd2>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	442b      	add	r3, r5
 800a78e:	6023      	str	r3, [r4, #0]
 800a790:	e00e      	b.n	800a7b0 <_malloc_r+0xa0>
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	1b52      	subs	r2, r2, r5
 800a796:	d41e      	bmi.n	800a7d6 <_malloc_r+0xc6>
 800a798:	2a0b      	cmp	r2, #11
 800a79a:	d916      	bls.n	800a7ca <_malloc_r+0xba>
 800a79c:	1961      	adds	r1, r4, r5
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	6025      	str	r5, [r4, #0]
 800a7a2:	bf18      	it	ne
 800a7a4:	6059      	strne	r1, [r3, #4]
 800a7a6:	6863      	ldr	r3, [r4, #4]
 800a7a8:	bf08      	it	eq
 800a7aa:	6031      	streq	r1, [r6, #0]
 800a7ac:	5162      	str	r2, [r4, r5]
 800a7ae:	604b      	str	r3, [r1, #4]
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	f104 060b 	add.w	r6, r4, #11
 800a7b6:	f000 f865 	bl	800a884 <__malloc_unlock>
 800a7ba:	f026 0607 	bic.w	r6, r6, #7
 800a7be:	1d23      	adds	r3, r4, #4
 800a7c0:	1af2      	subs	r2, r6, r3
 800a7c2:	d0b6      	beq.n	800a732 <_malloc_r+0x22>
 800a7c4:	1b9b      	subs	r3, r3, r6
 800a7c6:	50a3      	str	r3, [r4, r2]
 800a7c8:	e7b3      	b.n	800a732 <_malloc_r+0x22>
 800a7ca:	6862      	ldr	r2, [r4, #4]
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	bf0c      	ite	eq
 800a7d0:	6032      	streq	r2, [r6, #0]
 800a7d2:	605a      	strne	r2, [r3, #4]
 800a7d4:	e7ec      	b.n	800a7b0 <_malloc_r+0xa0>
 800a7d6:	4623      	mov	r3, r4
 800a7d8:	6864      	ldr	r4, [r4, #4]
 800a7da:	e7b2      	b.n	800a742 <_malloc_r+0x32>
 800a7dc:	4634      	mov	r4, r6
 800a7de:	6876      	ldr	r6, [r6, #4]
 800a7e0:	e7b9      	b.n	800a756 <_malloc_r+0x46>
 800a7e2:	230c      	movs	r3, #12
 800a7e4:	603b      	str	r3, [r7, #0]
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f000 f84c 	bl	800a884 <__malloc_unlock>
 800a7ec:	e7a1      	b.n	800a732 <_malloc_r+0x22>
 800a7ee:	6025      	str	r5, [r4, #0]
 800a7f0:	e7de      	b.n	800a7b0 <_malloc_r+0xa0>
 800a7f2:	bf00      	nop
 800a7f4:	24000aec 	.word	0x24000aec

0800a7f8 <_realloc_r>:
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4614      	mov	r4, r2
 800a800:	460e      	mov	r6, r1
 800a802:	b921      	cbnz	r1, 800a80e <_realloc_r+0x16>
 800a804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a808:	4611      	mov	r1, r2
 800a80a:	f7ff bf81 	b.w	800a710 <_malloc_r>
 800a80e:	b92a      	cbnz	r2, 800a81c <_realloc_r+0x24>
 800a810:	f7ff ff12 	bl	800a638 <_free_r>
 800a814:	4625      	mov	r5, r4
 800a816:	4628      	mov	r0, r5
 800a818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81c:	f000 f838 	bl	800a890 <_malloc_usable_size_r>
 800a820:	4284      	cmp	r4, r0
 800a822:	4607      	mov	r7, r0
 800a824:	d802      	bhi.n	800a82c <_realloc_r+0x34>
 800a826:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a82a:	d812      	bhi.n	800a852 <_realloc_r+0x5a>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4640      	mov	r0, r8
 800a830:	f7ff ff6e 	bl	800a710 <_malloc_r>
 800a834:	4605      	mov	r5, r0
 800a836:	2800      	cmp	r0, #0
 800a838:	d0ed      	beq.n	800a816 <_realloc_r+0x1e>
 800a83a:	42bc      	cmp	r4, r7
 800a83c:	4622      	mov	r2, r4
 800a83e:	4631      	mov	r1, r6
 800a840:	bf28      	it	cs
 800a842:	463a      	movcs	r2, r7
 800a844:	f7ff fed0 	bl	800a5e8 <memcpy>
 800a848:	4631      	mov	r1, r6
 800a84a:	4640      	mov	r0, r8
 800a84c:	f7ff fef4 	bl	800a638 <_free_r>
 800a850:	e7e1      	b.n	800a816 <_realloc_r+0x1e>
 800a852:	4635      	mov	r5, r6
 800a854:	e7df      	b.n	800a816 <_realloc_r+0x1e>
	...

0800a858 <_sbrk_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d06      	ldr	r5, [pc, #24]	; (800a874 <_sbrk_r+0x1c>)
 800a85c:	2300      	movs	r3, #0
 800a85e:	4604      	mov	r4, r0
 800a860:	4608      	mov	r0, r1
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	f7f6 fad2 	bl	8000e0c <_sbrk>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_sbrk_r+0x1a>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_sbrk_r+0x1a>
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	24000af4 	.word	0x24000af4

0800a878 <__malloc_lock>:
 800a878:	4801      	ldr	r0, [pc, #4]	; (800a880 <__malloc_lock+0x8>)
 800a87a:	f000 b811 	b.w	800a8a0 <__retarget_lock_acquire_recursive>
 800a87e:	bf00      	nop
 800a880:	24000af8 	.word	0x24000af8

0800a884 <__malloc_unlock>:
 800a884:	4801      	ldr	r0, [pc, #4]	; (800a88c <__malloc_unlock+0x8>)
 800a886:	f000 b80c 	b.w	800a8a2 <__retarget_lock_release_recursive>
 800a88a:	bf00      	nop
 800a88c:	24000af8 	.word	0x24000af8

0800a890 <_malloc_usable_size_r>:
 800a890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a894:	1f18      	subs	r0, r3, #4
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfbc      	itt	lt
 800a89a:	580b      	ldrlt	r3, [r1, r0]
 800a89c:	18c0      	addlt	r0, r0, r3
 800a89e:	4770      	bx	lr

0800a8a0 <__retarget_lock_acquire_recursive>:
 800a8a0:	4770      	bx	lr

0800a8a2 <__retarget_lock_release_recursive>:
 800a8a2:	4770      	bx	lr

0800a8a4 <_init>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr

0800a8b0 <_fini>:
 800a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b2:	bf00      	nop
 800a8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b6:	bc08      	pop	{r3}
 800a8b8:	469e      	mov	lr, r3
 800a8ba:	4770      	bx	lr
