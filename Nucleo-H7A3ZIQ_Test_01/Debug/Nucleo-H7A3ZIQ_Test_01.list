
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a768  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800acc8  0800acc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800accc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a88  24000074  0800ad40  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000afc  0800ad40  00020afc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ab04  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031ca  00000000  00000000  0003aba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001210  00000000  00000000  0003dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010a8  00000000  00000000  0003ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000328bd  00000000  00000000  00040028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bca9  00000000  00000000  000728e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140a70  00000000  00000000  0008e58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ceffe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004df4  00000000  00000000  001cf050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800aa00 	.word	0x0800aa00

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800aa00 	.word	0x0800aa00

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <LED_Dimming>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
static void LED_Dimming (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
    if (dutycontrol_flag == 0x00)
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <LED_Dimming+0x74>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d116      	bne.n	80006de <LED_Dimming+0x3a>
    {
        if (TIM1_DutyControl_cnt > 20)
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <LED_Dimming+0x78>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b14      	cmp	r3, #20
 80006b6:	d907      	bls.n	80006c8 <LED_Dimming+0x24>
        {
            TIM1_DutyControl_cnt = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <LED_Dimming+0x78>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

            htim12.Instance->CCR1++;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <LED_Dimming+0x7c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c4:	3201      	adds	r2, #1
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (htim12.Instance->CCR1 >= htim12.Init.Period)
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <LED_Dimming+0x7c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <LED_Dimming+0x7c>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d31b      	bcc.n	800070e <LED_Dimming+0x6a>
        {
            dutycontrol_flag = 0x01;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <LED_Dimming+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]

            // sprintf(uart3_tx_buf, " TIM12 CCR1 : %d\r\n", );
            // HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
        }
    }
}
 80006dc:	e017      	b.n	800070e <LED_Dimming+0x6a>
    else if (dutycontrol_flag == 0x01)
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <LED_Dimming+0x74>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d113      	bne.n	800070e <LED_Dimming+0x6a>
        if (TIM1_DutyControl_cnt > 20)
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <LED_Dimming+0x78>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d907      	bls.n	80006fe <LED_Dimming+0x5a>
            TIM1_DutyControl_cnt = 0;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <LED_Dimming+0x78>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
            htim12.Instance->CCR1--;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <LED_Dimming+0x7c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fa:	3a01      	subs	r2, #1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
        if (htim12.Instance->CCR1 == 0)
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <LED_Dimming+0x7c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <LED_Dimming+0x6a>
            dutycontrol_flag = 0x00;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <LED_Dimming+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	24000ae5 	.word	0x24000ae5
 800071c:	240002d4 	.word	0x240002d4
 8000720:	24000178 	.word	0x24000178

08000724 <LED_Process>:

void LED_Process (void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    //if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
    if (TIM1_CNT >= 500) // 1ms period Timer2 Counter.
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <LED_Process+0x50>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000730:	d307      	bcc.n	8000742 <LED_Process+0x1e>
    {
        TIM1_CNT = 0;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <LED_Process+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]

        HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000738:	2101      	movs	r1, #1
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <LED_Process+0x54>)
 800073c:	f003 fe15 	bl	800436a <HAL_GPIO_TogglePin>
 8000740:	e013      	b.n	800076a <LED_Process+0x46>
        // HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
        //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    }
    else if (TIM2_CNT >= 10) // 100ms * 9 period Timer2 Counter.
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <LED_Process+0x58>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b09      	cmp	r3, #9
 8000748:	d907      	bls.n	800075a <LED_Process+0x36>
    {
        TIM2_CNT = 0;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <LED_Process+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000750:	2102      	movs	r1, #2
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LED_Process+0x5c>)
 8000754:	f003 fe09 	bl	800436a <HAL_GPIO_TogglePin>
 8000758:	e007      	b.n	800076a <LED_Process+0x46>
    }
    else if (TIM8_CNT >= 100000) // 10us * 99999 period Timer8 Counter.
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <LED_Process+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LED_Process+0x64>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d902      	bls.n	800076a <LED_Process+0x46>
    {
        TIM8_CNT = 0;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LED_Process+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
        //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    }

    LED_Dimming();
 800076a:	f7ff ff9b 	bl	80006a4 <LED_Dimming>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	240002d0 	.word	0x240002d0
 8000778:	58020400 	.word	0x58020400
 800077c:	240002d8 	.word	0x240002d8
 8000780:	58021000 	.word	0x58021000
 8000784:	240002dc 	.word	0x240002dc
 8000788:	0001869f 	.word	0x0001869f

0800078c <Button_Process>:
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
    }
}
#else
void Button_Process (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  if (userButton_state == 0x01)
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <Button_Process+0x3c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d114      	bne.n	80007c2 <Button_Process+0x36>
  {
    userButton_state = 0x00;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <Button_Process+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
    sprintf(uart3_tx_buf, " Button Interrupt callback. Input Count : %d\r\n", userButton_cnt);
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <Button_Process+0x40>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	490a      	ldr	r1, [pc, #40]	; (80007d0 <Button_Process+0x44>)
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <Button_Process+0x48>)
 80007a8:	f009 fca8 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <Button_Process+0x48>)
 80007ae:	f7ff fd9f 	bl	80002f0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	4906      	ldr	r1, [pc, #24]	; (80007d4 <Button_Process+0x48>)
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <Button_Process+0x4c>)
 80007be:	f008 f813 	bl	80087e8 <HAL_UART_Transmit>
  }
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24000ae4 	.word	0x24000ae4
 80007cc:	24000ae2 	.word	0x24000ae2
 80007d0:	0800aa18 	.word	0x0800aa18
 80007d4:	240006e0 	.word	0x240006e0
 80007d8:	240001c4 	.word	0x240001c4

080007dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_DMA_Init+0x3c>)
 80007e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_DMA_Init+0x3c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x3c>)
 80007f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	200b      	movs	r0, #11
 8000806:	f001 fa32 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800080a:	200b      	movs	r0, #11
 800080c:	f001 fa49 	bl	8001ca2 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a81      	ldr	r2, [pc, #516]	; (8000a40 <MX_GPIO_Init+0x224>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000850:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a7a      	ldr	r2, [pc, #488]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a72      	ldr	r2, [pc, #456]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b6c      	ldr	r3, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x224>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a6b      	ldr	r2, [pc, #428]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b68      	ldr	r3, [pc, #416]	; (8000a40 <MX_GPIO_Init+0x224>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a63      	ldr	r2, [pc, #396]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a5c      	ldr	r2, [pc, #368]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a54      	ldr	r2, [pc, #336]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000904:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	4a4d      	ldr	r2, [pc, #308]	; (8000a40 <MX_GPIO_Init+0x224>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000914:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4846      	ldr	r0, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x228>)
 800092a:	f003 fd05 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2101      	movs	r1, #1
 8000932:	4845      	ldr	r0, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x22c>)
 8000934:	f003 fd00 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4843      	ldr	r0, [pc, #268]	; (8000a4c <MX_GPIO_Init+0x230>)
 800093e:	f003 fcfb 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	483d      	ldr	r0, [pc, #244]	; (8000a50 <MX_GPIO_Init+0x234>)
 800095a:	f003 fb3d 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x228>)
 8000978:	f003 fb2e 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	482d      	ldr	r0, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x22c>)
 8000994:	f003 fb20 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4829      	ldr	r0, [pc, #164]	; (8000a54 <MX_GPIO_Init+0x238>)
 80009ae:	f003 fb13 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_GPIO_Init+0x23c>)
 80009c8:	f003 fb06 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009de:	230a      	movs	r3, #10
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <MX_GPIO_Init+0x23c>)
 80009ea:	f003 faf5 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_GPIO_Init+0x23c>)
 8000a08:	f003 fae6 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a24:	f003 fad8 	bl	8003fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 f91e 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f001 f935 	bl	8001ca2 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58021400 	.word	0x58021400
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58021000 	.word	0x58021000
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58021800 	.word	0x58021800
 8000a58:	58020000 	.word	0x58020000

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f000 ff5e 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f83e 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f7ff fed8 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6c:	f7ff feb6 	bl	80007dc <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a70:	f000 fe1a 	bl	80016a8 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000a74:	f000 fa7a 	bl	8000f6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a78:	f000 facc 	bl	8001014 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a7c:	f000 fb1a 	bl	80010b4 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000a80:	f000 fd2a 	bl	80014d8 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8000a84:	f000 fb6a 	bl	800115c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  BootMessagePrint();
 8000a88:	f000 fe16 	bl	80016b8 <BootMessagePrint>
  GetClockSourcePrint();
 8000a8c:	f000 fe90 	bl	80017b0 <GetClockSourcePrint>

  HAL_TIM_Base_Start_IT(&htim1);
 8000a90:	480e      	ldr	r0, [pc, #56]	; (8000acc <main+0x70>)
 8000a92:	f006 faef 	bl	8007074 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <main+0x74>)
 8000a98:	f006 faec 	bl	8007074 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <main+0x78>)
 8000a9e:	f006 fae9 	bl	8007074 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <main+0x7c>)
 8000aa6:	f006 fbbf 	bl	8007228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <main+0x7c>)
 8000aae:	f006 fcc9 	bl	8007444 <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_DMA(&huart3, &uart3_rx_buf, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4909      	ldr	r1, [pc, #36]	; (8000adc <main+0x80>)
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <main+0x84>)
 8000ab8:	f007 ff24 	bl	8008904 <HAL_UART_Receive_DMA>
    // {
    //   htim12.Instance->CCR1 = i;
    //   //HAL_Delay(20);  // 
    // }

    LED_Process();
 8000abc:	f7ff fe32 	bl	8000724 <LED_Process>
    Button_Process();
 8000ac0:	f7ff fe64 	bl	800078c <Button_Process>
    Uart3_Process();
 8000ac4:	f000 fc8a 	bl	80013dc <Uart3_Process>
  {
 8000ac8:	e7f8      	b.n	8000abc <main+0x60>
 8000aca:	bf00      	nop
 8000acc:	24000094 	.word	0x24000094
 8000ad0:	240000e0 	.word	0x240000e0
 8000ad4:	2400012c 	.word	0x2400012c
 8000ad8:	24000178 	.word	0x24000178
 8000adc:	240002e0 	.word	0x240002e0
 8000ae0:	240001c4 	.word	0x240001c4

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	; 0x70
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	224c      	movs	r2, #76	; 0x4c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f009 fafa 	bl	800a0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2220      	movs	r2, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f009 faf4 	bl	800a0ec <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <SystemClock_Config+0xe4>)
 8000b06:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f003 fc60 	bl	80043d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b30:	bf00      	nop
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3e:	d1f8      	bne.n	8000b32 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b40:	2321      	movs	r3, #33	; 0x21
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	2302      	movs	r3, #2
 8000b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000b5a:	2346      	movs	r3, #70	; 0x46
 8000b5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b62:	2304      	movs	r3, #4
 8000b64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fc84 	bl	8004488 <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b86:	f000 f823 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	233f      	movs	r3, #63	; 0x3f
 8000b8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b9e:	2340      	movs	r3, #64	; 0x40
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2107      	movs	r1, #7
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 f89b 	bl	8004cec <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000bbc:	f000 f808 	bl	8000bd0 <Error_Handler>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3770      	adds	r7, #112	; 0x70
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58024800 	.word	0x58024800

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_MspInit+0x30>)
 8000be4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x30>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x30>)
 8000bf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	58024400 	.word	0x58024400

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000c1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1e:	f000 ff11 	bl	8001a44 <HAL_Delay>
 8000c22:	e7fa      	b.n	8000c1a <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 fece 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA1_Stream0_IRQHandler+0x10>)
 8000c72:	f001 fe2f 	bl	80028d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000258 	.word	0x24000258

08000c80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM1_UP_IRQHandler+0x10>)
 8000c86:	f006 fd37 	bl	80076f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	24000094 	.word	0x24000094

08000c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM2_IRQHandler+0x10>)
 8000c9a:	f006 fd2d 	bl	80076f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	240000e0 	.word	0x240000e0

08000ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cb0:	f003 fb75 	bl	800439e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000cbe:	f006 fd1b 	bl	80076f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000cc4:	f006 fd18 	bl	80076f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2400012c 	.word	0x2400012c
 8000cd0:	24000178 	.word	0x24000178

08000cd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000cda:	f006 fd0d 	bl	80076f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2400012c 	.word	0x2400012c

08000ce8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10a      	bne.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        TIM1_CNT++;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d02:	6013      	str	r3, [r2, #0]
        TIM1_DutyControl_cnt++;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d0c:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
    {
        TIM8_CNT++;
    }
}
 8000d0e:	e014      	b.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x52>
    else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d105      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x3e>
        TIM2_CNT++;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	e009      	b.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x52>
    else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d104      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x52>
        TIM8_CNT++;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	240002d0 	.word	0x240002d0
 8000d50:	240002d4 	.word	0x240002d4
 8000d54:	240002d8 	.word	0x240002d8
 8000d58:	40010400 	.word	0x40010400
 8000d5c:	240002dc 	.word	0x240002dc

08000d60 <HAL_GPIO_EXTI_Callback>:
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
    userButton_state = 0x01;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
    userButton_cnt++;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d7a:	801a      	strh	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	24000ae4 	.word	0x24000ae4
 8000d8c:	24000ae2 	.word	0x24000ae2

08000d90 <HAL_UARTEx_RxEventCallback>:
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_UARTEx_RxEventCallback+0x28>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d104      	bne.n	8000db0 <HAL_UARTEx_RxEventCallback+0x20>
    {
        /* Process the received data */
        /* Size indicates the number of bytes received */

        /* Restart UART receive */
        HAL_UART_Receive_DMA(&huart3, &uart3_rx_buf, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x2c>)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x30>)
 8000dac:	f007 fdaa 	bl	8008904 <HAL_UART_Receive_DMA>
    }
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40004800 	.word	0x40004800
 8000dbc:	240002e0 	.word	0x240002e0
 8000dc0:	240001c4 	.word	0x240001c4

08000dc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_UART_RxCpltCallback+0x3c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10f      	bne.n	8000df6 <HAL_UART_RxCpltCallback+0x32>
    {
        /* Process the received data */
        /* Size indicates the number of bytes received */

        /* Restart UART receive */
        HAL_UART_Receive_DMA(&huart3, (uint8_t *) &uart3_rx_buf[++uart3_rx_index], 1);
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_UART_RxCpltCallback+0x40>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_UART_RxCpltCallback+0x40>)
 8000de0:	801a      	strh	r2, [r3, #0]
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_UART_RxCpltCallback+0x40>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_UART_RxCpltCallback+0x44>)
 8000dea:	4413      	add	r3, r2
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <HAL_UART_RxCpltCallback+0x48>)
 8000df2:	f007 fd87 	bl	8008904 <HAL_UART_Receive_DMA>
    }
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40004800 	.word	0x40004800
 8000e04:	24000ae0 	.word	0x24000ae0
 8000e08:	240002e0 	.word	0x240002e0
 8000e0c:	240001c4 	.word	0x240001c4

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f009 f92a 	bl	800a098 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24100000 	.word	0x24100000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	24000090 	.word	0x24000090
 8000e78:	24000b00 	.word	0x24000b00

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <SystemInit+0xd0>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <SystemInit+0xd0>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <SystemInit+0xd4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d807      	bhi.n	8000eac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <SystemInit+0xd4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <SystemInit+0xd4>)
 8000ea6:	f043 0303 	orr.w	r3, r3, #3
 8000eaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <SystemInit+0xd8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <SystemInit+0xd8>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <SystemInit+0xd8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <SystemInit+0xd8>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4924      	ldr	r1, [pc, #144]	; (8000f54 <SystemInit+0xd8>)
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <SystemInit+0xdc>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <SystemInit+0xd4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <SystemInit+0xd4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 030f 	bic.w	r3, r3, #15
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <SystemInit+0xd4>)
 8000ee0:	f043 0303 	orr.w	r3, r3, #3
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <SystemInit+0xd8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <SystemInit+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <SystemInit+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <SystemInit+0xd8>)
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <SystemInit+0xe0>)
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <SystemInit+0xd8>)
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <SystemInit+0xe4>)
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <SystemInit+0xd8>)
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <SystemInit+0xe8>)
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SystemInit+0xd8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <SystemInit+0xd8>)
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <SystemInit+0xe8>)
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <SystemInit+0xd8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <SystemInit+0xd8>)
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <SystemInit+0xe8>)
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <SystemInit+0xd8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <SystemInit+0xd8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <SystemInit+0xd8>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <SystemInit+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <SystemInit+0xec>)
 8000f3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	52002000 	.word	0x52002000
 8000f54:	58024400 	.word	0x58024400
 8000f58:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f5c:	02020200 	.word	0x02020200
 8000f60:	01ff0000 	.word	0x01ff0000
 8000f64:	01010280 	.word	0x01010280
 8000f68:	52004000 	.word	0x52004000

08000f6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_TIM1_Init+0xa0>)
 8000f8c:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_TIM1_Init+0xa4>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_TIM1_Init+0xa0>)
 8000f92:	f240 1217 	movw	r2, #279	; 0x117
 8000f96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_TIM1_Init+0xa0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fba:	f006 f803 	bl	8006fc4 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000fc4:	f7ff fe04 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fd6:	f006 fdab 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fe0:	f7ff fdf6 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM1_Init+0xa0>)
 8000ff6:	f007 fafb 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001000:	f7ff fde6 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	24000094 	.word	0x24000094
 8001010:	40010000 	.word	0x40010000

08001014 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_TIM2_Init+0x98>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_TIM2_Init+0x98>)
 800103c:	f240 1217 	movw	r2, #279	; 0x117
 8001040:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_TIM2_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_TIM2_Init+0x98>)
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <MX_TIM2_Init+0x9c>)
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_TIM2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_TIM2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_TIM2_Init+0x98>)
 800105c:	f005 ffb2 	bl	8006fc4 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001066:	f7ff fdb3 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_TIM2_Init+0x98>)
 8001078:	f006 fd5a 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001082:	f7ff fda5 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_TIM2_Init+0x98>)
 8001094:	f007 faac 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800109e:	f7ff fd97 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	240000e0 	.word	0x240000e0
 80010b0:	0001869f 	.word	0x0001869f

080010b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <MX_TIM8_Init+0xa4>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010da:	f240 1217 	movw	r2, #279	; 0x117
 80010de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010e8:	2209      	movs	r2, #9
 80010ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010fe:	4815      	ldr	r0, [pc, #84]	; (8001154 <MX_TIM8_Init+0xa0>)
 8001100:	f005 ff60 	bl	8006fc4 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800110a:	f7ff fd61 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_TIM8_Init+0xa0>)
 800111c:	f006 fd08 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001126:	f7ff fd53 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_TIM8_Init+0xa0>)
 800113c:	f007 fa58 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001146:	f7ff fd43 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2400012c 	.word	0x2400012c
 8001158:	40010400 	.word	0x40010400

0800115c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001190:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <MX_TIM12_Init+0xec>)
 8001192:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 27999;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001196:	f646 525f 	movw	r2, #27999	; 0x6d5f
 800119a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_TIM12_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011a4:	2263      	movs	r2, #99	; 0x63
 80011a6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80011b4:	4823      	ldr	r0, [pc, #140]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011b6:	f005 ff05 	bl	8006fc4 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80011c0:	f7ff fd06 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	4619      	mov	r1, r3
 80011d0:	481c      	ldr	r0, [pc, #112]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011d2:	f006 fcad 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80011dc:	f7ff fcf8 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011e2:	f005 ffbf 	bl	8007164 <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80011ec:	f7ff fcf0 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001200:	f007 f9f6 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800120a:	f7ff fce1 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	; 0x60
 8001210:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001226:	f006 fb6f 	bl	8007908 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001230:	f7ff fcce 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001236:	f000 f895 	bl	8001364 <HAL_TIM_MspPostInit>

}
 800123a:	bf00      	nop
 800123c:	3738      	adds	r7, #56	; 0x38
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	24000178 	.word	0x24000178
 8001248:	40001800 	.word	0x40001800

0800124c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <HAL_TIM_Base_MspInit+0x108>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d117      	bne.n	800128e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001260:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001264:	4a3c      	ldr	r2, [pc, #240]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001270:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2019      	movs	r0, #25
 8001282:	f000 fcf4 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001286:	2019      	movs	r0, #25
 8001288:	f000 fd0b 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800128c:	e05d      	b.n	800134a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001296:	d117      	bne.n	80012c8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 800129a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800129e:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201c      	movs	r0, #28
 80012bc:	f000 fcd7 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c0:	201c      	movs	r0, #28
 80012c2:	f000 fcee 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
}
 80012c6:	e040      	b.n	800134a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM8)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_TIM_Base_MspInit+0x110>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d11f      	bne.n	8001312 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	202b      	movs	r0, #43	; 0x2b
 80012f6:	f000 fcba 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80012fa:	202b      	movs	r0, #43	; 0x2b
 80012fc:	f000 fcd1 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	202c      	movs	r0, #44	; 0x2c
 8001306:	f000 fcb2 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800130a:	202c      	movs	r0, #44	; 0x2c
 800130c:	f000 fcc9 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
}
 8001310:	e01b      	b.n	800134a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM12)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_TIM_Base_MspInit+0x114>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d116      	bne.n	800134a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 800131e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001328:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 800132e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	202b      	movs	r0, #43	; 0x2b
 8001340:	f000 fc95 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001344:	202b      	movs	r0, #43	; 0x2b
 8001346:	f000 fcac 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40010000 	.word	0x40010000
 8001358:	58024400 	.word	0x58024400
 800135c:	40010400 	.word	0x40010400
 8001360:	40001800 	.word	0x40001800

08001364 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_TIM_MspPostInit+0x6c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11f      	bne.n	80013c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_TIM_MspPostInit+0x70>)
 8001388:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_TIM_MspPostInit+0x70>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_TIM_MspPostInit+0x70>)
 8001398:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_TIM_MspPostInit+0x74>)
 80013c2:	f002 fe09 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40001800 	.word	0x40001800
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020400 	.word	0x58020400

080013dc <Uart3_Process>:
/* Includes ------------------------------------------------------------------*/
#include "uart_proc.h"


void Uart3_Process (void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    if ((uart3_rx_buf[uart3_rx_index - 1] == 0x0A))
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <Uart3_Process+0xd4>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <Uart3_Process+0xd8>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	2b0a      	cmp	r3, #10
 80013ec:	d155      	bne.n	800149a <Uart3_Process+0xbe>
    {
        if (!strncmp("RXBUF ALL PRINT", uart3_rx_buf, UART3_CMP_SIZE))
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <Uart3_Process+0xd4>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	3b02      	subs	r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	492f      	ldr	r1, [pc, #188]	; (80014b4 <Uart3_Process+0xd8>)
 80013f8:	482f      	ldr	r0, [pc, #188]	; (80014b8 <Uart3_Process+0xdc>)
 80013fa:	f008 fe9f 	bl	800a13c <strncmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10f      	bne.n	8001424 <Uart3_Process+0x48>
        {
            sprintf(uart3_tx_buf, "In A\r\n");
 8001404:	492d      	ldr	r1, [pc, #180]	; (80014bc <Uart3_Process+0xe0>)
 8001406:	482e      	ldr	r0, [pc, #184]	; (80014c0 <Uart3_Process+0xe4>)
 8001408:	f008 fe78 	bl	800a0fc <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800140c:	482c      	ldr	r0, [pc, #176]	; (80014c0 <Uart3_Process+0xe4>)
 800140e:	f7fe ff6f 	bl	80002f0 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	4929      	ldr	r1, [pc, #164]	; (80014c0 <Uart3_Process+0xe4>)
 800141c:	4829      	ldr	r0, [pc, #164]	; (80014c4 <Uart3_Process+0xe8>)
 800141e:	f007 f9e3 	bl	80087e8 <HAL_UART_Transmit>
 8001422:	e036      	b.n	8001492 <Uart3_Process+0xb6>
        }
        else if (!strncmp("RXBUF CLEAR", uart3_rx_buf, UART3_CMP_SIZE))
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <Uart3_Process+0xd4>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	3b02      	subs	r3, #2
 800142a:	461a      	mov	r2, r3
 800142c:	4921      	ldr	r1, [pc, #132]	; (80014b4 <Uart3_Process+0xd8>)
 800142e:	4826      	ldr	r0, [pc, #152]	; (80014c8 <Uart3_Process+0xec>)
 8001430:	f008 fe84 	bl	800a13c <strncmp>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10f      	bne.n	800145a <Uart3_Process+0x7e>
        {
            sprintf(uart3_tx_buf, "In B\r\n");
 800143a:	4924      	ldr	r1, [pc, #144]	; (80014cc <Uart3_Process+0xf0>)
 800143c:	4820      	ldr	r0, [pc, #128]	; (80014c0 <Uart3_Process+0xe4>)
 800143e:	f008 fe5d 	bl	800a0fc <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001442:	481f      	ldr	r0, [pc, #124]	; (80014c0 <Uart3_Process+0xe4>)
 8001444:	f7fe ff54 	bl	80002f0 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	491b      	ldr	r1, [pc, #108]	; (80014c0 <Uart3_Process+0xe4>)
 8001452:	481c      	ldr	r0, [pc, #112]	; (80014c4 <Uart3_Process+0xe8>)
 8001454:	f007 f9c8 	bl	80087e8 <HAL_UART_Transmit>
 8001458:	e01b      	b.n	8001492 <Uart3_Process+0xb6>
        }
        else if (!strncmp("SYSTEM RESET", uart3_rx_buf, UART3_CMP_SIZE))
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <Uart3_Process+0xd4>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	3b02      	subs	r3, #2
 8001460:	461a      	mov	r2, r3
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <Uart3_Process+0xd8>)
 8001464:	481a      	ldr	r0, [pc, #104]	; (80014d0 <Uart3_Process+0xf4>)
 8001466:	f008 fe69 	bl	800a13c <strncmp>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d110      	bne.n	8001492 <Uart3_Process+0xb6>
        {
            sprintf(uart3_tx_buf, "STM32H7A3 System Reset.\r\n");
 8001470:	4918      	ldr	r1, [pc, #96]	; (80014d4 <Uart3_Process+0xf8>)
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <Uart3_Process+0xe4>)
 8001474:	f008 fe42 	bl	800a0fc <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <Uart3_Process+0xe4>)
 800147a:	f7fe ff39 	bl	80002f0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <Uart3_Process+0xe4>)
 8001488:	480e      	ldr	r0, [pc, #56]	; (80014c4 <Uart3_Process+0xe8>)
 800148a:	f007 f9ad 	bl	80087e8 <HAL_UART_Transmit>
            HAL_NVIC_SystemReset();
 800148e:	f000 fc16 	bl	8001cbe <HAL_NVIC_SystemReset>
        }

        //memset(uart3_rx_buf, 0, uart3_rx_index);
        uart3_rx_index = 0;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <Uart3_Process+0xd4>)
 8001494:	2200      	movs	r2, #0
 8001496:	801a      	strh	r2, [r3, #0]
    
    else if (uart3_rx_index >= 999)
    {
        uart3_rx_index = 0;
    }
}
 8001498:	e008      	b.n	80014ac <Uart3_Process+0xd0>
    else if (uart3_rx_index >= 999)
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <Uart3_Process+0xd4>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	f240 32e6 	movw	r2, #998	; 0x3e6
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d902      	bls.n	80014ac <Uart3_Process+0xd0>
        uart3_rx_index = 0;
 80014a6:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <Uart3_Process+0xd4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	24000ae0 	.word	0x24000ae0
 80014b4:	240002e0 	.word	0x240002e0
 80014b8:	0800aa48 	.word	0x0800aa48
 80014bc:	0800aa58 	.word	0x0800aa58
 80014c0:	240006e0 	.word	0x240006e0
 80014c4:	240001c4 	.word	0x240001c4
 80014c8:	0800aa60 	.word	0x0800aa60
 80014cc:	0800aa6c 	.word	0x0800aa6c
 80014d0:	0800aa74 	.word	0x0800aa74
 80014d4:	0800aa84 	.word	0x0800aa84

080014d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <MX_USART3_UART_Init+0x94>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_USART3_UART_Init+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_USART3_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001522:	f007 f911 	bl	8008748 <HAL_UART_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800152c:	f7ff fb50 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001534:	f008 fce6 	bl	8009f04 <HAL_UARTEx_SetTxFifoThreshold>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800153e:	f7ff fb47 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001546:	f008 fd1b 	bl	8009f80 <HAL_UARTEx_SetRxFifoThreshold>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001550:	f7ff fb3e 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001556:	f008 fc9c 	bl	8009e92 <HAL_UARTEx_DisableFifoMode>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001560:	f7ff fb36 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	240001c4 	.word	0x240001c4
 800156c:	40004800 	.word	0x40004800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0ba      	sub	sp, #232	; 0xe8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	22c0      	movs	r2, #192	; 0xc0
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f008 fdab 	bl	800a0ec <memset>
  if(uartHandle->Instance==USART3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a3e      	ldr	r2, [pc, #248]	; (8001694 <HAL_UART_MspInit+0x124>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d174      	bne.n	800168a <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a0:	f04f 0202 	mov.w	r2, #2
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 ff24 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015c2:	f7ff fb05 	bl	8000bd0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_UART_MspInit+0x128>)
 80015c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015cc:	4a32      	ldr	r2, [pc, #200]	; (8001698 <HAL_UART_MspInit+0x128>)
 80015ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_UART_MspInit+0x128>)
 80015d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <HAL_UART_MspInit+0x128>)
 80015e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ea:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <HAL_UART_MspInit+0x128>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_UART_MspInit+0x128>)
 80015f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800161c:	2307      	movs	r3, #7
 800161e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001622:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001626:	4619      	mov	r1, r3
 8001628:	481c      	ldr	r0, [pc, #112]	; (800169c <HAL_UART_MspInit+0x12c>)
 800162a:	f002 fcd5 	bl	8003fd8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_UART_MspInit+0x134>)
 8001632:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001636:	222d      	movs	r2, #45	; 0x2d
 8001638:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_UART_MspInit+0x130>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0x130>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <HAL_UART_MspInit+0x130>)
 800166e:	f000 fb37 	bl	8001ce0 <HAL_DMA_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001678:	f7ff faaa 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_UART_MspInit+0x130>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800168a:	bf00      	nop
 800168c:	37e8      	adds	r7, #232	; 0xe8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40004800 	.word	0x40004800
 8001698:	58024400 	.word	0x58024400
 800169c:	58020c00 	.word	0x58020c00
 80016a0:	24000258 	.word	0x24000258
 80016a4:	40020010 	.word	0x40020010

080016a8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80016bc:	4930      	ldr	r1, [pc, #192]	; (8001780 <BootMessagePrint+0xc8>)
 80016be:	4831      	ldr	r0, [pc, #196]	; (8001784 <BootMessagePrint+0xcc>)
 80016c0:	f008 fd1c 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80016c4:	482f      	ldr	r0, [pc, #188]	; (8001784 <BootMessagePrint+0xcc>)
 80016c6:	f7fe fe13 	bl	80002f0 <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	492c      	ldr	r1, [pc, #176]	; (8001784 <BootMessagePrint+0xcc>)
 80016d4:	482c      	ldr	r0, [pc, #176]	; (8001788 <BootMessagePrint+0xd0>)
 80016d6:	f007 f887 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 80016da:	4a2c      	ldr	r2, [pc, #176]	; (800178c <BootMessagePrint+0xd4>)
 80016dc:	492c      	ldr	r1, [pc, #176]	; (8001790 <BootMessagePrint+0xd8>)
 80016de:	4829      	ldr	r0, [pc, #164]	; (8001784 <BootMessagePrint+0xcc>)
 80016e0:	f008 fd0c 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80016e4:	4827      	ldr	r0, [pc, #156]	; (8001784 <BootMessagePrint+0xcc>)
 80016e6:	f7fe fe03 	bl	80002f0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	4924      	ldr	r1, [pc, #144]	; (8001784 <BootMessagePrint+0xcc>)
 80016f4:	4824      	ldr	r0, [pc, #144]	; (8001788 <BootMessagePrint+0xd0>)
 80016f6:	f007 f877 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <BootMessagePrint+0xdc>)
 80016fc:	4926      	ldr	r1, [pc, #152]	; (8001798 <BootMessagePrint+0xe0>)
 80016fe:	4821      	ldr	r0, [pc, #132]	; (8001784 <BootMessagePrint+0xcc>)
 8001700:	f008 fcfc 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001704:	481f      	ldr	r0, [pc, #124]	; (8001784 <BootMessagePrint+0xcc>)
 8001706:	f7fe fdf3 	bl	80002f0 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	b29a      	uxth	r2, r3
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	491c      	ldr	r1, [pc, #112]	; (8001784 <BootMessagePrint+0xcc>)
 8001714:	481c      	ldr	r0, [pc, #112]	; (8001788 <BootMessagePrint+0xd0>)
 8001716:	f007 f867 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 800171a:	4a20      	ldr	r2, [pc, #128]	; (800179c <BootMessagePrint+0xe4>)
 800171c:	4920      	ldr	r1, [pc, #128]	; (80017a0 <BootMessagePrint+0xe8>)
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <BootMessagePrint+0xcc>)
 8001720:	f008 fcec 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <BootMessagePrint+0xcc>)
 8001726:	f7fe fde3 	bl	80002f0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	4914      	ldr	r1, [pc, #80]	; (8001784 <BootMessagePrint+0xcc>)
 8001734:	4814      	ldr	r0, [pc, #80]	; (8001788 <BootMessagePrint+0xd0>)
 8001736:	f007 f857 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <BootMessagePrint+0xec>)
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <BootMessagePrint+0xf0>)
 800173e:	491b      	ldr	r1, [pc, #108]	; (80017ac <BootMessagePrint+0xf4>)
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <BootMessagePrint+0xcc>)
 8001742:	f008 fcdb 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001746:	480f      	ldr	r0, [pc, #60]	; (8001784 <BootMessagePrint+0xcc>)
 8001748:	f7fe fdd2 	bl	80002f0 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	490b      	ldr	r1, [pc, #44]	; (8001784 <BootMessagePrint+0xcc>)
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <BootMessagePrint+0xd0>)
 8001758:	f007 f846 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800175c:	4908      	ldr	r1, [pc, #32]	; (8001780 <BootMessagePrint+0xc8>)
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <BootMessagePrint+0xcc>)
 8001760:	f008 fccc 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <BootMessagePrint+0xcc>)
 8001766:	f7fe fdc3 	bl	80002f0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	4904      	ldr	r1, [pc, #16]	; (8001784 <BootMessagePrint+0xcc>)
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <BootMessagePrint+0xd0>)
 8001776:	f007 f837 	bl	80087e8 <HAL_UART_Transmit>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800aaa0 	.word	0x0800aaa0
 8001784:	240006e0 	.word	0x240006e0
 8001788:	240001c4 	.word	0x240001c4
 800178c:	0800aad0 	.word	0x0800aad0
 8001790:	0800aae0 	.word	0x0800aae0
 8001794:	0800aafc 	.word	0x0800aafc
 8001798:	0800ab04 	.word	0x0800ab04
 800179c:	0800ab20 	.word	0x0800ab20
 80017a0:	0800ab34 	.word	0x0800ab34
 80017a4:	0800ab50 	.word	0x0800ab50
 80017a8:	0800ab5c 	.word	0x0800ab5c
 80017ac:	0800ab68 	.word	0x0800ab68

080017b0 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80017b4:	493d      	ldr	r1, [pc, #244]	; (80018ac <GetClockSourcePrint+0xfc>)
 80017b6:	483e      	ldr	r0, [pc, #248]	; (80018b0 <GetClockSourcePrint+0x100>)
 80017b8:	f008 fca0 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80017bc:	483c      	ldr	r0, [pc, #240]	; (80018b0 <GetClockSourcePrint+0x100>)
 80017be:	f7fe fd97 	bl	80002f0 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	4939      	ldr	r1, [pc, #228]	; (80018b0 <GetClockSourcePrint+0x100>)
 80017cc:	4839      	ldr	r0, [pc, #228]	; (80018b4 <GetClockSourcePrint+0x104>)
 80017ce:	f007 f80b 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80017d2:	f003 fc41 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a37      	ldr	r2, [pc, #220]	; (80018b8 <GetClockSourcePrint+0x108>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0c9b      	lsrs	r3, r3, #18
 80017e0:	461a      	mov	r2, r3
 80017e2:	4936      	ldr	r1, [pc, #216]	; (80018bc <GetClockSourcePrint+0x10c>)
 80017e4:	4832      	ldr	r0, [pc, #200]	; (80018b0 <GetClockSourcePrint+0x100>)
 80017e6:	f008 fc89 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80017ea:	4831      	ldr	r0, [pc, #196]	; (80018b0 <GetClockSourcePrint+0x100>)
 80017ec:	f7fe fd80 	bl	80002f0 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	492d      	ldr	r1, [pc, #180]	; (80018b0 <GetClockSourcePrint+0x100>)
 80017fa:	482e      	ldr	r0, [pc, #184]	; (80018b4 <GetClockSourcePrint+0x104>)
 80017fc:	f006 fff4 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001800:	f003 fda4 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8001804:	4603      	mov	r3, r0
 8001806:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <GetClockSourcePrint+0x108>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9b      	lsrs	r3, r3, #18
 800180e:	461a      	mov	r2, r3
 8001810:	492b      	ldr	r1, [pc, #172]	; (80018c0 <GetClockSourcePrint+0x110>)
 8001812:	4827      	ldr	r0, [pc, #156]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001814:	f008 fc72 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001818:	4825      	ldr	r0, [pc, #148]	; (80018b0 <GetClockSourcePrint+0x100>)
 800181a:	f7fe fd69 	bl	80002f0 <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	4922      	ldr	r1, [pc, #136]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001828:	4822      	ldr	r0, [pc, #136]	; (80018b4 <GetClockSourcePrint+0x104>)
 800182a:	f006 ffdd 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 800182e:	f003 fdbd 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8001832:	4603      	mov	r3, r0
 8001834:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <GetClockSourcePrint+0x108>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0c9b      	lsrs	r3, r3, #18
 800183c:	461a      	mov	r2, r3
 800183e:	4921      	ldr	r1, [pc, #132]	; (80018c4 <GetClockSourcePrint+0x114>)
 8001840:	481b      	ldr	r0, [pc, #108]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001842:	f008 fc5b 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001846:	481a      	ldr	r0, [pc, #104]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001848:	f7fe fd52 	bl	80002f0 <strlen>
 800184c:	4603      	mov	r3, r0
 800184e:	b29a      	uxth	r2, r3
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001856:	4817      	ldr	r0, [pc, #92]	; (80018b4 <GetClockSourcePrint+0x104>)
 8001858:	f006 ffc6 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800185c:	f003 fdbc 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 8001860:	4603      	mov	r3, r0
 8001862:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <GetClockSourcePrint+0x108>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	461a      	mov	r2, r3
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <GetClockSourcePrint+0x118>)
 800186e:	4810      	ldr	r0, [pc, #64]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001870:	f008 fc44 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001876:	f7fe fd3b 	bl	80002f0 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29a      	uxth	r2, r3
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	490b      	ldr	r1, [pc, #44]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <GetClockSourcePrint+0x104>)
 8001886:	f006 ffaf 	bl	80087e8 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <GetClockSourcePrint+0xfc>)
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <GetClockSourcePrint+0x100>)
 800188e:	f008 fc35 	bl	800a0fc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <GetClockSourcePrint+0x100>)
 8001894:	f7fe fd2c 	bl	80002f0 <strlen>
 8001898:	4603      	mov	r3, r0
 800189a:	b29a      	uxth	r2, r3
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	4903      	ldr	r1, [pc, #12]	; (80018b0 <GetClockSourcePrint+0x100>)
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <GetClockSourcePrint+0x104>)
 80018a4:	f006 ffa0 	bl	80087e8 <HAL_UART_Transmit>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	0800aaa0 	.word	0x0800aaa0
 80018b0:	240006e0 	.word	0x240006e0
 80018b4:	240001c4 	.word	0x240001c4
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	0800ab88 	.word	0x0800ab88
 80018c0:	0800abb8 	.word	0x0800abb8
 80018c4:	0800abe8 	.word	0x0800abe8
 80018c8:	0800ac18 	.word	0x0800ac18

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018d0:	f7ff fad4 	bl	8000e7c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f008 fbd3 	bl	800a0a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff f8ad 	bl	8000a5c <main>
  bx  lr
 8001902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001908:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800190c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001910:	0800accc 	.word	0x0800accc
  ldr r2, =_sbss
 8001914:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001918:	24000afc 	.word	0x24000afc

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001926:	2003      	movs	r0, #3
 8001928:	f000 f996 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800192c:	f003 fb94 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_Init+0x68>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	4913      	ldr	r1, [pc, #76]	; (800198c <HAL_Init+0x6c>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_Init+0x68>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_Init+0x6c>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <HAL_Init+0x70>)
 8001962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_Init+0x74>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f814 	bl	8001998 <HAL_InitTick>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e002      	b.n	8001980 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800197a:	f7ff f92f 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	58024400 	.word	0x58024400
 800198c:	0800ac48 	.word	0x0800ac48
 8001990:	24000004 	.word	0x24000004
 8001994:	24000000 	.word	0x24000000

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_InitTick+0x60>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e021      	b.n	80019f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_InitTick+0x64>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_InitTick+0x60>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f97f 	bl	8001cc6 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f945 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x68>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2400000c 	.word	0x2400000c
 80019fc:	24000000 	.word	0x24000000
 8001a00:	24000008 	.word	0x24000008

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	2400000c 	.word	0x2400000c
 8001a28:	24000ae8 	.word	0x24000ae8

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	24000ae8 	.word	0x24000ae8

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2400000c 	.word	0x2400000c

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <__NVIC_SetPriorityGrouping+0x40>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x40>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	05fa0000 	.word	0x05fa0000

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bec:	f3bf 8f4f 	dsb	sy
}
 8001bf0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <__NVIC_SystemReset+0x24>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bfa:	4904      	ldr	r1, [pc, #16]	; (8001c0c <__NVIC_SystemReset+0x24>)
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_SystemReset+0x28>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c02:	f3bf 8f4f 	dsb	sy
}
 8001c06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <__NVIC_SystemReset+0x20>
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	05fa0004 	.word	0x05fa0004

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff78 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff13 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff2a 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff7a 	bl	8001b80 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff49 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff1d 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001cc2:	f7ff ff91 	bl	8001be8 <__NVIC_SystemReset>

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa0 	bl	8001c14 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fea0 	bl	8001a2c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e37f      	b.n	80023f8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a66      	ldr	r2, [pc, #408]	; (8001e98 <HAL_DMA_Init+0x1b8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d04a      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <HAL_DMA_Init+0x1bc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d045      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <HAL_DMA_Init+0x1c0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d040      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a62      	ldr	r2, [pc, #392]	; (8001ea4 <HAL_DMA_Init+0x1c4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d03b      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a60      	ldr	r2, [pc, #384]	; (8001ea8 <HAL_DMA_Init+0x1c8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d036      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a5f      	ldr	r2, [pc, #380]	; (8001eac <HAL_DMA_Init+0x1cc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d031      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a5d      	ldr	r2, [pc, #372]	; (8001eb0 <HAL_DMA_Init+0x1d0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02c      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a5c      	ldr	r2, [pc, #368]	; (8001eb4 <HAL_DMA_Init+0x1d4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d027      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a5a      	ldr	r2, [pc, #360]	; (8001eb8 <HAL_DMA_Init+0x1d8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d022      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a59      	ldr	r2, [pc, #356]	; (8001ebc <HAL_DMA_Init+0x1dc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d01d      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a57      	ldr	r2, [pc, #348]	; (8001ec0 <HAL_DMA_Init+0x1e0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_DMA_Init+0x1e4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a54      	ldr	r2, [pc, #336]	; (8001ec8 <HAL_DMA_Init+0x1e8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00e      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a53      	ldr	r2, [pc, #332]	; (8001ecc <HAL_DMA_Init+0x1ec>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a51      	ldr	r2, [pc, #324]	; (8001ed0 <HAL_DMA_Init+0x1f0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_DMA_Init+0xb8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <HAL_DMA_Init+0x1f4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_DMA_Init+0xbc>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_DMA_Init+0xbe>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 813c 	beq.w	800201c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a37      	ldr	r2, [pc, #220]	; (8001e98 <HAL_DMA_Init+0x1b8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d04a      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <HAL_DMA_Init+0x1bc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d045      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <HAL_DMA_Init+0x1c0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d040      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a33      	ldr	r2, [pc, #204]	; (8001ea4 <HAL_DMA_Init+0x1c4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d03b      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <HAL_DMA_Init+0x1c8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d036      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a30      	ldr	r2, [pc, #192]	; (8001eac <HAL_DMA_Init+0x1cc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d031      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <HAL_DMA_Init+0x1d0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02c      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_DMA_Init+0x1d4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d027      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <HAL_DMA_Init+0x1d8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d022      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_DMA_Init+0x1dc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d01d      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <HAL_DMA_Init+0x1e0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d018      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_DMA_Init+0x1e4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <HAL_DMA_Init+0x1e8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_DMA_Init+0x1ec>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_DMA_Init+0x1f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_DMA_Init+0x174>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_DMA_Init+0x1f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d108      	bne.n	8001e66 <HAL_DMA_Init+0x186>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_DMA_Init+0x196>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e76:	e02f      	b.n	8001ed8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e78:	f7ff fdd8 	bl	8001a2c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d928      	bls.n	8001ed8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e2af      	b.n	80023f8 <HAL_DMA_Init+0x718>
 8001e98:	40020010 	.word	0x40020010
 8001e9c:	40020028 	.word	0x40020028
 8001ea0:	40020040 	.word	0x40020040
 8001ea4:	40020058 	.word	0x40020058
 8001ea8:	40020070 	.word	0x40020070
 8001eac:	40020088 	.word	0x40020088
 8001eb0:	400200a0 	.word	0x400200a0
 8001eb4:	400200b8 	.word	0x400200b8
 8001eb8:	40020410 	.word	0x40020410
 8001ebc:	40020428 	.word	0x40020428
 8001ec0:	40020440 	.word	0x40020440
 8001ec4:	40020458 	.word	0x40020458
 8001ec8:	40020470 	.word	0x40020470
 8001ecc:	40020488 	.word	0x40020488
 8001ed0:	400204a0 	.word	0x400204a0
 8001ed4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1c8      	bne.n	8001e78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4b73      	ldr	r3, [pc, #460]	; (80020c0 <HAL_DMA_Init+0x3e0>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001efe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4313      	orrs	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b28      	cmp	r3, #40	; 0x28
 8001f42:	d903      	bls.n	8001f4c <HAL_DMA_Init+0x26c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b2e      	cmp	r3, #46	; 0x2e
 8001f4a:	d91f      	bls.n	8001f8c <HAL_DMA_Init+0x2ac>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b3e      	cmp	r3, #62	; 0x3e
 8001f52:	d903      	bls.n	8001f5c <HAL_DMA_Init+0x27c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b42      	cmp	r3, #66	; 0x42
 8001f5a:	d917      	bls.n	8001f8c <HAL_DMA_Init+0x2ac>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b46      	cmp	r3, #70	; 0x46
 8001f62:	d903      	bls.n	8001f6c <HAL_DMA_Init+0x28c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b48      	cmp	r3, #72	; 0x48
 8001f6a:	d90f      	bls.n	8001f8c <HAL_DMA_Init+0x2ac>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b4e      	cmp	r3, #78	; 0x4e
 8001f72:	d903      	bls.n	8001f7c <HAL_DMA_Init+0x29c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b52      	cmp	r3, #82	; 0x52
 8001f7a:	d907      	bls.n	8001f8c <HAL_DMA_Init+0x2ac>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b73      	cmp	r3, #115	; 0x73
 8001f82:	d905      	bls.n	8001f90 <HAL_DMA_Init+0x2b0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b77      	cmp	r3, #119	; 0x77
 8001f8a:	d801      	bhi.n	8001f90 <HAL_DMA_Init+0x2b0>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_Init+0x2b2>
 8001f90:	2300      	movs	r3, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f9c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f023 0307 	bic.w	r3, r3, #7
 8001fb4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d117      	bne.n	8001ff8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f001 fe72 	bl	8003cc4 <DMA_CheckFifoParam>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e1ff      	b.n	80023f8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f001 fdad 	bl	8003b60 <DMA_CalcBaseAndBitshift>
 8002006:	4603      	mov	r3, r0
 8002008:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	223f      	movs	r2, #63	; 0x3f
 8002014:	409a      	lsls	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	e0fe      	b.n	800221a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <HAL_DMA_Init+0x3e4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d04a      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <HAL_DMA_Init+0x3e8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d045      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a25      	ldr	r2, [pc, #148]	; (80020cc <HAL_DMA_Init+0x3ec>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d040      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <HAL_DMA_Init+0x3f0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d03b      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_DMA_Init+0x3f4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d036      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_DMA_Init+0x3f8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d031      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_DMA_Init+0x3fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02c      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_DMA_Init+0x400>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d027      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_DMA_Init+0x404>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d022      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_DMA_Init+0x408>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d01d      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_DMA_Init+0x40c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d018      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_DMA_Init+0x410>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d013      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_DMA_Init+0x414>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00e      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_DMA_Init+0x418>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HAL_DMA_Init+0x41c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_DMA_Init+0x3dc>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_DMA_Init+0x420>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d123      	bne.n	8002104 <HAL_DMA_Init+0x424>
 80020bc:	2301      	movs	r3, #1
 80020be:	e022      	b.n	8002106 <HAL_DMA_Init+0x426>
 80020c0:	fe10803f 	.word	0xfe10803f
 80020c4:	48022c08 	.word	0x48022c08
 80020c8:	48022c1c 	.word	0x48022c1c
 80020cc:	48022c30 	.word	0x48022c30
 80020d0:	48022c44 	.word	0x48022c44
 80020d4:	48022c58 	.word	0x48022c58
 80020d8:	48022c6c 	.word	0x48022c6c
 80020dc:	48022c80 	.word	0x48022c80
 80020e0:	48022c94 	.word	0x48022c94
 80020e4:	58025408 	.word	0x58025408
 80020e8:	5802541c 	.word	0x5802541c
 80020ec:	58025430 	.word	0x58025430
 80020f0:	58025444 	.word	0x58025444
 80020f4:	58025458 	.word	0x58025458
 80020f8:	5802546c 	.word	0x5802546c
 80020fc:	58025480 	.word	0x58025480
 8002100:	58025494 	.word	0x58025494
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d07e      	beq.n	8002208 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a80      	ldr	r2, [pc, #512]	; (8002310 <HAL_DMA_Init+0x630>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d021      	beq.n	8002158 <HAL_DMA_Init+0x478>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <HAL_DMA_Init+0x634>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01c      	beq.n	8002158 <HAL_DMA_Init+0x478>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7d      	ldr	r2, [pc, #500]	; (8002318 <HAL_DMA_Init+0x638>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d017      	beq.n	8002158 <HAL_DMA_Init+0x478>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7b      	ldr	r2, [pc, #492]	; (800231c <HAL_DMA_Init+0x63c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d012      	beq.n	8002158 <HAL_DMA_Init+0x478>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7a      	ldr	r2, [pc, #488]	; (8002320 <HAL_DMA_Init+0x640>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_DMA_Init+0x478>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a78      	ldr	r2, [pc, #480]	; (8002324 <HAL_DMA_Init+0x644>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d008      	beq.n	8002158 <HAL_DMA_Init+0x478>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a77      	ldr	r2, [pc, #476]	; (8002328 <HAL_DMA_Init+0x648>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d003      	beq.n	8002158 <HAL_DMA_Init+0x478>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a75      	ldr	r2, [pc, #468]	; (800232c <HAL_DMA_Init+0x64c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_DMA_Init+0x650>)
 8002176:	4013      	ands	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d008      	beq.n	8002194 <HAL_DMA_Init+0x4b4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d102      	bne.n	8002190 <HAL_DMA_Init+0x4b0>
 800218a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800218e:	e002      	b.n	8002196 <HAL_DMA_Init+0x4b6>
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <HAL_DMA_Init+0x4b6>
 8002194:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68d2      	ldr	r2, [r2, #12]
 800219a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800219c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b56      	ldr	r3, [pc, #344]	; (8002334 <HAL_DMA_Init+0x654>)
 80021dc:	4413      	add	r3, r2
 80021de:	4a56      	ldr	r2, [pc, #344]	; (8002338 <HAL_DMA_Init+0x658>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 fcb7 	bl	8003b60 <DMA_CalcBaseAndBitshift>
 80021f2:	4603      	mov	r3, r0
 80021f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2201      	movs	r2, #1
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	e008      	b.n	800221a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2240      	movs	r2, #64	; 0x40
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0ee      	b.n	80023f8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a47      	ldr	r2, [pc, #284]	; (800233c <HAL_DMA_Init+0x65c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d072      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a45      	ldr	r2, [pc, #276]	; (8002340 <HAL_DMA_Init+0x660>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d06d      	beq.n	800230a <HAL_DMA_Init+0x62a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a44      	ldr	r2, [pc, #272]	; (8002344 <HAL_DMA_Init+0x664>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d068      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a42      	ldr	r2, [pc, #264]	; (8002348 <HAL_DMA_Init+0x668>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d063      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a41      	ldr	r2, [pc, #260]	; (800234c <HAL_DMA_Init+0x66c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d05e      	beq.n	800230a <HAL_DMA_Init+0x62a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_DMA_Init+0x670>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d059      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a3e      	ldr	r2, [pc, #248]	; (8002354 <HAL_DMA_Init+0x674>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d054      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a3c      	ldr	r2, [pc, #240]	; (8002358 <HAL_DMA_Init+0x678>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04f      	beq.n	800230a <HAL_DMA_Init+0x62a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a3b      	ldr	r2, [pc, #236]	; (800235c <HAL_DMA_Init+0x67c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04a      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a39      	ldr	r2, [pc, #228]	; (8002360 <HAL_DMA_Init+0x680>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d045      	beq.n	800230a <HAL_DMA_Init+0x62a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_DMA_Init+0x684>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d040      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a36      	ldr	r2, [pc, #216]	; (8002368 <HAL_DMA_Init+0x688>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d03b      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a35      	ldr	r2, [pc, #212]	; (800236c <HAL_DMA_Init+0x68c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d036      	beq.n	800230a <HAL_DMA_Init+0x62a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a33      	ldr	r2, [pc, #204]	; (8002370 <HAL_DMA_Init+0x690>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a32      	ldr	r2, [pc, #200]	; (8002374 <HAL_DMA_Init+0x694>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d02c      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a30      	ldr	r2, [pc, #192]	; (8002378 <HAL_DMA_Init+0x698>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d027      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_DMA_Init+0x630>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_DMA_Init+0x634>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01d      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_DMA_Init+0x638>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d018      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_DMA_Init+0x63c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_DMA_Init+0x640>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00e      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <HAL_DMA_Init+0x644>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_DMA_Init+0x62a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_DMA_Init+0x648>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_DMA_Init+0x62a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_DMA_Init+0x64c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d138      	bne.n	800237c <HAL_DMA_Init+0x69c>
 800230a:	2301      	movs	r3, #1
 800230c:	e037      	b.n	800237e <HAL_DMA_Init+0x69e>
 800230e:	bf00      	nop
 8002310:	58025408 	.word	0x58025408
 8002314:	5802541c 	.word	0x5802541c
 8002318:	58025430 	.word	0x58025430
 800231c:	58025444 	.word	0x58025444
 8002320:	58025458 	.word	0x58025458
 8002324:	5802546c 	.word	0x5802546c
 8002328:	58025480 	.word	0x58025480
 800232c:	58025494 	.word	0x58025494
 8002330:	fffe000f 	.word	0xfffe000f
 8002334:	a7fdabf8 	.word	0xa7fdabf8
 8002338:	cccccccd 	.word	0xcccccccd
 800233c:	40020010 	.word	0x40020010
 8002340:	40020028 	.word	0x40020028
 8002344:	40020040 	.word	0x40020040
 8002348:	40020058 	.word	0x40020058
 800234c:	40020070 	.word	0x40020070
 8002350:	40020088 	.word	0x40020088
 8002354:	400200a0 	.word	0x400200a0
 8002358:	400200b8 	.word	0x400200b8
 800235c:	40020410 	.word	0x40020410
 8002360:	40020428 	.word	0x40020428
 8002364:	40020440 	.word	0x40020440
 8002368:	40020458 	.word	0x40020458
 800236c:	40020470 	.word	0x40020470
 8002370:	40020488 	.word	0x40020488
 8002374:	400204a0 	.word	0x400204a0
 8002378:	400204b8 	.word	0x400204b8
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d032      	beq.n	80023e8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f001 fd1a 	bl	8003dbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d102      	bne.n	8002396 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023aa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_DMA_Init+0x6f6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d80c      	bhi.n	80023d6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f001 fd97 	bl	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	e008      	b.n	80023e8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e226      	b.n	800286a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_DMA_Start_IT+0x2a>
 8002426:	2302      	movs	r3, #2
 8002428:	e21f      	b.n	800286a <HAL_DMA_Start_IT+0x46a>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	f040 820a 	bne.w	8002854 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a68      	ldr	r2, [pc, #416]	; (80025f4 <HAL_DMA_Start_IT+0x1f4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d04a      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a66      	ldr	r2, [pc, #408]	; (80025f8 <HAL_DMA_Start_IT+0x1f8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d045      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_DMA_Start_IT+0x1fc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d040      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a63      	ldr	r2, [pc, #396]	; (8002600 <HAL_DMA_Start_IT+0x200>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d03b      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a62      	ldr	r2, [pc, #392]	; (8002604 <HAL_DMA_Start_IT+0x204>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d036      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a60      	ldr	r2, [pc, #384]	; (8002608 <HAL_DMA_Start_IT+0x208>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d031      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5f      	ldr	r2, [pc, #380]	; (800260c <HAL_DMA_Start_IT+0x20c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d02c      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5d      	ldr	r2, [pc, #372]	; (8002610 <HAL_DMA_Start_IT+0x210>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d027      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a5c      	ldr	r2, [pc, #368]	; (8002614 <HAL_DMA_Start_IT+0x214>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <HAL_DMA_Start_IT+0x218>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01d      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a59      	ldr	r2, [pc, #356]	; (800261c <HAL_DMA_Start_IT+0x21c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d018      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a57      	ldr	r2, [pc, #348]	; (8002620 <HAL_DMA_Start_IT+0x220>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_DMA_Start_IT+0x224>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00e      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a54      	ldr	r2, [pc, #336]	; (8002628 <HAL_DMA_Start_IT+0x228>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a53      	ldr	r2, [pc, #332]	; (800262c <HAL_DMA_Start_IT+0x22c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a51      	ldr	r2, [pc, #324]	; (8002630 <HAL_DMA_Start_IT+0x230>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d108      	bne.n	8002500 <HAL_DMA_Start_IT+0x100>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_DMA_Start_IT+0x110>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f001 f93e 	bl	8003798 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <HAL_DMA_Start_IT+0x1f4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d04a      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <HAL_DMA_Start_IT+0x1f8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d045      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a31      	ldr	r2, [pc, #196]	; (80025fc <HAL_DMA_Start_IT+0x1fc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d040      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <HAL_DMA_Start_IT+0x200>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d03b      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_DMA_Start_IT+0x204>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d036      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <HAL_DMA_Start_IT+0x208>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d031      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_DMA_Start_IT+0x20c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02c      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <HAL_DMA_Start_IT+0x210>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d027      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_DMA_Start_IT+0x214>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d022      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_DMA_Start_IT+0x218>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d01d      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a25      	ldr	r2, [pc, #148]	; (800261c <HAL_DMA_Start_IT+0x21c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_DMA_Start_IT+0x220>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_DMA_Start_IT+0x224>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	; (8002628 <HAL_DMA_Start_IT+0x228>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_DMA_Start_IT+0x22c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_DMA_Start_IT+0x230>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Start_IT+0x1c0>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_DMA_Start_IT+0x1c2>
 80025c0:	2300      	movs	r3, #0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d036      	beq.n	8002634 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 021e 	bic.w	r2, r3, #30
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0216 	orr.w	r2, r2, #22
 80025d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03e      	beq.n	8002660 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0208 	orr.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e035      	b.n	8002660 <HAL_DMA_Start_IT+0x260>
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028
 80025fc:	40020040 	.word	0x40020040
 8002600:	40020058 	.word	0x40020058
 8002604:	40020070 	.word	0x40020070
 8002608:	40020088 	.word	0x40020088
 800260c:	400200a0 	.word	0x400200a0
 8002610:	400200b8 	.word	0x400200b8
 8002614:	40020410 	.word	0x40020410
 8002618:	40020428 	.word	0x40020428
 800261c:	40020440 	.word	0x40020440
 8002620:	40020458 	.word	0x40020458
 8002624:	40020470 	.word	0x40020470
 8002628:	40020488 	.word	0x40020488
 800262c:	400204a0 	.word	0x400204a0
 8002630:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 020e 	bic.w	r2, r3, #14
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 020a 	orr.w	r2, r2, #10
 8002646:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0204 	orr.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a83      	ldr	r2, [pc, #524]	; (8002874 <HAL_DMA_Start_IT+0x474>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d072      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a82      	ldr	r2, [pc, #520]	; (8002878 <HAL_DMA_Start_IT+0x478>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d06d      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a80      	ldr	r2, [pc, #512]	; (800287c <HAL_DMA_Start_IT+0x47c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d068      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7f      	ldr	r2, [pc, #508]	; (8002880 <HAL_DMA_Start_IT+0x480>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d063      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a7d      	ldr	r2, [pc, #500]	; (8002884 <HAL_DMA_Start_IT+0x484>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d05e      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7c      	ldr	r2, [pc, #496]	; (8002888 <HAL_DMA_Start_IT+0x488>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d059      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7a      	ldr	r2, [pc, #488]	; (800288c <HAL_DMA_Start_IT+0x48c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d054      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a79      	ldr	r2, [pc, #484]	; (8002890 <HAL_DMA_Start_IT+0x490>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d04f      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a77      	ldr	r2, [pc, #476]	; (8002894 <HAL_DMA_Start_IT+0x494>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d04a      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a76      	ldr	r2, [pc, #472]	; (8002898 <HAL_DMA_Start_IT+0x498>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d045      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a74      	ldr	r2, [pc, #464]	; (800289c <HAL_DMA_Start_IT+0x49c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d040      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a73      	ldr	r2, [pc, #460]	; (80028a0 <HAL_DMA_Start_IT+0x4a0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03b      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a71      	ldr	r2, [pc, #452]	; (80028a4 <HAL_DMA_Start_IT+0x4a4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d036      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a70      	ldr	r2, [pc, #448]	; (80028a8 <HAL_DMA_Start_IT+0x4a8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d031      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6e      	ldr	r2, [pc, #440]	; (80028ac <HAL_DMA_Start_IT+0x4ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02c      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6d      	ldr	r2, [pc, #436]	; (80028b0 <HAL_DMA_Start_IT+0x4b0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d027      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6b      	ldr	r2, [pc, #428]	; (80028b4 <HAL_DMA_Start_IT+0x4b4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6a      	ldr	r2, [pc, #424]	; (80028b8 <HAL_DMA_Start_IT+0x4b8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d01d      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a68      	ldr	r2, [pc, #416]	; (80028bc <HAL_DMA_Start_IT+0x4bc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <HAL_DMA_Start_IT+0x4c0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	; (80028c4 <HAL_DMA_Start_IT+0x4c4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a64      	ldr	r2, [pc, #400]	; (80028c8 <HAL_DMA_Start_IT+0x4c8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a62      	ldr	r2, [pc, #392]	; (80028cc <HAL_DMA_Start_IT+0x4cc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a61      	ldr	r2, [pc, #388]	; (80028d0 <HAL_DMA_Start_IT+0x4d0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Start_IT+0x354>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_DMA_Start_IT+0x356>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01a      	beq.n	8002790 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002776:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_DMA_Start_IT+0x474>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d04a      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a36      	ldr	r2, [pc, #216]	; (8002878 <HAL_DMA_Start_IT+0x478>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d045      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a34      	ldr	r2, [pc, #208]	; (800287c <HAL_DMA_Start_IT+0x47c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d040      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a33      	ldr	r2, [pc, #204]	; (8002880 <HAL_DMA_Start_IT+0x480>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d03b      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a31      	ldr	r2, [pc, #196]	; (8002884 <HAL_DMA_Start_IT+0x484>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d036      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <HAL_DMA_Start_IT+0x488>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d031      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <HAL_DMA_Start_IT+0x48c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02c      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_DMA_Start_IT+0x490>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d027      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_DMA_Start_IT+0x494>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d022      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <HAL_DMA_Start_IT+0x498>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d01d      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_DMA_Start_IT+0x49c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d018      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_DMA_Start_IT+0x4a0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <HAL_DMA_Start_IT+0x4a4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_DMA_Start_IT+0x4a8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_DMA_Start_IT+0x4ac>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_DMA_Start_IT+0x4b0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <HAL_DMA_Start_IT+0x442>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e012      	b.n	8002868 <HAL_DMA_Start_IT+0x468>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e009      	b.n	8002868 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002868:	7dfb      	ldrb	r3, [r7, #23]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40020010 	.word	0x40020010
 8002878:	40020028 	.word	0x40020028
 800287c:	40020040 	.word	0x40020040
 8002880:	40020058 	.word	0x40020058
 8002884:	40020070 	.word	0x40020070
 8002888:	40020088 	.word	0x40020088
 800288c:	400200a0 	.word	0x400200a0
 8002890:	400200b8 	.word	0x400200b8
 8002894:	40020410 	.word	0x40020410
 8002898:	40020428 	.word	0x40020428
 800289c:	40020440 	.word	0x40020440
 80028a0:	40020458 	.word	0x40020458
 80028a4:	40020470 	.word	0x40020470
 80028a8:	40020488 	.word	0x40020488
 80028ac:	400204a0 	.word	0x400204a0
 80028b0:	400204b8 	.word	0x400204b8
 80028b4:	58025408 	.word	0x58025408
 80028b8:	5802541c 	.word	0x5802541c
 80028bc:	58025430 	.word	0x58025430
 80028c0:	58025444 	.word	0x58025444
 80028c4:	58025458 	.word	0x58025458
 80028c8:	5802546c 	.word	0x5802546c
 80028cc:	58025480 	.word	0x58025480
 80028d0:	58025494 	.word	0x58025494

080028d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028e0:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_DMA_IRQHandler+0x1ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <HAL_DMA_IRQHandler+0x1b0>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5f      	ldr	r2, [pc, #380]	; (8002a88 <HAL_DMA_IRQHandler+0x1b4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04a      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5d      	ldr	r2, [pc, #372]	; (8002a8c <HAL_DMA_IRQHandler+0x1b8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_DMA_IRQHandler+0x1bc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d040      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a5a      	ldr	r2, [pc, #360]	; (8002a94 <HAL_DMA_IRQHandler+0x1c0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d03b      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a59      	ldr	r2, [pc, #356]	; (8002a98 <HAL_DMA_IRQHandler+0x1c4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d036      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <HAL_DMA_IRQHandler+0x1c8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d02c      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d027      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a53      	ldr	r2, [pc, #332]	; (8002aa8 <HAL_DMA_IRQHandler+0x1d4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a51      	ldr	r2, [pc, #324]	; (8002aac <HAL_DMA_IRQHandler+0x1d8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01d      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_DMA_IRQHandler+0x1e0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_DMA_IRQHandler+0x1e8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xd2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a48      	ldr	r2, [pc, #288]	; (8002ac4 <HAL_DMA_IRQHandler+0x1f0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_IRQHandler+0xd6>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_DMA_IRQHandler+0xd8>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 842b 	beq.w	8003208 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	2208      	movs	r2, #8
 80029bc:	409a      	lsls	r2, r3
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80a2 	beq.w	8002b0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <HAL_DMA_IRQHandler+0x1b4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d04a      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2d      	ldr	r2, [pc, #180]	; (8002a8c <HAL_DMA_IRQHandler+0x1b8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d045      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2b      	ldr	r2, [pc, #172]	; (8002a90 <HAL_DMA_IRQHandler+0x1bc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d040      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <HAL_DMA_IRQHandler+0x1c0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d03b      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <HAL_DMA_IRQHandler+0x1c4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d036      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <HAL_DMA_IRQHandler+0x1c8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d031      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02c      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d027      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_DMA_IRQHandler+0x1d4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d022      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a21      	ldr	r2, [pc, #132]	; (8002aac <HAL_DMA_IRQHandler+0x1d8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d01d      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d018      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_DMA_IRQHandler+0x1e0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_DMA_IRQHandler+0x1e8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x194>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d12f      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0x1f4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	e02e      	b.n	8002adc <HAL_DMA_IRQHandler+0x208>
 8002a7e:	bf00      	nop
 8002a80:	24000000 	.word	0x24000000
 8002a84:	1b4e81b5 	.word	0x1b4e81b5
 8002a88:	40020010 	.word	0x40020010
 8002a8c:	40020028 	.word	0x40020028
 8002a90:	40020040 	.word	0x40020040
 8002a94:	40020058 	.word	0x40020058
 8002a98:	40020070 	.word	0x40020070
 8002a9c:	40020088 	.word	0x40020088
 8002aa0:	400200a0 	.word	0x400200a0
 8002aa4:	400200b8 	.word	0x400200b8
 8002aa8:	40020410 	.word	0x40020410
 8002aac:	40020428 	.word	0x40020428
 8002ab0:	40020440 	.word	0x40020440
 8002ab4:	40020458 	.word	0x40020458
 8002ab8:	40020470 	.word	0x40020470
 8002abc:	40020488 	.word	0x40020488
 8002ac0:	400204a0 	.word	0x400204a0
 8002ac4:	400204b8 	.word	0x400204b8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf14      	ite	ne
 8002ad6:	2301      	movne	r3, #1
 8002ad8:	2300      	moveq	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0204 	bic.w	r2, r2, #4
 8002aee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2208      	movs	r2, #8
 8002afa:	409a      	lsls	r2, r3
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06e      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_DMA_IRQHandler+0x3f8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d04a      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a67      	ldr	r2, [pc, #412]	; (8002cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d045      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a66      	ldr	r2, [pc, #408]	; (8002cd4 <HAL_DMA_IRQHandler+0x400>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d040      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a64      	ldr	r2, [pc, #400]	; (8002cd8 <HAL_DMA_IRQHandler+0x404>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d03b      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a63      	ldr	r2, [pc, #396]	; (8002cdc <HAL_DMA_IRQHandler+0x408>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d036      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a61      	ldr	r2, [pc, #388]	; (8002ce0 <HAL_DMA_IRQHandler+0x40c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d031      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a60      	ldr	r2, [pc, #384]	; (8002ce4 <HAL_DMA_IRQHandler+0x410>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d02c      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <HAL_DMA_IRQHandler+0x414>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d027      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <HAL_DMA_IRQHandler+0x418>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d022      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5b      	ldr	r2, [pc, #364]	; (8002cf0 <HAL_DMA_IRQHandler+0x41c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01d      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <HAL_DMA_IRQHandler+0x420>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d018      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_DMA_IRQHandler+0x424>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a57      	ldr	r2, [pc, #348]	; (8002cfc <HAL_DMA_IRQHandler+0x428>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a55      	ldr	r2, [pc, #340]	; (8002d00 <HAL_DMA_IRQHandler+0x42c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <HAL_DMA_IRQHandler+0x430>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ee>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_DMA_IRQHandler+0x434>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x304>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e003      	b.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0202 	orr.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2204      	movs	r2, #4
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 808f 	beq.w	8002d34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <HAL_DMA_IRQHandler+0x3f8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_DMA_IRQHandler+0x400>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_DMA_IRQHandler+0x404>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_DMA_IRQHandler+0x408>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_DMA_IRQHandler+0x40c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <HAL_DMA_IRQHandler+0x410>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_DMA_IRQHandler+0x414>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a20      	ldr	r2, [pc, #128]	; (8002cec <HAL_DMA_IRQHandler+0x418>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_DMA_IRQHandler+0x41c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_DMA_IRQHandler+0x420>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_DMA_IRQHandler+0x424>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <HAL_DMA_IRQHandler+0x428>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_DMA_IRQHandler+0x42c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_DMA_IRQHandler+0x430>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3e2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <HAL_DMA_IRQHandler+0x434>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d12a      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x438>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e023      	b.n	8002d14 <HAL_DMA_IRQHandler+0x440>
 8002ccc:	40020010 	.word	0x40020010
 8002cd0:	40020028 	.word	0x40020028
 8002cd4:	40020040 	.word	0x40020040
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	40020070 	.word	0x40020070
 8002ce0:	40020088 	.word	0x40020088
 8002ce4:	400200a0 	.word	0x400200a0
 8002ce8:	400200b8 	.word	0x400200b8
 8002cec:	40020410 	.word	0x40020410
 8002cf0:	40020428 	.word	0x40020428
 8002cf4:	40020440 	.word	0x40020440
 8002cf8:	40020458 	.word	0x40020458
 8002cfc:	40020470 	.word	0x40020470
 8002d00:	40020488 	.word	0x40020488
 8002d04:	400204a0 	.word	0x400204a0
 8002d08:	400204b8 	.word	0x400204b8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2204      	movs	r2, #4
 8002d22:	409a      	lsls	r2, r3
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a6 	beq.w	8002e96 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a85      	ldr	r2, [pc, #532]	; (8002f64 <HAL_DMA_IRQHandler+0x690>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d04a      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a83      	ldr	r2, [pc, #524]	; (8002f68 <HAL_DMA_IRQHandler+0x694>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d045      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a82      	ldr	r2, [pc, #520]	; (8002f6c <HAL_DMA_IRQHandler+0x698>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d040      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a80      	ldr	r2, [pc, #512]	; (8002f70 <HAL_DMA_IRQHandler+0x69c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d03b      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7f      	ldr	r2, [pc, #508]	; (8002f74 <HAL_DMA_IRQHandler+0x6a0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d036      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7d      	ldr	r2, [pc, #500]	; (8002f78 <HAL_DMA_IRQHandler+0x6a4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d031      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a7c      	ldr	r2, [pc, #496]	; (8002f7c <HAL_DMA_IRQHandler+0x6a8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d02c      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a7a      	ldr	r2, [pc, #488]	; (8002f80 <HAL_DMA_IRQHandler+0x6ac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d027      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a79      	ldr	r2, [pc, #484]	; (8002f84 <HAL_DMA_IRQHandler+0x6b0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a77      	ldr	r2, [pc, #476]	; (8002f88 <HAL_DMA_IRQHandler+0x6b4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a76      	ldr	r2, [pc, #472]	; (8002f8c <HAL_DMA_IRQHandler+0x6b8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d018      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a74      	ldr	r2, [pc, #464]	; (8002f90 <HAL_DMA_IRQHandler+0x6bc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a73      	ldr	r2, [pc, #460]	; (8002f94 <HAL_DMA_IRQHandler+0x6c0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a71      	ldr	r2, [pc, #452]	; (8002f98 <HAL_DMA_IRQHandler+0x6c4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a70      	ldr	r2, [pc, #448]	; (8002f9c <HAL_DMA_IRQHandler+0x6c8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_DMA_IRQHandler+0x516>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a6e      	ldr	r2, [pc, #440]	; (8002fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10a      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x52c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e009      	b.n	8002e14 <HAL_DMA_IRQHandler+0x540>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03e      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2210      	movs	r2, #16
 8002e22:	409a      	lsls	r2, r3
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d108      	bne.n	8002e56 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d024      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
 8002e54:	e01f      	b.n	8002e96 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01b      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	e016      	b.n	8002e96 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0208 	bic.w	r2, r2, #8
 8002e84:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8110 	beq.w	80030cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <HAL_DMA_IRQHandler+0x690>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d04a      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <HAL_DMA_IRQHandler+0x694>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d045      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_DMA_IRQHandler+0x698>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d040      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_DMA_IRQHandler+0x69c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d03b      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_DMA_IRQHandler+0x6a0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d036      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <HAL_DMA_IRQHandler+0x6a4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d031      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_DMA_IRQHandler+0x6a8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02c      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a22      	ldr	r2, [pc, #136]	; (8002f80 <HAL_DMA_IRQHandler+0x6ac>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d027      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <HAL_DMA_IRQHandler+0x6b0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d022      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <HAL_DMA_IRQHandler+0x6b4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d01d      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <HAL_DMA_IRQHandler+0x6b8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d018      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <HAL_DMA_IRQHandler+0x6bc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_DMA_IRQHandler+0x6c0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_DMA_IRQHandler+0x6c4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <HAL_DMA_IRQHandler+0x6c8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x678>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d12b      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x6d0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	e02a      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x6e4>
 8002f62:	bf00      	nop
 8002f64:	40020010 	.word	0x40020010
 8002f68:	40020028 	.word	0x40020028
 8002f6c:	40020040 	.word	0x40020040
 8002f70:	40020058 	.word	0x40020058
 8002f74:	40020070 	.word	0x40020070
 8002f78:	40020088 	.word	0x40020088
 8002f7c:	400200a0 	.word	0x400200a0
 8002f80:	400200b8 	.word	0x400200b8
 8002f84:	40020410 	.word	0x40020410
 8002f88:	40020428 	.word	0x40020428
 8002f8c:	40020440 	.word	0x40020440
 8002f90:	40020458 	.word	0x40020458
 8002f94:	40020470 	.word	0x40020470
 8002f98:	40020488 	.word	0x40020488
 8002f9c:	400204a0 	.word	0x400204a0
 8002fa0:	400204b8 	.word	0x400204b8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8087 	beq.w	80030cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d139      	bne.n	800304e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0216 	bic.w	r2, r2, #22
 8002fe8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <HAL_DMA_IRQHandler+0x736>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0208 	bic.w	r2, r2, #8
 8003018:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	223f      	movs	r2, #63	; 0x3f
 8003024:	409a      	lsls	r2, r3
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8382 	beq.w	8003748 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
          }
          return;
 800304c:	e37c      	b.n	8003748 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d018      	beq.n	800308e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	2b00      	cmp	r3, #0
 8003070:	d02c      	beq.n	80030cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e027      	b.n	80030cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d023      	beq.n	80030cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e01e      	b.n	80030cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10f      	bne.n	80030bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0210 	bic.w	r2, r2, #16
 80030aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 833e 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8088 	beq.w	80031f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2204      	movs	r2, #4
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a89      	ldr	r2, [pc, #548]	; (8003318 <HAL_DMA_IRQHandler+0xa44>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d04a      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a88      	ldr	r2, [pc, #544]	; (800331c <HAL_DMA_IRQHandler+0xa48>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d045      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <HAL_DMA_IRQHandler+0xa4c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d040      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a85      	ldr	r2, [pc, #532]	; (8003324 <HAL_DMA_IRQHandler+0xa50>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d03b      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a83      	ldr	r2, [pc, #524]	; (8003328 <HAL_DMA_IRQHandler+0xa54>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d036      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a82      	ldr	r2, [pc, #520]	; (800332c <HAL_DMA_IRQHandler+0xa58>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d031      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a80      	ldr	r2, [pc, #512]	; (8003330 <HAL_DMA_IRQHandler+0xa5c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02c      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7f      	ldr	r2, [pc, #508]	; (8003334 <HAL_DMA_IRQHandler+0xa60>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d027      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a7d      	ldr	r2, [pc, #500]	; (8003338 <HAL_DMA_IRQHandler+0xa64>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d022      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a7c      	ldr	r2, [pc, #496]	; (800333c <HAL_DMA_IRQHandler+0xa68>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d01d      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7a      	ldr	r2, [pc, #488]	; (8003340 <HAL_DMA_IRQHandler+0xa6c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d018      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a79      	ldr	r2, [pc, #484]	; (8003344 <HAL_DMA_IRQHandler+0xa70>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_DMA_IRQHandler+0xa74>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00e      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a76      	ldr	r2, [pc, #472]	; (800334c <HAL_DMA_IRQHandler+0xa78>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a74      	ldr	r2, [pc, #464]	; (8003350 <HAL_DMA_IRQHandler+0xa7c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_DMA_IRQHandler+0x8b8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a73      	ldr	r2, [pc, #460]	; (8003354 <HAL_DMA_IRQHandler+0xa80>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d108      	bne.n	800319e <HAL_DMA_IRQHandler+0x8ca>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e007      	b.n	80031ae <HAL_DMA_IRQHandler+0x8da>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d307      	bcc.n	80031ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f2      	bne.n	80031ae <HAL_DMA_IRQHandler+0x8da>
 80031c8:	e000      	b.n	80031cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2203      	movs	r2, #3
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80031e2:	e003      	b.n	80031ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 82aa 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
 8003206:	e2a4      	b.n	8003752 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_DMA_IRQHandler+0xa84>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d04a      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a51      	ldr	r2, [pc, #324]	; (800335c <HAL_DMA_IRQHandler+0xa88>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d045      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a4f      	ldr	r2, [pc, #316]	; (8003360 <HAL_DMA_IRQHandler+0xa8c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d040      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a4e      	ldr	r2, [pc, #312]	; (8003364 <HAL_DMA_IRQHandler+0xa90>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d03b      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a4c      	ldr	r2, [pc, #304]	; (8003368 <HAL_DMA_IRQHandler+0xa94>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d036      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a4b      	ldr	r2, [pc, #300]	; (800336c <HAL_DMA_IRQHandler+0xa98>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d031      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a49      	ldr	r2, [pc, #292]	; (8003370 <HAL_DMA_IRQHandler+0xa9c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02c      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a48      	ldr	r2, [pc, #288]	; (8003374 <HAL_DMA_IRQHandler+0xaa0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d027      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a46      	ldr	r2, [pc, #280]	; (8003378 <HAL_DMA_IRQHandler+0xaa4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a45      	ldr	r2, [pc, #276]	; (800337c <HAL_DMA_IRQHandler+0xaa8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d01d      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a43      	ldr	r2, [pc, #268]	; (8003380 <HAL_DMA_IRQHandler+0xaac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a42      	ldr	r2, [pc, #264]	; (8003384 <HAL_DMA_IRQHandler+0xab0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a40      	ldr	r2, [pc, #256]	; (8003388 <HAL_DMA_IRQHandler+0xab4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3f      	ldr	r2, [pc, #252]	; (800338c <HAL_DMA_IRQHandler+0xab8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_DMA_IRQHandler+0xabc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x9d4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_DMA_IRQHandler+0xac0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_DMA_IRQHandler+0x9d8>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_DMA_IRQHandler+0x9da>
 80032ac:	2300      	movs	r3, #0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 824f 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2204      	movs	r2, #4
 80032c6:	409a      	lsls	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80dd 	beq.w	800348c <HAL_DMA_IRQHandler+0xbb8>
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80d7 	beq.w	800348c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2204      	movs	r2, #4
 80032e8:	409a      	lsls	r2, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d059      	beq.n	80033ac <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d14a      	bne.n	8003398 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8220 	beq.w	800374c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003314:	e21a      	b.n	800374c <HAL_DMA_IRQHandler+0xe78>
 8003316:	bf00      	nop
 8003318:	40020010 	.word	0x40020010
 800331c:	40020028 	.word	0x40020028
 8003320:	40020040 	.word	0x40020040
 8003324:	40020058 	.word	0x40020058
 8003328:	40020070 	.word	0x40020070
 800332c:	40020088 	.word	0x40020088
 8003330:	400200a0 	.word	0x400200a0
 8003334:	400200b8 	.word	0x400200b8
 8003338:	40020410 	.word	0x40020410
 800333c:	40020428 	.word	0x40020428
 8003340:	40020440 	.word	0x40020440
 8003344:	40020458 	.word	0x40020458
 8003348:	40020470 	.word	0x40020470
 800334c:	40020488 	.word	0x40020488
 8003350:	400204a0 	.word	0x400204a0
 8003354:	400204b8 	.word	0x400204b8
 8003358:	48022c08 	.word	0x48022c08
 800335c:	48022c1c 	.word	0x48022c1c
 8003360:	48022c30 	.word	0x48022c30
 8003364:	48022c44 	.word	0x48022c44
 8003368:	48022c58 	.word	0x48022c58
 800336c:	48022c6c 	.word	0x48022c6c
 8003370:	48022c80 	.word	0x48022c80
 8003374:	48022c94 	.word	0x48022c94
 8003378:	58025408 	.word	0x58025408
 800337c:	5802541c 	.word	0x5802541c
 8003380:	58025430 	.word	0x58025430
 8003384:	58025444 	.word	0x58025444
 8003388:	58025458 	.word	0x58025458
 800338c:	5802546c 	.word	0x5802546c
 8003390:	58025480 	.word	0x58025480
 8003394:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 81d5 	beq.w	800374c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033aa:	e1cf      	b.n	800374c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d160      	bne.n	8003478 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7f      	ldr	r2, [pc, #508]	; (80035b8 <HAL_DMA_IRQHandler+0xce4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d04a      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7d      	ldr	r2, [pc, #500]	; (80035bc <HAL_DMA_IRQHandler+0xce8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d045      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7c      	ldr	r2, [pc, #496]	; (80035c0 <HAL_DMA_IRQHandler+0xcec>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d040      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <HAL_DMA_IRQHandler+0xcf0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d03b      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a79      	ldr	r2, [pc, #484]	; (80035c8 <HAL_DMA_IRQHandler+0xcf4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d036      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a77      	ldr	r2, [pc, #476]	; (80035cc <HAL_DMA_IRQHandler+0xcf8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a76      	ldr	r2, [pc, #472]	; (80035d0 <HAL_DMA_IRQHandler+0xcfc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02c      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a74      	ldr	r2, [pc, #464]	; (80035d4 <HAL_DMA_IRQHandler+0xd00>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d027      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a73      	ldr	r2, [pc, #460]	; (80035d8 <HAL_DMA_IRQHandler+0xd04>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a71      	ldr	r2, [pc, #452]	; (80035dc <HAL_DMA_IRQHandler+0xd08>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_DMA_IRQHandler+0xd0c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_DMA_IRQHandler+0xd10>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6d      	ldr	r2, [pc, #436]	; (80035e8 <HAL_DMA_IRQHandler+0xd14>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6b      	ldr	r2, [pc, #428]	; (80035ec <HAL_DMA_IRQHandler+0xd18>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_DMA_IRQHandler+0xd1c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb82>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_DMA_IRQHandler+0xd20>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d108      	bne.n	8003468 <HAL_DMA_IRQHandler+0xb94>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0208 	bic.w	r2, r2, #8
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e007      	b.n	8003478 <HAL_DMA_IRQHandler+0xba4>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0204 	bic.w	r2, r2, #4
 8003476:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8165 	beq.w	800374c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800348a:	e15f      	b.n	800374c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2202      	movs	r2, #2
 8003496:	409a      	lsls	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80c5 	beq.w	800362c <HAL_DMA_IRQHandler+0xd58>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80bf 	beq.w	800362c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2202      	movs	r2, #2
 80034b8:	409a      	lsls	r2, r3
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 813a 	beq.w	8003750 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e4:	e134      	b.n	8003750 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8130 	beq.w	8003750 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f8:	e12a      	b.n	8003750 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 8089 	bne.w	8003618 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2b      	ldr	r2, [pc, #172]	; (80035b8 <HAL_DMA_IRQHandler+0xce4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d04a      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a29      	ldr	r2, [pc, #164]	; (80035bc <HAL_DMA_IRQHandler+0xce8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d045      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <HAL_DMA_IRQHandler+0xcec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d040      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_DMA_IRQHandler+0xcf0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d03b      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <HAL_DMA_IRQHandler+0xcf4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d036      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a23      	ldr	r2, [pc, #140]	; (80035cc <HAL_DMA_IRQHandler+0xcf8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_DMA_IRQHandler+0xcfc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d02c      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <HAL_DMA_IRQHandler+0xd00>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d027      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_DMA_IRQHandler+0xd04>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <HAL_DMA_IRQHandler+0xd08>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_DMA_IRQHandler+0xd0c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <HAL_DMA_IRQHandler+0xd10>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_DMA_IRQHandler+0xd14>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_DMA_IRQHandler+0xd18>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_DMA_IRQHandler+0xd1c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xcd2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_DMA_IRQHandler+0xd20>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d128      	bne.n	80035f8 <HAL_DMA_IRQHandler+0xd24>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0214 	bic.w	r2, r2, #20
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e027      	b.n	8003608 <HAL_DMA_IRQHandler+0xd34>
 80035b8:	40020010 	.word	0x40020010
 80035bc:	40020028 	.word	0x40020028
 80035c0:	40020040 	.word	0x40020040
 80035c4:	40020058 	.word	0x40020058
 80035c8:	40020070 	.word	0x40020070
 80035cc:	40020088 	.word	0x40020088
 80035d0:	400200a0 	.word	0x400200a0
 80035d4:	400200b8 	.word	0x400200b8
 80035d8:	40020410 	.word	0x40020410
 80035dc:	40020428 	.word	0x40020428
 80035e0:	40020440 	.word	0x40020440
 80035e4:	40020458 	.word	0x40020458
 80035e8:	40020470 	.word	0x40020470
 80035ec:	40020488 	.word	0x40020488
 80035f0:	400204a0 	.word	0x400204a0
 80035f4:	400204b8 	.word	0x400204b8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 020a 	bic.w	r2, r2, #10
 8003606:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8097 	beq.w	8003750 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800362a:	e091      	b.n	8003750 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8088 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe7e>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8082 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a41      	ldr	r2, [pc, #260]	; (8003758 <HAL_DMA_IRQHandler+0xe84>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d04a      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a3f      	ldr	r2, [pc, #252]	; (800375c <HAL_DMA_IRQHandler+0xe88>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d045      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a3e      	ldr	r2, [pc, #248]	; (8003760 <HAL_DMA_IRQHandler+0xe8c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d040      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <HAL_DMA_IRQHandler+0xe90>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d03b      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3b      	ldr	r2, [pc, #236]	; (8003768 <HAL_DMA_IRQHandler+0xe94>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d036      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a39      	ldr	r2, [pc, #228]	; (800376c <HAL_DMA_IRQHandler+0xe98>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d031      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a38      	ldr	r2, [pc, #224]	; (8003770 <HAL_DMA_IRQHandler+0xe9c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d02c      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a36      	ldr	r2, [pc, #216]	; (8003774 <HAL_DMA_IRQHandler+0xea0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d027      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a35      	ldr	r2, [pc, #212]	; (8003778 <HAL_DMA_IRQHandler+0xea4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a33      	ldr	r2, [pc, #204]	; (800377c <HAL_DMA_IRQHandler+0xea8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01d      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a32      	ldr	r2, [pc, #200]	; (8003780 <HAL_DMA_IRQHandler+0xeac>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d018      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a30      	ldr	r2, [pc, #192]	; (8003784 <HAL_DMA_IRQHandler+0xeb0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2f      	ldr	r2, [pc, #188]	; (8003788 <HAL_DMA_IRQHandler+0xeb4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2d      	ldr	r2, [pc, #180]	; (800378c <HAL_DMA_IRQHandler+0xeb8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2c      	ldr	r2, [pc, #176]	; (8003790 <HAL_DMA_IRQHandler+0xebc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe1a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2a      	ldr	r2, [pc, #168]	; (8003794 <HAL_DMA_IRQHandler+0xec0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <HAL_DMA_IRQHandler+0xe2c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 021c 	bic.w	r2, r2, #28
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e007      	b.n	8003710 <HAL_DMA_IRQHandler+0xe3c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 020e 	bic.w	r2, r2, #14
 800370e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2201      	movs	r2, #1
 800371a:	409a      	lsls	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	e004      	b.n	8003752 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003748:	bf00      	nop
 800374a:	e002      	b.n	8003752 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800374c:	bf00      	nop
 800374e:	e000      	b.n	8003752 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003750:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40020010 	.word	0x40020010
 800375c:	40020028 	.word	0x40020028
 8003760:	40020040 	.word	0x40020040
 8003764:	40020058 	.word	0x40020058
 8003768:	40020070 	.word	0x40020070
 800376c:	40020088 	.word	0x40020088
 8003770:	400200a0 	.word	0x400200a0
 8003774:	400200b8 	.word	0x400200b8
 8003778:	40020410 	.word	0x40020410
 800377c:	40020428 	.word	0x40020428
 8003780:	40020440 	.word	0x40020440
 8003784:	40020458 	.word	0x40020458
 8003788:	40020470 	.word	0x40020470
 800378c:	40020488 	.word	0x40020488
 8003790:	400204a0 	.word	0x400204a0
 8003794:	400204b8 	.word	0x400204b8

08003798 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7f      	ldr	r2, [pc, #508]	; (80039b4 <DMA_SetConfig+0x21c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d072      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7d      	ldr	r2, [pc, #500]	; (80039b8 <DMA_SetConfig+0x220>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d06d      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7c      	ldr	r2, [pc, #496]	; (80039bc <DMA_SetConfig+0x224>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d068      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7a      	ldr	r2, [pc, #488]	; (80039c0 <DMA_SetConfig+0x228>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d063      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a79      	ldr	r2, [pc, #484]	; (80039c4 <DMA_SetConfig+0x22c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d05e      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <DMA_SetConfig+0x230>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d059      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a76      	ldr	r2, [pc, #472]	; (80039cc <DMA_SetConfig+0x234>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d054      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a74      	ldr	r2, [pc, #464]	; (80039d0 <DMA_SetConfig+0x238>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04f      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a73      	ldr	r2, [pc, #460]	; (80039d4 <DMA_SetConfig+0x23c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d04a      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a71      	ldr	r2, [pc, #452]	; (80039d8 <DMA_SetConfig+0x240>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d045      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a70      	ldr	r2, [pc, #448]	; (80039dc <DMA_SetConfig+0x244>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d040      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6e      	ldr	r2, [pc, #440]	; (80039e0 <DMA_SetConfig+0x248>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d03b      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6d      	ldr	r2, [pc, #436]	; (80039e4 <DMA_SetConfig+0x24c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d036      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <DMA_SetConfig+0x250>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d031      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6a      	ldr	r2, [pc, #424]	; (80039ec <DMA_SetConfig+0x254>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d02c      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a68      	ldr	r2, [pc, #416]	; (80039f0 <DMA_SetConfig+0x258>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d027      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a67      	ldr	r2, [pc, #412]	; (80039f4 <DMA_SetConfig+0x25c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d022      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <DMA_SetConfig+0x260>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01d      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a64      	ldr	r2, [pc, #400]	; (80039fc <DMA_SetConfig+0x264>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d018      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a62      	ldr	r2, [pc, #392]	; (8003a00 <DMA_SetConfig+0x268>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a61      	ldr	r2, [pc, #388]	; (8003a04 <DMA_SetConfig+0x26c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5f      	ldr	r2, [pc, #380]	; (8003a08 <DMA_SetConfig+0x270>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5e      	ldr	r2, [pc, #376]	; (8003a0c <DMA_SetConfig+0x274>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <DMA_SetConfig+0x278>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <DMA_SetConfig+0x10e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <DMA_SetConfig+0x110>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a39      	ldr	r2, [pc, #228]	; (80039b4 <DMA_SetConfig+0x21c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d04a      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a38      	ldr	r2, [pc, #224]	; (80039b8 <DMA_SetConfig+0x220>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d045      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a36      	ldr	r2, [pc, #216]	; (80039bc <DMA_SetConfig+0x224>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d040      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <DMA_SetConfig+0x228>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d03b      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <DMA_SetConfig+0x22c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d036      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a32      	ldr	r2, [pc, #200]	; (80039c8 <DMA_SetConfig+0x230>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d031      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a30      	ldr	r2, [pc, #192]	; (80039cc <DMA_SetConfig+0x234>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02c      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <DMA_SetConfig+0x238>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d027      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <DMA_SetConfig+0x23c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <DMA_SetConfig+0x240>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d01d      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <DMA_SetConfig+0x244>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d018      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <DMA_SetConfig+0x248>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <DMA_SetConfig+0x24c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <DMA_SetConfig+0x250>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <DMA_SetConfig+0x254>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <DMA_SetConfig+0x258>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <DMA_SetConfig+0x1d4>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <DMA_SetConfig+0x1d6>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d059      	beq.n	8003a26 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	223f      	movs	r2, #63	; 0x3f
 800397c:	409a      	lsls	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003990:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d138      	bne.n	8003a14 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039b2:	e0ae      	b.n	8003b12 <DMA_SetConfig+0x37a>
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
 80039f4:	58025408 	.word	0x58025408
 80039f8:	5802541c 	.word	0x5802541c
 80039fc:	58025430 	.word	0x58025430
 8003a00:	58025444 	.word	0x58025444
 8003a04:	58025458 	.word	0x58025458
 8003a08:	5802546c 	.word	0x5802546c
 8003a0c:	58025480 	.word	0x58025480
 8003a10:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	e075      	b.n	8003b12 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <DMA_SetConfig+0x388>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d04a      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <DMA_SetConfig+0x38c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d045      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <DMA_SetConfig+0x390>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d040      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a38      	ldr	r2, [pc, #224]	; (8003b2c <DMA_SetConfig+0x394>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d03b      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a37      	ldr	r2, [pc, #220]	; (8003b30 <DMA_SetConfig+0x398>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d036      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <DMA_SetConfig+0x39c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d031      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <DMA_SetConfig+0x3a0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d02c      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <DMA_SetConfig+0x3a4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d027      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a31      	ldr	r2, [pc, #196]	; (8003b40 <DMA_SetConfig+0x3a8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d022      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <DMA_SetConfig+0x3ac>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01d      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2e      	ldr	r2, [pc, #184]	; (8003b48 <DMA_SetConfig+0x3b0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d018      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <DMA_SetConfig+0x3b4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <DMA_SetConfig+0x3b8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a29      	ldr	r2, [pc, #164]	; (8003b54 <DMA_SetConfig+0x3bc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a28      	ldr	r2, [pc, #160]	; (8003b58 <DMA_SetConfig+0x3c0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <DMA_SetConfig+0x32e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <DMA_SetConfig+0x3c4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <DMA_SetConfig+0x332>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <DMA_SetConfig+0x334>
 8003aca:	2300      	movs	r3, #0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2201      	movs	r2, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d108      	bne.n	8003b02 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	60da      	str	r2, [r3, #12]
}
 8003b00:	e007      	b.n	8003b12 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	48022c08 	.word	0x48022c08
 8003b24:	48022c1c 	.word	0x48022c1c
 8003b28:	48022c30 	.word	0x48022c30
 8003b2c:	48022c44 	.word	0x48022c44
 8003b30:	48022c58 	.word	0x48022c58
 8003b34:	48022c6c 	.word	0x48022c6c
 8003b38:	48022c80 	.word	0x48022c80
 8003b3c:	48022c94 	.word	0x48022c94
 8003b40:	58025408 	.word	0x58025408
 8003b44:	5802541c 	.word	0x5802541c
 8003b48:	58025430 	.word	0x58025430
 8003b4c:	58025444 	.word	0x58025444
 8003b50:	58025458 	.word	0x58025458
 8003b54:	5802546c 	.word	0x5802546c
 8003b58:	58025480 	.word	0x58025480
 8003b5c:	58025494 	.word	0x58025494

08003b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a42      	ldr	r2, [pc, #264]	; (8003c78 <DMA_CalcBaseAndBitshift+0x118>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d04a      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a41      	ldr	r2, [pc, #260]	; (8003c7c <DMA_CalcBaseAndBitshift+0x11c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d045      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a3f      	ldr	r2, [pc, #252]	; (8003c80 <DMA_CalcBaseAndBitshift+0x120>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d040      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3e      	ldr	r2, [pc, #248]	; (8003c84 <DMA_CalcBaseAndBitshift+0x124>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d03b      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <DMA_CalcBaseAndBitshift+0x128>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d036      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a3b      	ldr	r2, [pc, #236]	; (8003c8c <DMA_CalcBaseAndBitshift+0x12c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d031      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <DMA_CalcBaseAndBitshift+0x130>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d02c      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <DMA_CalcBaseAndBitshift+0x134>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d027      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a36      	ldr	r2, [pc, #216]	; (8003c98 <DMA_CalcBaseAndBitshift+0x138>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d022      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a35      	ldr	r2, [pc, #212]	; (8003c9c <DMA_CalcBaseAndBitshift+0x13c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d01d      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a33      	ldr	r2, [pc, #204]	; (8003ca0 <DMA_CalcBaseAndBitshift+0x140>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d018      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <DMA_CalcBaseAndBitshift+0x144>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x148>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00e      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <DMA_CalcBaseAndBitshift+0x14c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d009      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x150>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x154>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <DMA_CalcBaseAndBitshift+0xac>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <DMA_CalcBaseAndBitshift+0xae>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d024      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3b10      	subs	r3, #16
 8003c1a:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <DMA_CalcBaseAndBitshift+0x158>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <DMA_CalcBaseAndBitshift+0x15c>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d908      	bls.n	8003c4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <DMA_CalcBaseAndBitshift+0x160>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	1d1a      	adds	r2, r3, #4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	659a      	str	r2, [r3, #88]	; 0x58
 8003c4a:	e00d      	b.n	8003c68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <DMA_CalcBaseAndBitshift+0x160>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5a:	e005      	b.n	8003c68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
 8003cb8:	aaaaaaab 	.word	0xaaaaaaab
 8003cbc:	0800ac58 	.word	0x0800ac58
 8003cc0:	fffffc00 	.word	0xfffffc00

08003cc4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d120      	bne.n	8003d1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d858      	bhi.n	8003d92 <DMA_CheckFifoParam+0xce>
 8003ce0:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <DMA_CheckFifoParam+0x24>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003d0b 	.word	0x08003d0b
 8003cf0:	08003cf9 	.word	0x08003cf9
 8003cf4:	08003d93 	.word	0x08003d93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d048      	beq.n	8003d96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d08:	e045      	b.n	8003d96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d12:	d142      	bne.n	8003d9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d18:	e03f      	b.n	8003d9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d22:	d123      	bne.n	8003d6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d838      	bhi.n	8003d9e <DMA_CheckFifoParam+0xda>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <DMA_CheckFifoParam+0x70>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d45 	.word	0x08003d45
 8003d38:	08003d4b 	.word	0x08003d4b
 8003d3c:	08003d45 	.word	0x08003d45
 8003d40:	08003d5d 	.word	0x08003d5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
        break;
 8003d48:	e030      	b.n	8003dac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d025      	beq.n	8003da2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d5a:	e022      	b.n	8003da2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d6a:	e01c      	b.n	8003da6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d902      	bls.n	8003d7a <DMA_CheckFifoParam+0xb6>
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d003      	beq.n	8003d80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d78:	e018      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d7e:	e015      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8003d90:	e00b      	b.n	8003daa <DMA_CheckFifoParam+0xe6>
        break;
 8003d92:	bf00      	nop
 8003d94:	e00a      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
        break;
 8003d96:	bf00      	nop
 8003d98:	e008      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e006      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e004      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
        break;
 8003da2:	bf00      	nop
 8003da4:	e002      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
        break;
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
    break;
 8003daa:	bf00      	nop
    }
  }

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop

08003dbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a38      	ldr	r2, [pc, #224]	; (8003eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a36      	ldr	r2, [pc, #216]	; (8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a35      	ldr	r2, [pc, #212]	; (8003eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a33      	ldr	r2, [pc, #204]	; (8003ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a32      	ldr	r2, [pc, #200]	; (8003ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01a      	beq.n	8003e5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3b08      	subs	r3, #8
 8003e2c:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	461a      	mov	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a24      	ldr	r2, [pc, #144]	; (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2201      	movs	r2, #1
 8003e52:	409a      	lsls	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e58:	e024      	b.n	8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3b10      	subs	r3, #16
 8003e62:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d806      	bhi.n	8003e82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d902      	bls.n	8003e82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a16      	ldr	r2, [pc, #88]	; (8003eec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	58025408 	.word	0x58025408
 8003eb4:	5802541c 	.word	0x5802541c
 8003eb8:	58025430 	.word	0x58025430
 8003ebc:	58025444 	.word	0x58025444
 8003ec0:	58025458 	.word	0x58025458
 8003ec4:	5802546c 	.word	0x5802546c
 8003ec8:	58025480 	.word	0x58025480
 8003ecc:	58025494 	.word	0x58025494
 8003ed0:	cccccccd 	.word	0xcccccccd
 8003ed4:	16009600 	.word	0x16009600
 8003ed8:	58025880 	.word	0x58025880
 8003edc:	aaaaaaab 	.word	0xaaaaaaab
 8003ee0:	400204b8 	.word	0x400204b8
 8003ee4:	4002040f 	.word	0x4002040f
 8003ee8:	10008200 	.word	0x10008200
 8003eec:	40020880 	.word	0x40020880

08003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04a      	beq.n	8003f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d847      	bhi.n	8003f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d022      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a24      	ldr	r2, [pc, #144]	; (8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d01d      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	461a      	mov	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f78:	671a      	str	r2, [r3, #112]	; 0x70
 8003f7a:	e009      	b.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	461a      	mov	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f8e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	58025408 	.word	0x58025408
 8003fac:	5802541c 	.word	0x5802541c
 8003fb0:	58025430 	.word	0x58025430
 8003fb4:	58025444 	.word	0x58025444
 8003fb8:	58025458 	.word	0x58025458
 8003fbc:	5802546c 	.word	0x5802546c
 8003fc0:	58025480 	.word	0x58025480
 8003fc4:	58025494 	.word	0x58025494
 8003fc8:	1600963f 	.word	0x1600963f
 8003fcc:	58025940 	.word	0x58025940
 8003fd0:	1000823f 	.word	0x1000823f
 8003fd4:	40020940 	.word	0x40020940

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fe6:	4b89      	ldr	r3, [pc, #548]	; (800420c <HAL_GPIO_Init+0x234>)
 8003fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fea:	e194      	b.n	8004316 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8186 	beq.w	8004310 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d005      	beq.n	800401c <HAL_GPIO_Init+0x44>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d130      	bne.n	800407e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2203      	movs	r2, #3
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004052:	2201      	movs	r2, #1
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 0201 	and.w	r2, r3, #1
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b03      	cmp	r3, #3
 8004088:	d017      	beq.n	80040ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	2203      	movs	r2, #3
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4013      	ands	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d123      	bne.n	800410e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	220f      	movs	r2, #15
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	08da      	lsrs	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3208      	adds	r2, #8
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	2203      	movs	r2, #3
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0203 	and.w	r2, r3, #3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80e0 	beq.w	8004310 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004150:	4b2f      	ldr	r3, [pc, #188]	; (8004210 <HAL_GPIO_Init+0x238>)
 8004152:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004156:	4a2e      	ldr	r2, [pc, #184]	; (8004210 <HAL_GPIO_Init+0x238>)
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_GPIO_Init+0x238>)
 8004162:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800416e:	4a29      	ldr	r2, [pc, #164]	; (8004214 <HAL_GPIO_Init+0x23c>)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3302      	adds	r3, #2
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a20      	ldr	r2, [pc, #128]	; (8004218 <HAL_GPIO_Init+0x240>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d052      	beq.n	8004240 <HAL_GPIO_Init+0x268>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <HAL_GPIO_Init+0x244>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_GPIO_Init+0x22e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_GPIO_Init+0x248>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02b      	beq.n	8004202 <HAL_GPIO_Init+0x22a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_GPIO_Init+0x24c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d025      	beq.n	80041fe <HAL_GPIO_Init+0x226>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_GPIO_Init+0x250>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01f      	beq.n	80041fa <HAL_GPIO_Init+0x222>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <HAL_GPIO_Init+0x254>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d019      	beq.n	80041f6 <HAL_GPIO_Init+0x21e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1a      	ldr	r2, [pc, #104]	; (8004230 <HAL_GPIO_Init+0x258>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_GPIO_Init+0x21a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <HAL_GPIO_Init+0x25c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00d      	beq.n	80041ee <HAL_GPIO_Init+0x216>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_GPIO_Init+0x260>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <HAL_GPIO_Init+0x212>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <HAL_GPIO_Init+0x264>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <HAL_GPIO_Init+0x20e>
 80041e2:	2309      	movs	r3, #9
 80041e4:	e02d      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 80041e6:	230a      	movs	r3, #10
 80041e8:	e02b      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 80041ea:	2308      	movs	r3, #8
 80041ec:	e029      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 80041ee:	2307      	movs	r3, #7
 80041f0:	e027      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 80041f2:	2306      	movs	r3, #6
 80041f4:	e025      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 80041f6:	2305      	movs	r3, #5
 80041f8:	e023      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 80041fa:	2304      	movs	r3, #4
 80041fc:	e021      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 80041fe:	2303      	movs	r3, #3
 8004200:	e01f      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 8004202:	2302      	movs	r3, #2
 8004204:	e01d      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 8004206:	2301      	movs	r3, #1
 8004208:	e01b      	b.n	8004242 <HAL_GPIO_Init+0x26a>
 800420a:	bf00      	nop
 800420c:	58000080 	.word	0x58000080
 8004210:	58024400 	.word	0x58024400
 8004214:	58000400 	.word	0x58000400
 8004218:	58020000 	.word	0x58020000
 800421c:	58020400 	.word	0x58020400
 8004220:	58020800 	.word	0x58020800
 8004224:	58020c00 	.word	0x58020c00
 8004228:	58021000 	.word	0x58021000
 800422c:	58021400 	.word	0x58021400
 8004230:	58021800 	.word	0x58021800
 8004234:	58021c00 	.word	0x58021c00
 8004238:	58022000 	.word	0x58022000
 800423c:	58022400 	.word	0x58022400
 8004240:	2300      	movs	r3, #0
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	f002 0203 	and.w	r2, r2, #3
 8004248:	0092      	lsls	r2, r2, #2
 800424a:	4093      	lsls	r3, r2
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004252:	4938      	ldr	r1, [pc, #224]	; (8004334 <HAL_GPIO_Init+0x35c>)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	3302      	adds	r3, #2
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3301      	adds	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f ae63 	bne.w	8003fec <HAL_GPIO_Init+0x14>
  }
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	3724      	adds	r7, #36	; 0x24
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	58000400 	.word	0x58000400

08004338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]
 8004344:	4613      	mov	r3, r2
 8004346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004348:	787b      	ldrb	r3, [r7, #1]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004354:	e003      	b.n	800435e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004356:	887b      	ldrh	r3, [r7, #2]
 8004358:	041a      	lsls	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	619a      	str	r2, [r3, #24]
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800437c:	887a      	ldrh	r2, [r7, #2]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4013      	ands	r3, r2
 8004382:	041a      	lsls	r2, r3, #16
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	43d9      	mvns	r1, r3
 8004388:	887b      	ldrh	r3, [r7, #2]
 800438a:	400b      	ands	r3, r1
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	619a      	str	r2, [r3, #24]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fc fccb 	bl	8000d60 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80043dc:	4b29      	ldr	r3, [pc, #164]	; (8004484 <HAL_PWREx_ConfigSupply+0xb0>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	2b06      	cmp	r3, #6
 80043e6:	d00a      	beq.n	80043fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043e8:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_PWREx_ConfigSupply+0xb0>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d001      	beq.n	80043fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e040      	b.n	800447c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e03e      	b.n	800447c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_PWREx_ConfigSupply+0xb0>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004406:	491f      	ldr	r1, [pc, #124]	; (8004484 <HAL_PWREx_ConfigSupply+0xb0>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4313      	orrs	r3, r2
 800440c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800440e:	f7fd fb0d 	bl	8001a2c <HAL_GetTick>
 8004412:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004414:	e009      	b.n	800442a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004416:	f7fd fb09 	bl	8001a2c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004424:	d901      	bls.n	800442a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e028      	b.n	800447c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <HAL_PWREx_ConfigSupply+0xb0>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004436:	d1ee      	bne.n	8004416 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b1e      	cmp	r3, #30
 800443c:	d008      	beq.n	8004450 <HAL_PWREx_ConfigSupply+0x7c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b2e      	cmp	r3, #46	; 0x2e
 8004442:	d005      	beq.n	8004450 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b1d      	cmp	r3, #29
 8004448:	d002      	beq.n	8004450 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b2d      	cmp	r3, #45	; 0x2d
 800444e:	d114      	bne.n	800447a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004450:	f7fd faec 	bl	8001a2c <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004456:	e009      	b.n	800446c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004458:	f7fd fae8 	bl	8001a2c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004466:	d901      	bls.n	800446c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e007      	b.n	800447c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_PWREx_ConfigSupply+0xb0>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d1ee      	bne.n	8004458 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	58024800 	.word	0x58024800

08004488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f000 bc1f 	b.w	8004cda <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80b3 	beq.w	8004610 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b95      	ldr	r3, [pc, #596]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044b4:	4b92      	ldr	r3, [pc, #584]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d007      	beq.n	80044d0 <HAL_RCC_OscConfig+0x48>
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	2b18      	cmp	r3, #24
 80044c4:	d112      	bne.n	80044ec <HAL_RCC_OscConfig+0x64>
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d10d      	bne.n	80044ec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	4b8b      	ldr	r3, [pc, #556]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8098 	beq.w	800460e <HAL_RCC_OscConfig+0x186>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8093 	bne.w	800460e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e3f6      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x7c>
 80044f6:	4b82      	ldr	r3, [pc, #520]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a81      	ldr	r2, [pc, #516]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e058      	b.n	80045b6 <HAL_RCC_OscConfig+0x12e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d112      	bne.n	8004532 <HAL_RCC_OscConfig+0xaa>
 800450c:	4b7c      	ldr	r3, [pc, #496]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a7b      	ldr	r2, [pc, #492]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b79      	ldr	r3, [pc, #484]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a78      	ldr	r2, [pc, #480]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800451e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b76      	ldr	r3, [pc, #472]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a75      	ldr	r2, [pc, #468]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800452a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e041      	b.n	80045b6 <HAL_RCC_OscConfig+0x12e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453a:	d112      	bne.n	8004562 <HAL_RCC_OscConfig+0xda>
 800453c:	4b70      	ldr	r3, [pc, #448]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a6f      	ldr	r2, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b6d      	ldr	r3, [pc, #436]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a6c      	ldr	r2, [pc, #432]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800454e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a69      	ldr	r2, [pc, #420]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e029      	b.n	80045b6 <HAL_RCC_OscConfig+0x12e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800456a:	d112      	bne.n	8004592 <HAL_RCC_OscConfig+0x10a>
 800456c:	4b64      	ldr	r3, [pc, #400]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a63      	ldr	r2, [pc, #396]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b61      	ldr	r3, [pc, #388]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a60      	ldr	r2, [pc, #384]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800457e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b5e      	ldr	r3, [pc, #376]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	e011      	b.n	80045b6 <HAL_RCC_OscConfig+0x12e>
 8004592:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a5a      	ldr	r2, [pc, #360]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b58      	ldr	r3, [pc, #352]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a57      	ldr	r2, [pc, #348]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80045a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b55      	ldr	r3, [pc, #340]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a54      	ldr	r2, [pc, #336]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80045b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d013      	beq.n	80045e6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fd fa35 	bl	8001a2c <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c6:	f7fd fa31 	bl	8001a2c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b64      	cmp	r3, #100	; 0x64
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e380      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d8:	4b49      	ldr	r3, [pc, #292]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x13e>
 80045e4:	e014      	b.n	8004610 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd fa21 	bl	8001a2c <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ee:	f7fd fa1d 	bl	8001a2c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	; 0x64
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e36c      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004600:	4b3f      	ldr	r3, [pc, #252]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x166>
 800460c:	e000      	b.n	8004610 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 808c 	beq.w	8004736 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004626:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_RCC_OscConfig+0x1bc>
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b18      	cmp	r3, #24
 8004638:	d137      	bne.n	80046aa <HAL_RCC_OscConfig+0x222>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d132      	bne.n	80046aa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004644:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x1d4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e33e      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800465c:	4b28      	ldr	r3, [pc, #160]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 0219 	bic.w	r2, r3, #25
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4925      	ldr	r1, [pc, #148]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fd f9dd 	bl	8001a2c <HAL_GetTick>
 8004672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004676:	f7fd f9d9 	bl	8001a2c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e328      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004688:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	4917      	ldr	r1, [pc, #92]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a8:	e045      	b.n	8004736 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d028      	beq.n	8004704 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 0219 	bic.w	r2, r3, #25
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4910      	ldr	r1, [pc, #64]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd f9b2 	bl	8001a2c <HAL_GetTick>
 80046c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fd f9ae 	bl	8001a2c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e2fd      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	4901      	ldr	r1, [pc, #4]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
 80046fe:	e01a      	b.n	8004736 <HAL_RCC_OscConfig+0x2ae>
 8004700:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004704:	4b97      	ldr	r3, [pc, #604]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a96      	ldr	r2, [pc, #600]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd f98c 	bl	8001a2c <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004718:	f7fd f988 	bl	8001a2c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e2d7      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800472a:	4b8e      	ldr	r3, [pc, #568]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d06a      	beq.n	8004818 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004742:	4b88      	ldr	r3, [pc, #544]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800474c:	4b85      	ldr	r3, [pc, #532]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d007      	beq.n	8004768 <HAL_RCC_OscConfig+0x2e0>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b18      	cmp	r3, #24
 800475c:	d11b      	bne.n	8004796 <HAL_RCC_OscConfig+0x30e>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d116      	bne.n	8004796 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004768:	4b7e      	ldr	r3, [pc, #504]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x2f8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e2ac      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004780:	4b78      	ldr	r3, [pc, #480]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	4975      	ldr	r1, [pc, #468]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004794:	e040      	b.n	8004818 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d023      	beq.n	80047e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800479e:	4b71      	ldr	r3, [pc, #452]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a70      	ldr	r2, [pc, #448]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fd f93f 	bl	8001a2c <HAL_GetTick>
 80047ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047b2:	f7fd f93b 	bl	8001a2c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e28a      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047c4:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047d0:	4b64      	ldr	r3, [pc, #400]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	4961      	ldr	r1, [pc, #388]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60cb      	str	r3, [r1, #12]
 80047e4:	e018      	b.n	8004818 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047e6:	4b5f      	ldr	r3, [pc, #380]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5e      	ldr	r2, [pc, #376]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80047ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f2:	f7fd f91b 	bl	8001a2c <HAL_GetTick>
 80047f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047fa:	f7fd f917 	bl	8001a2c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e266      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800480c:	4b55      	ldr	r3, [pc, #340]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d036      	beq.n	8004892 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d019      	beq.n	8004860 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800482c:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800482e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004830:	4a4c      	ldr	r2, [pc, #304]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd f8f8 	bl	8001a2c <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004840:	f7fd f8f4 	bl	8001a2c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e243      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004852:	4b44      	ldr	r3, [pc, #272]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x3b8>
 800485e:	e018      	b.n	8004892 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004860:	4b40      	ldr	r3, [pc, #256]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004864:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fd f8de 	bl	8001a2c <HAL_GetTick>
 8004870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004874:	f7fd f8da 	bl	8001a2c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e229      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004886:	4b37      	ldr	r3, [pc, #220]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d036      	beq.n	800490c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d019      	beq.n	80048da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2e      	ldr	r2, [pc, #184]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80048ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048b2:	f7fd f8bb 	bl	8001a2c <HAL_GetTick>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ba:	f7fd f8b7 	bl	8001a2c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e206      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x432>
 80048d8:	e018      	b.n	800490c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a21      	ldr	r2, [pc, #132]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 80048e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048e6:	f7fd f8a1 	bl	8001a2c <HAL_GetTick>
 80048ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ee:	f7fd f89d 	bl	8001a2c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e1ec      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004900:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80af 	beq.w	8004a78 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <HAL_RCC_OscConfig+0x4e0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <HAL_RCC_OscConfig+0x4e0>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004926:	f7fd f881 	bl	8001a2c <HAL_GetTick>
 800492a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7fd f87d 	bl	8001a2c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b64      	cmp	r3, #100	; 0x64
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e1cc      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCC_OscConfig+0x4e0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x4e4>
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a02      	ldr	r2, [pc, #8]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e05b      	b.n	8004a1a <HAL_RCC_OscConfig+0x592>
 8004962:	bf00      	nop
 8004964:	58024400 	.word	0x58024400
 8004968:	58024800 	.word	0x58024800
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d112      	bne.n	800499a <HAL_RCC_OscConfig+0x512>
 8004974:	4b9d      	ldr	r3, [pc, #628]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a9c      	ldr	r2, [pc, #624]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
 8004980:	4b9a      	ldr	r3, [pc, #616]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	4a99      	ldr	r2, [pc, #612]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498a:	6713      	str	r3, [r2, #112]	; 0x70
 800498c:	4b97      	ldr	r3, [pc, #604]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a96      	ldr	r2, [pc, #600]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004992:	f023 0304 	bic.w	r3, r3, #4
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
 8004998:	e03f      	b.n	8004a1a <HAL_RCC_OscConfig+0x592>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d112      	bne.n	80049c8 <HAL_RCC_OscConfig+0x540>
 80049a2:	4b92      	ldr	r3, [pc, #584]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a91      	ldr	r2, [pc, #580]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049a8:	f043 0304 	orr.w	r3, r3, #4
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
 80049ae:	4b8f      	ldr	r3, [pc, #572]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a8e      	ldr	r2, [pc, #568]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ba:	4b8c      	ldr	r3, [pc, #560]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	4a8b      	ldr	r2, [pc, #556]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6713      	str	r3, [r2, #112]	; 0x70
 80049c6:	e028      	b.n	8004a1a <HAL_RCC_OscConfig+0x592>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b85      	cmp	r3, #133	; 0x85
 80049ce:	d112      	bne.n	80049f6 <HAL_RCC_OscConfig+0x56e>
 80049d0:	4b86      	ldr	r3, [pc, #536]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a85      	ldr	r2, [pc, #532]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049d6:	f043 0304 	orr.w	r3, r3, #4
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	4b83      	ldr	r3, [pc, #524]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4a82      	ldr	r2, [pc, #520]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70
 80049e8:	4b80      	ldr	r3, [pc, #512]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	4a7f      	ldr	r2, [pc, #508]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6713      	str	r3, [r2, #112]	; 0x70
 80049f4:	e011      	b.n	8004a1a <HAL_RCC_OscConfig+0x592>
 80049f6:	4b7d      	ldr	r3, [pc, #500]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	4a7c      	ldr	r2, [pc, #496]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	6713      	str	r3, [r2, #112]	; 0x70
 8004a02:	4b7a      	ldr	r3, [pc, #488]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a79      	ldr	r2, [pc, #484]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0e:	4b77      	ldr	r3, [pc, #476]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a76      	ldr	r2, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fd f803 	bl	8001a2c <HAL_GetTick>
 8004a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fc ffff 	bl	8001a2c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e14c      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a40:	4b6a      	ldr	r3, [pc, #424]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ee      	beq.n	8004a2a <HAL_RCC_OscConfig+0x5a2>
 8004a4c:	e014      	b.n	8004a78 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fc ffed 	bl	8001a2c <HAL_GetTick>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fc ffe9 	bl	8001a2c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e136      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a6c:	4b5f      	ldr	r3, [pc, #380]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ee      	bne.n	8004a56 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 812b 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a82:	4b5a      	ldr	r3, [pc, #360]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a8a:	2b18      	cmp	r3, #24
 8004a8c:	f000 80bb 	beq.w	8004c06 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f040 8095 	bne.w	8004bc4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b54      	ldr	r3, [pc, #336]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a53      	ldr	r2, [pc, #332]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fc ffc1 	bl	8001a2c <HAL_GetTick>
 8004aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fc ffbd 	bl	8001a2c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e10c      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ac0:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004acc:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad0:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_OscConfig+0x768>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	4942      	ldr	r1, [pc, #264]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	628b      	str	r3, [r1, #40]	; 0x28
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	3b01      	subs	r3, #1
 8004aec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	3b01      	subs	r3, #1
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	3b01      	subs	r3, #1
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	061b      	lsls	r3, r3, #24
 8004b12:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b16:	4935      	ldr	r1, [pc, #212]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b1c:	4b33      	ldr	r3, [pc, #204]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a32      	ldr	r2, [pc, #200]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b28:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b34:	00d2      	lsls	r2, r2, #3
 8004b36:	492d      	ldr	r1, [pc, #180]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	f023 020c 	bic.w	r2, r3, #12
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	4928      	ldr	r1, [pc, #160]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	f023 0202 	bic.w	r2, r3, #2
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	4924      	ldr	r1, [pc, #144]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b60:	4b22      	ldr	r3, [pc, #136]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6c:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b84:	4b19      	ldr	r3, [pc, #100]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a18      	ldr	r2, [pc, #96]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fc ff46 	bl	8001a2c <HAL_GetTick>
 8004ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fc ff42 	bl	8001a2c <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e091      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x71c>
 8004bc2:	e089      	b.n	8004cd8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <HAL_RCC_OscConfig+0x764>)
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fc ff2c 	bl	8001a2c <HAL_GetTick>
 8004bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd6:	e00f      	b.n	8004bf8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fc ff28 	bl	8001a2c <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d908      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e077      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	fffffc0c 	.word	0xfffffc0c
 8004bf4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf8:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e9      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x750>
 8004c04:	e068      	b.n	8004cd8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d031      	beq.n	8004c7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f003 0203 	and.w	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d12a      	bne.n	8004c7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d122      	bne.n	8004c7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d11a      	bne.n	8004c7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d111      	bne.n	8004c7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d108      	bne.n	8004c7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	0e1b      	lsrs	r3, r3, #24
 8004c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e02b      	b.n	8004cda <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	08db      	lsrs	r3, r3, #3
 8004c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c8c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d01f      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ca4:	f7fc fec2 	bl	8001a2c <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004caa:	bf00      	nop
 8004cac:	f7fc febe 	bl	8001a2c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d0f9      	beq.n	8004cac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCC_OscConfig+0x860>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cc4:	00d2      	lsls	r2, r2, #3
 8004cc6:	4907      	ldr	r1, [pc, #28]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_RCC_OscConfig+0x85c>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3730      	adds	r7, #48	; 0x30
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	ffff0007 	.word	0xffff0007

08004cec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e19c      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d00:	4b8a      	ldr	r3, [pc, #552]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d910      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b87      	ldr	r3, [pc, #540]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 020f 	bic.w	r2, r3, #15
 8004d16:	4985      	ldr	r1, [pc, #532]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b83      	ldr	r3, [pc, #524]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e184      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	4b7b      	ldr	r3, [pc, #492]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d908      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d4c:	4b78      	ldr	r3, [pc, #480]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	4975      	ldr	r1, [pc, #468]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d010      	beq.n	8004d8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	4b70      	ldr	r3, [pc, #448]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d908      	bls.n	8004d8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d7a:	4b6d      	ldr	r3, [pc, #436]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	496a      	ldr	r1, [pc, #424]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	4b64      	ldr	r3, [pc, #400]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d908      	bls.n	8004dba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004da8:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	495e      	ldr	r1, [pc, #376]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d010      	beq.n	8004de8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	4b59      	ldr	r3, [pc, #356]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d908      	bls.n	8004de8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dd6:	4b56      	ldr	r3, [pc, #344]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	4953      	ldr	r1, [pc, #332]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	4b4d      	ldr	r3, [pc, #308]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d908      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f023 020f 	bic.w	r2, r3, #15
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4947      	ldr	r1, [pc, #284]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d055      	beq.n	8004ece <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e22:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4940      	ldr	r1, [pc, #256]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e3c:	4b3c      	ldr	r3, [pc, #240]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d121      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0f6      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e54:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d115      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0ea      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e6c:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0de      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7c:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0d6      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e8c:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f023 0207 	bic.w	r2, r3, #7
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4925      	ldr	r1, [pc, #148]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9e:	f7fc fdc5 	bl	8001a2c <HAL_GetTick>
 8004ea2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea6:	f7fc fdc1 	bl	8001a2c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0be      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebc:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d1eb      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d010      	beq.n	8004efc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d208      	bcs.n	8004efc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f023 020f 	bic.w	r2, r3, #15
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	490e      	ldr	r1, [pc, #56]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d214      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f023 020f 	bic.w	r2, r3, #15
 8004f12:	4906      	ldr	r1, [pc, #24]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e086      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
 8004f2c:	52002000 	.word	0x52002000
 8004f30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d010      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d208      	bcs.n	8004f62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f50:	4b3c      	ldr	r3, [pc, #240]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	4939      	ldr	r1, [pc, #228]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	4b34      	ldr	r3, [pc, #208]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d208      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	492e      	ldr	r1, [pc, #184]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d208      	bcs.n	8004fbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	4922      	ldr	r1, [pc, #136]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d208      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fda:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	4917      	ldr	r1, [pc, #92]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004fec:	f000 f834 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	4912      	ldr	r1, [pc, #72]	; (8005048 <HAL_RCC_ClockConfig+0x35c>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	4a0d      	ldr	r2, [pc, #52]	; (8005048 <HAL_RCC_ClockConfig+0x35c>)
 8005014:	5cd3      	ldrb	r3, [r2, r3]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x360>)
 8005022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005024:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <HAL_RCC_ClockConfig+0x364>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800502a:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_RCC_ClockConfig+0x368>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fc fcb2 	bl	8001998 <HAL_InitTick>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	0800ac48 	.word	0x0800ac48
 800504c:	24000004 	.word	0x24000004
 8005050:	24000000 	.word	0x24000000
 8005054:	24000008 	.word	0x24000008

08005058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800505e:	4bb3      	ldr	r3, [pc, #716]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005066:	2b18      	cmp	r3, #24
 8005068:	f200 8155 	bhi.w	8005316 <HAL_RCC_GetSysClockFreq+0x2be>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <HAL_RCC_GetSysClockFreq+0x1c>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	080050d9 	.word	0x080050d9
 8005078:	08005317 	.word	0x08005317
 800507c:	08005317 	.word	0x08005317
 8005080:	08005317 	.word	0x08005317
 8005084:	08005317 	.word	0x08005317
 8005088:	08005317 	.word	0x08005317
 800508c:	08005317 	.word	0x08005317
 8005090:	08005317 	.word	0x08005317
 8005094:	080050ff 	.word	0x080050ff
 8005098:	08005317 	.word	0x08005317
 800509c:	08005317 	.word	0x08005317
 80050a0:	08005317 	.word	0x08005317
 80050a4:	08005317 	.word	0x08005317
 80050a8:	08005317 	.word	0x08005317
 80050ac:	08005317 	.word	0x08005317
 80050b0:	08005317 	.word	0x08005317
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005317 	.word	0x08005317
 80050bc:	08005317 	.word	0x08005317
 80050c0:	08005317 	.word	0x08005317
 80050c4:	08005317 	.word	0x08005317
 80050c8:	08005317 	.word	0x08005317
 80050cc:	08005317 	.word	0x08005317
 80050d0:	08005317 	.word	0x08005317
 80050d4:	0800510b 	.word	0x0800510b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d8:	4b94      	ldr	r3, [pc, #592]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050e4:	4b91      	ldr	r3, [pc, #580]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	4a90      	ldr	r2, [pc, #576]	; (8005330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050f6:	e111      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050f8:	4b8d      	ldr	r3, [pc, #564]	; (8005330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050fa:	61bb      	str	r3, [r7, #24]
      break;
 80050fc:	e10e      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050fe:	4b8d      	ldr	r3, [pc, #564]	; (8005334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005100:	61bb      	str	r3, [r7, #24]
      break;
 8005102:	e10b      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005104:	4b8c      	ldr	r3, [pc, #560]	; (8005338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005106:	61bb      	str	r3, [r7, #24]
      break;
 8005108:	e108      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800510a:	4b88      	ldr	r3, [pc, #544]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005114:	4b85      	ldr	r3, [pc, #532]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800511e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005120:	4b82      	ldr	r3, [pc, #520]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800512a:	4b80      	ldr	r3, [pc, #512]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	08db      	lsrs	r3, r3, #3
 8005130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80e1 	beq.w	8005310 <HAL_RCC_GetSysClockFreq+0x2b8>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b02      	cmp	r3, #2
 8005152:	f000 8083 	beq.w	800525c <HAL_RCC_GetSysClockFreq+0x204>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b02      	cmp	r3, #2
 800515a:	f200 80a1 	bhi.w	80052a0 <HAL_RCC_GetSysClockFreq+0x248>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x114>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d056      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x1c0>
 800516a:	e099      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800516c:	4b6f      	ldr	r3, [pc, #444]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02d      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005178:	4b6c      	ldr	r3, [pc, #432]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	08db      	lsrs	r3, r3, #3
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	4a6b      	ldr	r2, [pc, #428]	; (8005330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
 8005188:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b62      	ldr	r3, [pc, #392]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051d2:	e087      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005340 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e6:	4b51      	ldr	r3, [pc, #324]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005216:	e065      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005344 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522a:	4b40      	ldr	r3, [pc, #256]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523a:	ed97 6a02 	vldr	s12, [r7, #8]
 800523e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800525a:	e043      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005348 <HAL_RCC_GetSysClockFreq+0x2f0>
 800526a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526e:	4b2f      	ldr	r3, [pc, #188]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005282:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800529e:	e021      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005344 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b2:	4b1e      	ldr	r3, [pc, #120]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	0a5b      	lsrs	r3, r3, #9
 80052ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ee:	3301      	adds	r3, #1
 80052f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005308:	ee17 3a90 	vmov	r3, s15
 800530c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800530e:	e005      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	61bb      	str	r3, [r7, #24]
      break;
 8005314:	e002      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005318:	61bb      	str	r3, [r7, #24]
      break;
 800531a:	bf00      	nop
  }

  return sysclockfreq;
 800531c:	69bb      	ldr	r3, [r7, #24]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3724      	adds	r7, #36	; 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
 8005330:	03d09000 	.word	0x03d09000
 8005334:	003d0900 	.word	0x003d0900
 8005338:	007a1200 	.word	0x007a1200
 800533c:	46000000 	.word	0x46000000
 8005340:	4c742400 	.word	0x4c742400
 8005344:	4a742400 	.word	0x4a742400
 8005348:	4af42400 	.word	0x4af42400

0800534c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005352:	f7ff fe81 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8005356:	4602      	mov	r2, r0
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <HAL_RCC_GetHCLKFreq+0x50>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	490f      	ldr	r1, [pc, #60]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005364:	5ccb      	ldrb	r3, [r1, r3]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <HAL_RCC_GetHCLKFreq+0x50>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	fa22 f303 	lsr.w	r3, r2, r3
 8005386:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005388:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800538a:	4a07      	ldr	r2, [pc, #28]	; (80053a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	58024400 	.word	0x58024400
 80053a0:	0800ac48 	.word	0x0800ac48
 80053a4:	24000004 	.word	0x24000004
 80053a8:	24000000 	.word	0x24000000

080053ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80053b0:	f7ff ffcc 	bl	800534c <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4904      	ldr	r1, [pc, #16]	; (80053d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	58024400 	.word	0x58024400
 80053d4:	0800ac48 	.word	0x0800ac48

080053d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80053dc:	f7ff ffb6 	bl	800534c <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4904      	ldr	r1, [pc, #16]	; (8005400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	58024400 	.word	0x58024400
 8005400:	0800ac48 	.word	0x0800ac48

08005404 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005408:	b0c8      	sub	sp, #288	; 0x120
 800540a:	af00      	add	r7, sp, #0
 800540c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005410:	2300      	movs	r3, #0
 8005412:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005416:	2300      	movs	r3, #0
 8005418:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800541c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005428:	2500      	movs	r5, #0
 800542a:	ea54 0305 	orrs.w	r3, r4, r5
 800542e:	d049      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800543a:	d02f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800543c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005440:	d828      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005446:	d01a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544c:	d822      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005456:	d007      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005458:	e01c      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545a:	4ba7      	ldr	r3, [pc, #668]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	4aa6      	ldr	r2, [pc, #664]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005464:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005466:	e01a      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546c:	3308      	adds	r3, #8
 800546e:	2102      	movs	r1, #2
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fc43 	bl	8006cfc <RCCEx_PLL2_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800547c:	e00f      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	3328      	adds	r3, #40	; 0x28
 8005484:	2102      	movs	r1, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fcea 	bl	8006e60 <RCCEx_PLL3_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005492:	e004      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800549a:	e000      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800549c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054a6:	4b94      	ldr	r3, [pc, #592]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b4:	4a90      	ldr	r2, [pc, #576]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6513      	str	r3, [r2, #80]	; 0x50
 80054ba:	e003      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80054d0:	f04f 0900 	mov.w	r9, #0
 80054d4:	ea58 0309 	orrs.w	r3, r8, r9
 80054d8:	d047      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d82a      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005501 	.word	0x08005501
 80054f0:	0800550f 	.word	0x0800550f
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005543 	.word	0x08005543
 80054fc:	08005543 	.word	0x08005543
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005500:	4b7d      	ldr	r3, [pc, #500]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	4a7c      	ldr	r2, [pc, #496]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800550c:	e01a      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005512:	3308      	adds	r3, #8
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f001 fbf0 	bl	8006cfc <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005522:	e00f      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005528:	3328      	adds	r3, #40	; 0x28
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fc97 	bl	8006e60 <RCCEx_PLL3_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005538:	e004      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800554c:	4b6a      	ldr	r3, [pc, #424]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	f023 0107 	bic.w	r1, r3, #7
 8005554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	4a67      	ldr	r2, [pc, #412]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800555c:	430b      	orrs	r3, r1
 800555e:	6513      	str	r3, [r2, #80]	; 0x50
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005566:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800556a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005576:	f04f 0b00 	mov.w	fp, #0
 800557a:	ea5a 030b 	orrs.w	r3, sl, fp
 800557e:	d054      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005586:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800558a:	d036      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800558c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005590:	d82f      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	d032      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559c:	d829      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800559e:	2bc0      	cmp	r3, #192	; 0xc0
 80055a0:	d02f      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80055a2:	2bc0      	cmp	r3, #192	; 0xc0
 80055a4:	d825      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d018      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d821      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d007      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80055b6:	e01c      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b8:	4b4f      	ldr	r3, [pc, #316]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	4a4e      	ldr	r2, [pc, #312]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055c4:	e01e      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	3308      	adds	r3, #8
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fb94 	bl	8006cfc <RCCEx_PLL2_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055da:	e013      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e0:	3328      	adds	r3, #40	; 0x28
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 fc3b 	bl	8006e60 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055f0:	e008      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80055f8:	e004      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055fa:	bf00      	nop
 80055fc:	e002      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055fe:	bf00      	nop
 8005600:	e000      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800560c:	4b3a      	ldr	r3, [pc, #232]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005610:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561a:	4a37      	ldr	r2, [pc, #220]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800561c:	430b      	orrs	r3, r1
 800561e:	6513      	str	r3, [r2, #80]	; 0x50
 8005620:	e003      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005626:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005636:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005640:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005644:	460b      	mov	r3, r1
 8005646:	4313      	orrs	r3, r2
 8005648:	d05c      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800564a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005654:	d03b      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005656:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800565a:	d834      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800565c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005660:	d037      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005666:	d82e      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005668:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800566c:	d033      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800566e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005672:	d828      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005678:	d01a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800567a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567e:	d822      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005688:	d007      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800568a:	e01c      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005698:	e01e      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800569a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569e:	3308      	adds	r3, #8
 80056a0:	2100      	movs	r1, #0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 fb2a 	bl	8006cfc <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80056ae:	e013      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b4:	3328      	adds	r3, #40	; 0x28
 80056b6:	2100      	movs	r1, #0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 fbd1 	bl	8006e60 <RCCEx_PLL3_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80056c4:	e008      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056cc:	e004      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80056ce:	bf00      	nop
 80056d0:	e002      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80056d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10d      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80056e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	4a02      	ldr	r2, [pc, #8]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6513      	str	r3, [r2, #80]	; 0x50
 80056f4:	e006      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80056f6:	bf00      	nop
 80056f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005700:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005714:	2300      	movs	r3, #0
 8005716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800571a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800571e:	460b      	mov	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	d03a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572a:	2b30      	cmp	r3, #48	; 0x30
 800572c:	d01f      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800572e:	2b30      	cmp	r3, #48	; 0x30
 8005730:	d819      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005732:	2b20      	cmp	r3, #32
 8005734:	d00c      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005736:	2b20      	cmp	r3, #32
 8005738:	d815      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d019      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800573e:	2b10      	cmp	r3, #16
 8005740:	d111      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005742:	4bae      	ldr	r3, [pc, #696]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	4aad      	ldr	r2, [pc, #692]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800574c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800574e:	e011      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005754:	3308      	adds	r3, #8
 8005756:	2102      	movs	r1, #2
 8005758:	4618      	mov	r0, r3
 800575a:	f001 facf 	bl	8006cfc <RCCEx_PLL2_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005764:	e006      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800576c:	e002      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800577c:	4b9f      	ldr	r3, [pc, #636]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800577e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005780:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	4a9c      	ldr	r2, [pc, #624]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800578c:	430b      	orrs	r3, r1
 800578e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005796:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80057a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	d051      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80057ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c4:	d035      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80057c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ca:	d82e      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057d0:	d031      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80057d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057d6:	d828      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057dc:	d01a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80057de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e2:	d822      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ec:	d007      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80057ee:	e01c      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b82      	ldr	r3, [pc, #520]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	4a81      	ldr	r2, [pc, #516]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057fc:	e01c      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	3308      	adds	r3, #8
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f001 fa78 	bl	8006cfc <RCCEx_PLL2_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005812:	e011      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005818:	3328      	adds	r3, #40	; 0x28
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f001 fb1f 	bl	8006e60 <RCCEx_PLL3_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005828:	e006      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005830:	e002      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005838:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005840:	4b6e      	ldr	r3, [pc, #440]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800584e:	4a6b      	ldr	r2, [pc, #428]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005850:	430b      	orrs	r3, r1
 8005852:	6513      	str	r3, [r2, #80]	; 0x50
 8005854:	e003      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005856:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800585a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800586a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005874:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d053      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800587e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005888:	d033      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800588a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800588e:	d82c      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005894:	d02f      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800589a:	d826      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800589c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058a0:	d02b      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80058a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058a6:	d820      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80058a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ac:	d012      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80058ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058b2:	d81a      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d022      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d115      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c2:	3308      	adds	r3, #8
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 fa18 	bl	8006cfc <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058d2:	e015      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d8:	3328      	adds	r3, #40	; 0x28
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 fabf 	bl	8006e60 <RCCEx_PLL3_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058e8:	e00a      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058f0:	e006      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058f2:	bf00      	nop
 80058f4:	e004      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058f6:	bf00      	nop
 80058f8:	e002      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005900:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005908:	4b3c      	ldr	r3, [pc, #240]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800590a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005916:	4a39      	ldr	r2, [pc, #228]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005918:	430b      	orrs	r3, r1
 800591a:	6513      	str	r3, [r2, #80]	; 0x50
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005922:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005932:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005936:	2300      	movs	r3, #0
 8005938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800593c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005940:	460b      	mov	r3, r1
 8005942:	4313      	orrs	r3, r2
 8005944:	d060      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800594e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005952:	d039      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005954:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005958:	d832      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800595a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800595e:	d035      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005964:	d82c      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d031      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005970:	d826      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005976:	d02d      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800597c:	d820      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800597e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005982:	d012      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005988:	d81a      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d024      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800598e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005992:	d115      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005998:	3308      	adds	r3, #8
 800599a:	2101      	movs	r1, #1
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f9ad 	bl	8006cfc <RCCEx_PLL2_Config>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059a8:	e017      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ae:	3328      	adds	r3, #40	; 0x28
 80059b0:	2101      	movs	r1, #1
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 fa54 	bl	8006e60 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059be:	e00c      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059c6:	e008      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059c8:	bf00      	nop
 80059ca:	e006      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059cc:	bf00      	nop
 80059ce:	e004      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059d0:	bf00      	nop
 80059d2:	e002      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10e      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059f2:	4a02      	ldr	r2, [pc, #8]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6593      	str	r3, [r2, #88]	; 0x58
 80059f8:	e006      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80059fa:	bf00      	nop
 80059fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	d037      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a32:	d00e      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a38:	d816      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d018      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d111      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a44:	4bc4      	ldr	r3, [pc, #784]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	4ac3      	ldr	r2, [pc, #780]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a50:	e00f      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a56:	3308      	adds	r3, #8
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f94e 	bl	8006cfc <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a66:	e004      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a7a:	4bb7      	ldr	r3, [pc, #732]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a88:	4ab3      	ldr	r2, [pc, #716]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	6513      	str	r3, [r2, #80]	; 0x50
 8005a8e:	e003      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005aae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	d039      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d81c      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005b05 	.word	0x08005b05
 8005acc:	08005ad9 	.word	0x08005ad9
 8005ad0:	08005ae7 	.word	0x08005ae7
 8005ad4:	08005b05 	.word	0x08005b05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad8:	4b9f      	ldr	r3, [pc, #636]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	4a9e      	ldr	r2, [pc, #632]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ae4:	e00f      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aea:	3308      	adds	r3, #8
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 f904 	bl	8006cfc <RCCEx_PLL2_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005afa:	e004      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b0e:	4b92      	ldr	r3, [pc, #584]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b12:	f023 0103 	bic.w	r1, r3, #3
 8005b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1c:	4a8e      	ldr	r2, [pc, #568]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f000 8099 	beq.w	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b4e:	4b83      	ldr	r3, [pc, #524]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a82      	ldr	r2, [pc, #520]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b5a:	f7fb ff67 	bl	8001a2c <HAL_GetTick>
 8005b5e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b62:	e00b      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b64:	f7fb ff62 	bl	8001a2c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b64      	cmp	r3, #100	; 0x64
 8005b72:	d903      	bls.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b7a:	e005      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b7c:	4b77      	ldr	r3, [pc, #476]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ed      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005b88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d173      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b90:	4b71      	ldr	r3, [pc, #452]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b9c:	4053      	eors	r3, r2
 8005b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d015      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ba6:	4b6c      	ldr	r3, [pc, #432]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bb2:	4b69      	ldr	r3, [pc, #420]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a68      	ldr	r2, [pc, #416]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bbe:	4b66      	ldr	r3, [pc, #408]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a65      	ldr	r2, [pc, #404]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bca:	4a63      	ldr	r2, [pc, #396]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bde:	d118      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fb ff24 	bl	8001a2c <HAL_GetTick>
 8005be4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005be8:	e00d      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bea:	f7fb ff1f 	bl	8001a2c <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bf4:	1ad2      	subs	r2, r2, r3
 8005bf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d903      	bls.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005c04:	e005      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c06:	4b54      	ldr	r3, [pc, #336]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0eb      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005c12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d129      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2a:	d10e      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005c2c:	4b4a      	ldr	r3, [pc, #296]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c3c:	091a      	lsrs	r2, r3, #4
 8005c3e:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	4a45      	ldr	r2, [pc, #276]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6113      	str	r3, [r2, #16]
 8005c48:	e005      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005c4a:	4b43      	ldr	r3, [pc, #268]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4a42      	ldr	r2, [pc, #264]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c54:	6113      	str	r3, [r2, #16]
 8005c56:	4b40      	ldr	r3, [pc, #256]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c66:	4a3c      	ldr	r2, [pc, #240]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6c:	e008      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c72:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005c76:	e003      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f002 0301 	and.w	r3, r2, #1
 8005c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c90:	2300      	movs	r3, #0
 8005c92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f000 8090 	beq.w	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005caa:	2b28      	cmp	r3, #40	; 0x28
 8005cac:	d870      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d99 	.word	0x08005d99
 8005cb8:	08005d91 	.word	0x08005d91
 8005cbc:	08005d91 	.word	0x08005d91
 8005cc0:	08005d91 	.word	0x08005d91
 8005cc4:	08005d91 	.word	0x08005d91
 8005cc8:	08005d91 	.word	0x08005d91
 8005ccc:	08005d91 	.word	0x08005d91
 8005cd0:	08005d91 	.word	0x08005d91
 8005cd4:	08005d65 	.word	0x08005d65
 8005cd8:	08005d91 	.word	0x08005d91
 8005cdc:	08005d91 	.word	0x08005d91
 8005ce0:	08005d91 	.word	0x08005d91
 8005ce4:	08005d91 	.word	0x08005d91
 8005ce8:	08005d91 	.word	0x08005d91
 8005cec:	08005d91 	.word	0x08005d91
 8005cf0:	08005d91 	.word	0x08005d91
 8005cf4:	08005d7b 	.word	0x08005d7b
 8005cf8:	08005d91 	.word	0x08005d91
 8005cfc:	08005d91 	.word	0x08005d91
 8005d00:	08005d91 	.word	0x08005d91
 8005d04:	08005d91 	.word	0x08005d91
 8005d08:	08005d91 	.word	0x08005d91
 8005d0c:	08005d91 	.word	0x08005d91
 8005d10:	08005d91 	.word	0x08005d91
 8005d14:	08005d99 	.word	0x08005d99
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d91 	.word	0x08005d91
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d99 	.word	0x08005d99
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005d91 	.word	0x08005d91
 8005d4c:	08005d91 	.word	0x08005d91
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	58024800 	.word	0x58024800
 8005d60:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d68:	3308      	adds	r3, #8
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 ffc5 	bl	8006cfc <RCCEx_PLL2_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d78:	e00f      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7e:	3328      	adds	r3, #40	; 0x28
 8005d80:	2101      	movs	r1, #1
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 f86c 	bl	8006e60 <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d8e:	e004      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005da2:	4bc0      	ldr	r3, [pc, #768]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db2:	4abc      	ldr	r2, [pc, #752]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6553      	str	r3, [r2, #84]	; 0x54
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f002 0302 	and.w	r3, r2, #2
 8005dce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005dd8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	d043      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d824      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e0d 	.word	0x08005e0d
 8005dfc:	08005e23 	.word	0x08005e23
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e41 	.word	0x08005e41
 8005e08:	08005e41 	.word	0x08005e41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e10:	3308      	adds	r3, #8
 8005e12:	2101      	movs	r1, #1
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 ff71 	bl	8006cfc <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e20:	e00f      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e26:	3328      	adds	r3, #40	; 0x28
 8005e28:	2101      	movs	r1, #1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f818 	bl	8006e60 <RCCEx_PLL3_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e36:	e004      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e3e:	e000      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10b      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e4a:	4b96      	ldr	r3, [pc, #600]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f023 0107 	bic.w	r1, r3, #7
 8005e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5a:	4a92      	ldr	r2, [pc, #584]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6553      	str	r3, [r2, #84]	; 0x54
 8005e60:	e003      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f002 0304 	and.w	r3, r2, #4
 8005e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e80:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4313      	orrs	r3, r2
 8005e88:	d043      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d824      	bhi.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ee9 	.word	0x08005ee9
 8005ea0:	08005eb5 	.word	0x08005eb5
 8005ea4:	08005ecb 	.word	0x08005ecb
 8005ea8:	08005ee9 	.word	0x08005ee9
 8005eac:	08005ee9 	.word	0x08005ee9
 8005eb0:	08005ee9 	.word	0x08005ee9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb8:	3308      	adds	r3, #8
 8005eba:	2101      	movs	r1, #1
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 ff1d 	bl	8006cfc <RCCEx_PLL2_Config>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ec8:	e00f      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ece:	3328      	adds	r3, #40	; 0x28
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 ffc4 	bl	8006e60 <RCCEx_PLL3_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ede:	e004      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ee6:	e000      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ef2:	4b6c      	ldr	r3, [pc, #432]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef6:	f023 0107 	bic.w	r1, r3, #7
 8005efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f02:	4a68      	ldr	r2, [pc, #416]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6593      	str	r3, [r2, #88]	; 0x58
 8005f08:	e003      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f002 0320 	and.w	r3, r2, #32
 8005f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f22:	2300      	movs	r3, #0
 8005f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d055      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f3e:	d033      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f44:	d82c      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d02f      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d826      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f56:	d02b      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005f58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f5c:	d820      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f62:	d012      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f68:	d81a      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d022      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f72:	d115      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f78:	3308      	adds	r3, #8
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 febd 	bl	8006cfc <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f88:	e015      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8e:	3328      	adds	r3, #40	; 0x28
 8005f90:	2102      	movs	r1, #2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 ff64 	bl	8006e60 <RCCEx_PLL3_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fa6:	e006      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005fa8:	bf00      	nop
 8005faa:	e004      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005fac:	bf00      	nop
 8005fae:	e002      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005fb0:	bf00      	nop
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fbe:	4b39      	ldr	r3, [pc, #228]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fce:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6553      	str	r3, [r2, #84]	; 0x54
 8005fd4:	e003      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ff4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	d058      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800600a:	d033      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800600c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006010:	d82c      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006016:	d02f      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601c:	d826      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800601e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006022:	d02b      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006028:	d820      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	d012      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	d81a      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d022      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800603a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603e:	d115      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006044:	3308      	adds	r3, #8
 8006046:	2100      	movs	r1, #0
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fe57 	bl	8006cfc <RCCEx_PLL2_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006054:	e015      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605a:	3328      	adds	r3, #40	; 0x28
 800605c:	2102      	movs	r1, #2
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fefe 	bl	8006e60 <RCCEx_PLL3_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800606a:	e00a      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006072:	e006      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006074:	bf00      	nop
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10e      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800609a:	4a02      	ldr	r2, [pc, #8]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800609c:	430b      	orrs	r3, r1
 800609e:	6593      	str	r3, [r2, #88]	; 0x58
 80060a0:	e006      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80060a2:	bf00      	nop
 80060a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80060bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80060ca:	460b      	mov	r3, r1
 80060cc:	4313      	orrs	r3, r2
 80060ce:	d055      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80060d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060dc:	d033      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80060de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060e2:	d82c      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d02f      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80060ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ee:	d826      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060f4:	d02b      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80060f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060fa:	d820      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006100:	d012      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006106:	d81a      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d022      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006110:	d115      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006116:	3308      	adds	r3, #8
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fdee 	bl	8006cfc <RCCEx_PLL2_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006126:	e015      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612c:	3328      	adds	r3, #40	; 0x28
 800612e:	2102      	movs	r1, #2
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fe95 	bl	8006e60 <RCCEx_PLL3_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800613c:	e00a      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006144:	e006      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006146:	bf00      	nop
 8006148:	e004      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800614a:	bf00      	nop
 800614c:	e002      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800614e:	bf00      	nop
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006154:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800615c:	4ba1      	ldr	r3, [pc, #644]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800616c:	4a9d      	ldr	r2, [pc, #628]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800616e:	430b      	orrs	r3, r1
 8006170:	6593      	str	r3, [r2, #88]	; 0x58
 8006172:	e003      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006178:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800617c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f002 0308 	and.w	r3, r2, #8
 8006188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800618c:	2300      	movs	r3, #0
 800618e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006192:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006196:	460b      	mov	r3, r1
 8006198:	4313      	orrs	r3, r2
 800619a:	d01e      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800619c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ae:	3328      	adds	r3, #40	; 0x28
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fe54 	bl	8006e60 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061c4:	4b87      	ldr	r3, [pc, #540]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061d4:	4a83      	ldr	r2, [pc, #524]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061d6:	430b      	orrs	r3, r1
 80061d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f002 0310 	and.w	r3, r2, #16
 80061e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80061f4:	460b      	mov	r3, r1
 80061f6:	4313      	orrs	r3, r2
 80061f8:	d01e      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006206:	d10c      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620c:	3328      	adds	r3, #40	; 0x28
 800620e:	2102      	movs	r1, #2
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fe25 	bl	8006e60 <RCCEx_PLL3_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006222:	4b70      	ldr	r3, [pc, #448]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800622a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800622e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006232:	4a6c      	ldr	r2, [pc, #432]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006234:	430b      	orrs	r3, r1
 8006236:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006248:	2300      	movs	r3, #0
 800624a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800624e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006252:	460b      	mov	r3, r1
 8006254:	4313      	orrs	r3, r2
 8006256:	d03e      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006264:	d022      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626a:	d81b      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d00b      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006276:	e015      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627c:	3308      	adds	r3, #8
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fd3b 	bl	8006cfc <RCCEx_PLL2_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800628c:	e00f      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800628e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006292:	3328      	adds	r3, #40	; 0x28
 8006294:	2102      	movs	r1, #2
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fde2 	bl	8006e60 <RCCEx_PLL3_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062a2:	e004      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80062aa:	e000      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80062ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062b6:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80062be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062c6:	4a47      	ldr	r2, [pc, #284]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6593      	str	r3, [r2, #88]	; 0x58
 80062cc:	e003      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80062e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80062e4:	2300      	movs	r3, #0
 80062e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80062ec:	460b      	mov	r3, r1
 80062ee:	4313      	orrs	r3, r2
 80062f0:	d03b      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062fe:	d01f      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006300:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006304:	d818      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630a:	d003      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800630c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006310:	d007      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006312:	e011      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006314:	4b33      	ldr	r3, [pc, #204]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	4a32      	ldr	r2, [pc, #200]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800631a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006320:	e00f      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006326:	3328      	adds	r3, #40	; 0x28
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fd98 	bl	8006e60 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800634a:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800635c:	430b      	orrs	r3, r1
 800635e:	6553      	str	r3, [r2, #84]	; 0x54
 8006360:	e003      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006366:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800636a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006376:	673b      	str	r3, [r7, #112]	; 0x70
 8006378:	2300      	movs	r3, #0
 800637a:	677b      	str	r3, [r7, #116]	; 0x74
 800637c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d034      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d007      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006396:	e011      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4a11      	ldr	r2, [pc, #68]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063a4:	e00e      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063aa:	3308      	adds	r3, #8
 80063ac:	2102      	movs	r1, #2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fca4 	bl	8006cfc <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10d      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063da:	4a02      	ldr	r2, [pc, #8]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063e0:	e006      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80063e2:	bf00      	nop
 80063e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80063fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80063fe:	2300      	movs	r3, #0
 8006400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006402:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006406:	460b      	mov	r3, r1
 8006408:	4313      	orrs	r3, r2
 800640a:	d00c      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800640c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006410:	3328      	adds	r3, #40	; 0x28
 8006412:	2102      	movs	r1, #2
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fd23 	bl	8006e60 <RCCEx_PLL3_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006432:	663b      	str	r3, [r7, #96]	; 0x60
 8006434:	2300      	movs	r3, #0
 8006436:	667b      	str	r3, [r7, #100]	; 0x64
 8006438:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d038      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644e:	d018      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006454:	d811      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800645a:	d014      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800645c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006460:	d80b      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d011      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646a:	d106      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646c:	4bc3      	ldr	r3, [pc, #780]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	4ac2      	ldr	r2, [pc, #776]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006478:	e008      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006480:	e004      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006482:	bf00      	nop
 8006484:	e002      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800648a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006494:	4bb9      	ldr	r3, [pc, #740]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800649c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	4ab5      	ldr	r2, [pc, #724]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	6553      	str	r3, [r2, #84]	; 0x54
 80064aa:	e003      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80064c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064c2:	2300      	movs	r3, #0
 80064c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80064ca:	460b      	mov	r3, r1
 80064cc:	4313      	orrs	r3, r2
 80064ce:	d009      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064d0:	4baa      	ldr	r3, [pc, #680]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064de:	4aa7      	ldr	r2, [pc, #668]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80064f0:	653b      	str	r3, [r7, #80]	; 0x50
 80064f2:	2300      	movs	r3, #0
 80064f4:	657b      	str	r3, [r7, #84]	; 0x54
 80064f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006500:	4b9e      	ldr	r3, [pc, #632]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006504:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	4a9b      	ldr	r2, [pc, #620]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006510:	430b      	orrs	r3, r1
 8006512:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006520:	64bb      	str	r3, [r7, #72]	; 0x48
 8006522:	2300      	movs	r3, #0
 8006524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006526:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800652a:	460b      	mov	r3, r1
 800652c:	4313      	orrs	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006530:	4b92      	ldr	r3, [pc, #584]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653e:	4a8f      	ldr	r2, [pc, #572]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006540:	430b      	orrs	r3, r1
 8006542:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006550:	643b      	str	r3, [r7, #64]	; 0x40
 8006552:	2300      	movs	r3, #0
 8006554:	647b      	str	r3, [r7, #68]	; 0x44
 8006556:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800655a:	460b      	mov	r3, r1
 800655c:	4313      	orrs	r3, r2
 800655e:	d00e      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006560:	4b86      	ldr	r3, [pc, #536]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	4a85      	ldr	r2, [pc, #532]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006566:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800656a:	6113      	str	r3, [r2, #16]
 800656c:	4b83      	ldr	r3, [pc, #524]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800656e:	6919      	ldr	r1, [r3, #16]
 8006570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006574:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006578:	4a80      	ldr	r2, [pc, #512]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800657a:	430b      	orrs	r3, r1
 800657c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800657e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800658a:	63bb      	str	r3, [r7, #56]	; 0x38
 800658c:	2300      	movs	r3, #0
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006590:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006594:	460b      	mov	r3, r1
 8006596:	4313      	orrs	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800659a:	4b78      	ldr	r3, [pc, #480]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800659c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a8:	4a74      	ldr	r2, [pc, #464]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065aa:	430b      	orrs	r3, r1
 80065ac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80065ba:	633b      	str	r3, [r7, #48]	; 0x30
 80065bc:	2300      	movs	r3, #0
 80065be:	637b      	str	r3, [r7, #52]	; 0x34
 80065c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80065c4:	460b      	mov	r3, r1
 80065c6:	4313      	orrs	r3, r2
 80065c8:	d00a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065ca:	4b6c      	ldr	r3, [pc, #432]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80065d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065da:	4a68      	ldr	r2, [pc, #416]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	2100      	movs	r1, #0
 80065ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80065f6:	460b      	mov	r3, r1
 80065f8:	4313      	orrs	r3, r2
 80065fa:	d011      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006600:	3308      	adds	r3, #8
 8006602:	2100      	movs	r1, #0
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fb79 	bl	8006cfc <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800661c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	2100      	movs	r1, #0
 800662a:	6239      	str	r1, [r7, #32]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006636:	460b      	mov	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	d011      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800663c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006640:	3308      	adds	r3, #8
 8006642:	2101      	movs	r1, #1
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fb59 	bl	8006cfc <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800665c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	2100      	movs	r1, #0
 800666a:	61b9      	str	r1, [r7, #24]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d011      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800667c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006680:	3308      	adds	r3, #8
 8006682:	2102      	movs	r1, #2
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fb39 	bl	8006cfc <RCCEx_PLL2_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006690:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800669c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80066a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	2100      	movs	r1, #0
 80066aa:	6139      	str	r1, [r7, #16]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80066b6:	460b      	mov	r3, r1
 80066b8:	4313      	orrs	r3, r2
 80066ba:	d011      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c0:	3328      	adds	r3, #40	; 0x28
 80066c2:	2100      	movs	r1, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fbcb 	bl	8006e60 <RCCEx_PLL3_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80066d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	2100      	movs	r1, #0
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066f6:	460b      	mov	r3, r1
 80066f8:	4313      	orrs	r3, r2
 80066fa:	d011      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006700:	3328      	adds	r3, #40	; 0x28
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fbab 	bl	8006e60 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006710:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800671c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	2100      	movs	r1, #0
 800672a:	6039      	str	r1, [r7, #0]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d011      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800673c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006740:	3328      	adds	r3, #40	; 0x28
 8006742:	2102      	movs	r1, #2
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fb8b 	bl	8006e60 <RCCEx_PLL3_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800675c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006760:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
}
 800676e:	4618      	mov	r0, r3
 8006770:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006774:	46bd      	mov	sp, r7
 8006776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400

08006780 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006784:	f7fe fde2 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8006788:	4602      	mov	r2, r0
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	091b      	lsrs	r3, r3, #4
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4904      	ldr	r1, [pc, #16]	; (80067a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006796:	5ccb      	ldrb	r3, [r1, r3]
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	58024400 	.word	0x58024400
 80067a8:	0800ac48 	.word	0x0800ac48

080067ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067b4:	4ba1      	ldr	r3, [pc, #644]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80067be:	4b9f      	ldr	r3, [pc, #636]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	0b1b      	lsrs	r3, r3, #12
 80067c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067ca:	4b9c      	ldr	r3, [pc, #624]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80067d6:	4b99      	ldr	r3, [pc, #612]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8111 	beq.w	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	f000 8083 	beq.w	8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b02      	cmp	r3, #2
 8006806:	f200 80a1 	bhi.w	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d056      	beq.n	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006816:	e099      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006818:	4b88      	ldr	r3, [pc, #544]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d02d      	beq.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006824:	4b85      	ldr	r3, [pc, #532]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	08db      	lsrs	r3, r3, #3
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	4a84      	ldr	r2, [pc, #528]	; (8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684e:	4b7b      	ldr	r3, [pc, #492]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800687e:	e087      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800688e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006892:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068c2:	e065      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d6:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006906:	e043      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b48      	ldr	r3, [pc, #288]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a03 	vldr	s12, [r7, #12]
 800692e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800694a:	e021      	b.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800695a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695e:	4b37      	ldr	r3, [pc, #220]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006990:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	0a5b      	lsrs	r3, r3, #9
 8006996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b6:	ee17 2a90 	vmov	r2, s15
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80069be:	4b1f      	ldr	r3, [pc, #124]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80069dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e4:	ee17 2a90 	vmov	r2, s15
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069ec:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	0e1b      	lsrs	r3, r3, #24
 80069f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a12:	ee17 2a90 	vmov	r2, s15
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a1a:	e008      	b.n	8006a2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	609a      	str	r2, [r3, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	3724      	adds	r7, #36	; 0x24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	03d09000 	.word	0x03d09000
 8006a44:	46000000 	.word	0x46000000
 8006a48:	4c742400 	.word	0x4c742400
 8006a4c:	4a742400 	.word	0x4a742400
 8006a50:	4af42400 	.word	0x4af42400

08006a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b089      	sub	sp, #36	; 0x24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a5c:	4ba1      	ldr	r3, [pc, #644]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a66:	4b9f      	ldr	r3, [pc, #636]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	0d1b      	lsrs	r3, r3, #20
 8006a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a72:	4b9c      	ldr	r3, [pc, #624]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a7e:	4b99      	ldr	r3, [pc, #612]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	08db      	lsrs	r3, r3, #3
 8006a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8111 	beq.w	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	f000 8083 	beq.w	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	f200 80a1 	bhi.w	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d056      	beq.n	8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006abe:	e099      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac0:	4b88      	ldr	r3, [pc, #544]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d02d      	beq.n	8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006acc:	4b85      	ldr	r3, [pc, #532]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	08db      	lsrs	r3, r3, #3
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	4a84      	ldr	r2, [pc, #528]	; (8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8006adc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af6:	4b7b      	ldr	r3, [pc, #492]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b26:	e087      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b6a      	ldr	r3, [pc, #424]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b6a:	e065      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b59      	ldr	r3, [pc, #356]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bae:	e043      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc2:	4b48      	ldr	r3, [pc, #288]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf2:	e021      	b.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c06:	4b37      	ldr	r3, [pc, #220]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006c38:	4b2a      	ldr	r3, [pc, #168]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	0a5b      	lsrs	r3, r3, #9
 8006c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c5e:	ee17 2a90 	vmov	r2, s15
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c66:	4b1f      	ldr	r3, [pc, #124]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c8c:	ee17 2a90 	vmov	r2, s15
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c94:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	0e1b      	lsrs	r3, r3, #24
 8006c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cba:	ee17 2a90 	vmov	r2, s15
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	609a      	str	r2, [r3, #8]
}
 8006cd6:	bf00      	nop
 8006cd8:	3724      	adds	r7, #36	; 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	03d09000 	.word	0x03d09000
 8006cec:	46000000 	.word	0x46000000
 8006cf0:	4c742400 	.word	0x4c742400
 8006cf4:	4a742400 	.word	0x4a742400
 8006cf8:	4af42400 	.word	0x4af42400

08006cfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d0a:	4b53      	ldr	r3, [pc, #332]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d101      	bne.n	8006d1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e099      	b.n	8006e4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d1a:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a4e      	ldr	r2, [pc, #312]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d26:	f7fa fe81 	bl	8001a2c <HAL_GetTick>
 8006d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d2c:	e008      	b.n	8006d40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d2e:	f7fa fe7d 	bl	8001a2c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e086      	b.n	8006e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d40:	4b45      	ldr	r3, [pc, #276]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f0      	bne.n	8006d2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d4c:	4b42      	ldr	r3, [pc, #264]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	493f      	ldr	r1, [pc, #252]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	025b      	lsls	r3, r3, #9
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	061b      	lsls	r3, r3, #24
 8006d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d90:	4931      	ldr	r1, [pc, #196]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	492d      	ldr	r1, [pc, #180]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	f023 0220 	bic.w	r2, r3, #32
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	4928      	ldr	r1, [pc, #160]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dba:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	4a26      	ldr	r2, [pc, #152]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	f023 0310 	bic.w	r3, r3, #16
 8006dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dc6:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dca:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <RCCEx_PLL2_Config+0x160>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	69d2      	ldr	r2, [r2, #28]
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	4920      	ldr	r1, [pc, #128]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dda:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006de0:	f043 0310 	orr.w	r3, r3, #16
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006df8:	e00f      	b.n	8006e1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d106      	bne.n	8006e0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e00:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e0c:	e005      	b.n	8006e1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e1a:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a0e      	ldr	r2, [pc, #56]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e26:	f7fa fe01 	bl	8001a2c <HAL_GetTick>
 8006e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e2c:	e008      	b.n	8006e40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e2e:	f7fa fdfd 	bl	8001a2c <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e006      	b.n	8006e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <RCCEx_PLL2_Config+0x15c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	ffff0007 	.word	0xffff0007

08006e60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6e:	4b53      	ldr	r3, [pc, #332]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d101      	bne.n	8006e7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e099      	b.n	8006fb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e7e:	4b4f      	ldr	r3, [pc, #316]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a4e      	ldr	r2, [pc, #312]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e8a:	f7fa fdcf 	bl	8001a2c <HAL_GetTick>
 8006e8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e90:	e008      	b.n	8006ea4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e92:	f7fa fdcb 	bl	8001a2c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e086      	b.n	8006fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ea4:	4b45      	ldr	r3, [pc, #276]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f0      	bne.n	8006e92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006eb0:	4b42      	ldr	r3, [pc, #264]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	051b      	lsls	r3, r3, #20
 8006ebe:	493f      	ldr	r1, [pc, #252]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	025b      	lsls	r3, r3, #9
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	061b      	lsls	r3, r3, #24
 8006ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ef4:	4931      	ldr	r1, [pc, #196]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	492d      	ldr	r1, [pc, #180]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	4928      	ldr	r1, [pc, #160]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f1e:	4b27      	ldr	r3, [pc, #156]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2e:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <RCCEx_PLL3_Config+0x160>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	69d2      	ldr	r2, [r2, #28]
 8006f36:	00d2      	lsls	r2, r2, #3
 8006f38:	4920      	ldr	r1, [pc, #128]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f3e:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f50:	4b1a      	ldr	r3, [pc, #104]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f5c:	e00f      	b.n	8006f7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d106      	bne.n	8006f72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f70:	e005      	b.n	8006f7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a0e      	ldr	r2, [pc, #56]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8a:	f7fa fd4f 	bl	8001a2c <HAL_GetTick>
 8006f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f90:	e008      	b.n	8006fa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f92:	f7fa fd4b 	bl	8001a2c <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e006      	b.n	8006fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <RCCEx_PLL3_Config+0x15c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	ffff0007 	.word	0xffff0007

08006fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e049      	b.n	800706a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fa f92e 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f000 feb4 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	d001      	beq.n	800708c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e054      	b.n	8007136 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a26      	ldr	r2, [pc, #152]	; (8007144 <HAL_TIM_Base_Start_IT+0xd0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b6:	d01d      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a22      	ldr	r2, [pc, #136]	; (8007148 <HAL_TIM_Base_Start_IT+0xd4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a21      	ldr	r2, [pc, #132]	; (800714c <HAL_TIM_Base_Start_IT+0xd8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <HAL_TIM_Base_Start_IT+0xdc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1e      	ldr	r2, [pc, #120]	; (8007154 <HAL_TIM_Base_Start_IT+0xe0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1c      	ldr	r2, [pc, #112]	; (8007158 <HAL_TIM_Base_Start_IT+0xe4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1b      	ldr	r2, [pc, #108]	; (800715c <HAL_TIM_Base_Start_IT+0xe8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d115      	bne.n	8007120 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	4b19      	ldr	r3, [pc, #100]	; (8007160 <HAL_TIM_Base_Start_IT+0xec>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b06      	cmp	r3, #6
 8007104:	d015      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0xbe>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800710c:	d011      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711e:	e008      	b.n	8007132 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e000      	b.n	8007134 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40010400 	.word	0x40010400
 8007158:	40001800 	.word	0x40001800
 800715c:	40014000 	.word	0x40014000
 8007160:	00010007 	.word	0x00010007

08007164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e049      	b.n	800720a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f841 	bl	8007212 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f000 fde4 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <HAL_TIM_PWM_Start+0x24>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e03c      	b.n	80072c6 <HAL_TIM_PWM_Start+0x9e>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d109      	bne.n	8007266 <HAL_TIM_PWM_Start+0x3e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	e02f      	b.n	80072c6 <HAL_TIM_PWM_Start+0x9e>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d109      	bne.n	8007280 <HAL_TIM_PWM_Start+0x58>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	bf14      	ite	ne
 8007278:	2301      	movne	r3, #1
 800727a:	2300      	moveq	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e022      	b.n	80072c6 <HAL_TIM_PWM_Start+0x9e>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b0c      	cmp	r3, #12
 8007284:	d109      	bne.n	800729a <HAL_TIM_PWM_Start+0x72>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	bf14      	ite	ne
 8007292:	2301      	movne	r3, #1
 8007294:	2300      	moveq	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	e015      	b.n	80072c6 <HAL_TIM_PWM_Start+0x9e>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b10      	cmp	r3, #16
 800729e:	d109      	bne.n	80072b4 <HAL_TIM_PWM_Start+0x8c>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	e008      	b.n	80072c6 <HAL_TIM_PWM_Start+0x9e>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	bf14      	ite	ne
 80072c0:	2301      	movne	r3, #1
 80072c2:	2300      	moveq	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e0a1      	b.n	8007412 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d104      	bne.n	80072de <HAL_TIM_PWM_Start+0xb6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072dc:	e023      	b.n	8007326 <HAL_TIM_PWM_Start+0xfe>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_PWM_Start+0xc6>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072ec:	e01b      	b.n	8007326 <HAL_TIM_PWM_Start+0xfe>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d104      	bne.n	80072fe <HAL_TIM_PWM_Start+0xd6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072fc:	e013      	b.n	8007326 <HAL_TIM_PWM_Start+0xfe>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b0c      	cmp	r3, #12
 8007302:	d104      	bne.n	800730e <HAL_TIM_PWM_Start+0xe6>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800730c:	e00b      	b.n	8007326 <HAL_TIM_PWM_Start+0xfe>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b10      	cmp	r3, #16
 8007312:	d104      	bne.n	800731e <HAL_TIM_PWM_Start+0xf6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800731c:	e003      	b.n	8007326 <HAL_TIM_PWM_Start+0xfe>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2201      	movs	r2, #1
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f001 f938 	bl	80085a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a38      	ldr	r2, [pc, #224]	; (800741c <HAL_TIM_PWM_Start+0x1f4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <HAL_TIM_PWM_Start+0x13e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a37      	ldr	r2, [pc, #220]	; (8007420 <HAL_TIM_PWM_Start+0x1f8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00e      	beq.n	8007366 <HAL_TIM_PWM_Start+0x13e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a35      	ldr	r2, [pc, #212]	; (8007424 <HAL_TIM_PWM_Start+0x1fc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d009      	beq.n	8007366 <HAL_TIM_PWM_Start+0x13e>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a34      	ldr	r2, [pc, #208]	; (8007428 <HAL_TIM_PWM_Start+0x200>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d004      	beq.n	8007366 <HAL_TIM_PWM_Start+0x13e>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a32      	ldr	r2, [pc, #200]	; (800742c <HAL_TIM_PWM_Start+0x204>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d101      	bne.n	800736a <HAL_TIM_PWM_Start+0x142>
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <HAL_TIM_PWM_Start+0x144>
 800736a:	2300      	movs	r3, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d007      	beq.n	8007380 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800737e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a25      	ldr	r2, [pc, #148]	; (800741c <HAL_TIM_PWM_Start+0x1f4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d022      	beq.n	80073d0 <HAL_TIM_PWM_Start+0x1a8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d01d      	beq.n	80073d0 <HAL_TIM_PWM_Start+0x1a8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a25      	ldr	r2, [pc, #148]	; (8007430 <HAL_TIM_PWM_Start+0x208>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d018      	beq.n	80073d0 <HAL_TIM_PWM_Start+0x1a8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a24      	ldr	r2, [pc, #144]	; (8007434 <HAL_TIM_PWM_Start+0x20c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <HAL_TIM_PWM_Start+0x1a8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a22      	ldr	r2, [pc, #136]	; (8007438 <HAL_TIM_PWM_Start+0x210>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <HAL_TIM_PWM_Start+0x1a8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1a      	ldr	r2, [pc, #104]	; (8007420 <HAL_TIM_PWM_Start+0x1f8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d009      	beq.n	80073d0 <HAL_TIM_PWM_Start+0x1a8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1e      	ldr	r2, [pc, #120]	; (800743c <HAL_TIM_PWM_Start+0x214>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_TIM_PWM_Start+0x1a8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a16      	ldr	r2, [pc, #88]	; (8007424 <HAL_TIM_PWM_Start+0x1fc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d115      	bne.n	80073fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	4b1a      	ldr	r3, [pc, #104]	; (8007440 <HAL_TIM_PWM_Start+0x218>)
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b06      	cmp	r3, #6
 80073e0:	d015      	beq.n	800740e <HAL_TIM_PWM_Start+0x1e6>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e8:	d011      	beq.n	800740e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fa:	e008      	b.n	800740e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e000      	b.n	8007410 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40010000 	.word	0x40010000
 8007420:	40010400 	.word	0x40010400
 8007424:	40014000 	.word	0x40014000
 8007428:	40014400 	.word	0x40014400
 800742c:	40014800 	.word	0x40014800
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40001800 	.word	0x40001800
 8007440:	00010007 	.word	0x00010007

08007444 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <HAL_TIM_PWM_Start_IT+0x28>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e03c      	b.n	80074e6 <HAL_TIM_PWM_Start_IT+0xa2>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b04      	cmp	r3, #4
 8007470:	d109      	bne.n	8007486 <HAL_TIM_PWM_Start_IT+0x42>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b01      	cmp	r3, #1
 800747c:	bf14      	ite	ne
 800747e:	2301      	movne	r3, #1
 8007480:	2300      	moveq	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	e02f      	b.n	80074e6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d109      	bne.n	80074a0 <HAL_TIM_PWM_Start_IT+0x5c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	bf14      	ite	ne
 8007498:	2301      	movne	r3, #1
 800749a:	2300      	moveq	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	e022      	b.n	80074e6 <HAL_TIM_PWM_Start_IT+0xa2>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b0c      	cmp	r3, #12
 80074a4:	d109      	bne.n	80074ba <HAL_TIM_PWM_Start_IT+0x76>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	e015      	b.n	80074e6 <HAL_TIM_PWM_Start_IT+0xa2>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d109      	bne.n	80074d4 <HAL_TIM_PWM_Start_IT+0x90>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e008      	b.n	80074e6 <HAL_TIM_PWM_Start_IT+0xa2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	bf14      	ite	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	2300      	moveq	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e0ec      	b.n	80076c8 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_PWM_Start_IT+0xba>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074fc:	e023      	b.n	8007546 <HAL_TIM_PWM_Start_IT+0x102>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b04      	cmp	r3, #4
 8007502:	d104      	bne.n	800750e <HAL_TIM_PWM_Start_IT+0xca>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800750c:	e01b      	b.n	8007546 <HAL_TIM_PWM_Start_IT+0x102>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b08      	cmp	r3, #8
 8007512:	d104      	bne.n	800751e <HAL_TIM_PWM_Start_IT+0xda>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800751c:	e013      	b.n	8007546 <HAL_TIM_PWM_Start_IT+0x102>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	d104      	bne.n	800752e <HAL_TIM_PWM_Start_IT+0xea>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800752c:	e00b      	b.n	8007546 <HAL_TIM_PWM_Start_IT+0x102>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b10      	cmp	r3, #16
 8007532:	d104      	bne.n	800753e <HAL_TIM_PWM_Start_IT+0xfa>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800753c:	e003      	b.n	8007546 <HAL_TIM_PWM_Start_IT+0x102>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b0c      	cmp	r3, #12
 800754a:	d841      	bhi.n	80075d0 <HAL_TIM_PWM_Start_IT+0x18c>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <HAL_TIM_PWM_Start_IT+0x110>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007589 	.word	0x08007589
 8007558:	080075d1 	.word	0x080075d1
 800755c:	080075d1 	.word	0x080075d1
 8007560:	080075d1 	.word	0x080075d1
 8007564:	0800759b 	.word	0x0800759b
 8007568:	080075d1 	.word	0x080075d1
 800756c:	080075d1 	.word	0x080075d1
 8007570:	080075d1 	.word	0x080075d1
 8007574:	080075ad 	.word	0x080075ad
 8007578:	080075d1 	.word	0x080075d1
 800757c:	080075d1 	.word	0x080075d1
 8007580:	080075d1 	.word	0x080075d1
 8007584:	080075bf 	.word	0x080075bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0202 	orr.w	r2, r2, #2
 8007596:	60da      	str	r2, [r3, #12]
      break;
 8007598:	e01d      	b.n	80075d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0204 	orr.w	r2, r2, #4
 80075a8:	60da      	str	r2, [r3, #12]
      break;
 80075aa:	e014      	b.n	80075d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0208 	orr.w	r2, r2, #8
 80075ba:	60da      	str	r2, [r3, #12]
      break;
 80075bc:	e00b      	b.n	80075d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0210 	orr.w	r2, r2, #16
 80075cc:	60da      	str	r2, [r3, #12]
      break;
 80075ce:	e002      	b.n	80075d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
      break;
 80075d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d174      	bne.n	80076c6 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2201      	movs	r2, #1
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 ffdd 	bl	80085a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a38      	ldr	r2, [pc, #224]	; (80076d0 <HAL_TIM_PWM_Start_IT+0x28c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d013      	beq.n	800761c <HAL_TIM_PWM_Start_IT+0x1d8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a36      	ldr	r2, [pc, #216]	; (80076d4 <HAL_TIM_PWM_Start_IT+0x290>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00e      	beq.n	800761c <HAL_TIM_PWM_Start_IT+0x1d8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a35      	ldr	r2, [pc, #212]	; (80076d8 <HAL_TIM_PWM_Start_IT+0x294>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d009      	beq.n	800761c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a33      	ldr	r2, [pc, #204]	; (80076dc <HAL_TIM_PWM_Start_IT+0x298>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a32      	ldr	r2, [pc, #200]	; (80076e0 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d101      	bne.n	8007620 <HAL_TIM_PWM_Start_IT+0x1dc>
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <HAL_TIM_PWM_Start_IT+0x1de>
 8007620:	2300      	movs	r3, #0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a25      	ldr	r2, [pc, #148]	; (80076d0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d022      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x242>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007648:	d01d      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x242>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a25      	ldr	r2, [pc, #148]	; (80076e4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d018      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x242>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d013      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x242>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a22      	ldr	r2, [pc, #136]	; (80076ec <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00e      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x242>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <HAL_TIM_PWM_Start_IT+0x290>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x242>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <HAL_TIM_PWM_Start_IT+0x242>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <HAL_TIM_PWM_Start_IT+0x294>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d115      	bne.n	80076b2 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800768e:	4013      	ands	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b06      	cmp	r3, #6
 8007696:	d015      	beq.n	80076c4 <HAL_TIM_PWM_Start_IT+0x280>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769e:	d011      	beq.n	80076c4 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b0:	e008      	b.n	80076c4 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0201 	orr.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	e000      	b.n	80076c6 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40010000 	.word	0x40010000
 80076d4:	40010400 	.word	0x40010400
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40014400 	.word	0x40014400
 80076e0:	40014800 	.word	0x40014800
 80076e4:	40000400 	.word	0x40000400
 80076e8:	40000800 	.word	0x40000800
 80076ec:	40000c00 	.word	0x40000c00
 80076f0:	40001800 	.word	0x40001800
 80076f4:	00010007 	.word	0x00010007

080076f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d020      	beq.n	800775c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01b      	beq.n	800775c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0202 	mvn.w	r2, #2
 800772c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 faf6 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007748:	e005      	b.n	8007756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fae8 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 faf9 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d020      	beq.n	80077a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01b      	beq.n	80077a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0204 	mvn.w	r2, #4
 8007778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2202      	movs	r2, #2
 800777e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fad0 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007794:	e005      	b.n	80077a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fac2 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fad3 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d020      	beq.n	80077f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01b      	beq.n	80077f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0208 	mvn.w	r2, #8
 80077c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2204      	movs	r2, #4
 80077ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 faaa 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 80077e0:	e005      	b.n	80077ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa9c 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 faad 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d020      	beq.n	8007840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01b      	beq.n	8007840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0210 	mvn.w	r2, #16
 8007810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2208      	movs	r2, #8
 8007816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa84 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 800782c:	e005      	b.n	800783a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa76 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa87 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00c      	beq.n	8007864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0201 	mvn.w	r2, #1
 800785c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7f9 fa42 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00c      	beq.n	8007892 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800788a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 ff47 	bl	8008720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00c      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 ff3f 	bl	8008734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00c      	beq.n	80078da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d007      	beq.n	80078da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fa41 	bl	8007d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00c      	beq.n	80078fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f06f 0220 	mvn.w	r2, #32
 80078f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 ff07 	bl	800870c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007922:	2302      	movs	r3, #2
 8007924:	e0ff      	b.n	8007b26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b14      	cmp	r3, #20
 8007932:	f200 80f0 	bhi.w	8007b16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007991 	.word	0x08007991
 8007940:	08007b17 	.word	0x08007b17
 8007944:	08007b17 	.word	0x08007b17
 8007948:	08007b17 	.word	0x08007b17
 800794c:	080079d1 	.word	0x080079d1
 8007950:	08007b17 	.word	0x08007b17
 8007954:	08007b17 	.word	0x08007b17
 8007958:	08007b17 	.word	0x08007b17
 800795c:	08007a13 	.word	0x08007a13
 8007960:	08007b17 	.word	0x08007b17
 8007964:	08007b17 	.word	0x08007b17
 8007968:	08007b17 	.word	0x08007b17
 800796c:	08007a53 	.word	0x08007a53
 8007970:	08007b17 	.word	0x08007b17
 8007974:	08007b17 	.word	0x08007b17
 8007978:	08007b17 	.word	0x08007b17
 800797c:	08007a95 	.word	0x08007a95
 8007980:	08007b17 	.word	0x08007b17
 8007984:	08007b17 	.word	0x08007b17
 8007988:	08007b17 	.word	0x08007b17
 800798c:	08007ad5 	.word	0x08007ad5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fa90 	bl	8007ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0208 	orr.w	r2, r2, #8
 80079aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0204 	bic.w	r2, r2, #4
 80079ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6999      	ldr	r1, [r3, #24]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	691a      	ldr	r2, [r3, #16]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	619a      	str	r2, [r3, #24]
      break;
 80079ce:	e0a5      	b.n	8007b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fb00 	bl	8007fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6999      	ldr	r1, [r3, #24]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	021a      	lsls	r2, r3, #8
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	619a      	str	r2, [r3, #24]
      break;
 8007a10:	e084      	b.n	8007b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fb69 	bl	80080f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0208 	orr.w	r2, r2, #8
 8007a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0204 	bic.w	r2, r2, #4
 8007a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69d9      	ldr	r1, [r3, #28]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	61da      	str	r2, [r3, #28]
      break;
 8007a50:	e064      	b.n	8007b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fbd1 	bl	8008200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69d9      	ldr	r1, [r3, #28]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	021a      	lsls	r2, r3, #8
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	61da      	str	r2, [r3, #28]
      break;
 8007a92:	e043      	b.n	8007b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fc1a 	bl	80082d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0208 	orr.w	r2, r2, #8
 8007aae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0204 	bic.w	r2, r2, #4
 8007abe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ad2:	e023      	b.n	8007b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fc5e 	bl	800839c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007afe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	021a      	lsls	r2, r3, #8
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b14:	e002      	b.n	8007b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop

08007b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_TIM_ConfigClockSource+0x1c>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e0dc      	b.n	8007d06 <HAL_TIM_ConfigClockSource+0x1d6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a64      	ldr	r2, [pc, #400]	; (8007d14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	f000 80a9 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007b88:	4a62      	ldr	r2, [pc, #392]	; (8007d14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	f200 80ae 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007b90:	4a61      	ldr	r2, [pc, #388]	; (8007d18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	f000 80a1 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007b98:	4a5f      	ldr	r2, [pc, #380]	; (8007d18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	f200 80a6 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007ba0:	4a5e      	ldr	r2, [pc, #376]	; (8007d1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	f000 8099 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007ba8:	4a5c      	ldr	r2, [pc, #368]	; (8007d1c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	f200 809e 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007bb0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007bb4:	f000 8091 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007bb8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007bbc:	f200 8096 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc4:	f000 8089 	beq.w	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bcc:	f200 808e 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd4:	d03e      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0x124>
 8007bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bda:	f200 8087 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be2:	f000 8086 	beq.w	8007cf2 <HAL_TIM_ConfigClockSource+0x1c2>
 8007be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bea:	d87f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007bec:	2b70      	cmp	r3, #112	; 0x70
 8007bee:	d01a      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0xf6>
 8007bf0:	2b70      	cmp	r3, #112	; 0x70
 8007bf2:	d87b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007bf4:	2b60      	cmp	r3, #96	; 0x60
 8007bf6:	d050      	beq.n	8007c9a <HAL_TIM_ConfigClockSource+0x16a>
 8007bf8:	2b60      	cmp	r3, #96	; 0x60
 8007bfa:	d877      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007bfc:	2b50      	cmp	r3, #80	; 0x50
 8007bfe:	d03c      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x14a>
 8007c00:	2b50      	cmp	r3, #80	; 0x50
 8007c02:	d873      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007c04:	2b40      	cmp	r3, #64	; 0x40
 8007c06:	d058      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0x18a>
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	d86f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007c0c:	2b30      	cmp	r3, #48	; 0x30
 8007c0e:	d064      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007c10:	2b30      	cmp	r3, #48	; 0x30
 8007c12:	d86b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d060      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d867      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d05c      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d05a      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x1aa>
 8007c24:	e062      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6899      	ldr	r1, [r3, #8]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f000 fc95 	bl	8008564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	609a      	str	r2, [r3, #8]
      break;
 8007c52:	e04f      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6899      	ldr	r1, [r3, #8]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f000 fc7e 	bl	8008564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c76:	609a      	str	r2, [r3, #8]
      break;
 8007c78:	e03c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f000 fbee 	bl	8008468 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2150      	movs	r1, #80	; 0x50
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fc48 	bl	8008528 <TIM_ITRx_SetConfig>
      break;
 8007c98:	e02c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	6859      	ldr	r1, [r3, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f000 fc0d 	bl	80084c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2160      	movs	r1, #96	; 0x60
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fc38 	bl	8008528 <TIM_ITRx_SetConfig>
      break;
 8007cb8:	e01c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6859      	ldr	r1, [r3, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f000 fbce 	bl	8008468 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2140      	movs	r1, #64	; 0x40
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fc28 	bl	8008528 <TIM_ITRx_SetConfig>
      break;
 8007cd8:	e00c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f000 fc1f 	bl	8008528 <TIM_ITRx_SetConfig>
      break;
 8007cea:	e003      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e000      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	ffceff88 	.word	0xffceff88
 8007d14:	00100040 	.word	0x00100040
 8007d18:	00100030 	.word	0x00100030
 8007d1c:	00100020 	.word	0x00100020

08007d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a46      	ldr	r2, [pc, #280]	; (8007e9c <TIM_Base_SetConfig+0x12c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d013      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8e:	d00f      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a43      	ldr	r2, [pc, #268]	; (8007ea0 <TIM_Base_SetConfig+0x130>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a42      	ldr	r2, [pc, #264]	; (8007ea4 <TIM_Base_SetConfig+0x134>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d007      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a41      	ldr	r2, [pc, #260]	; (8007ea8 <TIM_Base_SetConfig+0x138>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a40      	ldr	r2, [pc, #256]	; (8007eac <TIM_Base_SetConfig+0x13c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d108      	bne.n	8007dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a35      	ldr	r2, [pc, #212]	; (8007e9c <TIM_Base_SetConfig+0x12c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d01f      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d01b      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a32      	ldr	r2, [pc, #200]	; (8007ea0 <TIM_Base_SetConfig+0x130>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d017      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a31      	ldr	r2, [pc, #196]	; (8007ea4 <TIM_Base_SetConfig+0x134>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a30      	ldr	r2, [pc, #192]	; (8007ea8 <TIM_Base_SetConfig+0x138>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00f      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a2f      	ldr	r2, [pc, #188]	; (8007eac <TIM_Base_SetConfig+0x13c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d00b      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2e      	ldr	r2, [pc, #184]	; (8007eb0 <TIM_Base_SetConfig+0x140>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d007      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <TIM_Base_SetConfig+0x144>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_Base_SetConfig+0x9a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <TIM_Base_SetConfig+0x148>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d108      	bne.n	8007e1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <TIM_Base_SetConfig+0x12c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00f      	beq.n	8007e68 <TIM_Base_SetConfig+0xf8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a18      	ldr	r2, [pc, #96]	; (8007eac <TIM_Base_SetConfig+0x13c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00b      	beq.n	8007e68 <TIM_Base_SetConfig+0xf8>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a17      	ldr	r2, [pc, #92]	; (8007eb0 <TIM_Base_SetConfig+0x140>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d007      	beq.n	8007e68 <TIM_Base_SetConfig+0xf8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a16      	ldr	r2, [pc, #88]	; (8007eb4 <TIM_Base_SetConfig+0x144>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d003      	beq.n	8007e68 <TIM_Base_SetConfig+0xf8>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a15      	ldr	r2, [pc, #84]	; (8007eb8 <TIM_Base_SetConfig+0x148>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d103      	bne.n	8007e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d105      	bne.n	8007e8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f023 0201 	bic.w	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	611a      	str	r2, [r3, #16]
  }
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	40000c00 	.word	0x40000c00
 8007eac:	40010400 	.word	0x40010400
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800

08007ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f023 0201 	bic.w	r2, r3, #1
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4b37      	ldr	r3, [pc, #220]	; (8007fc4 <TIM_OC1_SetConfig+0x108>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f023 0302 	bic.w	r3, r3, #2
 8007f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a2d      	ldr	r2, [pc, #180]	; (8007fc8 <TIM_OC1_SetConfig+0x10c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00f      	beq.n	8007f38 <TIM_OC1_SetConfig+0x7c>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a2c      	ldr	r2, [pc, #176]	; (8007fcc <TIM_OC1_SetConfig+0x110>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00b      	beq.n	8007f38 <TIM_OC1_SetConfig+0x7c>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <TIM_OC1_SetConfig+0x114>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d007      	beq.n	8007f38 <TIM_OC1_SetConfig+0x7c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a2a      	ldr	r2, [pc, #168]	; (8007fd4 <TIM_OC1_SetConfig+0x118>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_OC1_SetConfig+0x7c>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a29      	ldr	r2, [pc, #164]	; (8007fd8 <TIM_OC1_SetConfig+0x11c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d10c      	bne.n	8007f52 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f023 0308 	bic.w	r3, r3, #8
 8007f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f023 0304 	bic.w	r3, r3, #4
 8007f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a1c      	ldr	r2, [pc, #112]	; (8007fc8 <TIM_OC1_SetConfig+0x10c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_OC1_SetConfig+0xbe>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <TIM_OC1_SetConfig+0x110>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_OC1_SetConfig+0xbe>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <TIM_OC1_SetConfig+0x114>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_OC1_SetConfig+0xbe>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a19      	ldr	r2, [pc, #100]	; (8007fd4 <TIM_OC1_SetConfig+0x118>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_OC1_SetConfig+0xbe>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a18      	ldr	r2, [pc, #96]	; (8007fd8 <TIM_OC1_SetConfig+0x11c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d111      	bne.n	8007f9e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	fffeff8f 	.word	0xfffeff8f
 8007fc8:	40010000 	.word	0x40010000
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800

08007fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	f023 0210 	bic.w	r2, r3, #16
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4b34      	ldr	r3, [pc, #208]	; (80080d8 <TIM_OC2_SetConfig+0xfc>)
 8008008:	4013      	ands	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0320 	bic.w	r3, r3, #32
 8008026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a29      	ldr	r2, [pc, #164]	; (80080dc <TIM_OC2_SetConfig+0x100>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_OC2_SetConfig+0x68>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a28      	ldr	r2, [pc, #160]	; (80080e0 <TIM_OC2_SetConfig+0x104>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d10d      	bne.n	8008060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800804a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800805e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1e      	ldr	r2, [pc, #120]	; (80080dc <TIM_OC2_SetConfig+0x100>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00f      	beq.n	8008088 <TIM_OC2_SetConfig+0xac>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <TIM_OC2_SetConfig+0x104>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00b      	beq.n	8008088 <TIM_OC2_SetConfig+0xac>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1c      	ldr	r2, [pc, #112]	; (80080e4 <TIM_OC2_SetConfig+0x108>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <TIM_OC2_SetConfig+0xac>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <TIM_OC2_SetConfig+0x10c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_OC2_SetConfig+0xac>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a1a      	ldr	r2, [pc, #104]	; (80080ec <TIM_OC2_SetConfig+0x110>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d113      	bne.n	80080b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800808e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	feff8fff 	.word	0xfeff8fff
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40010400 	.word	0x40010400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800

080080f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4b33      	ldr	r3, [pc, #204]	; (80081e8 <TIM_OC3_SetConfig+0xf8>)
 800811c:	4013      	ands	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0303 	bic.w	r3, r3, #3
 8008126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a28      	ldr	r2, [pc, #160]	; (80081ec <TIM_OC3_SetConfig+0xfc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d003      	beq.n	8008156 <TIM_OC3_SetConfig+0x66>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <TIM_OC3_SetConfig+0x100>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d10d      	bne.n	8008172 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800815c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <TIM_OC3_SetConfig+0xfc>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00f      	beq.n	800819a <TIM_OC3_SetConfig+0xaa>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <TIM_OC3_SetConfig+0x100>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00b      	beq.n	800819a <TIM_OC3_SetConfig+0xaa>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a1b      	ldr	r2, [pc, #108]	; (80081f4 <TIM_OC3_SetConfig+0x104>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d007      	beq.n	800819a <TIM_OC3_SetConfig+0xaa>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a1a      	ldr	r2, [pc, #104]	; (80081f8 <TIM_OC3_SetConfig+0x108>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d003      	beq.n	800819a <TIM_OC3_SetConfig+0xaa>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a19      	ldr	r2, [pc, #100]	; (80081fc <TIM_OC3_SetConfig+0x10c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d113      	bne.n	80081c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	621a      	str	r2, [r3, #32]
}
 80081dc:	bf00      	nop
 80081de:	371c      	adds	r7, #28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	fffeff8f 	.word	0xfffeff8f
 80081ec:	40010000 	.word	0x40010000
 80081f0:	40010400 	.word	0x40010400
 80081f4:	40014000 	.word	0x40014000
 80081f8:	40014400 	.word	0x40014400
 80081fc:	40014800 	.word	0x40014800

08008200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4b24      	ldr	r3, [pc, #144]	; (80082bc <TIM_OC4_SetConfig+0xbc>)
 800822c:	4013      	ands	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	021b      	lsls	r3, r3, #8
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4313      	orrs	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800824a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	031b      	lsls	r3, r3, #12
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <TIM_OC4_SetConfig+0xc0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00f      	beq.n	8008280 <TIM_OC4_SetConfig+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a18      	ldr	r2, [pc, #96]	; (80082c4 <TIM_OC4_SetConfig+0xc4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00b      	beq.n	8008280 <TIM_OC4_SetConfig+0x80>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <TIM_OC4_SetConfig+0xc8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d007      	beq.n	8008280 <TIM_OC4_SetConfig+0x80>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a16      	ldr	r2, [pc, #88]	; (80082cc <TIM_OC4_SetConfig+0xcc>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_OC4_SetConfig+0x80>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <TIM_OC4_SetConfig+0xd0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d109      	bne.n	8008294 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	019b      	lsls	r3, r3, #6
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	621a      	str	r2, [r3, #32]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	feff8fff 	.word	0xfeff8fff
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40010400 	.word	0x40010400
 80082c8:	40014000 	.word	0x40014000
 80082cc:	40014400 	.word	0x40014400
 80082d0:	40014800 	.word	0x40014800

080082d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4b21      	ldr	r3, [pc, #132]	; (8008384 <TIM_OC5_SetConfig+0xb0>)
 8008300:	4013      	ands	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008314:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a18      	ldr	r2, [pc, #96]	; (8008388 <TIM_OC5_SetConfig+0xb4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00f      	beq.n	800834a <TIM_OC5_SetConfig+0x76>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <TIM_OC5_SetConfig+0xb8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00b      	beq.n	800834a <TIM_OC5_SetConfig+0x76>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a16      	ldr	r2, [pc, #88]	; (8008390 <TIM_OC5_SetConfig+0xbc>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d007      	beq.n	800834a <TIM_OC5_SetConfig+0x76>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a15      	ldr	r2, [pc, #84]	; (8008394 <TIM_OC5_SetConfig+0xc0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d003      	beq.n	800834a <TIM_OC5_SetConfig+0x76>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a14      	ldr	r2, [pc, #80]	; (8008398 <TIM_OC5_SetConfig+0xc4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d109      	bne.n	800835e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008350:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	621a      	str	r2, [r3, #32]
}
 8008378:	bf00      	nop
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	fffeff8f 	.word	0xfffeff8f
 8008388:	40010000 	.word	0x40010000
 800838c:	40010400 	.word	0x40010400
 8008390:	40014000 	.word	0x40014000
 8008394:	40014400 	.word	0x40014400
 8008398:	40014800 	.word	0x40014800

0800839c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4b22      	ldr	r3, [pc, #136]	; (8008450 <TIM_OC6_SetConfig+0xb4>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	051b      	lsls	r3, r3, #20
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a19      	ldr	r2, [pc, #100]	; (8008454 <TIM_OC6_SetConfig+0xb8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00f      	beq.n	8008414 <TIM_OC6_SetConfig+0x78>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a18      	ldr	r2, [pc, #96]	; (8008458 <TIM_OC6_SetConfig+0xbc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00b      	beq.n	8008414 <TIM_OC6_SetConfig+0x78>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a17      	ldr	r2, [pc, #92]	; (800845c <TIM_OC6_SetConfig+0xc0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_OC6_SetConfig+0x78>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a16      	ldr	r2, [pc, #88]	; (8008460 <TIM_OC6_SetConfig+0xc4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_OC6_SetConfig+0x78>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a15      	ldr	r2, [pc, #84]	; (8008464 <TIM_OC6_SetConfig+0xc8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d109      	bne.n	8008428 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800841a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	029b      	lsls	r3, r3, #10
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	feff8fff 	.word	0xfeff8fff
 8008454:	40010000 	.word	0x40010000
 8008458:	40010400 	.word	0x40010400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800

08008468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	f023 0201 	bic.w	r2, r3, #1
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f023 030a 	bic.w	r3, r3, #10
 80084a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	621a      	str	r2, [r3, #32]
}
 80084ba:	bf00      	nop
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b087      	sub	sp, #28
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	f023 0210 	bic.w	r2, r3, #16
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	031b      	lsls	r3, r3, #12
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008502:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	621a      	str	r2, [r3, #32]
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4b09      	ldr	r3, [pc, #36]	; (8008560 <TIM_ITRx_SetConfig+0x38>)
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4313      	orrs	r3, r2
 8008546:	f043 0307 	orr.w	r3, r3, #7
 800854a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	609a      	str	r2, [r3, #8]
}
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	ffcfff8f 	.word	0xffcfff8f

08008564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800857e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	021a      	lsls	r2, r3, #8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	431a      	orrs	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4313      	orrs	r3, r2
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	609a      	str	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	371c      	adds	r7, #28
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 031f 	and.w	r3, r3, #31
 80085b6:	2201      	movs	r2, #1
 80085b8:	fa02 f303 	lsl.w	r3, r2, r3
 80085bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1a      	ldr	r2, [r3, #32]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	43db      	mvns	r3, r3
 80085c6:	401a      	ands	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a1a      	ldr	r2, [r3, #32]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f003 031f 	and.w	r3, r3, #31
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	fa01 f303 	lsl.w	r3, r1, r3
 80085dc:	431a      	orrs	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	621a      	str	r2, [r3, #32]
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008604:	2302      	movs	r3, #2
 8008606:	e06d      	b.n	80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a30      	ldr	r2, [pc, #192]	; (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d004      	beq.n	800863c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a2f      	ldr	r2, [pc, #188]	; (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d108      	bne.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a20      	ldr	r2, [pc, #128]	; (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d022      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867a:	d01d      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1c      	ldr	r2, [pc, #112]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1a      	ldr	r2, [pc, #104]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a16      	ldr	r2, [pc, #88]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a15      	ldr	r2, [pc, #84]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d10c      	bne.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40010000 	.word	0x40010000
 80086f4:	40010400 	.word	0x40010400
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40001800 	.word	0x40001800
 8008708:	40014000 	.word	0x40014000

0800870c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e042      	b.n	80087e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7f8 feff 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2224      	movs	r2, #36	; 0x24
 8008776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0201 	bic.w	r2, r2, #1
 8008788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 ff82 	bl	800969c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f913 	bl	80089c4 <UART_SetConfig>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e01b      	b.n	80087e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0201 	orr.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f001 f801 	bl	80097e0 <UART_CheckIdleState>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08a      	sub	sp, #40	; 0x28
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	4613      	mov	r3, r2
 80087f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d17b      	bne.n	80088fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_UART_Transmit+0x26>
 8008808:	88fb      	ldrh	r3, [r7, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e074      	b.n	80088fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2221      	movs	r2, #33	; 0x21
 800881e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008822:	f7f9 f903 	bl	8001a2c <HAL_GetTick>
 8008826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008840:	d108      	bne.n	8008854 <HAL_UART_Transmit+0x6c>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d104      	bne.n	8008854 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	e003      	b.n	800885c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008858:	2300      	movs	r3, #0
 800885a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800885c:	e030      	b.n	80088c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2200      	movs	r2, #0
 8008866:	2180      	movs	r1, #128	; 0x80
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f001 f863 	bl	8009934 <UART_WaitOnFlagUntilTimeout>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2220      	movs	r2, #32
 8008878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e03d      	b.n	80088fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008894:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	3302      	adds	r3, #2
 800889a:	61bb      	str	r3, [r7, #24]
 800889c:	e007      	b.n	80088ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	3301      	adds	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1c8      	bne.n	800885e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2200      	movs	r2, #0
 80088d4:	2140      	movs	r1, #64	; 0x40
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f001 f82c 	bl	8009934 <UART_WaitOnFlagUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d005      	beq.n	80088ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e006      	b.n	80088fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	e000      	b.n	80088fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80088fa:	2302      	movs	r3, #2
  }
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3720      	adds	r7, #32
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008918:	2b20      	cmp	r3, #32
 800891a:	d137      	bne.n	800898c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <HAL_UART_Receive_DMA+0x24>
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e030      	b.n	800898e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a18      	ldr	r2, [pc, #96]	; (8008998 <HAL_UART_Receive_DMA+0x94>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d01f      	beq.n	800897c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	613b      	str	r3, [r7, #16]
   return(result);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	623b      	str	r3, [r7, #32]
 800896a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	69f9      	ldr	r1, [r7, #28]
 800896e:	6a3a      	ldr	r2, [r7, #32]
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	61bb      	str	r3, [r7, #24]
   return(result);
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800897c:	88fb      	ldrh	r3, [r7, #6]
 800897e:	461a      	mov	r2, r3
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f001 f844 	bl	8009a10 <UART_Start_Receive_DMA>
 8008988:	4603      	mov	r3, r0
 800898a:	e000      	b.n	800898e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800898c:	2302      	movs	r3, #2
  }
}
 800898e:	4618      	mov	r0, r3
 8008990:	3728      	adds	r7, #40	; 0x28
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	58000c00 	.word	0x58000c00

0800899c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089c8:	b092      	sub	sp, #72	; 0x48
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	431a      	orrs	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	431a      	orrs	r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4bbe      	ldr	r3, [pc, #760]	; (8008cec <UART_SetConfig+0x328>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4ab3      	ldr	r2, [pc, #716]	; (8008cf0 <UART_SetConfig+0x32c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	4baf      	ldr	r3, [pc, #700]	; (8008cf4 <UART_SetConfig+0x330>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a40:	430b      	orrs	r3, r1
 8008a42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	f023 010f 	bic.w	r1, r3, #15
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4aa6      	ldr	r2, [pc, #664]	; (8008cf8 <UART_SetConfig+0x334>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d177      	bne.n	8008b54 <UART_SetConfig+0x190>
 8008a64:	4ba5      	ldr	r3, [pc, #660]	; (8008cfc <UART_SetConfig+0x338>)
 8008a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a6c:	2b28      	cmp	r3, #40	; 0x28
 8008a6e:	d86d      	bhi.n	8008b4c <UART_SetConfig+0x188>
 8008a70:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <UART_SetConfig+0xb4>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008b1d 	.word	0x08008b1d
 8008a7c:	08008b4d 	.word	0x08008b4d
 8008a80:	08008b4d 	.word	0x08008b4d
 8008a84:	08008b4d 	.word	0x08008b4d
 8008a88:	08008b4d 	.word	0x08008b4d
 8008a8c:	08008b4d 	.word	0x08008b4d
 8008a90:	08008b4d 	.word	0x08008b4d
 8008a94:	08008b4d 	.word	0x08008b4d
 8008a98:	08008b25 	.word	0x08008b25
 8008a9c:	08008b4d 	.word	0x08008b4d
 8008aa0:	08008b4d 	.word	0x08008b4d
 8008aa4:	08008b4d 	.word	0x08008b4d
 8008aa8:	08008b4d 	.word	0x08008b4d
 8008aac:	08008b4d 	.word	0x08008b4d
 8008ab0:	08008b4d 	.word	0x08008b4d
 8008ab4:	08008b4d 	.word	0x08008b4d
 8008ab8:	08008b2d 	.word	0x08008b2d
 8008abc:	08008b4d 	.word	0x08008b4d
 8008ac0:	08008b4d 	.word	0x08008b4d
 8008ac4:	08008b4d 	.word	0x08008b4d
 8008ac8:	08008b4d 	.word	0x08008b4d
 8008acc:	08008b4d 	.word	0x08008b4d
 8008ad0:	08008b4d 	.word	0x08008b4d
 8008ad4:	08008b4d 	.word	0x08008b4d
 8008ad8:	08008b35 	.word	0x08008b35
 8008adc:	08008b4d 	.word	0x08008b4d
 8008ae0:	08008b4d 	.word	0x08008b4d
 8008ae4:	08008b4d 	.word	0x08008b4d
 8008ae8:	08008b4d 	.word	0x08008b4d
 8008aec:	08008b4d 	.word	0x08008b4d
 8008af0:	08008b4d 	.word	0x08008b4d
 8008af4:	08008b4d 	.word	0x08008b4d
 8008af8:	08008b3d 	.word	0x08008b3d
 8008afc:	08008b4d 	.word	0x08008b4d
 8008b00:	08008b4d 	.word	0x08008b4d
 8008b04:	08008b4d 	.word	0x08008b4d
 8008b08:	08008b4d 	.word	0x08008b4d
 8008b0c:	08008b4d 	.word	0x08008b4d
 8008b10:	08008b4d 	.word	0x08008b4d
 8008b14:	08008b4d 	.word	0x08008b4d
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e326      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b24:	2304      	movs	r3, #4
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e322      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e31e      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b34:	2310      	movs	r3, #16
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e31a      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e316      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e312      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b4c:	2380      	movs	r3, #128	; 0x80
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b52:	e30e      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a69      	ldr	r2, [pc, #420]	; (8008d00 <UART_SetConfig+0x33c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d130      	bne.n	8008bc0 <UART_SetConfig+0x1fc>
 8008b5e:	4b67      	ldr	r3, [pc, #412]	; (8008cfc <UART_SetConfig+0x338>)
 8008b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	2b05      	cmp	r3, #5
 8008b68:	d826      	bhi.n	8008bb8 <UART_SetConfig+0x1f4>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <UART_SetConfig+0x1ac>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b89 	.word	0x08008b89
 8008b74:	08008b91 	.word	0x08008b91
 8008b78:	08008b99 	.word	0x08008b99
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ba9 	.word	0x08008ba9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e2f0      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b90:	2304      	movs	r3, #4
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e2ec      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008b98:	2308      	movs	r3, #8
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e2e8      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e2e4      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ba8:	2320      	movs	r3, #32
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e2e0      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e2dc      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e2d8      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a4f      	ldr	r2, [pc, #316]	; (8008d04 <UART_SetConfig+0x340>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d130      	bne.n	8008c2c <UART_SetConfig+0x268>
 8008bca:	4b4c      	ldr	r3, [pc, #304]	; (8008cfc <UART_SetConfig+0x338>)
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d826      	bhi.n	8008c24 <UART_SetConfig+0x260>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <UART_SetConfig+0x218>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c0d 	.word	0x08008c0d
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e2ba      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e2b6      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e2b2      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c12:	e2ae      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c14:	2320      	movs	r3, #32
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e2aa      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c1c:	2340      	movs	r3, #64	; 0x40
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e2a6      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c24:	2380      	movs	r3, #128	; 0x80
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2a:	e2a2      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a35      	ldr	r2, [pc, #212]	; (8008d08 <UART_SetConfig+0x344>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d130      	bne.n	8008c98 <UART_SetConfig+0x2d4>
 8008c36:	4b31      	ldr	r3, [pc, #196]	; (8008cfc <UART_SetConfig+0x338>)
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	2b05      	cmp	r3, #5
 8008c40:	d826      	bhi.n	8008c90 <UART_SetConfig+0x2cc>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <UART_SetConfig+0x284>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c61 	.word	0x08008c61
 8008c4c:	08008c69 	.word	0x08008c69
 8008c50:	08008c71 	.word	0x08008c71
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c81 	.word	0x08008c81
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c66:	e284      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6e:	e280      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c70:	2308      	movs	r3, #8
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c76:	e27c      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7e:	e278      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c80:	2320      	movs	r3, #32
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c86:	e274      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8e:	e270      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c90:	2380      	movs	r3, #128	; 0x80
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c96:	e26c      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1b      	ldr	r2, [pc, #108]	; (8008d0c <UART_SetConfig+0x348>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d142      	bne.n	8008d28 <UART_SetConfig+0x364>
 8008ca2:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <UART_SetConfig+0x338>)
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d838      	bhi.n	8008d20 <UART_SetConfig+0x35c>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <UART_SetConfig+0x2f0>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008ccd 	.word	0x08008ccd
 8008cb8:	08008cd5 	.word	0x08008cd5
 8008cbc:	08008cdd 	.word	0x08008cdd
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008d11 	.word	0x08008d11
 8008cc8:	08008d19 	.word	0x08008d19
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e24e      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e24a      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce2:	e246      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cea:	e242      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008cec:	cfff69f3 	.word	0xcfff69f3
 8008cf0:	58000c00 	.word	0x58000c00
 8008cf4:	11fff4ff 	.word	0x11fff4ff
 8008cf8:	40011000 	.word	0x40011000
 8008cfc:	58024400 	.word	0x58024400
 8008d00:	40004400 	.word	0x40004400
 8008d04:	40004800 	.word	0x40004800
 8008d08:	40004c00 	.word	0x40004c00
 8008d0c:	40005000 	.word	0x40005000
 8008d10:	2320      	movs	r3, #32
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e22c      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d1e:	e228      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008d20:	2380      	movs	r3, #128	; 0x80
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d26:	e224      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4ab1      	ldr	r2, [pc, #708]	; (8008ff4 <UART_SetConfig+0x630>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d176      	bne.n	8008e20 <UART_SetConfig+0x45c>
 8008d32:	4bb1      	ldr	r3, [pc, #708]	; (8008ff8 <UART_SetConfig+0x634>)
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d3a:	2b28      	cmp	r3, #40	; 0x28
 8008d3c:	d86c      	bhi.n	8008e18 <UART_SetConfig+0x454>
 8008d3e:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <UART_SetConfig+0x380>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008de9 	.word	0x08008de9
 8008d48:	08008e19 	.word	0x08008e19
 8008d4c:	08008e19 	.word	0x08008e19
 8008d50:	08008e19 	.word	0x08008e19
 8008d54:	08008e19 	.word	0x08008e19
 8008d58:	08008e19 	.word	0x08008e19
 8008d5c:	08008e19 	.word	0x08008e19
 8008d60:	08008e19 	.word	0x08008e19
 8008d64:	08008df1 	.word	0x08008df1
 8008d68:	08008e19 	.word	0x08008e19
 8008d6c:	08008e19 	.word	0x08008e19
 8008d70:	08008e19 	.word	0x08008e19
 8008d74:	08008e19 	.word	0x08008e19
 8008d78:	08008e19 	.word	0x08008e19
 8008d7c:	08008e19 	.word	0x08008e19
 8008d80:	08008e19 	.word	0x08008e19
 8008d84:	08008df9 	.word	0x08008df9
 8008d88:	08008e19 	.word	0x08008e19
 8008d8c:	08008e19 	.word	0x08008e19
 8008d90:	08008e19 	.word	0x08008e19
 8008d94:	08008e19 	.word	0x08008e19
 8008d98:	08008e19 	.word	0x08008e19
 8008d9c:	08008e19 	.word	0x08008e19
 8008da0:	08008e19 	.word	0x08008e19
 8008da4:	08008e01 	.word	0x08008e01
 8008da8:	08008e19 	.word	0x08008e19
 8008dac:	08008e19 	.word	0x08008e19
 8008db0:	08008e19 	.word	0x08008e19
 8008db4:	08008e19 	.word	0x08008e19
 8008db8:	08008e19 	.word	0x08008e19
 8008dbc:	08008e19 	.word	0x08008e19
 8008dc0:	08008e19 	.word	0x08008e19
 8008dc4:	08008e09 	.word	0x08008e09
 8008dc8:	08008e19 	.word	0x08008e19
 8008dcc:	08008e19 	.word	0x08008e19
 8008dd0:	08008e19 	.word	0x08008e19
 8008dd4:	08008e19 	.word	0x08008e19
 8008dd8:	08008e19 	.word	0x08008e19
 8008ddc:	08008e19 	.word	0x08008e19
 8008de0:	08008e19 	.word	0x08008e19
 8008de4:	08008e11 	.word	0x08008e11
 8008de8:	2301      	movs	r3, #1
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e1c0      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008df0:	2304      	movs	r3, #4
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e1bc      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008df8:	2308      	movs	r3, #8
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e1b8      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e00:	2310      	movs	r3, #16
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e06:	e1b4      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e1b0      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e1ac      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e18:	2380      	movs	r3, #128	; 0x80
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1e:	e1a8      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a75      	ldr	r2, [pc, #468]	; (8008ffc <UART_SetConfig+0x638>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d130      	bne.n	8008e8c <UART_SetConfig+0x4c8>
 8008e2a:	4b73      	ldr	r3, [pc, #460]	; (8008ff8 <UART_SetConfig+0x634>)
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d826      	bhi.n	8008e84 <UART_SetConfig+0x4c0>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <UART_SetConfig+0x478>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e55 	.word	0x08008e55
 8008e40:	08008e5d 	.word	0x08008e5d
 8008e44:	08008e65 	.word	0x08008e65
 8008e48:	08008e6d 	.word	0x08008e6d
 8008e4c:	08008e75 	.word	0x08008e75
 8008e50:	08008e7d 	.word	0x08008e7d
 8008e54:	2300      	movs	r3, #0
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5a:	e18a      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e62:	e186      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e64:	2308      	movs	r3, #8
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6a:	e182      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e72:	e17e      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e74:	2320      	movs	r3, #32
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e17a      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e7c:	2340      	movs	r3, #64	; 0x40
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e176      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8a:	e172      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a5b      	ldr	r2, [pc, #364]	; (8009000 <UART_SetConfig+0x63c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d130      	bne.n	8008ef8 <UART_SetConfig+0x534>
 8008e96:	4b58      	ldr	r3, [pc, #352]	; (8008ff8 <UART_SetConfig+0x634>)
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	f003 0307 	and.w	r3, r3, #7
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	d826      	bhi.n	8008ef0 <UART_SetConfig+0x52c>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <UART_SetConfig+0x4e4>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008ec1 	.word	0x08008ec1
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008ed9 	.word	0x08008ed9
 8008eb8:	08008ee1 	.word	0x08008ee1
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec6:	e154      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ece:	e150      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed6:	e14c      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ede:	e148      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e144      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e140      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ef0:	2380      	movs	r3, #128	; 0x80
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef6:	e13c      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a41      	ldr	r2, [pc, #260]	; (8009004 <UART_SetConfig+0x640>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	f040 8082 	bne.w	8009008 <UART_SetConfig+0x644>
 8008f04:	4b3c      	ldr	r3, [pc, #240]	; (8008ff8 <UART_SetConfig+0x634>)
 8008f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f0c:	2b28      	cmp	r3, #40	; 0x28
 8008f0e:	d86d      	bhi.n	8008fec <UART_SetConfig+0x628>
 8008f10:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <UART_SetConfig+0x554>)
 8008f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f16:	bf00      	nop
 8008f18:	08008fbd 	.word	0x08008fbd
 8008f1c:	08008fed 	.word	0x08008fed
 8008f20:	08008fed 	.word	0x08008fed
 8008f24:	08008fed 	.word	0x08008fed
 8008f28:	08008fed 	.word	0x08008fed
 8008f2c:	08008fed 	.word	0x08008fed
 8008f30:	08008fed 	.word	0x08008fed
 8008f34:	08008fed 	.word	0x08008fed
 8008f38:	08008fc5 	.word	0x08008fc5
 8008f3c:	08008fed 	.word	0x08008fed
 8008f40:	08008fed 	.word	0x08008fed
 8008f44:	08008fed 	.word	0x08008fed
 8008f48:	08008fed 	.word	0x08008fed
 8008f4c:	08008fed 	.word	0x08008fed
 8008f50:	08008fed 	.word	0x08008fed
 8008f54:	08008fed 	.word	0x08008fed
 8008f58:	08008fcd 	.word	0x08008fcd
 8008f5c:	08008fed 	.word	0x08008fed
 8008f60:	08008fed 	.word	0x08008fed
 8008f64:	08008fed 	.word	0x08008fed
 8008f68:	08008fed 	.word	0x08008fed
 8008f6c:	08008fed 	.word	0x08008fed
 8008f70:	08008fed 	.word	0x08008fed
 8008f74:	08008fed 	.word	0x08008fed
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08008fed 	.word	0x08008fed
 8008f80:	08008fed 	.word	0x08008fed
 8008f84:	08008fed 	.word	0x08008fed
 8008f88:	08008fed 	.word	0x08008fed
 8008f8c:	08008fed 	.word	0x08008fed
 8008f90:	08008fed 	.word	0x08008fed
 8008f94:	08008fed 	.word	0x08008fed
 8008f98:	08008fdd 	.word	0x08008fdd
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08008fed 	.word	0x08008fed
 8008fa4:	08008fed 	.word	0x08008fed
 8008fa8:	08008fed 	.word	0x08008fed
 8008fac:	08008fed 	.word	0x08008fed
 8008fb0:	08008fed 	.word	0x08008fed
 8008fb4:	08008fed 	.word	0x08008fed
 8008fb8:	08008fe5 	.word	0x08008fe5
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc2:	e0d6      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fca:	e0d2      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008fcc:	2308      	movs	r3, #8
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd2:	e0ce      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fda:	e0ca      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008fdc:	2320      	movs	r3, #32
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe2:	e0c6      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008fe4:	2340      	movs	r3, #64	; 0x40
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fea:	e0c2      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008fec:	2380      	movs	r3, #128	; 0x80
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff2:	e0be      	b.n	8009172 <UART_SetConfig+0x7ae>
 8008ff4:	40011400 	.word	0x40011400
 8008ff8:	58024400 	.word	0x58024400
 8008ffc:	40007800 	.word	0x40007800
 8009000:	40007c00 	.word	0x40007c00
 8009004:	40011800 	.word	0x40011800
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4aad      	ldr	r2, [pc, #692]	; (80092c4 <UART_SetConfig+0x900>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d176      	bne.n	8009100 <UART_SetConfig+0x73c>
 8009012:	4bad      	ldr	r3, [pc, #692]	; (80092c8 <UART_SetConfig+0x904>)
 8009014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800901a:	2b28      	cmp	r3, #40	; 0x28
 800901c:	d86c      	bhi.n	80090f8 <UART_SetConfig+0x734>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <UART_SetConfig+0x660>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	080090c9 	.word	0x080090c9
 8009028:	080090f9 	.word	0x080090f9
 800902c:	080090f9 	.word	0x080090f9
 8009030:	080090f9 	.word	0x080090f9
 8009034:	080090f9 	.word	0x080090f9
 8009038:	080090f9 	.word	0x080090f9
 800903c:	080090f9 	.word	0x080090f9
 8009040:	080090f9 	.word	0x080090f9
 8009044:	080090d1 	.word	0x080090d1
 8009048:	080090f9 	.word	0x080090f9
 800904c:	080090f9 	.word	0x080090f9
 8009050:	080090f9 	.word	0x080090f9
 8009054:	080090f9 	.word	0x080090f9
 8009058:	080090f9 	.word	0x080090f9
 800905c:	080090f9 	.word	0x080090f9
 8009060:	080090f9 	.word	0x080090f9
 8009064:	080090d9 	.word	0x080090d9
 8009068:	080090f9 	.word	0x080090f9
 800906c:	080090f9 	.word	0x080090f9
 8009070:	080090f9 	.word	0x080090f9
 8009074:	080090f9 	.word	0x080090f9
 8009078:	080090f9 	.word	0x080090f9
 800907c:	080090f9 	.word	0x080090f9
 8009080:	080090f9 	.word	0x080090f9
 8009084:	080090e1 	.word	0x080090e1
 8009088:	080090f9 	.word	0x080090f9
 800908c:	080090f9 	.word	0x080090f9
 8009090:	080090f9 	.word	0x080090f9
 8009094:	080090f9 	.word	0x080090f9
 8009098:	080090f9 	.word	0x080090f9
 800909c:	080090f9 	.word	0x080090f9
 80090a0:	080090f9 	.word	0x080090f9
 80090a4:	080090e9 	.word	0x080090e9
 80090a8:	080090f9 	.word	0x080090f9
 80090ac:	080090f9 	.word	0x080090f9
 80090b0:	080090f9 	.word	0x080090f9
 80090b4:	080090f9 	.word	0x080090f9
 80090b8:	080090f9 	.word	0x080090f9
 80090bc:	080090f9 	.word	0x080090f9
 80090c0:	080090f9 	.word	0x080090f9
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e050      	b.n	8009172 <UART_SetConfig+0x7ae>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e04c      	b.n	8009172 <UART_SetConfig+0x7ae>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e048      	b.n	8009172 <UART_SetConfig+0x7ae>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e044      	b.n	8009172 <UART_SetConfig+0x7ae>
 80090e8:	2320      	movs	r3, #32
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e040      	b.n	8009172 <UART_SetConfig+0x7ae>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f6:	e03c      	b.n	8009172 <UART_SetConfig+0x7ae>
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fe:	e038      	b.n	8009172 <UART_SetConfig+0x7ae>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a71      	ldr	r2, [pc, #452]	; (80092cc <UART_SetConfig+0x908>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d130      	bne.n	800916c <UART_SetConfig+0x7a8>
 800910a:	4b6f      	ldr	r3, [pc, #444]	; (80092c8 <UART_SetConfig+0x904>)
 800910c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	2b05      	cmp	r3, #5
 8009114:	d826      	bhi.n	8009164 <UART_SetConfig+0x7a0>
 8009116:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0x758>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009135 	.word	0x08009135
 8009120:	0800913d 	.word	0x0800913d
 8009124:	08009145 	.word	0x08009145
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009155 	.word	0x08009155
 8009130:	0800915d 	.word	0x0800915d
 8009134:	2302      	movs	r3, #2
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913a:	e01a      	b.n	8009172 <UART_SetConfig+0x7ae>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009142:	e016      	b.n	8009172 <UART_SetConfig+0x7ae>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914a:	e012      	b.n	8009172 <UART_SetConfig+0x7ae>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009152:	e00e      	b.n	8009172 <UART_SetConfig+0x7ae>
 8009154:	2320      	movs	r3, #32
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915a:	e00a      	b.n	8009172 <UART_SetConfig+0x7ae>
 800915c:	2340      	movs	r3, #64	; 0x40
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009162:	e006      	b.n	8009172 <UART_SetConfig+0x7ae>
 8009164:	2380      	movs	r3, #128	; 0x80
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916a:	e002      	b.n	8009172 <UART_SetConfig+0x7ae>
 800916c:	2380      	movs	r3, #128	; 0x80
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a55      	ldr	r2, [pc, #340]	; (80092cc <UART_SetConfig+0x908>)
 8009178:	4293      	cmp	r3, r2
 800917a:	f040 80f8 	bne.w	800936e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800917e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009182:	2b20      	cmp	r3, #32
 8009184:	dc46      	bgt.n	8009214 <UART_SetConfig+0x850>
 8009186:	2b02      	cmp	r3, #2
 8009188:	db75      	blt.n	8009276 <UART_SetConfig+0x8b2>
 800918a:	3b02      	subs	r3, #2
 800918c:	2b1e      	cmp	r3, #30
 800918e:	d872      	bhi.n	8009276 <UART_SetConfig+0x8b2>
 8009190:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <UART_SetConfig+0x7d4>)
 8009192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009196:	bf00      	nop
 8009198:	0800921b 	.word	0x0800921b
 800919c:	08009277 	.word	0x08009277
 80091a0:	08009223 	.word	0x08009223
 80091a4:	08009277 	.word	0x08009277
 80091a8:	08009277 	.word	0x08009277
 80091ac:	08009277 	.word	0x08009277
 80091b0:	08009233 	.word	0x08009233
 80091b4:	08009277 	.word	0x08009277
 80091b8:	08009277 	.word	0x08009277
 80091bc:	08009277 	.word	0x08009277
 80091c0:	08009277 	.word	0x08009277
 80091c4:	08009277 	.word	0x08009277
 80091c8:	08009277 	.word	0x08009277
 80091cc:	08009277 	.word	0x08009277
 80091d0:	08009243 	.word	0x08009243
 80091d4:	08009277 	.word	0x08009277
 80091d8:	08009277 	.word	0x08009277
 80091dc:	08009277 	.word	0x08009277
 80091e0:	08009277 	.word	0x08009277
 80091e4:	08009277 	.word	0x08009277
 80091e8:	08009277 	.word	0x08009277
 80091ec:	08009277 	.word	0x08009277
 80091f0:	08009277 	.word	0x08009277
 80091f4:	08009277 	.word	0x08009277
 80091f8:	08009277 	.word	0x08009277
 80091fc:	08009277 	.word	0x08009277
 8009200:	08009277 	.word	0x08009277
 8009204:	08009277 	.word	0x08009277
 8009208:	08009277 	.word	0x08009277
 800920c:	08009277 	.word	0x08009277
 8009210:	08009269 	.word	0x08009269
 8009214:	2b40      	cmp	r3, #64	; 0x40
 8009216:	d02a      	beq.n	800926e <UART_SetConfig+0x8aa>
 8009218:	e02d      	b.n	8009276 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800921a:	f7fd fab1 	bl	8006780 <HAL_RCCEx_GetD3PCLK1Freq>
 800921e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009220:	e02f      	b.n	8009282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009226:	4618      	mov	r0, r3
 8009228:	f7fd fac0 	bl	80067ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009230:	e027      	b.n	8009282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009232:	f107 0318 	add.w	r3, r7, #24
 8009236:	4618      	mov	r0, r3
 8009238:	f7fd fc0c 	bl	8006a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009240:	e01f      	b.n	8009282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009242:	4b21      	ldr	r3, [pc, #132]	; (80092c8 <UART_SetConfig+0x904>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800924e:	4b1e      	ldr	r3, [pc, #120]	; (80092c8 <UART_SetConfig+0x904>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	08db      	lsrs	r3, r3, #3
 8009254:	f003 0303 	and.w	r3, r3, #3
 8009258:	4a1d      	ldr	r2, [pc, #116]	; (80092d0 <UART_SetConfig+0x90c>)
 800925a:	fa22 f303 	lsr.w	r3, r2, r3
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009260:	e00f      	b.n	8009282 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009262:	4b1b      	ldr	r3, [pc, #108]	; (80092d0 <UART_SetConfig+0x90c>)
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009266:	e00c      	b.n	8009282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <UART_SetConfig+0x910>)
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800926c:	e009      	b.n	8009282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800926e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009274:	e005      	b.n	8009282 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 81ee 	beq.w	8009666 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	4a12      	ldr	r2, [pc, #72]	; (80092d8 <UART_SetConfig+0x914>)
 8009290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009294:	461a      	mov	r2, r3
 8009296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009298:	fbb3 f3f2 	udiv	r3, r3, r2
 800929c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	4613      	mov	r3, r2
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d305      	bcc.n	80092ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d910      	bls.n	80092dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092c0:	e1d1      	b.n	8009666 <UART_SetConfig+0xca2>
 80092c2:	bf00      	nop
 80092c4:	40011c00 	.word	0x40011c00
 80092c8:	58024400 	.word	0x58024400
 80092cc:	58000c00 	.word	0x58000c00
 80092d0:	03d09000 	.word	0x03d09000
 80092d4:	003d0900 	.word	0x003d0900
 80092d8:	0800ac60 	.word	0x0800ac60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092de:	2200      	movs	r2, #0
 80092e0:	60bb      	str	r3, [r7, #8]
 80092e2:	60fa      	str	r2, [r7, #12]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	4ac0      	ldr	r2, [pc, #768]	; (80095ec <UART_SetConfig+0xc28>)
 80092ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	2200      	movs	r2, #0
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092fe:	f7f7 f84f 	bl	80003a0 <__aeabi_uldivmod>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4610      	mov	r0, r2
 8009308:	4619      	mov	r1, r3
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	020b      	lsls	r3, r1, #8
 8009314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009318:	0202      	lsls	r2, r0, #8
 800931a:	6979      	ldr	r1, [r7, #20]
 800931c:	6849      	ldr	r1, [r1, #4]
 800931e:	0849      	lsrs	r1, r1, #1
 8009320:	2000      	movs	r0, #0
 8009322:	460c      	mov	r4, r1
 8009324:	4605      	mov	r5, r0
 8009326:	eb12 0804 	adds.w	r8, r2, r4
 800932a:	eb43 0905 	adc.w	r9, r3, r5
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	469a      	mov	sl, r3
 8009336:	4693      	mov	fp, r2
 8009338:	4652      	mov	r2, sl
 800933a:	465b      	mov	r3, fp
 800933c:	4640      	mov	r0, r8
 800933e:	4649      	mov	r1, r9
 8009340:	f7f7 f82e 	bl	80003a0 <__aeabi_uldivmod>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4613      	mov	r3, r2
 800934a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009352:	d308      	bcc.n	8009366 <UART_SetConfig+0x9a2>
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800935a:	d204      	bcs.n	8009366 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009362:	60da      	str	r2, [r3, #12]
 8009364:	e17f      	b.n	8009666 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800936c:	e17b      	b.n	8009666 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009376:	f040 80bd 	bne.w	80094f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800937a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800937e:	2b20      	cmp	r3, #32
 8009380:	dc48      	bgt.n	8009414 <UART_SetConfig+0xa50>
 8009382:	2b00      	cmp	r3, #0
 8009384:	db7b      	blt.n	800947e <UART_SetConfig+0xaba>
 8009386:	2b20      	cmp	r3, #32
 8009388:	d879      	bhi.n	800947e <UART_SetConfig+0xaba>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <UART_SetConfig+0x9cc>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	0800941b 	.word	0x0800941b
 8009394:	08009423 	.word	0x08009423
 8009398:	0800947f 	.word	0x0800947f
 800939c:	0800947f 	.word	0x0800947f
 80093a0:	0800942b 	.word	0x0800942b
 80093a4:	0800947f 	.word	0x0800947f
 80093a8:	0800947f 	.word	0x0800947f
 80093ac:	0800947f 	.word	0x0800947f
 80093b0:	0800943b 	.word	0x0800943b
 80093b4:	0800947f 	.word	0x0800947f
 80093b8:	0800947f 	.word	0x0800947f
 80093bc:	0800947f 	.word	0x0800947f
 80093c0:	0800947f 	.word	0x0800947f
 80093c4:	0800947f 	.word	0x0800947f
 80093c8:	0800947f 	.word	0x0800947f
 80093cc:	0800947f 	.word	0x0800947f
 80093d0:	0800944b 	.word	0x0800944b
 80093d4:	0800947f 	.word	0x0800947f
 80093d8:	0800947f 	.word	0x0800947f
 80093dc:	0800947f 	.word	0x0800947f
 80093e0:	0800947f 	.word	0x0800947f
 80093e4:	0800947f 	.word	0x0800947f
 80093e8:	0800947f 	.word	0x0800947f
 80093ec:	0800947f 	.word	0x0800947f
 80093f0:	0800947f 	.word	0x0800947f
 80093f4:	0800947f 	.word	0x0800947f
 80093f8:	0800947f 	.word	0x0800947f
 80093fc:	0800947f 	.word	0x0800947f
 8009400:	0800947f 	.word	0x0800947f
 8009404:	0800947f 	.word	0x0800947f
 8009408:	0800947f 	.word	0x0800947f
 800940c:	0800947f 	.word	0x0800947f
 8009410:	08009471 	.word	0x08009471
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	d02e      	beq.n	8009476 <UART_SetConfig+0xab2>
 8009418:	e031      	b.n	800947e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800941a:	f7fb ffc7 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 800941e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009420:	e033      	b.n	800948a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009422:	f7fb ffd9 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 8009426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009428:	e02f      	b.n	800948a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800942a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800942e:	4618      	mov	r0, r3
 8009430:	f7fd f9bc 	bl	80067ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009438:	e027      	b.n	800948a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943a:	f107 0318 	add.w	r3, r7, #24
 800943e:	4618      	mov	r0, r3
 8009440:	f7fd fb08 	bl	8006a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009448:	e01f      	b.n	800948a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800944a:	4b69      	ldr	r3, [pc, #420]	; (80095f0 <UART_SetConfig+0xc2c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009456:	4b66      	ldr	r3, [pc, #408]	; (80095f0 <UART_SetConfig+0xc2c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	08db      	lsrs	r3, r3, #3
 800945c:	f003 0303 	and.w	r3, r3, #3
 8009460:	4a64      	ldr	r2, [pc, #400]	; (80095f4 <UART_SetConfig+0xc30>)
 8009462:	fa22 f303 	lsr.w	r3, r2, r3
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009468:	e00f      	b.n	800948a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800946a:	4b62      	ldr	r3, [pc, #392]	; (80095f4 <UART_SetConfig+0xc30>)
 800946c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800946e:	e00c      	b.n	800948a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009470:	4b61      	ldr	r3, [pc, #388]	; (80095f8 <UART_SetConfig+0xc34>)
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009474:	e009      	b.n	800948a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800947c:	e005      	b.n	800948a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800948a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 80ea 	beq.w	8009666 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	4a55      	ldr	r2, [pc, #340]	; (80095ec <UART_SetConfig+0xc28>)
 8009498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800949c:	461a      	mov	r2, r3
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094a4:	005a      	lsls	r2, r3, #1
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	085b      	lsrs	r3, r3, #1
 80094ac:	441a      	add	r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	2b0f      	cmp	r3, #15
 80094bc:	d916      	bls.n	80094ec <UART_SetConfig+0xb28>
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c4:	d212      	bcs.n	80094ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	f023 030f 	bic.w	r3, r3, #15
 80094ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	085b      	lsrs	r3, r3, #1
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	b29a      	uxth	r2, r3
 80094dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80094de:	4313      	orrs	r3, r2
 80094e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80094e8:	60da      	str	r2, [r3, #12]
 80094ea:	e0bc      	b.n	8009666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80094f2:	e0b8      	b.n	8009666 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	dc4b      	bgt.n	8009594 <UART_SetConfig+0xbd0>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f2c0 8087 	blt.w	8009610 <UART_SetConfig+0xc4c>
 8009502:	2b20      	cmp	r3, #32
 8009504:	f200 8084 	bhi.w	8009610 <UART_SetConfig+0xc4c>
 8009508:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <UART_SetConfig+0xb4c>)
 800950a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950e:	bf00      	nop
 8009510:	0800959b 	.word	0x0800959b
 8009514:	080095a3 	.word	0x080095a3
 8009518:	08009611 	.word	0x08009611
 800951c:	08009611 	.word	0x08009611
 8009520:	080095ab 	.word	0x080095ab
 8009524:	08009611 	.word	0x08009611
 8009528:	08009611 	.word	0x08009611
 800952c:	08009611 	.word	0x08009611
 8009530:	080095bb 	.word	0x080095bb
 8009534:	08009611 	.word	0x08009611
 8009538:	08009611 	.word	0x08009611
 800953c:	08009611 	.word	0x08009611
 8009540:	08009611 	.word	0x08009611
 8009544:	08009611 	.word	0x08009611
 8009548:	08009611 	.word	0x08009611
 800954c:	08009611 	.word	0x08009611
 8009550:	080095cb 	.word	0x080095cb
 8009554:	08009611 	.word	0x08009611
 8009558:	08009611 	.word	0x08009611
 800955c:	08009611 	.word	0x08009611
 8009560:	08009611 	.word	0x08009611
 8009564:	08009611 	.word	0x08009611
 8009568:	08009611 	.word	0x08009611
 800956c:	08009611 	.word	0x08009611
 8009570:	08009611 	.word	0x08009611
 8009574:	08009611 	.word	0x08009611
 8009578:	08009611 	.word	0x08009611
 800957c:	08009611 	.word	0x08009611
 8009580:	08009611 	.word	0x08009611
 8009584:	08009611 	.word	0x08009611
 8009588:	08009611 	.word	0x08009611
 800958c:	08009611 	.word	0x08009611
 8009590:	08009603 	.word	0x08009603
 8009594:	2b40      	cmp	r3, #64	; 0x40
 8009596:	d037      	beq.n	8009608 <UART_SetConfig+0xc44>
 8009598:	e03a      	b.n	8009610 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800959a:	f7fb ff07 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 800959e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095a0:	e03c      	b.n	800961c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095a2:	f7fb ff19 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 80095a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095a8:	e038      	b.n	800961c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fd f8fc 	bl	80067ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b8:	e030      	b.n	800961c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ba:	f107 0318 	add.w	r3, r7, #24
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fd fa48 	bl	8006a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c8:	e028      	b.n	800961c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ca:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <UART_SetConfig+0xc2c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d012      	beq.n	80095fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095d6:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <UART_SetConfig+0xc2c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	08db      	lsrs	r3, r3, #3
 80095dc:	f003 0303 	and.w	r3, r3, #3
 80095e0:	4a04      	ldr	r2, [pc, #16]	; (80095f4 <UART_SetConfig+0xc30>)
 80095e2:	fa22 f303 	lsr.w	r3, r2, r3
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095e8:	e018      	b.n	800961c <UART_SetConfig+0xc58>
 80095ea:	bf00      	nop
 80095ec:	0800ac60 	.word	0x0800ac60
 80095f0:	58024400 	.word	0x58024400
 80095f4:	03d09000 	.word	0x03d09000
 80095f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80095fc:	4b24      	ldr	r3, [pc, #144]	; (8009690 <UART_SetConfig+0xccc>)
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009600:	e00c      	b.n	800961c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009602:	4b24      	ldr	r3, [pc, #144]	; (8009694 <UART_SetConfig+0xcd0>)
 8009604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009606:	e009      	b.n	800961c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960e:	e005      	b.n	800961c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800961a:	bf00      	nop
    }

    if (pclk != 0U)
 800961c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961e:	2b00      	cmp	r3, #0
 8009620:	d021      	beq.n	8009666 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	4a1c      	ldr	r2, [pc, #112]	; (8009698 <UART_SetConfig+0xcd4>)
 8009628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800962c:	461a      	mov	r2, r3
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	fbb3 f2f2 	udiv	r2, r3, r2
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	441a      	add	r2, r3
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	fbb2 f3f3 	udiv	r3, r2, r3
 8009644:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	2b0f      	cmp	r3, #15
 800964a:	d909      	bls.n	8009660 <UART_SetConfig+0xc9c>
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009652:	d205      	bcs.n	8009660 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	b29a      	uxth	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60da      	str	r2, [r3, #12]
 800965e:	e002      	b.n	8009666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2201      	movs	r2, #1
 800966a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2201      	movs	r2, #1
 8009672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2200      	movs	r2, #0
 800967a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2200      	movs	r2, #0
 8009680:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009682:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009686:	4618      	mov	r0, r3
 8009688:	3748      	adds	r7, #72	; 0x48
 800968a:	46bd      	mov	sp, r7
 800968c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009690:	03d09000 	.word	0x03d09000
 8009694:	003d0900 	.word	0x003d0900
 8009698:	0800ac60 	.word	0x0800ac60

0800969c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	430a      	orrs	r2, r1
 80096e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009730:	f003 0310 	and.w	r3, r3, #16
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01a      	beq.n	80097b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800979a:	d10a      	bne.n	80097b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	605a      	str	r2, [r3, #4]
  }
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b098      	sub	sp, #96	; 0x60
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097f0:	f7f8 f91c 	bl	8001a2c <HAL_GetTick>
 80097f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0308 	and.w	r3, r3, #8
 8009800:	2b08      	cmp	r3, #8
 8009802:	d12f      	bne.n	8009864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800980c:	2200      	movs	r2, #0
 800980e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f88e 	bl	8009934 <UART_WaitOnFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d022      	beq.n	8009864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800982c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009832:	653b      	str	r3, [r7, #80]	; 0x50
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800983c:	647b      	str	r3, [r7, #68]	; 0x44
 800983e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800984a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e6      	bne.n	800981e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2220      	movs	r2, #32
 8009854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e063      	b.n	800992c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0304 	and.w	r3, r3, #4
 800986e:	2b04      	cmp	r3, #4
 8009870:	d149      	bne.n	8009906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800987a:	2200      	movs	r2, #0
 800987c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f857 	bl	8009934 <UART_WaitOnFlagUntilTimeout>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d03c      	beq.n	8009906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	e853 3f00 	ldrex	r3, [r3]
 8009898:	623b      	str	r3, [r7, #32]
   return(result);
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098aa:	633b      	str	r3, [r7, #48]	; 0x30
 80098ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e6      	bne.n	800988c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3308      	adds	r3, #8
 80098c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f023 0301 	bic.w	r3, r3, #1
 80098d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3308      	adds	r3, #8
 80098dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098de:	61fa      	str	r2, [r7, #28]
 80098e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	69b9      	ldr	r1, [r7, #24]
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	617b      	str	r3, [r7, #20]
   return(result);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e5      	bne.n	80098be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e012      	b.n	800992c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2220      	movs	r2, #32
 800990a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3758      	adds	r7, #88	; 0x58
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	4613      	mov	r3, r2
 8009942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009944:	e04f      	b.n	80099e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994c:	d04b      	beq.n	80099e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800994e:	f7f8 f86d 	bl	8001a2c <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	429a      	cmp	r2, r3
 800995c:	d302      	bcc.n	8009964 <UART_WaitOnFlagUntilTimeout+0x30>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e04e      	b.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d037      	beq.n	80099e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b80      	cmp	r3, #128	; 0x80
 800997a:	d034      	beq.n	80099e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b40      	cmp	r3, #64	; 0x40
 8009980:	d031      	beq.n	80099e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f003 0308 	and.w	r3, r3, #8
 800998c:	2b08      	cmp	r3, #8
 800998e:	d110      	bne.n	80099b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2208      	movs	r2, #8
 8009996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f921 	bl	8009be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2208      	movs	r2, #8
 80099a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e029      	b.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c0:	d111      	bne.n	80099e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f907 	bl	8009be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e00f      	b.n	8009a06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	69da      	ldr	r2, [r3, #28]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4013      	ands	r3, r2
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	bf0c      	ite	eq
 80099f6:	2301      	moveq	r3, #1
 80099f8:	2300      	movne	r3, #0
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d0a0      	beq.n	8009946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b096      	sub	sp, #88	; 0x58
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	88fa      	ldrh	r2, [r7, #6]
 8009a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2222      	movs	r2, #34	; 0x22
 8009a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d02d      	beq.n	8009aa2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a4c:	4a40      	ldr	r2, [pc, #256]	; (8009b50 <UART_Start_Receive_DMA+0x140>)
 8009a4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a56:	4a3f      	ldr	r2, [pc, #252]	; (8009b54 <UART_Start_Receive_DMA+0x144>)
 8009a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a60:	4a3d      	ldr	r2, [pc, #244]	; (8009b58 <UART_Start_Receive_DMA+0x148>)
 8009a62:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3324      	adds	r3, #36	; 0x24
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a80:	461a      	mov	r2, r3
 8009a82:	88fb      	ldrh	r3, [r7, #6]
 8009a84:	f7f8 fcbc 	bl	8002400 <HAL_DMA_Start_IT>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d009      	beq.n	8009aa2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2210      	movs	r2, #16
 8009a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e051      	b.n	8009b46 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d018      	beq.n	8009adc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009abe:	657b      	str	r3, [r7, #84]	; 0x54
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009aca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e6      	bne.n	8009aaa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	653b      	str	r3, [r7, #80]	; 0x50
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3308      	adds	r3, #8
 8009afa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009afc:	637a      	str	r2, [r7, #52]	; 0x34
 8009afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e5      	bne.n	8009adc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3308      	adds	r3, #8
 8009b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b30:	623a      	str	r2, [r7, #32]
 8009b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	69f9      	ldr	r1, [r7, #28]
 8009b36:	6a3a      	ldr	r2, [r7, #32]
 8009b38:	e841 2300 	strex	r3, r2, [r1]
 8009b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e5      	bne.n	8009b10 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3758      	adds	r7, #88	; 0x58
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	08009cad 	.word	0x08009cad
 8009b54:	08009dd5 	.word	0x08009dd5
 8009b58:	08009e13 	.word	0x08009e13

08009b5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b08f      	sub	sp, #60	; 0x3c
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e6      	bne.n	8009b64 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009bac:	633b      	str	r3, [r7, #48]	; 0x30
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb6:	61ba      	str	r2, [r7, #24]
 8009bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6979      	ldr	r1, [r7, #20]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e5      	bne.n	8009b96 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009bd2:	bf00      	nop
 8009bd4:	373c      	adds	r7, #60	; 0x3c
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
	...

08009be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b095      	sub	sp, #84	; 0x54
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c06:	643b      	str	r3, [r7, #64]	; 0x40
 8009c08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e6      	bne.n	8009be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	4b1e      	ldr	r3, [pc, #120]	; (8009ca8 <UART_EndRxTransfer+0xc8>)
 8009c2e:	4013      	ands	r3, r2
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e5      	bne.n	8009c1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d118      	bne.n	8009c88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f023 0310 	bic.w	r3, r3, #16
 8009c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c78:	6979      	ldr	r1, [r7, #20]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	613b      	str	r3, [r7, #16]
   return(result);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e6      	bne.n	8009c56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009c9c:	bf00      	nop
 8009c9e:	3754      	adds	r7, #84	; 0x54
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	effffffe 	.word	0xeffffffe

08009cac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b09c      	sub	sp, #112	; 0x70
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc2:	d071      	beq.n	8009da8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cea:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e6      	bne.n	8009ccc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3308      	adds	r3, #8
 8009d04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d10:	f023 0301 	bic.w	r3, r3, #1
 8009d14:	667b      	str	r3, [r7, #100]	; 0x64
 8009d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8009d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e5      	bne.n	8009cfe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	623b      	str	r3, [r7, #32]
   return(result);
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d48:	663b      	str	r3, [r7, #96]	; 0x60
 8009d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d52:	633a      	str	r2, [r7, #48]	; 0x30
 8009d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d5a:	e841 2300 	strex	r3, r2, [r1]
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e5      	bne.n	8009d32 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d118      	bne.n	8009da8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0310 	bic.w	r3, r3, #16
 8009d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d94:	61fb      	str	r3, [r7, #28]
 8009d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	69b9      	ldr	r1, [r7, #24]
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	617b      	str	r3, [r7, #20]
   return(result);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e6      	bne.n	8009d76 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009daa:	2200      	movs	r2, #0
 8009dac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d107      	bne.n	8009dc6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009dc0:	f7f6 ffe6 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dc4:	e002      	b.n	8009dcc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009dc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009dc8:	f7f6 fffc 	bl	8000dc4 <HAL_UART_RxCpltCallback>
}
 8009dcc:	bf00      	nop
 8009dce:	3770      	adds	r7, #112	; 0x70
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2201      	movs	r2, #1
 8009de6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d109      	bne.n	8009e04 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009df6:	085b      	lsrs	r3, r3, #1
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f7f6 ffc7 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e02:	e002      	b.n	8009e0a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7fe fdc9 	bl	800899c <HAL_UART_RxHalfCpltCallback>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b086      	sub	sp, #24
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3a:	2b80      	cmp	r3, #128	; 0x80
 8009e3c:	d109      	bne.n	8009e52 <UART_DMAError+0x40>
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2b21      	cmp	r3, #33	; 0x21
 8009e42:	d106      	bne.n	8009e52 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009e4c:	6978      	ldr	r0, [r7, #20]
 8009e4e:	f7ff fe85 	bl	8009b5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5c:	2b40      	cmp	r3, #64	; 0x40
 8009e5e:	d109      	bne.n	8009e74 <UART_DMAError+0x62>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b22      	cmp	r3, #34	; 0x22
 8009e64:	d106      	bne.n	8009e74 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009e6e:	6978      	ldr	r0, [r7, #20]
 8009e70:	f7ff feb6 	bl	8009be0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e7a:	f043 0210 	orr.w	r2, r3, #16
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e84:	6978      	ldr	r0, [r7, #20]
 8009e86:	f7fe fd93 	bl	80089b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e8a:	bf00      	nop
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d101      	bne.n	8009ea8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	e027      	b.n	8009ef8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2224      	movs	r2, #36	; 0x24
 8009eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0201 	bic.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ed6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d101      	bne.n	8009f1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	e02d      	b.n	8009f78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2224      	movs	r2, #36	; 0x24
 8009f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 0201 	bic.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f84f 	bl	8009ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d101      	bne.n	8009f98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f94:	2302      	movs	r3, #2
 8009f96:	e02d      	b.n	8009ff4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2224      	movs	r2, #36	; 0x24
 8009fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0201 	bic.w	r2, r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f811 	bl	8009ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d108      	bne.n	800a01e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a01c:	e031      	b.n	800a082 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a01e:	2310      	movs	r3, #16
 800a020:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a022:	2310      	movs	r3, #16
 800a024:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	0e5b      	lsrs	r3, r3, #25
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	0f5b      	lsrs	r3, r3, #29
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	7b3a      	ldrb	r2, [r7, #12]
 800a04a:	4911      	ldr	r1, [pc, #68]	; (800a090 <UARTEx_SetNbDataToProcess+0x94>)
 800a04c:	5c8a      	ldrb	r2, [r1, r2]
 800a04e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a052:	7b3a      	ldrb	r2, [r7, #12]
 800a054:	490f      	ldr	r1, [pc, #60]	; (800a094 <UARTEx_SetNbDataToProcess+0x98>)
 800a056:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a058:	fb93 f3f2 	sdiv	r3, r3, r2
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	7b7a      	ldrb	r2, [r7, #13]
 800a068:	4909      	ldr	r1, [pc, #36]	; (800a090 <UARTEx_SetNbDataToProcess+0x94>)
 800a06a:	5c8a      	ldrb	r2, [r1, r2]
 800a06c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a070:	7b7a      	ldrb	r2, [r7, #13]
 800a072:	4908      	ldr	r1, [pc, #32]	; (800a094 <UARTEx_SetNbDataToProcess+0x98>)
 800a074:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a076:	fb93 f3f2 	sdiv	r3, r3, r2
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	0800ac78 	.word	0x0800ac78
 800a094:	0800ac80 	.word	0x0800ac80

0800a098 <__errno>:
 800a098:	4b01      	ldr	r3, [pc, #4]	; (800a0a0 <__errno+0x8>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	24000010 	.word	0x24000010

0800a0a4 <__libc_init_array>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	4d0d      	ldr	r5, [pc, #52]	; (800a0dc <__libc_init_array+0x38>)
 800a0a8:	4c0d      	ldr	r4, [pc, #52]	; (800a0e0 <__libc_init_array+0x3c>)
 800a0aa:	1b64      	subs	r4, r4, r5
 800a0ac:	10a4      	asrs	r4, r4, #2
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	42a6      	cmp	r6, r4
 800a0b2:	d109      	bne.n	800a0c8 <__libc_init_array+0x24>
 800a0b4:	4d0b      	ldr	r5, [pc, #44]	; (800a0e4 <__libc_init_array+0x40>)
 800a0b6:	4c0c      	ldr	r4, [pc, #48]	; (800a0e8 <__libc_init_array+0x44>)
 800a0b8:	f000 fca2 	bl	800aa00 <_init>
 800a0bc:	1b64      	subs	r4, r4, r5
 800a0be:	10a4      	asrs	r4, r4, #2
 800a0c0:	2600      	movs	r6, #0
 800a0c2:	42a6      	cmp	r6, r4
 800a0c4:	d105      	bne.n	800a0d2 <__libc_init_array+0x2e>
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0cc:	4798      	blx	r3
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	e7ee      	b.n	800a0b0 <__libc_init_array+0xc>
 800a0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d6:	4798      	blx	r3
 800a0d8:	3601      	adds	r6, #1
 800a0da:	e7f2      	b.n	800a0c2 <__libc_init_array+0x1e>
 800a0dc:	0800acc4 	.word	0x0800acc4
 800a0e0:	0800acc4 	.word	0x0800acc4
 800a0e4:	0800acc4 	.word	0x0800acc4
 800a0e8:	0800acc8 	.word	0x0800acc8

0800a0ec <memset>:
 800a0ec:	4402      	add	r2, r0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d100      	bne.n	800a0f6 <memset+0xa>
 800a0f4:	4770      	bx	lr
 800a0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0fa:	e7f9      	b.n	800a0f0 <memset+0x4>

0800a0fc <siprintf>:
 800a0fc:	b40e      	push	{r1, r2, r3}
 800a0fe:	b500      	push	{lr}
 800a100:	b09c      	sub	sp, #112	; 0x70
 800a102:	ab1d      	add	r3, sp, #116	; 0x74
 800a104:	9002      	str	r0, [sp, #8]
 800a106:	9006      	str	r0, [sp, #24]
 800a108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a10c:	4809      	ldr	r0, [pc, #36]	; (800a134 <siprintf+0x38>)
 800a10e:	9107      	str	r1, [sp, #28]
 800a110:	9104      	str	r1, [sp, #16]
 800a112:	4909      	ldr	r1, [pc, #36]	; (800a138 <siprintf+0x3c>)
 800a114:	f853 2b04 	ldr.w	r2, [r3], #4
 800a118:	9105      	str	r1, [sp, #20]
 800a11a:	6800      	ldr	r0, [r0, #0]
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	a902      	add	r1, sp, #8
 800a120:	f000 f87c 	bl	800a21c <_svfiprintf_r>
 800a124:	9b02      	ldr	r3, [sp, #8]
 800a126:	2200      	movs	r2, #0
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	b01c      	add	sp, #112	; 0x70
 800a12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a130:	b003      	add	sp, #12
 800a132:	4770      	bx	lr
 800a134:	24000010 	.word	0x24000010
 800a138:	ffff0208 	.word	0xffff0208

0800a13c <strncmp>:
 800a13c:	b510      	push	{r4, lr}
 800a13e:	b17a      	cbz	r2, 800a160 <strncmp+0x24>
 800a140:	4603      	mov	r3, r0
 800a142:	3901      	subs	r1, #1
 800a144:	1884      	adds	r4, r0, r2
 800a146:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a14a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a14e:	4290      	cmp	r0, r2
 800a150:	d101      	bne.n	800a156 <strncmp+0x1a>
 800a152:	42a3      	cmp	r3, r4
 800a154:	d101      	bne.n	800a15a <strncmp+0x1e>
 800a156:	1a80      	subs	r0, r0, r2
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d1f3      	bne.n	800a146 <strncmp+0xa>
 800a15e:	e7fa      	b.n	800a156 <strncmp+0x1a>
 800a160:	4610      	mov	r0, r2
 800a162:	e7f9      	b.n	800a158 <strncmp+0x1c>

0800a164 <__ssputs_r>:
 800a164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a168:	688e      	ldr	r6, [r1, #8]
 800a16a:	429e      	cmp	r6, r3
 800a16c:	4682      	mov	sl, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4690      	mov	r8, r2
 800a172:	461f      	mov	r7, r3
 800a174:	d838      	bhi.n	800a1e8 <__ssputs_r+0x84>
 800a176:	898a      	ldrh	r2, [r1, #12]
 800a178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a17c:	d032      	beq.n	800a1e4 <__ssputs_r+0x80>
 800a17e:	6825      	ldr	r5, [r4, #0]
 800a180:	6909      	ldr	r1, [r1, #16]
 800a182:	eba5 0901 	sub.w	r9, r5, r1
 800a186:	6965      	ldr	r5, [r4, #20]
 800a188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a18c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a190:	3301      	adds	r3, #1
 800a192:	444b      	add	r3, r9
 800a194:	106d      	asrs	r5, r5, #1
 800a196:	429d      	cmp	r5, r3
 800a198:	bf38      	it	cc
 800a19a:	461d      	movcc	r5, r3
 800a19c:	0553      	lsls	r3, r2, #21
 800a19e:	d531      	bpl.n	800a204 <__ssputs_r+0xa0>
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f000 fb63 	bl	800a86c <_malloc_r>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	b950      	cbnz	r0, 800a1c0 <__ssputs_r+0x5c>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	f8ca 3000 	str.w	r3, [sl]
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c0:	6921      	ldr	r1, [r4, #16]
 800a1c2:	464a      	mov	r2, r9
 800a1c4:	f000 fabe 	bl	800a744 <memcpy>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	6126      	str	r6, [r4, #16]
 800a1d6:	6165      	str	r5, [r4, #20]
 800a1d8:	444e      	add	r6, r9
 800a1da:	eba5 0509 	sub.w	r5, r5, r9
 800a1de:	6026      	str	r6, [r4, #0]
 800a1e0:	60a5      	str	r5, [r4, #8]
 800a1e2:	463e      	mov	r6, r7
 800a1e4:	42be      	cmp	r6, r7
 800a1e6:	d900      	bls.n	800a1ea <__ssputs_r+0x86>
 800a1e8:	463e      	mov	r6, r7
 800a1ea:	6820      	ldr	r0, [r4, #0]
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	4641      	mov	r1, r8
 800a1f0:	f000 fab6 	bl	800a760 <memmove>
 800a1f4:	68a3      	ldr	r3, [r4, #8]
 800a1f6:	1b9b      	subs	r3, r3, r6
 800a1f8:	60a3      	str	r3, [r4, #8]
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	4433      	add	r3, r6
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	2000      	movs	r0, #0
 800a202:	e7db      	b.n	800a1bc <__ssputs_r+0x58>
 800a204:	462a      	mov	r2, r5
 800a206:	f000 fba5 	bl	800a954 <_realloc_r>
 800a20a:	4606      	mov	r6, r0
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d1e1      	bne.n	800a1d4 <__ssputs_r+0x70>
 800a210:	6921      	ldr	r1, [r4, #16]
 800a212:	4650      	mov	r0, sl
 800a214:	f000 fabe 	bl	800a794 <_free_r>
 800a218:	e7c7      	b.n	800a1aa <__ssputs_r+0x46>
	...

0800a21c <_svfiprintf_r>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	4698      	mov	r8, r3
 800a222:	898b      	ldrh	r3, [r1, #12]
 800a224:	061b      	lsls	r3, r3, #24
 800a226:	b09d      	sub	sp, #116	; 0x74
 800a228:	4607      	mov	r7, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	4614      	mov	r4, r2
 800a22e:	d50e      	bpl.n	800a24e <_svfiprintf_r+0x32>
 800a230:	690b      	ldr	r3, [r1, #16]
 800a232:	b963      	cbnz	r3, 800a24e <_svfiprintf_r+0x32>
 800a234:	2140      	movs	r1, #64	; 0x40
 800a236:	f000 fb19 	bl	800a86c <_malloc_r>
 800a23a:	6028      	str	r0, [r5, #0]
 800a23c:	6128      	str	r0, [r5, #16]
 800a23e:	b920      	cbnz	r0, 800a24a <_svfiprintf_r+0x2e>
 800a240:	230c      	movs	r3, #12
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	e0d1      	b.n	800a3ee <_svfiprintf_r+0x1d2>
 800a24a:	2340      	movs	r3, #64	; 0x40
 800a24c:	616b      	str	r3, [r5, #20]
 800a24e:	2300      	movs	r3, #0
 800a250:	9309      	str	r3, [sp, #36]	; 0x24
 800a252:	2320      	movs	r3, #32
 800a254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a258:	f8cd 800c 	str.w	r8, [sp, #12]
 800a25c:	2330      	movs	r3, #48	; 0x30
 800a25e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a408 <_svfiprintf_r+0x1ec>
 800a262:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a266:	f04f 0901 	mov.w	r9, #1
 800a26a:	4623      	mov	r3, r4
 800a26c:	469a      	mov	sl, r3
 800a26e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a272:	b10a      	cbz	r2, 800a278 <_svfiprintf_r+0x5c>
 800a274:	2a25      	cmp	r2, #37	; 0x25
 800a276:	d1f9      	bne.n	800a26c <_svfiprintf_r+0x50>
 800a278:	ebba 0b04 	subs.w	fp, sl, r4
 800a27c:	d00b      	beq.n	800a296 <_svfiprintf_r+0x7a>
 800a27e:	465b      	mov	r3, fp
 800a280:	4622      	mov	r2, r4
 800a282:	4629      	mov	r1, r5
 800a284:	4638      	mov	r0, r7
 800a286:	f7ff ff6d 	bl	800a164 <__ssputs_r>
 800a28a:	3001      	adds	r0, #1
 800a28c:	f000 80aa 	beq.w	800a3e4 <_svfiprintf_r+0x1c8>
 800a290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a292:	445a      	add	r2, fp
 800a294:	9209      	str	r2, [sp, #36]	; 0x24
 800a296:	f89a 3000 	ldrb.w	r3, [sl]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 80a2 	beq.w	800a3e4 <_svfiprintf_r+0x1c8>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2aa:	f10a 0a01 	add.w	sl, sl, #1
 800a2ae:	9304      	str	r3, [sp, #16]
 800a2b0:	9307      	str	r3, [sp, #28]
 800a2b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a2b8:	4654      	mov	r4, sl
 800a2ba:	2205      	movs	r2, #5
 800a2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c0:	4851      	ldr	r0, [pc, #324]	; (800a408 <_svfiprintf_r+0x1ec>)
 800a2c2:	f7f6 f81d 	bl	8000300 <memchr>
 800a2c6:	9a04      	ldr	r2, [sp, #16]
 800a2c8:	b9d8      	cbnz	r0, 800a302 <_svfiprintf_r+0xe6>
 800a2ca:	06d0      	lsls	r0, r2, #27
 800a2cc:	bf44      	itt	mi
 800a2ce:	2320      	movmi	r3, #32
 800a2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d4:	0711      	lsls	r1, r2, #28
 800a2d6:	bf44      	itt	mi
 800a2d8:	232b      	movmi	r3, #43	; 0x2b
 800a2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2de:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e4:	d015      	beq.n	800a312 <_svfiprintf_r+0xf6>
 800a2e6:	9a07      	ldr	r2, [sp, #28]
 800a2e8:	4654      	mov	r4, sl
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f04f 0c0a 	mov.w	ip, #10
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f6:	3b30      	subs	r3, #48	; 0x30
 800a2f8:	2b09      	cmp	r3, #9
 800a2fa:	d94e      	bls.n	800a39a <_svfiprintf_r+0x17e>
 800a2fc:	b1b0      	cbz	r0, 800a32c <_svfiprintf_r+0x110>
 800a2fe:	9207      	str	r2, [sp, #28]
 800a300:	e014      	b.n	800a32c <_svfiprintf_r+0x110>
 800a302:	eba0 0308 	sub.w	r3, r0, r8
 800a306:	fa09 f303 	lsl.w	r3, r9, r3
 800a30a:	4313      	orrs	r3, r2
 800a30c:	9304      	str	r3, [sp, #16]
 800a30e:	46a2      	mov	sl, r4
 800a310:	e7d2      	b.n	800a2b8 <_svfiprintf_r+0x9c>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	1d19      	adds	r1, r3, #4
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	9103      	str	r1, [sp, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	bfbb      	ittet	lt
 800a31e:	425b      	neglt	r3, r3
 800a320:	f042 0202 	orrlt.w	r2, r2, #2
 800a324:	9307      	strge	r3, [sp, #28]
 800a326:	9307      	strlt	r3, [sp, #28]
 800a328:	bfb8      	it	lt
 800a32a:	9204      	strlt	r2, [sp, #16]
 800a32c:	7823      	ldrb	r3, [r4, #0]
 800a32e:	2b2e      	cmp	r3, #46	; 0x2e
 800a330:	d10c      	bne.n	800a34c <_svfiprintf_r+0x130>
 800a332:	7863      	ldrb	r3, [r4, #1]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d135      	bne.n	800a3a4 <_svfiprintf_r+0x188>
 800a338:	9b03      	ldr	r3, [sp, #12]
 800a33a:	1d1a      	adds	r2, r3, #4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	9203      	str	r2, [sp, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bfb8      	it	lt
 800a344:	f04f 33ff 	movlt.w	r3, #4294967295
 800a348:	3402      	adds	r4, #2
 800a34a:	9305      	str	r3, [sp, #20]
 800a34c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a418 <_svfiprintf_r+0x1fc>
 800a350:	7821      	ldrb	r1, [r4, #0]
 800a352:	2203      	movs	r2, #3
 800a354:	4650      	mov	r0, sl
 800a356:	f7f5 ffd3 	bl	8000300 <memchr>
 800a35a:	b140      	cbz	r0, 800a36e <_svfiprintf_r+0x152>
 800a35c:	2340      	movs	r3, #64	; 0x40
 800a35e:	eba0 000a 	sub.w	r0, r0, sl
 800a362:	fa03 f000 	lsl.w	r0, r3, r0
 800a366:	9b04      	ldr	r3, [sp, #16]
 800a368:	4303      	orrs	r3, r0
 800a36a:	3401      	adds	r4, #1
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	4826      	ldr	r0, [pc, #152]	; (800a40c <_svfiprintf_r+0x1f0>)
 800a374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a378:	2206      	movs	r2, #6
 800a37a:	f7f5 ffc1 	bl	8000300 <memchr>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d038      	beq.n	800a3f4 <_svfiprintf_r+0x1d8>
 800a382:	4b23      	ldr	r3, [pc, #140]	; (800a410 <_svfiprintf_r+0x1f4>)
 800a384:	bb1b      	cbnz	r3, 800a3ce <_svfiprintf_r+0x1b2>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	3307      	adds	r3, #7
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	3308      	adds	r3, #8
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a394:	4433      	add	r3, r6
 800a396:	9309      	str	r3, [sp, #36]	; 0x24
 800a398:	e767      	b.n	800a26a <_svfiprintf_r+0x4e>
 800a39a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a39e:	460c      	mov	r4, r1
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e7a5      	b.n	800a2f0 <_svfiprintf_r+0xd4>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	3401      	adds	r4, #1
 800a3a8:	9305      	str	r3, [sp, #20]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f04f 0c0a 	mov.w	ip, #10
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b6:	3a30      	subs	r2, #48	; 0x30
 800a3b8:	2a09      	cmp	r2, #9
 800a3ba:	d903      	bls.n	800a3c4 <_svfiprintf_r+0x1a8>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0c5      	beq.n	800a34c <_svfiprintf_r+0x130>
 800a3c0:	9105      	str	r1, [sp, #20]
 800a3c2:	e7c3      	b.n	800a34c <_svfiprintf_r+0x130>
 800a3c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e7f0      	b.n	800a3b0 <_svfiprintf_r+0x194>
 800a3ce:	ab03      	add	r3, sp, #12
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	462a      	mov	r2, r5
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <_svfiprintf_r+0x1f8>)
 800a3d6:	a904      	add	r1, sp, #16
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f3af 8000 	nop.w
 800a3de:	1c42      	adds	r2, r0, #1
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	d1d6      	bne.n	800a392 <_svfiprintf_r+0x176>
 800a3e4:	89ab      	ldrh	r3, [r5, #12]
 800a3e6:	065b      	lsls	r3, r3, #25
 800a3e8:	f53f af2c 	bmi.w	800a244 <_svfiprintf_r+0x28>
 800a3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ee:	b01d      	add	sp, #116	; 0x74
 800a3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f4:	ab03      	add	r3, sp, #12
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	462a      	mov	r2, r5
 800a3fa:	4b06      	ldr	r3, [pc, #24]	; (800a414 <_svfiprintf_r+0x1f8>)
 800a3fc:	a904      	add	r1, sp, #16
 800a3fe:	4638      	mov	r0, r7
 800a400:	f000 f87a 	bl	800a4f8 <_printf_i>
 800a404:	e7eb      	b.n	800a3de <_svfiprintf_r+0x1c2>
 800a406:	bf00      	nop
 800a408:	0800ac88 	.word	0x0800ac88
 800a40c:	0800ac92 	.word	0x0800ac92
 800a410:	00000000 	.word	0x00000000
 800a414:	0800a165 	.word	0x0800a165
 800a418:	0800ac8e 	.word	0x0800ac8e

0800a41c <_printf_common>:
 800a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	4616      	mov	r6, r2
 800a422:	4699      	mov	r9, r3
 800a424:	688a      	ldr	r2, [r1, #8]
 800a426:	690b      	ldr	r3, [r1, #16]
 800a428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a42c:	4293      	cmp	r3, r2
 800a42e:	bfb8      	it	lt
 800a430:	4613      	movlt	r3, r2
 800a432:	6033      	str	r3, [r6, #0]
 800a434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a438:	4607      	mov	r7, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	b10a      	cbz	r2, 800a442 <_printf_common+0x26>
 800a43e:	3301      	adds	r3, #1
 800a440:	6033      	str	r3, [r6, #0]
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	0699      	lsls	r1, r3, #26
 800a446:	bf42      	ittt	mi
 800a448:	6833      	ldrmi	r3, [r6, #0]
 800a44a:	3302      	addmi	r3, #2
 800a44c:	6033      	strmi	r3, [r6, #0]
 800a44e:	6825      	ldr	r5, [r4, #0]
 800a450:	f015 0506 	ands.w	r5, r5, #6
 800a454:	d106      	bne.n	800a464 <_printf_common+0x48>
 800a456:	f104 0a19 	add.w	sl, r4, #25
 800a45a:	68e3      	ldr	r3, [r4, #12]
 800a45c:	6832      	ldr	r2, [r6, #0]
 800a45e:	1a9b      	subs	r3, r3, r2
 800a460:	42ab      	cmp	r3, r5
 800a462:	dc26      	bgt.n	800a4b2 <_printf_common+0x96>
 800a464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a468:	1e13      	subs	r3, r2, #0
 800a46a:	6822      	ldr	r2, [r4, #0]
 800a46c:	bf18      	it	ne
 800a46e:	2301      	movne	r3, #1
 800a470:	0692      	lsls	r2, r2, #26
 800a472:	d42b      	bmi.n	800a4cc <_printf_common+0xb0>
 800a474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a478:	4649      	mov	r1, r9
 800a47a:	4638      	mov	r0, r7
 800a47c:	47c0      	blx	r8
 800a47e:	3001      	adds	r0, #1
 800a480:	d01e      	beq.n	800a4c0 <_printf_common+0xa4>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	68e5      	ldr	r5, [r4, #12]
 800a486:	6832      	ldr	r2, [r6, #0]
 800a488:	f003 0306 	and.w	r3, r3, #6
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	bf08      	it	eq
 800a490:	1aad      	subeq	r5, r5, r2
 800a492:	68a3      	ldr	r3, [r4, #8]
 800a494:	6922      	ldr	r2, [r4, #16]
 800a496:	bf0c      	ite	eq
 800a498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a49c:	2500      	movne	r5, #0
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	bfc4      	itt	gt
 800a4a2:	1a9b      	subgt	r3, r3, r2
 800a4a4:	18ed      	addgt	r5, r5, r3
 800a4a6:	2600      	movs	r6, #0
 800a4a8:	341a      	adds	r4, #26
 800a4aa:	42b5      	cmp	r5, r6
 800a4ac:	d11a      	bne.n	800a4e4 <_printf_common+0xc8>
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	e008      	b.n	800a4c4 <_printf_common+0xa8>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4652      	mov	r2, sl
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	47c0      	blx	r8
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d103      	bne.n	800a4c8 <_printf_common+0xac>
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c8:	3501      	adds	r5, #1
 800a4ca:	e7c6      	b.n	800a45a <_printf_common+0x3e>
 800a4cc:	18e1      	adds	r1, r4, r3
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	2030      	movs	r0, #48	; 0x30
 800a4d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4d6:	4422      	add	r2, r4
 800a4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	e7c7      	b.n	800a474 <_printf_common+0x58>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	47c0      	blx	r8
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	d0e6      	beq.n	800a4c0 <_printf_common+0xa4>
 800a4f2:	3601      	adds	r6, #1
 800a4f4:	e7d9      	b.n	800a4aa <_printf_common+0x8e>
	...

0800a4f8 <_printf_i>:
 800a4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fc:	7e0f      	ldrb	r7, [r1, #24]
 800a4fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a500:	2f78      	cmp	r7, #120	; 0x78
 800a502:	4691      	mov	r9, r2
 800a504:	4680      	mov	r8, r0
 800a506:	460c      	mov	r4, r1
 800a508:	469a      	mov	sl, r3
 800a50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a50e:	d807      	bhi.n	800a520 <_printf_i+0x28>
 800a510:	2f62      	cmp	r7, #98	; 0x62
 800a512:	d80a      	bhi.n	800a52a <_printf_i+0x32>
 800a514:	2f00      	cmp	r7, #0
 800a516:	f000 80d8 	beq.w	800a6ca <_printf_i+0x1d2>
 800a51a:	2f58      	cmp	r7, #88	; 0x58
 800a51c:	f000 80a3 	beq.w	800a666 <_printf_i+0x16e>
 800a520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a528:	e03a      	b.n	800a5a0 <_printf_i+0xa8>
 800a52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a52e:	2b15      	cmp	r3, #21
 800a530:	d8f6      	bhi.n	800a520 <_printf_i+0x28>
 800a532:	a101      	add	r1, pc, #4	; (adr r1, 800a538 <_printf_i+0x40>)
 800a534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a538:	0800a591 	.word	0x0800a591
 800a53c:	0800a5a5 	.word	0x0800a5a5
 800a540:	0800a521 	.word	0x0800a521
 800a544:	0800a521 	.word	0x0800a521
 800a548:	0800a521 	.word	0x0800a521
 800a54c:	0800a521 	.word	0x0800a521
 800a550:	0800a5a5 	.word	0x0800a5a5
 800a554:	0800a521 	.word	0x0800a521
 800a558:	0800a521 	.word	0x0800a521
 800a55c:	0800a521 	.word	0x0800a521
 800a560:	0800a521 	.word	0x0800a521
 800a564:	0800a6b1 	.word	0x0800a6b1
 800a568:	0800a5d5 	.word	0x0800a5d5
 800a56c:	0800a693 	.word	0x0800a693
 800a570:	0800a521 	.word	0x0800a521
 800a574:	0800a521 	.word	0x0800a521
 800a578:	0800a6d3 	.word	0x0800a6d3
 800a57c:	0800a521 	.word	0x0800a521
 800a580:	0800a5d5 	.word	0x0800a5d5
 800a584:	0800a521 	.word	0x0800a521
 800a588:	0800a521 	.word	0x0800a521
 800a58c:	0800a69b 	.word	0x0800a69b
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	1d1a      	adds	r2, r3, #4
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	602a      	str	r2, [r5, #0]
 800a598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e0a3      	b.n	800a6ec <_printf_i+0x1f4>
 800a5a4:	6820      	ldr	r0, [r4, #0]
 800a5a6:	6829      	ldr	r1, [r5, #0]
 800a5a8:	0606      	lsls	r6, r0, #24
 800a5aa:	f101 0304 	add.w	r3, r1, #4
 800a5ae:	d50a      	bpl.n	800a5c6 <_printf_i+0xce>
 800a5b0:	680e      	ldr	r6, [r1, #0]
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	2e00      	cmp	r6, #0
 800a5b6:	da03      	bge.n	800a5c0 <_printf_i+0xc8>
 800a5b8:	232d      	movs	r3, #45	; 0x2d
 800a5ba:	4276      	negs	r6, r6
 800a5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5c0:	485e      	ldr	r0, [pc, #376]	; (800a73c <_printf_i+0x244>)
 800a5c2:	230a      	movs	r3, #10
 800a5c4:	e019      	b.n	800a5fa <_printf_i+0x102>
 800a5c6:	680e      	ldr	r6, [r1, #0]
 800a5c8:	602b      	str	r3, [r5, #0]
 800a5ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5ce:	bf18      	it	ne
 800a5d0:	b236      	sxthne	r6, r6
 800a5d2:	e7ef      	b.n	800a5b4 <_printf_i+0xbc>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	6820      	ldr	r0, [r4, #0]
 800a5d8:	1d19      	adds	r1, r3, #4
 800a5da:	6029      	str	r1, [r5, #0]
 800a5dc:	0601      	lsls	r1, r0, #24
 800a5de:	d501      	bpl.n	800a5e4 <_printf_i+0xec>
 800a5e0:	681e      	ldr	r6, [r3, #0]
 800a5e2:	e002      	b.n	800a5ea <_printf_i+0xf2>
 800a5e4:	0646      	lsls	r6, r0, #25
 800a5e6:	d5fb      	bpl.n	800a5e0 <_printf_i+0xe8>
 800a5e8:	881e      	ldrh	r6, [r3, #0]
 800a5ea:	4854      	ldr	r0, [pc, #336]	; (800a73c <_printf_i+0x244>)
 800a5ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a5ee:	bf0c      	ite	eq
 800a5f0:	2308      	moveq	r3, #8
 800a5f2:	230a      	movne	r3, #10
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5fa:	6865      	ldr	r5, [r4, #4]
 800a5fc:	60a5      	str	r5, [r4, #8]
 800a5fe:	2d00      	cmp	r5, #0
 800a600:	bfa2      	ittt	ge
 800a602:	6821      	ldrge	r1, [r4, #0]
 800a604:	f021 0104 	bicge.w	r1, r1, #4
 800a608:	6021      	strge	r1, [r4, #0]
 800a60a:	b90e      	cbnz	r6, 800a610 <_printf_i+0x118>
 800a60c:	2d00      	cmp	r5, #0
 800a60e:	d04d      	beq.n	800a6ac <_printf_i+0x1b4>
 800a610:	4615      	mov	r5, r2
 800a612:	fbb6 f1f3 	udiv	r1, r6, r3
 800a616:	fb03 6711 	mls	r7, r3, r1, r6
 800a61a:	5dc7      	ldrb	r7, [r0, r7]
 800a61c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a620:	4637      	mov	r7, r6
 800a622:	42bb      	cmp	r3, r7
 800a624:	460e      	mov	r6, r1
 800a626:	d9f4      	bls.n	800a612 <_printf_i+0x11a>
 800a628:	2b08      	cmp	r3, #8
 800a62a:	d10b      	bne.n	800a644 <_printf_i+0x14c>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	07de      	lsls	r6, r3, #31
 800a630:	d508      	bpl.n	800a644 <_printf_i+0x14c>
 800a632:	6923      	ldr	r3, [r4, #16]
 800a634:	6861      	ldr	r1, [r4, #4]
 800a636:	4299      	cmp	r1, r3
 800a638:	bfde      	ittt	le
 800a63a:	2330      	movle	r3, #48	; 0x30
 800a63c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a640:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a644:	1b52      	subs	r2, r2, r5
 800a646:	6122      	str	r2, [r4, #16]
 800a648:	f8cd a000 	str.w	sl, [sp]
 800a64c:	464b      	mov	r3, r9
 800a64e:	aa03      	add	r2, sp, #12
 800a650:	4621      	mov	r1, r4
 800a652:	4640      	mov	r0, r8
 800a654:	f7ff fee2 	bl	800a41c <_printf_common>
 800a658:	3001      	adds	r0, #1
 800a65a:	d14c      	bne.n	800a6f6 <_printf_i+0x1fe>
 800a65c:	f04f 30ff 	mov.w	r0, #4294967295
 800a660:	b004      	add	sp, #16
 800a662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a666:	4835      	ldr	r0, [pc, #212]	; (800a73c <_printf_i+0x244>)
 800a668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a66c:	6829      	ldr	r1, [r5, #0]
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	f851 6b04 	ldr.w	r6, [r1], #4
 800a674:	6029      	str	r1, [r5, #0]
 800a676:	061d      	lsls	r5, r3, #24
 800a678:	d514      	bpl.n	800a6a4 <_printf_i+0x1ac>
 800a67a:	07df      	lsls	r7, r3, #31
 800a67c:	bf44      	itt	mi
 800a67e:	f043 0320 	orrmi.w	r3, r3, #32
 800a682:	6023      	strmi	r3, [r4, #0]
 800a684:	b91e      	cbnz	r6, 800a68e <_printf_i+0x196>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	f023 0320 	bic.w	r3, r3, #32
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	2310      	movs	r3, #16
 800a690:	e7b0      	b.n	800a5f4 <_printf_i+0xfc>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	f043 0320 	orr.w	r3, r3, #32
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	2378      	movs	r3, #120	; 0x78
 800a69c:	4828      	ldr	r0, [pc, #160]	; (800a740 <_printf_i+0x248>)
 800a69e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6a2:	e7e3      	b.n	800a66c <_printf_i+0x174>
 800a6a4:	0659      	lsls	r1, r3, #25
 800a6a6:	bf48      	it	mi
 800a6a8:	b2b6      	uxthmi	r6, r6
 800a6aa:	e7e6      	b.n	800a67a <_printf_i+0x182>
 800a6ac:	4615      	mov	r5, r2
 800a6ae:	e7bb      	b.n	800a628 <_printf_i+0x130>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	6826      	ldr	r6, [r4, #0]
 800a6b4:	6961      	ldr	r1, [r4, #20]
 800a6b6:	1d18      	adds	r0, r3, #4
 800a6b8:	6028      	str	r0, [r5, #0]
 800a6ba:	0635      	lsls	r5, r6, #24
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	d501      	bpl.n	800a6c4 <_printf_i+0x1cc>
 800a6c0:	6019      	str	r1, [r3, #0]
 800a6c2:	e002      	b.n	800a6ca <_printf_i+0x1d2>
 800a6c4:	0670      	lsls	r0, r6, #25
 800a6c6:	d5fb      	bpl.n	800a6c0 <_printf_i+0x1c8>
 800a6c8:	8019      	strh	r1, [r3, #0]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	4615      	mov	r5, r2
 800a6d0:	e7ba      	b.n	800a648 <_printf_i+0x150>
 800a6d2:	682b      	ldr	r3, [r5, #0]
 800a6d4:	1d1a      	adds	r2, r3, #4
 800a6d6:	602a      	str	r2, [r5, #0]
 800a6d8:	681d      	ldr	r5, [r3, #0]
 800a6da:	6862      	ldr	r2, [r4, #4]
 800a6dc:	2100      	movs	r1, #0
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f7f5 fe0e 	bl	8000300 <memchr>
 800a6e4:	b108      	cbz	r0, 800a6ea <_printf_i+0x1f2>
 800a6e6:	1b40      	subs	r0, r0, r5
 800a6e8:	6060      	str	r0, [r4, #4]
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f4:	e7a8      	b.n	800a648 <_printf_i+0x150>
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	47d0      	blx	sl
 800a700:	3001      	adds	r0, #1
 800a702:	d0ab      	beq.n	800a65c <_printf_i+0x164>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	079b      	lsls	r3, r3, #30
 800a708:	d413      	bmi.n	800a732 <_printf_i+0x23a>
 800a70a:	68e0      	ldr	r0, [r4, #12]
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	4298      	cmp	r0, r3
 800a710:	bfb8      	it	lt
 800a712:	4618      	movlt	r0, r3
 800a714:	e7a4      	b.n	800a660 <_printf_i+0x168>
 800a716:	2301      	movs	r3, #1
 800a718:	4632      	mov	r2, r6
 800a71a:	4649      	mov	r1, r9
 800a71c:	4640      	mov	r0, r8
 800a71e:	47d0      	blx	sl
 800a720:	3001      	adds	r0, #1
 800a722:	d09b      	beq.n	800a65c <_printf_i+0x164>
 800a724:	3501      	adds	r5, #1
 800a726:	68e3      	ldr	r3, [r4, #12]
 800a728:	9903      	ldr	r1, [sp, #12]
 800a72a:	1a5b      	subs	r3, r3, r1
 800a72c:	42ab      	cmp	r3, r5
 800a72e:	dcf2      	bgt.n	800a716 <_printf_i+0x21e>
 800a730:	e7eb      	b.n	800a70a <_printf_i+0x212>
 800a732:	2500      	movs	r5, #0
 800a734:	f104 0619 	add.w	r6, r4, #25
 800a738:	e7f5      	b.n	800a726 <_printf_i+0x22e>
 800a73a:	bf00      	nop
 800a73c:	0800ac99 	.word	0x0800ac99
 800a740:	0800acaa 	.word	0x0800acaa

0800a744 <memcpy>:
 800a744:	440a      	add	r2, r1
 800a746:	4291      	cmp	r1, r2
 800a748:	f100 33ff 	add.w	r3, r0, #4294967295
 800a74c:	d100      	bne.n	800a750 <memcpy+0xc>
 800a74e:	4770      	bx	lr
 800a750:	b510      	push	{r4, lr}
 800a752:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a75a:	4291      	cmp	r1, r2
 800a75c:	d1f9      	bne.n	800a752 <memcpy+0xe>
 800a75e:	bd10      	pop	{r4, pc}

0800a760 <memmove>:
 800a760:	4288      	cmp	r0, r1
 800a762:	b510      	push	{r4, lr}
 800a764:	eb01 0402 	add.w	r4, r1, r2
 800a768:	d902      	bls.n	800a770 <memmove+0x10>
 800a76a:	4284      	cmp	r4, r0
 800a76c:	4623      	mov	r3, r4
 800a76e:	d807      	bhi.n	800a780 <memmove+0x20>
 800a770:	1e43      	subs	r3, r0, #1
 800a772:	42a1      	cmp	r1, r4
 800a774:	d008      	beq.n	800a788 <memmove+0x28>
 800a776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a77a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a77e:	e7f8      	b.n	800a772 <memmove+0x12>
 800a780:	4402      	add	r2, r0
 800a782:	4601      	mov	r1, r0
 800a784:	428a      	cmp	r2, r1
 800a786:	d100      	bne.n	800a78a <memmove+0x2a>
 800a788:	bd10      	pop	{r4, pc}
 800a78a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a78e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a792:	e7f7      	b.n	800a784 <memmove+0x24>

0800a794 <_free_r>:
 800a794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a796:	2900      	cmp	r1, #0
 800a798:	d044      	beq.n	800a824 <_free_r+0x90>
 800a79a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a79e:	9001      	str	r0, [sp, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7a6:	bfb8      	it	lt
 800a7a8:	18e4      	addlt	r4, r4, r3
 800a7aa:	f000 f913 	bl	800a9d4 <__malloc_lock>
 800a7ae:	4a1e      	ldr	r2, [pc, #120]	; (800a828 <_free_r+0x94>)
 800a7b0:	9801      	ldr	r0, [sp, #4]
 800a7b2:	6813      	ldr	r3, [r2, #0]
 800a7b4:	b933      	cbnz	r3, 800a7c4 <_free_r+0x30>
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	6014      	str	r4, [r2, #0]
 800a7ba:	b003      	add	sp, #12
 800a7bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7c0:	f000 b90e 	b.w	800a9e0 <__malloc_unlock>
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	d908      	bls.n	800a7da <_free_r+0x46>
 800a7c8:	6825      	ldr	r5, [r4, #0]
 800a7ca:	1961      	adds	r1, r4, r5
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	bf01      	itttt	eq
 800a7d0:	6819      	ldreq	r1, [r3, #0]
 800a7d2:	685b      	ldreq	r3, [r3, #4]
 800a7d4:	1949      	addeq	r1, r1, r5
 800a7d6:	6021      	streq	r1, [r4, #0]
 800a7d8:	e7ed      	b.n	800a7b6 <_free_r+0x22>
 800a7da:	461a      	mov	r2, r3
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	b10b      	cbz	r3, 800a7e4 <_free_r+0x50>
 800a7e0:	42a3      	cmp	r3, r4
 800a7e2:	d9fa      	bls.n	800a7da <_free_r+0x46>
 800a7e4:	6811      	ldr	r1, [r2, #0]
 800a7e6:	1855      	adds	r5, r2, r1
 800a7e8:	42a5      	cmp	r5, r4
 800a7ea:	d10b      	bne.n	800a804 <_free_r+0x70>
 800a7ec:	6824      	ldr	r4, [r4, #0]
 800a7ee:	4421      	add	r1, r4
 800a7f0:	1854      	adds	r4, r2, r1
 800a7f2:	42a3      	cmp	r3, r4
 800a7f4:	6011      	str	r1, [r2, #0]
 800a7f6:	d1e0      	bne.n	800a7ba <_free_r+0x26>
 800a7f8:	681c      	ldr	r4, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	6053      	str	r3, [r2, #4]
 800a7fe:	4421      	add	r1, r4
 800a800:	6011      	str	r1, [r2, #0]
 800a802:	e7da      	b.n	800a7ba <_free_r+0x26>
 800a804:	d902      	bls.n	800a80c <_free_r+0x78>
 800a806:	230c      	movs	r3, #12
 800a808:	6003      	str	r3, [r0, #0]
 800a80a:	e7d6      	b.n	800a7ba <_free_r+0x26>
 800a80c:	6825      	ldr	r5, [r4, #0]
 800a80e:	1961      	adds	r1, r4, r5
 800a810:	428b      	cmp	r3, r1
 800a812:	bf04      	itt	eq
 800a814:	6819      	ldreq	r1, [r3, #0]
 800a816:	685b      	ldreq	r3, [r3, #4]
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	bf04      	itt	eq
 800a81c:	1949      	addeq	r1, r1, r5
 800a81e:	6021      	streq	r1, [r4, #0]
 800a820:	6054      	str	r4, [r2, #4]
 800a822:	e7ca      	b.n	800a7ba <_free_r+0x26>
 800a824:	b003      	add	sp, #12
 800a826:	bd30      	pop	{r4, r5, pc}
 800a828:	24000aec 	.word	0x24000aec

0800a82c <sbrk_aligned>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	4e0e      	ldr	r6, [pc, #56]	; (800a868 <sbrk_aligned+0x3c>)
 800a830:	460c      	mov	r4, r1
 800a832:	6831      	ldr	r1, [r6, #0]
 800a834:	4605      	mov	r5, r0
 800a836:	b911      	cbnz	r1, 800a83e <sbrk_aligned+0x12>
 800a838:	f000 f8bc 	bl	800a9b4 <_sbrk_r>
 800a83c:	6030      	str	r0, [r6, #0]
 800a83e:	4621      	mov	r1, r4
 800a840:	4628      	mov	r0, r5
 800a842:	f000 f8b7 	bl	800a9b4 <_sbrk_r>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d00a      	beq.n	800a860 <sbrk_aligned+0x34>
 800a84a:	1cc4      	adds	r4, r0, #3
 800a84c:	f024 0403 	bic.w	r4, r4, #3
 800a850:	42a0      	cmp	r0, r4
 800a852:	d007      	beq.n	800a864 <sbrk_aligned+0x38>
 800a854:	1a21      	subs	r1, r4, r0
 800a856:	4628      	mov	r0, r5
 800a858:	f000 f8ac 	bl	800a9b4 <_sbrk_r>
 800a85c:	3001      	adds	r0, #1
 800a85e:	d101      	bne.n	800a864 <sbrk_aligned+0x38>
 800a860:	f04f 34ff 	mov.w	r4, #4294967295
 800a864:	4620      	mov	r0, r4
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	24000af0 	.word	0x24000af0

0800a86c <_malloc_r>:
 800a86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a870:	1ccd      	adds	r5, r1, #3
 800a872:	f025 0503 	bic.w	r5, r5, #3
 800a876:	3508      	adds	r5, #8
 800a878:	2d0c      	cmp	r5, #12
 800a87a:	bf38      	it	cc
 800a87c:	250c      	movcc	r5, #12
 800a87e:	2d00      	cmp	r5, #0
 800a880:	4607      	mov	r7, r0
 800a882:	db01      	blt.n	800a888 <_malloc_r+0x1c>
 800a884:	42a9      	cmp	r1, r5
 800a886:	d905      	bls.n	800a894 <_malloc_r+0x28>
 800a888:	230c      	movs	r3, #12
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	2600      	movs	r6, #0
 800a88e:	4630      	mov	r0, r6
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a894:	4e2e      	ldr	r6, [pc, #184]	; (800a950 <_malloc_r+0xe4>)
 800a896:	f000 f89d 	bl	800a9d4 <__malloc_lock>
 800a89a:	6833      	ldr	r3, [r6, #0]
 800a89c:	461c      	mov	r4, r3
 800a89e:	bb34      	cbnz	r4, 800a8ee <_malloc_r+0x82>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	f7ff ffc2 	bl	800a82c <sbrk_aligned>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	d14d      	bne.n	800a94a <_malloc_r+0xde>
 800a8ae:	6834      	ldr	r4, [r6, #0]
 800a8b0:	4626      	mov	r6, r4
 800a8b2:	2e00      	cmp	r6, #0
 800a8b4:	d140      	bne.n	800a938 <_malloc_r+0xcc>
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	eb04 0803 	add.w	r8, r4, r3
 800a8c0:	f000 f878 	bl	800a9b4 <_sbrk_r>
 800a8c4:	4580      	cmp	r8, r0
 800a8c6:	d13a      	bne.n	800a93e <_malloc_r+0xd2>
 800a8c8:	6821      	ldr	r1, [r4, #0]
 800a8ca:	3503      	adds	r5, #3
 800a8cc:	1a6d      	subs	r5, r5, r1
 800a8ce:	f025 0503 	bic.w	r5, r5, #3
 800a8d2:	3508      	adds	r5, #8
 800a8d4:	2d0c      	cmp	r5, #12
 800a8d6:	bf38      	it	cc
 800a8d8:	250c      	movcc	r5, #12
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4638      	mov	r0, r7
 800a8de:	f7ff ffa5 	bl	800a82c <sbrk_aligned>
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d02b      	beq.n	800a93e <_malloc_r+0xd2>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	442b      	add	r3, r5
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	e00e      	b.n	800a90c <_malloc_r+0xa0>
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	1b52      	subs	r2, r2, r5
 800a8f2:	d41e      	bmi.n	800a932 <_malloc_r+0xc6>
 800a8f4:	2a0b      	cmp	r2, #11
 800a8f6:	d916      	bls.n	800a926 <_malloc_r+0xba>
 800a8f8:	1961      	adds	r1, r4, r5
 800a8fa:	42a3      	cmp	r3, r4
 800a8fc:	6025      	str	r5, [r4, #0]
 800a8fe:	bf18      	it	ne
 800a900:	6059      	strne	r1, [r3, #4]
 800a902:	6863      	ldr	r3, [r4, #4]
 800a904:	bf08      	it	eq
 800a906:	6031      	streq	r1, [r6, #0]
 800a908:	5162      	str	r2, [r4, r5]
 800a90a:	604b      	str	r3, [r1, #4]
 800a90c:	4638      	mov	r0, r7
 800a90e:	f104 060b 	add.w	r6, r4, #11
 800a912:	f000 f865 	bl	800a9e0 <__malloc_unlock>
 800a916:	f026 0607 	bic.w	r6, r6, #7
 800a91a:	1d23      	adds	r3, r4, #4
 800a91c:	1af2      	subs	r2, r6, r3
 800a91e:	d0b6      	beq.n	800a88e <_malloc_r+0x22>
 800a920:	1b9b      	subs	r3, r3, r6
 800a922:	50a3      	str	r3, [r4, r2]
 800a924:	e7b3      	b.n	800a88e <_malloc_r+0x22>
 800a926:	6862      	ldr	r2, [r4, #4]
 800a928:	42a3      	cmp	r3, r4
 800a92a:	bf0c      	ite	eq
 800a92c:	6032      	streq	r2, [r6, #0]
 800a92e:	605a      	strne	r2, [r3, #4]
 800a930:	e7ec      	b.n	800a90c <_malloc_r+0xa0>
 800a932:	4623      	mov	r3, r4
 800a934:	6864      	ldr	r4, [r4, #4]
 800a936:	e7b2      	b.n	800a89e <_malloc_r+0x32>
 800a938:	4634      	mov	r4, r6
 800a93a:	6876      	ldr	r6, [r6, #4]
 800a93c:	e7b9      	b.n	800a8b2 <_malloc_r+0x46>
 800a93e:	230c      	movs	r3, #12
 800a940:	603b      	str	r3, [r7, #0]
 800a942:	4638      	mov	r0, r7
 800a944:	f000 f84c 	bl	800a9e0 <__malloc_unlock>
 800a948:	e7a1      	b.n	800a88e <_malloc_r+0x22>
 800a94a:	6025      	str	r5, [r4, #0]
 800a94c:	e7de      	b.n	800a90c <_malloc_r+0xa0>
 800a94e:	bf00      	nop
 800a950:	24000aec 	.word	0x24000aec

0800a954 <_realloc_r>:
 800a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a958:	4680      	mov	r8, r0
 800a95a:	4614      	mov	r4, r2
 800a95c:	460e      	mov	r6, r1
 800a95e:	b921      	cbnz	r1, 800a96a <_realloc_r+0x16>
 800a960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a964:	4611      	mov	r1, r2
 800a966:	f7ff bf81 	b.w	800a86c <_malloc_r>
 800a96a:	b92a      	cbnz	r2, 800a978 <_realloc_r+0x24>
 800a96c:	f7ff ff12 	bl	800a794 <_free_r>
 800a970:	4625      	mov	r5, r4
 800a972:	4628      	mov	r0, r5
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	f000 f838 	bl	800a9ec <_malloc_usable_size_r>
 800a97c:	4284      	cmp	r4, r0
 800a97e:	4607      	mov	r7, r0
 800a980:	d802      	bhi.n	800a988 <_realloc_r+0x34>
 800a982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a986:	d812      	bhi.n	800a9ae <_realloc_r+0x5a>
 800a988:	4621      	mov	r1, r4
 800a98a:	4640      	mov	r0, r8
 800a98c:	f7ff ff6e 	bl	800a86c <_malloc_r>
 800a990:	4605      	mov	r5, r0
 800a992:	2800      	cmp	r0, #0
 800a994:	d0ed      	beq.n	800a972 <_realloc_r+0x1e>
 800a996:	42bc      	cmp	r4, r7
 800a998:	4622      	mov	r2, r4
 800a99a:	4631      	mov	r1, r6
 800a99c:	bf28      	it	cs
 800a99e:	463a      	movcs	r2, r7
 800a9a0:	f7ff fed0 	bl	800a744 <memcpy>
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	f7ff fef4 	bl	800a794 <_free_r>
 800a9ac:	e7e1      	b.n	800a972 <_realloc_r+0x1e>
 800a9ae:	4635      	mov	r5, r6
 800a9b0:	e7df      	b.n	800a972 <_realloc_r+0x1e>
	...

0800a9b4 <_sbrk_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d06      	ldr	r5, [pc, #24]	; (800a9d0 <_sbrk_r+0x1c>)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	602b      	str	r3, [r5, #0]
 800a9c0:	f7f6 fa26 	bl	8000e10 <_sbrk>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_sbrk_r+0x1a>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_sbrk_r+0x1a>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	24000af4 	.word	0x24000af4

0800a9d4 <__malloc_lock>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	; (800a9dc <__malloc_lock+0x8>)
 800a9d6:	f000 b811 	b.w	800a9fc <__retarget_lock_acquire_recursive>
 800a9da:	bf00      	nop
 800a9dc:	24000af8 	.word	0x24000af8

0800a9e0 <__malloc_unlock>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	; (800a9e8 <__malloc_unlock+0x8>)
 800a9e2:	f000 b80c 	b.w	800a9fe <__retarget_lock_release_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	24000af8 	.word	0x24000af8

0800a9ec <_malloc_usable_size_r>:
 800a9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9f0:	1f18      	subs	r0, r3, #4
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bfbc      	itt	lt
 800a9f6:	580b      	ldrlt	r3, [r1, r0]
 800a9f8:	18c0      	addlt	r0, r0, r3
 800a9fa:	4770      	bx	lr

0800a9fc <__retarget_lock_acquire_recursive>:
 800a9fc:	4770      	bx	lr

0800a9fe <__retarget_lock_release_recursive>:
 800a9fe:	4770      	bx	lr

0800aa00 <_init>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr

0800aa0c <_fini>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	bf00      	nop
 800aa10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa12:	bc08      	pop	{r3}
 800aa14:	469e      	mov	lr, r3
 800aa16:	4770      	bx	lr
