
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006928  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000568  24000074  08006ce4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005dc  08006ce4  000205dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016c9d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a2f  00000000  00000000  00036d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c8  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f88  00000000  00000000  0003a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031d3a  00000000  00000000  0003b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017d99  00000000  00000000  0006d4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fd49  00000000  00000000  00085293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c4fdc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004900  00000000  00000000  001c502c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006bc0 	.word	0x08006bc0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08006bc0 	.word	0x08006bc0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <Button_Process>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
void Button_Process (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    if (GPIO_PIN_SET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <Button_Process+0x38>)
 80006ae:	f001 f84d 	bl	800174c <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10e      	bne.n	80006d6 <Button_Process+0x32>
    {
        sprintf(uart3_tx_buf, "Button State : Pushed.\r\n");
 80006b8:	4909      	ldr	r1, [pc, #36]	; (80006e0 <Button_Process+0x3c>)
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <Button_Process+0x40>)
 80006bc:	f005 fe12 	bl	80062e4 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <Button_Process+0x40>)
 80006c2:	f7ff fe15 	bl	80002f0 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	4905      	ldr	r1, [pc, #20]	; (80006e4 <Button_Process+0x40>)
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <Button_Process+0x44>)
 80006d2:	f004 fbb7 	bl	8004e44 <HAL_UART_Transmit>
    }
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58020800 	.word	0x58020800
 80006e0:	08006bd8 	.word	0x08006bd8
 80006e4:	240001c8 	.word	0x240001c8
 80006e8:	2400012c 	.word	0x2400012c

080006ec <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08e      	sub	sp, #56	; 0x38
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b80      	ldr	r3, [pc, #512]	; (8000904 <MX_GPIO_Init+0x218>)
 8000704:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000708:	4a7e      	ldr	r2, [pc, #504]	; (8000904 <MX_GPIO_Init+0x218>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000712:	4b7c      	ldr	r3, [pc, #496]	; (8000904 <MX_GPIO_Init+0x218>)
 8000714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	623b      	str	r3, [r7, #32]
 800071e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000720:	4b78      	ldr	r3, [pc, #480]	; (8000904 <MX_GPIO_Init+0x218>)
 8000722:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000726:	4a77      	ldr	r2, [pc, #476]	; (8000904 <MX_GPIO_Init+0x218>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000730:	4b74      	ldr	r3, [pc, #464]	; (8000904 <MX_GPIO_Init+0x218>)
 8000732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000736:	f003 0320 	and.w	r3, r3, #32
 800073a:	61fb      	str	r3, [r7, #28]
 800073c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b71      	ldr	r3, [pc, #452]	; (8000904 <MX_GPIO_Init+0x218>)
 8000740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000744:	4a6f      	ldr	r2, [pc, #444]	; (8000904 <MX_GPIO_Init+0x218>)
 8000746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074e:	4b6d      	ldr	r3, [pc, #436]	; (8000904 <MX_GPIO_Init+0x218>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b69      	ldr	r3, [pc, #420]	; (8000904 <MX_GPIO_Init+0x218>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a68      	ldr	r2, [pc, #416]	; (8000904 <MX_GPIO_Init+0x218>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b65      	ldr	r3, [pc, #404]	; (8000904 <MX_GPIO_Init+0x218>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b62      	ldr	r3, [pc, #392]	; (8000904 <MX_GPIO_Init+0x218>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a60      	ldr	r2, [pc, #384]	; (8000904 <MX_GPIO_Init+0x218>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b5e      	ldr	r3, [pc, #376]	; (8000904 <MX_GPIO_Init+0x218>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000798:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <MX_GPIO_Init+0x218>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a59      	ldr	r2, [pc, #356]	; (8000904 <MX_GPIO_Init+0x218>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b56      	ldr	r3, [pc, #344]	; (8000904 <MX_GPIO_Init+0x218>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <MX_GPIO_Init+0x218>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a51      	ldr	r2, [pc, #324]	; (8000904 <MX_GPIO_Init+0x218>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <MX_GPIO_Init+0x218>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d4:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <MX_GPIO_Init+0x218>)
 80007d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007da:	4a4a      	ldr	r2, [pc, #296]	; (8000904 <MX_GPIO_Init+0x218>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e4:	4b47      	ldr	r3, [pc, #284]	; (8000904 <MX_GPIO_Init+0x218>)
 80007e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4843      	ldr	r0, [pc, #268]	; (8000908 <MX_GPIO_Init+0x21c>)
 80007fa:	f000 ffbf 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f244 0101 	movw	r1, #16385	; 0x4001
 8000804:	4841      	ldr	r0, [pc, #260]	; (800090c <MX_GPIO_Init+0x220>)
 8000806:	f000 ffb9 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	4840      	ldr	r0, [pc, #256]	; (8000910 <MX_GPIO_Init+0x224>)
 8000810:	f000 ffb4 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	483a      	ldr	r0, [pc, #232]	; (8000914 <MX_GPIO_Init+0x228>)
 800082a:	f000 fddf 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800082e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4619      	mov	r1, r3
 8000846:	4830      	ldr	r0, [pc, #192]	; (8000908 <MX_GPIO_Init+0x21c>)
 8000848:	f000 fdd0 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800084c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4829      	ldr	r0, [pc, #164]	; (800090c <MX_GPIO_Init+0x220>)
 8000866:	f000 fdc1 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x22c>)
 8000880:	f000 fdb4 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4820      	ldr	r0, [pc, #128]	; (800091c <MX_GPIO_Init+0x230>)
 800089a:	f000 fda7 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008b0:	230a      	movs	r3, #10
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_GPIO_Init+0x230>)
 80008bc:	f000 fd96 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80008c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	4810      	ldr	r0, [pc, #64]	; (800091c <MX_GPIO_Init+0x230>)
 80008da:	f000 fd87 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008de:	2302      	movs	r3, #2
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_GPIO_Init+0x224>)
 80008f6:	f000 fd79 	bl	80013ec <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3738      	adds	r7, #56	; 0x38
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	58024400 	.word	0x58024400
 8000908:	58021400 	.word	0x58021400
 800090c:	58020400 	.word	0x58020400
 8000910:	58021000 	.word	0x58021000
 8000914:	58020800 	.word	0x58020800
 8000918:	58021800 	.word	0x58021800
 800091c:	58020000 	.word	0x58020000

08000920 <LED_Process>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
void LED_Process (void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <LED_Process+0x44>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800092c:	d30c      	bcc.n	8000948 <LED_Process+0x28>
  {
    TIM1_CNT = 0;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <LED_Process+0x44>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]

    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000934:	2101      	movs	r1, #1
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <LED_Process+0x48>)
 8000938:	f000 ff39 	bl	80017ae <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800093c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <LED_Process+0x48>)
 8000942:	f000 ff34 	bl	80017ae <HAL_GPIO_TogglePin>
  else if (TIM2_CNT > 9) // 100ms period Timer2 Counter.
  {
    TIM2_CNT = 0;
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  }
}
 8000946:	e00a      	b.n	800095e <LED_Process+0x3e>
  else if (TIM2_CNT > 9) // 100ms period Timer2 Counter.
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <LED_Process+0x4c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b09      	cmp	r3, #9
 800094e:	d906      	bls.n	800095e <LED_Process+0x3e>
    TIM2_CNT = 0;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <LED_Process+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000956:	2102      	movs	r1, #2
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <LED_Process+0x50>)
 800095a:	f000 ff28 	bl	80017ae <HAL_GPIO_TogglePin>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	240001c0 	.word	0x240001c0
 8000968:	58020400 	.word	0x58020400
 800096c:	240001c4 	.word	0x240001c4
 8000970:	58021000 	.word	0x58021000

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fb96 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f81a 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f7ff feb4 	bl	80006ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000984:	f000 faa8 	bl	8000ed8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000988:	f000 fb5c 	bl	8001044 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 800098c:	f000 f9ba 	bl	8000d04 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000990:	f000 fa0c 	bl	8000dac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <main+0x38>)
 8000996:	f003 fd75 	bl	8004484 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <main+0x3c>)
 800099c:	f003 fd72 	bl	8004484 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Process();
 80009a0:	f7ff ffbe 	bl	8000920 <LED_Process>
    Button_Process();
 80009a4:	f7ff fe7e 	bl	80006a4 <Button_Process>
    LED_Process();
 80009a8:	e7fa      	b.n	80009a0 <main+0x2c>
 80009aa:	bf00      	nop
 80009ac:	24000094 	.word	0x24000094
 80009b0:	240000e0 	.word	0x240000e0

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09c      	sub	sp, #112	; 0x70
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	224c      	movs	r2, #76	; 0x4c
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f005 fc86 	bl	80062d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2220      	movs	r2, #32
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fc80 	bl	80062d4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <SystemClock_Config+0xe4>)
 80009d6:	f04f 32ff 	mov.w	r2, #4294967295
 80009da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009de:	2004      	movs	r0, #4
 80009e0:	f000 ff00 	bl	80017e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <SystemClock_Config+0xe8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <SystemClock_Config+0xe8>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <SystemClock_Config+0xe8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a00:	bf00      	nop
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <SystemClock_Config+0xe8>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0e:	d1f8      	bne.n	8000a02 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a10:	2321      	movs	r3, #33	; 0x21
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	2302      	movs	r3, #2
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a2a:	2346      	movs	r3, #70	; 0x46
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 ff24 	bl	8001898 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a56:	f000 f823 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	233f      	movs	r3, #63	; 0x3f
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2107      	movs	r1, #7
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fb3b 	bl	80020fc <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a8c:	f000 f808 	bl	8000aa0 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3770      	adds	r7, #112	; 0x70
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	58024400 	.word	0x58024400
 8000a9c:	58024800 	.word	0x58024800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x30>)
 8000ab4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x30>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x30>)
 8000ac4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	58024400 	.word	0x58024400

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 fb2e 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <TIM1_UP_IRQHandler+0x10>)
 8000b3a:	f003 fd1b 	bl	8004574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	24000094 	.word	0x24000094

08000b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <TIM2_IRQHandler+0x10>)
 8000b4e:	f003 fd11 	bl	8004574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240000e0 	.word	0x240000e0

08000b5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d105      	bne.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    TIM1_CNT++;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b76:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
  {
    TIM2_CNT++;
  }
}
 8000b78:	e009      	b.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x32>
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b82:	d104      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x32>
    TIM2_CNT++;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	240001c0 	.word	0x240001c0
 8000ba4:	240001c4 	.word	0x240001c4

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f005 fb52 	bl	8006280 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24100000 	.word	0x24100000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	24000090 	.word	0x24000090
 8000c10:	240005e0 	.word	0x240005e0

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <SystemInit+0xd0>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a31      	ldr	r2, [pc, #196]	; (8000ce4 <SystemInit+0xd0>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <SystemInit+0xd4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d807      	bhi.n	8000c44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <SystemInit+0xd4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 030f 	bic.w	r3, r3, #15
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <SystemInit+0xd4>)
 8000c3e:	f043 0303 	orr.w	r3, r3, #3
 8000c42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <SystemInit+0xd8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a28      	ldr	r2, [pc, #160]	; (8000cec <SystemInit+0xd8>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c50:	4b26      	ldr	r3, [pc, #152]	; (8000cec <SystemInit+0xd8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemInit+0xd8>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4924      	ldr	r1, [pc, #144]	; (8000cec <SystemInit+0xd8>)
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <SystemInit+0xdc>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <SystemInit+0xd4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 030c 	and.w	r3, r3, #12
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <SystemInit+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f023 030f 	bic.w	r3, r3, #15
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <SystemInit+0xd4>)
 8000c78:	f043 0303 	orr.w	r3, r3, #3
 8000c7c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <SystemInit+0xd8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <SystemInit+0xd8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <SystemInit+0xd8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <SystemInit+0xd8>)
 8000c92:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <SystemInit+0xe0>)
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <SystemInit+0xd8>)
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <SystemInit+0xe4>)
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <SystemInit+0xd8>)
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <SystemInit+0xe8>)
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <SystemInit+0xd8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <SystemInit+0xd8>)
 8000caa:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <SystemInit+0xe8>)
 8000cac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <SystemInit+0xd8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <SystemInit+0xd8>)
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <SystemInit+0xe8>)
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <SystemInit+0xd8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <SystemInit+0xd8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <SystemInit+0xd8>)
 8000cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <SystemInit+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <SystemInit+0xec>)
 8000cd4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cd8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00
 8000ce8:	52002000 	.word	0x52002000
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cf4:	02020200 	.word	0x02020200
 8000cf8:	01ff0000 	.word	0x01ff0000
 8000cfc:	01010280 	.word	0x01010280
 8000d00:	52004000 	.word	0x52004000

08000d04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d24:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d2a:	f240 1217 	movw	r2, #279	; 0x117
 8000d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d50:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d52:	f003 fb3f 	bl	80043d4 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000d5c:	f7ff fea0 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d6e:	f003 fd09 	bl	8004784 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d78:	f7ff fe92 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM1_Init+0xa0>)
 8000d8e:	f003 ff5d 	bl	8004c4c <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d98:	f7ff fe82 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	24000094 	.word	0x24000094
 8000da8:	40010000 	.word	0x40010000

08000dac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000dd4:	f240 1217 	movw	r2, #279	; 0x117
 8000dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000de2:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <MX_TIM2_Init+0x9c>)
 8000de4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000df4:	f003 faee 	bl	80043d4 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dfe:	f7ff fe4f 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000e10:	f003 fcb8 	bl	8004784 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e1a:	f7ff fe41 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM2_Init+0x98>)
 8000e2c:	f003 ff0e 	bl	8004c4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e36:	f7ff fe33 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	240000e0 	.word	0x240000e0
 8000e48:	0001869f 	.word	0x0001869f

08000e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_TIM_Base_MspInit+0x84>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d117      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_TIM_Base_MspInit+0x88>)
 8000e60:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_TIM_Base_MspInit+0x88>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_TIM_Base_MspInit+0x88>)
 8000e70:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2019      	movs	r0, #25
 8000e82:	f000 fa7e 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e86:	2019      	movs	r0, #25
 8000e88:	f000 fa95 	bl	80013b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e8c:	e01b      	b.n	8000ec6 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e96:	d116      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_TIM_Base_MspInit+0x88>)
 8000e9a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_TIM_Base_MspInit+0x88>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_TIM_Base_MspInit+0x88>)
 8000eaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	201c      	movs	r0, #28
 8000ebc:	f000 fa61 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec0:	201c      	movs	r0, #28
 8000ec2:	f000 fa78 	bl	80013b6 <HAL_NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <MX_USART3_UART_Init+0x94>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f22:	f003 ff3f 	bl	8004da4 <HAL_UART_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f2c:	f7ff fdb8 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f30:	2100      	movs	r1, #0
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f34:	f005 f8d9 	bl	80060ea <HAL_UARTEx_SetTxFifoThreshold>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f7ff fdaf 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4808      	ldr	r0, [pc, #32]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f46:	f005 f90e 	bl	8006166 <HAL_UARTEx_SetRxFifoThreshold>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f50:	f7ff fda6 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_USART3_UART_Init+0x90>)
 8000f56:	f005 f88f 	bl	8006078 <HAL_UARTEx_DisableFifoMode>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f60:	f7ff fd9e 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2400012c 	.word	0x2400012c
 8000f6c:	40004800 	.word	0x40004800

08000f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ba      	sub	sp, #232	; 0xe8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	22c0      	movs	r2, #192	; 0xc0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 f99f 	bl	80062d4 <memset>
  if(uartHandle->Instance==USART3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a27      	ldr	r2, [pc, #156]	; (8001038 <HAL_UART_MspInit+0xc8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d146      	bne.n	800102e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fa0:	f04f 0202 	mov.w	r2, #2
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fc2c 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fc2:	f7ff fd6d 	bl	8000aa0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_UART_MspInit+0xcc>)
 8000fc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_UART_MspInit+0xcc>)
 8000fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_UART_MspInit+0xcc>)
 8000fd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_UART_MspInit+0xcc>)
 8000fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_UART_MspInit+0xcc>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_UART_MspInit+0xcc>)
 8000ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800101c:	2307      	movs	r3, #7
 800101e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_UART_MspInit+0xd0>)
 800102a:	f000 f9df 	bl	80013ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	37e8      	adds	r7, #232	; 0xe8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004800 	.word	0x40004800
 800103c:	58024400 	.word	0x58024400
 8001040:	58020c00 	.word	0x58020c00

08001044 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001058:	f7ff fddc 	bl	8000c14 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001082:	f005 f903 	bl	800628c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fc75 	bl	8000974 <main>
  bx  lr
 800108a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001090:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001094:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001098:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 800109c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80010a0:	240005dc 	.word	0x240005dc

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f95c 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010b4:	f001 f9d8 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_Init+0x68>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	4913      	ldr	r1, [pc, #76]	; (8001114 <HAL_Init+0x6c>)
 80010c6:	5ccb      	ldrb	r3, [r1, r3]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_Init+0x68>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_Init+0x6c>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_Init+0x70>)
 80010ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_Init+0x74>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f814 	bl	8001120 <HAL_InitTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e002      	b.n	8001108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001102:	f7ff fcd3 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58024400 	.word	0x58024400
 8001114:	08006bf4 	.word	0x08006bf4
 8001118:	24000004 	.word	0x24000004
 800111c:	24000000 	.word	0x24000000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_InitTick+0x60>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e021      	b.n	8001178 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_InitTick+0x64>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_InitTick+0x60>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f941 	bl	80013d2 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f90b 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x68>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2400000c 	.word	0x2400000c
 8001184:	24000000 	.word	0x24000000
 8001188:	24000008 	.word	0x24000008

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2400000c 	.word	0x2400000c
 80011b0:	240005c8 	.word	0x240005c8

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	240005c8 	.word	0x240005c8

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	05fa0000 	.word	0x05fa0000

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff40 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff33 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa4 	bl	8001328 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013fa:	4b89      	ldr	r3, [pc, #548]	; (8001620 <HAL_GPIO_Init+0x234>)
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013fe:	e194      	b.n	800172a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8186 	beq.w	8001724 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <HAL_GPIO_Init+0x44>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d130      	bne.n	8001492 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001466:	2201      	movs	r2, #1
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 0201 	and.w	r2, r3, #1
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b03      	cmp	r3, #3
 800149c:	d017      	beq.n	80014ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	69b9      	ldr	r1, [r7, #24]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80e0 	beq.w	8001724 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_GPIO_Init+0x238>)
 8001566:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800156a:	4a2e      	ldr	r2, [pc, #184]	; (8001624 <HAL_GPIO_Init+0x238>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_GPIO_Init+0x238>)
 8001576:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_GPIO_Init+0x23c>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <HAL_GPIO_Init+0x240>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d052      	beq.n	8001654 <HAL_GPIO_Init+0x268>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_GPIO_Init+0x244>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d031      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_GPIO_Init+0x248>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d02b      	beq.n	8001616 <HAL_GPIO_Init+0x22a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_GPIO_Init+0x24c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x226>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_GPIO_Init+0x250>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x222>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_GPIO_Init+0x254>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x21e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_GPIO_Init+0x258>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x21a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_GPIO_Init+0x25c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x216>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a18      	ldr	r2, [pc, #96]	; (800164c <HAL_GPIO_Init+0x260>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x212>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_GPIO_Init+0x264>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x20e>
 80015f6:	2309      	movs	r3, #9
 80015f8:	e02d      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 80015fa:	230a      	movs	r3, #10
 80015fc:	e02b      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 80015fe:	2308      	movs	r3, #8
 8001600:	e029      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001602:	2307      	movs	r3, #7
 8001604:	e027      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001606:	2306      	movs	r3, #6
 8001608:	e025      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800160a:	2305      	movs	r3, #5
 800160c:	e023      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800160e:	2304      	movs	r3, #4
 8001610:	e021      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001612:	2303      	movs	r3, #3
 8001614:	e01f      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001616:	2302      	movs	r3, #2
 8001618:	e01d      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800161a:	2301      	movs	r3, #1
 800161c:	e01b      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800161e:	bf00      	nop
 8001620:	58000080 	.word	0x58000080
 8001624:	58024400 	.word	0x58024400
 8001628:	58000400 	.word	0x58000400
 800162c:	58020000 	.word	0x58020000
 8001630:	58020400 	.word	0x58020400
 8001634:	58020800 	.word	0x58020800
 8001638:	58020c00 	.word	0x58020c00
 800163c:	58021000 	.word	0x58021000
 8001640:	58021400 	.word	0x58021400
 8001644:	58021800 	.word	0x58021800
 8001648:	58021c00 	.word	0x58021c00
 800164c:	58022000 	.word	0x58022000
 8001650:	58022400 	.word	0x58022400
 8001654:	2300      	movs	r3, #0
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001666:	4938      	ldr	r1, [pc, #224]	; (8001748 <HAL_GPIO_Init+0x35c>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800169a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f ae63 	bne.w	8001400 <HAL_GPIO_Init+0x14>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3724      	adds	r7, #36	; 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	58000400 	.word	0x58000400

0800174c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e001      	b.n	800176e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	400b      	ands	r3, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	619a      	str	r2, [r3, #24]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <HAL_PWREx_ConfigSupply+0xb0>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d00a      	beq.n	800180e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_PWREx_ConfigSupply+0xb0>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	429a      	cmp	r2, r3
 8001804:	d001      	beq.n	800180a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e040      	b.n	800188c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e03e      	b.n	800188c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_PWREx_ConfigSupply+0xb0>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001816:	491f      	ldr	r1, [pc, #124]	; (8001894 <HAL_PWREx_ConfigSupply+0xb0>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800181e:	f7ff fcc9 	bl	80011b4 <HAL_GetTick>
 8001822:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001824:	e009      	b.n	800183a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001826:	f7ff fcc5 	bl	80011b4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001834:	d901      	bls.n	800183a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e028      	b.n	800188c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_PWREx_ConfigSupply+0xb0>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001846:	d1ee      	bne.n	8001826 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b1e      	cmp	r3, #30
 800184c:	d008      	beq.n	8001860 <HAL_PWREx_ConfigSupply+0x7c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b2e      	cmp	r3, #46	; 0x2e
 8001852:	d005      	beq.n	8001860 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b1d      	cmp	r3, #29
 8001858:	d002      	beq.n	8001860 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b2d      	cmp	r3, #45	; 0x2d
 800185e:	d114      	bne.n	800188a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001860:	f7ff fca8 	bl	80011b4 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001866:	e009      	b.n	800187c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001868:	f7ff fca4 	bl	80011b4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001876:	d901      	bls.n	800187c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e007      	b.n	800188c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PWREx_ConfigSupply+0xb0>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d1ee      	bne.n	8001868 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	58024800 	.word	0x58024800

08001898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f000 bc1f 	b.w	80020ea <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b3 	beq.w	8001a20 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ba:	4b95      	ldr	r3, [pc, #596]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018c4:	4b92      	ldr	r3, [pc, #584]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d007      	beq.n	80018e0 <HAL_RCC_OscConfig+0x48>
 80018d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x64>
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d10d      	bne.n	80018fc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 8098 	beq.w	8001a1e <HAL_RCC_OscConfig+0x186>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8093 	bne.w	8001a1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e3f6      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x7c>
 8001906:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a81      	ldr	r2, [pc, #516]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e058      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d112      	bne.n	8001942 <HAL_RCC_OscConfig+0xaa>
 800191c:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7b      	ldr	r2, [pc, #492]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a78      	ldr	r2, [pc, #480]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800192e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a75      	ldr	r2, [pc, #468]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e041      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0xda>
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6f      	ldr	r2, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6c      	ldr	r2, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800195e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a69      	ldr	r2, [pc, #420]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e029      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800197a:	d112      	bne.n	80019a2 <HAL_RCC_OscConfig+0x10a>
 800197c:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a63      	ldr	r2, [pc, #396]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a60      	ldr	r2, [pc, #384]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800198e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 800199a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e011      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
 80019a2:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a5a      	ldr	r2, [pc, #360]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80019a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a57      	ldr	r2, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80019b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80019c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d013      	beq.n	80019f6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fbf1 	bl	80011b4 <HAL_GetTick>
 80019d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d6:	f7ff fbed 	bl	80011b4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e380      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019e8:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x13e>
 80019f4:	e014      	b.n	8001a20 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff fbdd 	bl	80011b4 <HAL_GetTick>
 80019fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fe:	f7ff fbd9 	bl	80011b4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	; 0x64
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e36c      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x166>
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 808c 	beq.w	8001b46 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a36:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <HAL_RCC_OscConfig+0x1bc>
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	2b18      	cmp	r3, #24
 8001a48:	d137      	bne.n	8001aba <HAL_RCC_OscConfig+0x222>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d132      	bne.n	8001aba <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_OscConfig+0x1d4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e33e      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 0219 	bic.w	r2, r3, #25
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4925      	ldr	r1, [pc, #148]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fb99 	bl	80011b4 <HAL_GetTick>
 8001a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff fb95 	bl	80011b4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e328      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	4917      	ldr	r1, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab8:	e045      	b.n	8001b46 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d028      	beq.n	8001b14 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0219 	bic.w	r2, r3, #25
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4910      	ldr	r1, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb6e 	bl	80011b4 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fb6a 	bl	80011b4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e2fd      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4901      	ldr	r1, [pc, #4]	; (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	e01a      	b.n	8001b46 <HAL_RCC_OscConfig+0x2ae>
 8001b10:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b14:	4b97      	ldr	r3, [pc, #604]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a96      	ldr	r2, [pc, #600]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fb48 	bl	80011b4 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fb44 	bl	80011b4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e2d7      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b3a:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b5c:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d007      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2e0>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b18      	cmp	r3, #24
 8001b6c:	d11b      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x30e>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d116      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b78:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2f8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b80      	cmp	r3, #128	; 0x80
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e2ac      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b90:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	4975      	ldr	r1, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ba4:	e040      	b.n	8001c28 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d023      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bae:	4b71      	ldr	r3, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a70      	ldr	r2, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff fafb 	bl	80011b4 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bc2:	f7ff faf7 	bl	80011b4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e28a      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bd4:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	4961      	ldr	r1, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
 8001bf4:	e018      	b.n	8001c28 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bf6:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff fad7 	bl	80011b4 <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fad3 	bl	80011b4 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e266      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c1c:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d036      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d019      	beq.n	8001c70 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	4a4c      	ldr	r2, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff fab4 	bl	80011b4 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fab0 	bl	80011b4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e243      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c62:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3b8>
 8001c6e:	e018      	b.n	8001ca2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c70:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c74:	4a3f      	ldr	r2, [pc, #252]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fa9a 	bl	80011b4 <HAL_GetTick>
 8001c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fa96 	bl	80011b4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e229      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d036      	beq.n	8001d1c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d019      	beq.n	8001cea <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fa77 	bl	80011b4 <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cca:	f7ff fa73 	bl	80011b4 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e206      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x432>
 8001ce8:	e018      	b.n	8001d1c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fa5d 	bl	80011b4 <HAL_GetTick>
 8001cfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfe:	f7ff fa59 	bl	80011b4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1ec      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80af 	beq.w	8001e88 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_OscConfig+0x4e0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x4e0>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d36:	f7ff fa3d 	bl	80011b4 <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fa39 	bl	80011b4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1cc      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_OscConfig+0x4e0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4e4>
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	4a02      	ldr	r2, [pc, #8]	; (8001d74 <HAL_RCC_OscConfig+0x4dc>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d70:	e05b      	b.n	8001e2a <HAL_RCC_OscConfig+0x592>
 8001d72:	bf00      	nop
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58024800 	.word	0x58024800
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d112      	bne.n	8001daa <HAL_RCC_OscConfig+0x512>
 8001d84:	4b9d      	ldr	r3, [pc, #628]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a9c      	ldr	r2, [pc, #624]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	4b9a      	ldr	r3, [pc, #616]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a99      	ldr	r2, [pc, #612]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9c:	4b97      	ldr	r3, [pc, #604]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a96      	ldr	r2, [pc, #600]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001da2:	f023 0304 	bic.w	r3, r3, #4
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	e03f      	b.n	8001e2a <HAL_RCC_OscConfig+0x592>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d112      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x540>
 8001db2:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a91      	ldr	r2, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b8f      	ldr	r3, [pc, #572]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a8e      	ldr	r2, [pc, #568]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b8c      	ldr	r3, [pc, #560]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a8b      	ldr	r2, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e028      	b.n	8001e2a <HAL_RCC_OscConfig+0x592>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b85      	cmp	r3, #133	; 0x85
 8001dde:	d112      	bne.n	8001e06 <HAL_RCC_OscConfig+0x56e>
 8001de0:	4b86      	ldr	r3, [pc, #536]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a85      	ldr	r2, [pc, #532]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a82      	ldr	r2, [pc, #520]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
 8001df8:	4b80      	ldr	r3, [pc, #512]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a7f      	ldr	r2, [pc, #508]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	e011      	b.n	8001e2a <HAL_RCC_OscConfig+0x592>
 8001e06:	4b7d      	ldr	r3, [pc, #500]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	4a7c      	ldr	r2, [pc, #496]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70
 8001e12:	4b7a      	ldr	r3, [pc, #488]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a79      	ldr	r2, [pc, #484]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1e:	4b77      	ldr	r3, [pc, #476]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a76      	ldr	r2, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff f9bf 	bl	80011b4 <HAL_GetTick>
 8001e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f9bb 	bl	80011b4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e14c      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RCC_OscConfig+0x5a2>
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7ff f9a9 	bl	80011b4 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff f9a5 	bl	80011b4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e136      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e7c:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ee      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 812b 	beq.w	80020e8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e92:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e9a:	2b18      	cmp	r3, #24
 8001e9c:	f000 80bb 	beq.w	8002016 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	f040 8095 	bne.w	8001fd4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f97d 	bl	80011b4 <HAL_GetTick>
 8001eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f979 	bl	80011b4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e10c      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x768>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	4942      	ldr	r1, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	628b      	str	r3, [r1, #40]	; 0x28
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	3b01      	subs	r3, #1
 8001f06:	025b      	lsls	r3, r3, #9
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	3b01      	subs	r3, #1
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f26:	4935      	ldr	r1, [pc, #212]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f2c:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	4a32      	ldr	r2, [pc, #200]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_RCC_OscConfig+0x76c>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f44:	00d2      	lsls	r2, r2, #3
 8001f46:	492d      	ldr	r1, [pc, #180]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	f023 020c 	bic.w	r2, r3, #12
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4928      	ldr	r1, [pc, #160]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f023 0202 	bic.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4924      	ldr	r1, [pc, #144]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f902 	bl	80011b4 <HAL_GetTick>
 8001fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f8fe 	bl	80011b4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e091      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x71c>
 8001fd2:	e089      	b.n	80020e8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_RCC_OscConfig+0x764>)
 8001fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f8e8 	bl	80011b4 <HAL_GetTick>
 8001fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff f8e4 	bl	80011b4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d908      	bls.n	8002008 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e077      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
 8001ffa:	bf00      	nop
 8001ffc:	58024400 	.word	0x58024400
 8002000:	fffffc0c 	.word	0xfffffc0c
 8002004:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e9      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x750>
 8002014:	e068      	b.n	80020e8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800201c:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b01      	cmp	r3, #1
 8002028:	d031      	beq.n	800208e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d12a      	bne.n	800208e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d122      	bne.n	800208e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d11a      	bne.n	800208e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	0a5b      	lsrs	r3, r3, #9
 800205c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d111      	bne.n	800208e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d108      	bne.n	800208e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	0e1b      	lsrs	r3, r3, #24
 8002080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e02b      	b.n	80020ea <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	08db      	lsrs	r3, r3, #3
 8002098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800209c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d01f      	beq.n	80020e8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b4:	f7ff f87e 	bl	80011b4 <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020ba:	bf00      	nop
 80020bc:	f7ff f87a 	bl	80011b4 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d0f9      	beq.n	80020bc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 80020ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_OscConfig+0x860>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020d4:	00d2      	lsls	r2, r2, #3
 80020d6:	4907      	ldr	r1, [pc, #28]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_RCC_OscConfig+0x85c>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3730      	adds	r7, #48	; 0x30
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	58024400 	.word	0x58024400
 80020f8:	ffff0007 	.word	0xffff0007

080020fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e19c      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b8a      	ldr	r3, [pc, #552]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d910      	bls.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b87      	ldr	r3, [pc, #540]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 020f 	bic.w	r2, r3, #15
 8002126:	4985      	ldr	r1, [pc, #532]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b83      	ldr	r3, [pc, #524]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e184      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	4b7b      	ldr	r3, [pc, #492]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002158:	429a      	cmp	r2, r3
 800215a:	d908      	bls.n	800216e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800215c:	4b78      	ldr	r3, [pc, #480]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4975      	ldr	r1, [pc, #468]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800216a:	4313      	orrs	r3, r2
 800216c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	4b70      	ldr	r3, [pc, #448]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002186:	429a      	cmp	r2, r3
 8002188:	d908      	bls.n	800219c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800218a:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	496a      	ldr	r1, [pc, #424]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002198:	4313      	orrs	r3, r2
 800219a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d010      	beq.n	80021ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	4b64      	ldr	r3, [pc, #400]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d908      	bls.n	80021ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021b8:	4b61      	ldr	r3, [pc, #388]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	495e      	ldr	r1, [pc, #376]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d908      	bls.n	80021f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021e6:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4953      	ldr	r1, [pc, #332]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d010      	beq.n	8002226 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	429a      	cmp	r2, r3
 8002212:	d908      	bls.n	8002226 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f023 020f 	bic.w	r2, r3, #15
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4947      	ldr	r1, [pc, #284]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002222:	4313      	orrs	r3, r2
 8002224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d055      	beq.n	80022de <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4940      	ldr	r1, [pc, #256]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002240:	4313      	orrs	r3, r2
 8002242:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800224c:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d121      	bne.n	800229c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0f6      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d107      	bne.n	8002274 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d115      	bne.n	800229c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0ea      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800227c:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0de      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800228c:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0d6      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f023 0207 	bic.w	r2, r3, #7
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4925      	ldr	r1, [pc, #148]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ae:	f7fe ff81 	bl	80011b4 <HAL_GetTick>
 80022b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe ff7d 	bl	80011b4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0be      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	429a      	cmp	r2, r3
 80022dc:	d1eb      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d208      	bcs.n	800230c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f023 020f 	bic.w	r2, r3, #15
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	490e      	ldr	r1, [pc, #56]	; (8002340 <HAL_RCC_ClockConfig+0x244>)
 8002308:	4313      	orrs	r3, r2
 800230a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d214      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 020f 	bic.w	r2, r3, #15
 8002322:	4906      	ldr	r1, [pc, #24]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <HAL_RCC_ClockConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e086      	b.n	800244a <HAL_RCC_ClockConfig+0x34e>
 800233c:	52002000 	.word	0x52002000
 8002340:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800235c:	429a      	cmp	r2, r3
 800235e:	d208      	bcs.n	8002372 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002360:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4939      	ldr	r1, [pc, #228]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 800236e:	4313      	orrs	r3, r2
 8002370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	4b34      	ldr	r3, [pc, #208]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238a:	429a      	cmp	r2, r3
 800238c:	d208      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	492e      	ldr	r1, [pc, #184]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d208      	bcs.n	80023ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4922      	ldr	r1, [pc, #136]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d010      	beq.n	80023fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d208      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4917      	ldr	r1, [pc, #92]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80023fc:	f000 f834 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	4912      	ldr	r1, [pc, #72]	; (8002458 <HAL_RCC_ClockConfig+0x35c>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x358>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <HAL_RCC_ClockConfig+0x35c>)
 8002424:	5cd3      	ldrb	r3, [r2, r3]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_RCC_ClockConfig+0x360>)
 8002432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_RCC_ClockConfig+0x364>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x368>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fe6e 	bl	8001120 <HAL_InitTick>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	58024400 	.word	0x58024400
 8002458:	08006bf4 	.word	0x08006bf4
 800245c:	24000004 	.word	0x24000004
 8002460:	24000000 	.word	0x24000000
 8002464:	24000008 	.word	0x24000008

08002468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800246e:	4bb3      	ldr	r3, [pc, #716]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002476:	2b18      	cmp	r3, #24
 8002478:	f200 8155 	bhi.w	8002726 <HAL_RCC_GetSysClockFreq+0x2be>
 800247c:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <HAL_RCC_GetSysClockFreq+0x1c>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	080024e9 	.word	0x080024e9
 8002488:	08002727 	.word	0x08002727
 800248c:	08002727 	.word	0x08002727
 8002490:	08002727 	.word	0x08002727
 8002494:	08002727 	.word	0x08002727
 8002498:	08002727 	.word	0x08002727
 800249c:	08002727 	.word	0x08002727
 80024a0:	08002727 	.word	0x08002727
 80024a4:	0800250f 	.word	0x0800250f
 80024a8:	08002727 	.word	0x08002727
 80024ac:	08002727 	.word	0x08002727
 80024b0:	08002727 	.word	0x08002727
 80024b4:	08002727 	.word	0x08002727
 80024b8:	08002727 	.word	0x08002727
 80024bc:	08002727 	.word	0x08002727
 80024c0:	08002727 	.word	0x08002727
 80024c4:	08002515 	.word	0x08002515
 80024c8:	08002727 	.word	0x08002727
 80024cc:	08002727 	.word	0x08002727
 80024d0:	08002727 	.word	0x08002727
 80024d4:	08002727 	.word	0x08002727
 80024d8:	08002727 	.word	0x08002727
 80024dc:	08002727 	.word	0x08002727
 80024e0:	08002727 	.word	0x08002727
 80024e4:	0800251b 	.word	0x0800251b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024e8:	4b94      	ldr	r3, [pc, #592]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024f4:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	4a90      	ldr	r2, [pc, #576]	; (8002740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002506:	e111      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002508:	4b8d      	ldr	r3, [pc, #564]	; (8002740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800250a:	61bb      	str	r3, [r7, #24]
      break;
 800250c:	e10e      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800250e:	4b8d      	ldr	r3, [pc, #564]	; (8002744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002510:	61bb      	str	r3, [r7, #24]
      break;
 8002512:	e10b      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002516:	61bb      	str	r3, [r7, #24]
      break;
 8002518:	e108      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002524:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800252e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002530:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800253a:	4b80      	ldr	r3, [pc, #512]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	08db      	lsrs	r3, r3, #3
 8002540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002552:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80e1 	beq.w	8002720 <HAL_RCC_GetSysClockFreq+0x2b8>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b02      	cmp	r3, #2
 8002562:	f000 8083 	beq.w	800266c <HAL_RCC_GetSysClockFreq+0x204>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b02      	cmp	r3, #2
 800256a:	f200 80a1 	bhi.w	80026b0 <HAL_RCC_GetSysClockFreq+0x248>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x114>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d056      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x1c0>
 800257a:	e099      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02d      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002588:	4b6c      	ldr	r3, [pc, #432]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	4a6b      	ldr	r2, [pc, #428]	; (8002740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b2:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800274c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025e2:	e087      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002750 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002606:	ed97 6a02 	vldr	s12, [r7, #8]
 800260a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800274c <HAL_RCC_GetSysClockFreq+0x2e4>
 800260e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800261a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800261e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002626:	e065      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002632:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002754 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800263a:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800264a:	ed97 6a02 	vldr	s12, [r7, #8]
 800264e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800274c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800265a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800265e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800266a:	e043      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002676:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002758 <HAL_RCC_GetSysClockFreq+0x2f0>
 800267a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800268e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002692:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800274c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800269a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026ae:	e021      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002754 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800274c <HAL_RCC_GetSysClockFreq+0x2e4>
 80026da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	0a5b      	lsrs	r3, r3, #9
 80026fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026fe:	3301      	adds	r3, #1
 8002700:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800270c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002718:	ee17 3a90 	vmov	r3, s15
 800271c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002728:	61bb      	str	r3, [r7, #24]
      break;
 800272a:	bf00      	nop
  }

  return sysclockfreq;
 800272c:	69bb      	ldr	r3, [r7, #24]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	58024400 	.word	0x58024400
 8002740:	03d09000 	.word	0x03d09000
 8002744:	003d0900 	.word	0x003d0900
 8002748:	007a1200 	.word	0x007a1200
 800274c:	46000000 	.word	0x46000000
 8002750:	4c742400 	.word	0x4c742400
 8002754:	4a742400 	.word	0x4a742400
 8002758:	4af42400 	.word	0x4af42400

0800275c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002762:	f7ff fe81 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_RCC_GetHCLKFreq+0x50>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490f      	ldr	r1, [pc, #60]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_RCC_GetHCLKFreq+0x50>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800278a:	5cd3      	ldrb	r3, [r2, r3]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002798:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800279a:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	58024400 	.word	0x58024400
 80027b0:	08006bf4 	.word	0x08006bf4
 80027b4:	24000004 	.word	0x24000004
 80027b8:	24000000 	.word	0x24000000

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80027c0:	f7ff ffcc 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4904      	ldr	r1, [pc, #16]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	58024400 	.word	0x58024400
 80027e4:	08006bf4 	.word	0x08006bf4

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80027ec:	f7ff ffb6 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	08006bf4 	.word	0x08006bf4

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002818:	b0c8      	sub	sp, #288	; 0x120
 800281a:	af00      	add	r7, sp, #0
 800281c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002820:	2300      	movs	r3, #0
 8002822:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002826:	2300      	movs	r3, #0
 8002828:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800282c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002838:	2500      	movs	r5, #0
 800283a:	ea54 0305 	orrs.w	r3, r4, r5
 800283e:	d049      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800284a:	d02f      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800284c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002850:	d828      	bhi.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002856:	d01a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800285c:	d822      	bhi.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d007      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002868:	e01c      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800286a:	4ba7      	ldr	r3, [pc, #668]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4aa6      	ldr	r2, [pc, #664]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002876:	e01a      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800287c:	3308      	adds	r3, #8
 800287e:	2102      	movs	r1, #2
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fc43 	bl	800410c <RCCEx_PLL2_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800288c:	e00f      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800288e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002892:	3328      	adds	r3, #40	; 0x28
 8002894:	2102      	movs	r1, #2
 8002896:	4618      	mov	r0, r3
 8002898:	f001 fcea 	bl	8004270 <RCCEx_PLL3_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028a2:	e004      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028aa:	e000      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028b6:	4b94      	ldr	r3, [pc, #592]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80028be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c4:	4a90      	ldr	r2, [pc, #576]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028c6:	430b      	orrs	r3, r1
 80028c8:	6513      	str	r3, [r2, #80]	; 0x50
 80028ca:	e003      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80028e0:	f04f 0900 	mov.w	r9, #0
 80028e4:	ea58 0309 	orrs.w	r3, r8, r9
 80028e8:	d047      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d82a      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	08002911 	.word	0x08002911
 8002900:	0800291f 	.word	0x0800291f
 8002904:	08002935 	.word	0x08002935
 8002908:	08002953 	.word	0x08002953
 800290c:	08002953 	.word	0x08002953
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4a7c      	ldr	r2, [pc, #496]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800291c:	e01a      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800291e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002922:	3308      	adds	r3, #8
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fbf0 	bl	800410c <RCCEx_PLL2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002932:	e00f      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002938:	3328      	adds	r3, #40	; 0x28
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f001 fc97 	bl	8004270 <RCCEx_PLL3_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002948:	e004      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002950:	e000      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002954:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800295c:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	f023 0107 	bic.w	r1, r3, #7
 8002964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800296c:	430b      	orrs	r3, r1
 800296e:	6513      	str	r3, [r2, #80]	; 0x50
 8002970:	e003      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002972:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002976:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800297a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002986:	f04f 0b00 	mov.w	fp, #0
 800298a:	ea5a 030b 	orrs.w	r3, sl, fp
 800298e:	d054      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800299a:	d036      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800299c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80029a0:	d82f      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a6:	d032      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80029a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ac:	d829      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029ae:	2bc0      	cmp	r3, #192	; 0xc0
 80029b0:	d02f      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80029b2:	2bc0      	cmp	r3, #192	; 0xc0
 80029b4:	d825      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029b6:	2b80      	cmp	r3, #128	; 0x80
 80029b8:	d018      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80029ba:	2b80      	cmp	r3, #128	; 0x80
 80029bc:	d821      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d007      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80029c6:	e01c      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c8:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4a4e      	ldr	r2, [pc, #312]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80029d4:	e01e      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029da:	3308      	adds	r3, #8
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 fb94 	bl	800410c <RCCEx_PLL2_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80029ea:	e013      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029f0:	3328      	adds	r3, #40	; 0x28
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fc3b 	bl	8004270 <RCCEx_PLL3_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002a00:	e008      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a08:	e004      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6513      	str	r3, [r2, #80]	; 0x50
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002a46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002a54:	460b      	mov	r3, r1
 8002a56:	4313      	orrs	r3, r2
 8002a58:	d05c      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002a64:	d03b      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a66:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002a6a:	d834      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a70:	d037      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a76:	d82e      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a7c:	d033      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002a7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a82:	d828      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d01a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d822      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d007      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002aa8:	e01e      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aae:	3308      	adds	r3, #8
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fb2a 	bl	800410c <RCCEx_PLL2_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002abe:	e013      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac4:	3328      	adds	r3, #40	; 0x28
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 fbd1 	bl	8004270 <RCCEx_PLL3_Config>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002adc:	e004      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	4a02      	ldr	r2, [pc, #8]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6513      	str	r3, [r2, #80]	; 0x50
 8002b04:	e006      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002b06:	bf00      	nop
 8002b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4313      	orrs	r3, r2
 8002b32:	d03a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	2b30      	cmp	r3, #48	; 0x30
 8002b3c:	d01f      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002b3e:	2b30      	cmp	r3, #48	; 0x30
 8002b40:	d819      	bhi.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d00c      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d815      	bhi.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d019      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d111      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b52:	4bae      	ldr	r3, [pc, #696]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	4aad      	ldr	r2, [pc, #692]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002b5e:	e011      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b64:	3308      	adds	r3, #8
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 facf 	bl	800410c <RCCEx_PLL2_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002b74:	e006      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b7c:	e002      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b8c:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	4a9c      	ldr	r2, [pc, #624]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba0:	e003      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002bc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	d051      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd4:	d035      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bda:	d82e      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be0:	d031      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be6:	d828      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d01a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	d822      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfc:	d007      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002bfe:	e01c      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c00:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	4a81      	ldr	r2, [pc, #516]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c12:	3308      	adds	r3, #8
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fa78 	bl	800410c <RCCEx_PLL2_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c22:	e011      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c28:	3328      	adds	r3, #40	; 0x28
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fb1f 	bl	8004270 <RCCEx_PLL3_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c38:	e006      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c40:	e002      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c50:	4b6e      	ldr	r3, [pc, #440]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5e:	4a6b      	ldr	r2, [pc, #428]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6513      	str	r3, [r2, #80]	; 0x50
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	d053      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c98:	d033      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9e:	d82c      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ca4:	d02f      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002caa:	d826      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002cac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cb0:	d02b      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cb6:	d820      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cbc:	d012      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc2:	d81a      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d022      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d115      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fa18 	bl	800410c <RCCEx_PLL2_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ce2:	e015      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce8:	3328      	adds	r3, #40	; 0x28
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fabf 	bl	8004270 <RCCEx_PLL3_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d00:	e006      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002d02:	bf00      	nop
 8002d04:	e004      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d18:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d26:	4a39      	ldr	r2, [pc, #228]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6513      	str	r3, [r2, #80]	; 0x50
 8002d2c:	e003      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002d42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4313      	orrs	r3, r2
 8002d54:	d060      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d5e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002d62:	d039      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002d64:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002d68:	d832      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6e:	d035      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d74:	d82c      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d031      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d826      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d86:	d02d      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d8c:	d820      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d92:	d012      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d98:	d81a      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d024      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da2:	d115      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da8:	3308      	adds	r3, #8
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 f9ad 	bl	800410c <RCCEx_PLL2_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002db8:	e017      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dbe:	3328      	adds	r3, #40	; 0x28
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 fa54 	bl	8004270 <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dd6:	e008      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002dd8:	bf00      	nop
 8002dda:	e006      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ddc:	bf00      	nop
 8002dde:	e004      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002de0:	bf00      	nop
 8002de2:	e002      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10e      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e02:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6593      	str	r3, [r2, #88]	; 0x58
 8002e08:	e006      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002e0a:	bf00      	nop
 8002e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e32:	460b      	mov	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	d037      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e42:	d00e      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e48:	d816      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e52:	d111      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e54:	4bc4      	ldr	r3, [pc, #784]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	4ac3      	ldr	r2, [pc, #780]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e60:	e00f      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e66:	3308      	adds	r3, #8
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 f94e 	bl	800410c <RCCEx_PLL2_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e8a:	4bb7      	ldr	r3, [pc, #732]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e98:	4ab3      	ldr	r2, [pc, #716]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	6513      	str	r3, [r2, #80]	; 0x50
 8002e9e:	e003      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ea4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ebe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	d039      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d81c      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002f15 	.word	0x08002f15
 8002edc:	08002ee9 	.word	0x08002ee9
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	08002f15 	.word	0x08002f15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee8:	4b9f      	ldr	r3, [pc, #636]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	4a9e      	ldr	r2, [pc, #632]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ef4:	e00f      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002efa:	3308      	adds	r3, #8
 8002efc:	2102      	movs	r1, #2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 f904 	bl	800410c <RCCEx_PLL2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f0a:	e004      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f12:	e000      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f1e:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	f023 0103 	bic.w	r1, r3, #3
 8002f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	4a8e      	ldr	r2, [pc, #568]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f32:	e003      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f56:	460b      	mov	r3, r1
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f000 8099 	beq.w	8003090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f5e:	4b83      	ldr	r3, [pc, #524]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a82      	ldr	r2, [pc, #520]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f6a:	f7fe f923 	bl	80011b4 <HAL_GetTick>
 8002f6e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f72:	e00b      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f74:	f7fe f91e 	bl	80011b4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	; 0x64
 8002f82:	d903      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f8c:	4b77      	ldr	r3, [pc, #476]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ed      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002f98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d173      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fa0:	4b71      	ldr	r3, [pc, #452]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fac:	4053      	eors	r3, r2
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d015      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb6:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fc2:	4b69      	ldr	r3, [pc, #420]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a68      	ldr	r2, [pc, #416]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	4b66      	ldr	r3, [pc, #408]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a65      	ldr	r2, [pc, #404]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fda:	4a63      	ldr	r2, [pc, #396]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fee:	d118      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f8e0 	bl	80011b4 <HAL_GetTick>
 8002ff4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff8:	e00d      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe f8db 	bl	80011b4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003004:	1ad2      	subs	r2, r2, r3
 8003006:	f241 3388 	movw	r3, #5000	; 0x1388
 800300a:	429a      	cmp	r2, r3
 800300c:	d903      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003014:	e005      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003016:	4b54      	ldr	r3, [pc, #336]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0eb      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003022:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003026:	2b00      	cmp	r3, #0
 8003028:	d129      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800303a:	d10e      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800303c:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800304c:	091a      	lsrs	r2, r3, #4
 800304e:	4b48      	ldr	r3, [pc, #288]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003050:	4013      	ands	r3, r2
 8003052:	4a45      	ldr	r2, [pc, #276]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003054:	430b      	orrs	r3, r1
 8003056:	6113      	str	r3, [r2, #16]
 8003058:	e005      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	4a42      	ldr	r2, [pc, #264]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003060:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003064:	6113      	str	r3, [r2, #16]
 8003066:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003068:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800306a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800306e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003076:	4a3c      	ldr	r2, [pc, #240]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003078:	430b      	orrs	r3, r1
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	e008      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800307e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003082:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800308c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f002 0301 	and.w	r3, r2, #1
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f000 8090 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80030b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ba:	2b28      	cmp	r3, #40	; 0x28
 80030bc:	d870      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080031a9 	.word	0x080031a9
 80030c8:	080031a1 	.word	0x080031a1
 80030cc:	080031a1 	.word	0x080031a1
 80030d0:	080031a1 	.word	0x080031a1
 80030d4:	080031a1 	.word	0x080031a1
 80030d8:	080031a1 	.word	0x080031a1
 80030dc:	080031a1 	.word	0x080031a1
 80030e0:	080031a1 	.word	0x080031a1
 80030e4:	08003175 	.word	0x08003175
 80030e8:	080031a1 	.word	0x080031a1
 80030ec:	080031a1 	.word	0x080031a1
 80030f0:	080031a1 	.word	0x080031a1
 80030f4:	080031a1 	.word	0x080031a1
 80030f8:	080031a1 	.word	0x080031a1
 80030fc:	080031a1 	.word	0x080031a1
 8003100:	080031a1 	.word	0x080031a1
 8003104:	0800318b 	.word	0x0800318b
 8003108:	080031a1 	.word	0x080031a1
 800310c:	080031a1 	.word	0x080031a1
 8003110:	080031a1 	.word	0x080031a1
 8003114:	080031a1 	.word	0x080031a1
 8003118:	080031a1 	.word	0x080031a1
 800311c:	080031a1 	.word	0x080031a1
 8003120:	080031a1 	.word	0x080031a1
 8003124:	080031a9 	.word	0x080031a9
 8003128:	080031a1 	.word	0x080031a1
 800312c:	080031a1 	.word	0x080031a1
 8003130:	080031a1 	.word	0x080031a1
 8003134:	080031a1 	.word	0x080031a1
 8003138:	080031a1 	.word	0x080031a1
 800313c:	080031a1 	.word	0x080031a1
 8003140:	080031a1 	.word	0x080031a1
 8003144:	080031a9 	.word	0x080031a9
 8003148:	080031a1 	.word	0x080031a1
 800314c:	080031a1 	.word	0x080031a1
 8003150:	080031a1 	.word	0x080031a1
 8003154:	080031a1 	.word	0x080031a1
 8003158:	080031a1 	.word	0x080031a1
 800315c:	080031a1 	.word	0x080031a1
 8003160:	080031a1 	.word	0x080031a1
 8003164:	080031a9 	.word	0x080031a9
 8003168:	58024400 	.word	0x58024400
 800316c:	58024800 	.word	0x58024800
 8003170:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003178:	3308      	adds	r3, #8
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f000 ffc5 	bl	800410c <RCCEx_PLL2_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003188:	e00f      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800318a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318e:	3328      	adds	r3, #40	; 0x28
 8003190:	2101      	movs	r1, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f001 f86c 	bl	8004270 <RCCEx_PLL3_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800319e:	e004      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80031a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031b2:	4bc0      	ldr	r3, [pc, #768]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80031ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c2:	4abc      	ldr	r2, [pc, #752]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6553      	str	r3, [r2, #84]	; 0x54
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f002 0302 	and.w	r3, r2, #2
 80031de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80031ec:	460b      	mov	r3, r1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	d043      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80031f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d824      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80031fe:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003251 	.word	0x08003251
 8003208:	0800321d 	.word	0x0800321d
 800320c:	08003233 	.word	0x08003233
 8003210:	08003251 	.word	0x08003251
 8003214:	08003251 	.word	0x08003251
 8003218:	08003251 	.word	0x08003251
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800321c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003220:	3308      	adds	r3, #8
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f000 ff71 	bl	800410c <RCCEx_PLL2_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003230:	e00f      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003236:	3328      	adds	r3, #40	; 0x28
 8003238:	2101      	movs	r1, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f818 	bl	8004270 <RCCEx_PLL3_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800325a:	4b96      	ldr	r3, [pc, #600]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f023 0107 	bic.w	r1, r3, #7
 8003262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326a:	4a92      	ldr	r2, [pc, #584]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800326c:	430b      	orrs	r3, r1
 800326e:	6553      	str	r3, [r2, #84]	; 0x54
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003272:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003276:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f002 0304 	and.w	r3, r2, #4
 8003286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003290:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003294:	460b      	mov	r3, r1
 8003296:	4313      	orrs	r3, r2
 8003298:	d043      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800329a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d824      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032f9 	.word	0x080032f9
 80032b0:	080032c5 	.word	0x080032c5
 80032b4:	080032db 	.word	0x080032db
 80032b8:	080032f9 	.word	0x080032f9
 80032bc:	080032f9 	.word	0x080032f9
 80032c0:	080032f9 	.word	0x080032f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c8:	3308      	adds	r3, #8
 80032ca:	2101      	movs	r1, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 ff1d 	bl	800410c <RCCEx_PLL2_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032d8:	e00f      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032de:	3328      	adds	r3, #40	; 0x28
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 ffc4 	bl	8004270 <RCCEx_PLL3_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032ee:	e004      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80032f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003302:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f023 0107 	bic.w	r1, r3, #7
 800330a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003312:	4a68      	ldr	r2, [pc, #416]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003314:	430b      	orrs	r3, r1
 8003316:	6593      	str	r3, [r2, #88]	; 0x58
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800331e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f002 0320 	and.w	r3, r2, #32
 800332e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800333c:	460b      	mov	r3, r1
 800333e:	4313      	orrs	r3, r2
 8003340:	d055      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800334e:	d033      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003354:	d82c      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335a:	d02f      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d826      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003366:	d02b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800336c:	d820      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800336e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003372:	d012      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003378:	d81a      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d022      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800337e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003382:	d115      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003388:	3308      	adds	r3, #8
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 febd 	bl	800410c <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003398:	e015      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800339a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339e:	3328      	adds	r3, #40	; 0x28
 80033a0:	2102      	movs	r1, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 ff64 	bl	8004270 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033ae:	e00a      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033b6:	e006      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80033b8:	bf00      	nop
 80033ba:	e004      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80033c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ce:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80033d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033de:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6553      	str	r3, [r2, #84]	; 0x54
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80033fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003404:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003408:	460b      	mov	r3, r1
 800340a:	4313      	orrs	r3, r2
 800340c:	d058      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800340e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003416:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800341a:	d033      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800341c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003420:	d82c      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d02f      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342c:	d826      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800342e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003432:	d02b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003438:	d820      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d012      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003444:	d81a      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d022      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d115      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003454:	3308      	adds	r3, #8
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fe57 	bl	800410c <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003464:	e015      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346a:	3328      	adds	r3, #40	; 0x28
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fefe 	bl	8004270 <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800347a:	e00a      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003482:	e006      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003484:	bf00      	nop
 8003486:	e004      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003492:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10e      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80034a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034aa:	4a02      	ldr	r2, [pc, #8]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6593      	str	r3, [r2, #88]	; 0x58
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80034cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d055      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80034e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034ec:	d033      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80034ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034f2:	d82c      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d02f      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80034fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fe:	d826      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003500:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003504:	d02b      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003506:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800350a:	d820      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800350c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003510:	d012      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003516:	d81a      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d022      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800351c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003520:	d115      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003526:	3308      	adds	r3, #8
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fdee 	bl	800410c <RCCEx_PLL2_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003536:	e015      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353c:	3328      	adds	r3, #40	; 0x28
 800353e:	2102      	movs	r1, #2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fe95 	bl	8004270 <RCCEx_PLL3_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800354c:	e00a      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003564:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800356c:	4ba1      	ldr	r3, [pc, #644]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800357c:	4a9d      	ldr	r2, [pc, #628]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800357e:	430b      	orrs	r3, r1
 8003580:	6593      	str	r3, [r2, #88]	; 0x58
 8003582:	e003      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003588:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f002 0308 	and.w	r3, r2, #8
 8003598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80035a6:	460b      	mov	r3, r1
 80035a8:	4313      	orrs	r3, r2
 80035aa:	d01e      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80035ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035be:	3328      	adds	r3, #40	; 0x28
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fe54 	bl	8004270 <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035d4:	4b87      	ldr	r3, [pc, #540]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e4:	4a83      	ldr	r2, [pc, #524]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f002 0310 	and.w	r3, r2, #16
 80035f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003600:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d01e      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d10c      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	3328      	adds	r3, #40	; 0x28
 800361e:	2102      	movs	r1, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fe25 	bl	8004270 <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003632:	4b70      	ldr	r3, [pc, #448]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003642:	4a6c      	ldr	r2, [pc, #432]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003644:	430b      	orrs	r3, r1
 8003646:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800365e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d03e      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003674:	d022      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800367a:	d81b      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d00b      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003686:	e015      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368c:	3308      	adds	r3, #8
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fd3b 	bl	800410c <RCCEx_PLL2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800369c:	e00f      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800369e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a2:	3328      	adds	r3, #40	; 0x28
 80036a4:	2102      	movs	r1, #2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fde2 	bl	8004270 <RCCEx_PLL3_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036b2:	e004      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80036bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c6:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036d6:	4a47      	ldr	r2, [pc, #284]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6593      	str	r3, [r2, #88]	; 0x58
 80036dc:	e003      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80036f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f4:	2300      	movs	r3, #0
 80036f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80036fc:	460b      	mov	r3, r1
 80036fe:	4313      	orrs	r3, r2
 8003700:	d03b      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800370e:	d01f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003714:	d818      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371a:	d003      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800371c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003720:	d007      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4a32      	ldr	r2, [pc, #200]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003730:	e00f      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003736:	3328      	adds	r3, #40	; 0x28
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fd98 	bl	8004270 <RCCEx_PLL3_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003746:	e004      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800374e:	e000      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003752:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800376c:	430b      	orrs	r3, r1
 800376e:	6553      	str	r3, [r2, #84]	; 0x54
 8003770:	e003      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003776:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800377a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003786:	673b      	str	r3, [r7, #112]	; 0x70
 8003788:	2300      	movs	r3, #0
 800378a:	677b      	str	r3, [r7, #116]	; 0x74
 800378c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003790:	460b      	mov	r3, r1
 8003792:	4313      	orrs	r3, r2
 8003794:	d034      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d007      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80037a6:	e011      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037b4:	e00e      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ba:	3308      	adds	r3, #8
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fca4 	bl	800410c <RCCEx_PLL2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	4a02      	ldr	r2, [pc, #8]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80037f2:	bf00      	nop
 80037f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800380c:	66bb      	str	r3, [r7, #104]	; 0x68
 800380e:	2300      	movs	r3, #0
 8003810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003812:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003816:	460b      	mov	r3, r1
 8003818:	4313      	orrs	r3, r2
 800381a:	d00c      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800381c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003820:	3328      	adds	r3, #40	; 0x28
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fd23 	bl	8004270 <RCCEx_PLL3_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003842:	663b      	str	r3, [r7, #96]	; 0x60
 8003844:	2300      	movs	r3, #0
 8003846:	667b      	str	r3, [r7, #100]	; 0x64
 8003848:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d038      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385e:	d018      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003864:	d811      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386a:	d014      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800386c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003870:	d80b      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d011      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387a:	d106      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4bc3      	ldr	r3, [pc, #780]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4ac2      	ldr	r2, [pc, #776]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003888:	e008      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003890:	e004      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800389a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a4:	4bb9      	ldr	r3, [pc, #740]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	4ab5      	ldr	r2, [pc, #724]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038b6:	430b      	orrs	r3, r1
 80038b8:	6553      	str	r3, [r2, #84]	; 0x54
 80038ba:	e003      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80038d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80038d2:	2300      	movs	r3, #0
 80038d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038e0:	4baa      	ldr	r3, [pc, #680]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ee:	4aa7      	ldr	r2, [pc, #668]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003900:	653b      	str	r3, [r7, #80]	; 0x50
 8003902:	2300      	movs	r3, #0
 8003904:	657b      	str	r3, [r7, #84]	; 0x54
 8003906:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003910:	4b9e      	ldr	r3, [pc, #632]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a9b      	ldr	r2, [pc, #620]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003920:	430b      	orrs	r3, r1
 8003922:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003930:	64bb      	str	r3, [r7, #72]	; 0x48
 8003932:	2300      	movs	r3, #0
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003936:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800393a:	460b      	mov	r3, r1
 800393c:	4313      	orrs	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003940:	4b92      	ldr	r3, [pc, #584]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	4a8f      	ldr	r2, [pc, #572]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003950:	430b      	orrs	r3, r1
 8003952:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003960:	643b      	str	r3, [r7, #64]	; 0x40
 8003962:	2300      	movs	r3, #0
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
 8003966:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d00e      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	4a85      	ldr	r2, [pc, #532]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003976:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800397a:	6113      	str	r3, [r2, #16]
 800397c:	4b83      	ldr	r3, [pc, #524]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800397e:	6919      	ldr	r1, [r3, #16]
 8003980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003984:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003988:	4a80      	ldr	r2, [pc, #512]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800398a:	430b      	orrs	r3, r1
 800398c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
 800399c:	2300      	movs	r3, #0
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80039aa:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	4a74      	ldr	r2, [pc, #464]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039ba:	430b      	orrs	r3, r1
 80039bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
 80039cc:	2300      	movs	r3, #0
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
 80039d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039da:	4b6c      	ldr	r3, [pc, #432]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	2100      	movs	r1, #0
 80039fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d011      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a10:	3308      	adds	r3, #8
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fb79 	bl	800410c <RCCEx_PLL2_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003a20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	6239      	str	r1, [r7, #32]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a46:	460b      	mov	r3, r1
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	d011      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a50:	3308      	adds	r3, #8
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fb59 	bl	800410c <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003a60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	2100      	movs	r1, #0
 8003a7a:	61b9      	str	r1, [r7, #24]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	d011      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a90:	3308      	adds	r3, #8
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fb39 	bl	800410c <RCCEx_PLL2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	2100      	movs	r1, #0
 8003aba:	6139      	str	r1, [r7, #16]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	d011      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad0:	3328      	adds	r3, #40	; 0x28
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fbcb 	bl	8004270 <RCCEx_PLL3_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	2100      	movs	r1, #0
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d011      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b10:	3328      	adds	r3, #40	; 0x28
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fbab 	bl	8004270 <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003b20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	2100      	movs	r1, #0
 8003b3a:	6039      	str	r1, [r7, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	d011      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b50:	3328      	adds	r3, #40	; 0x28
 8003b52:	2102      	movs	r1, #2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fb8b 	bl	8004270 <RCCEx_PLL3_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003b60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003b70:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	58024400 	.word	0x58024400

08003b90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003b94:	f7fe fde2 	bl	800275c <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	58024400 	.word	0x58024400
 8003bb8:	08006bf4 	.word	0x08006bf4

08003bbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bc4:	4ba1      	ldr	r3, [pc, #644]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003bce:	4b9f      	ldr	r3, [pc, #636]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	0b1b      	lsrs	r3, r3, #12
 8003bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bda:	4b9c      	ldr	r3, [pc, #624]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003be6:	4b99      	ldr	r3, [pc, #612]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8111 	beq.w	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	f000 8083 	beq.w	8003d18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	f200 80a1 	bhi.w	8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d056      	beq.n	8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c26:	e099      	b.n	8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c28:	4b88      	ldr	r3, [pc, #544]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d02d      	beq.n	8003c90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c34:	4b85      	ldr	r3, [pc, #532]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	4a84      	ldr	r2, [pc, #528]	; (8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5e:	4b7b      	ldr	r3, [pc, #492]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c8e:	e087      	b.n	8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca2:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd2:	e065      	b.n	8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d16:	e043      	b.n	8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b48      	ldr	r3, [pc, #288]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5a:	e021      	b.n	8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003da0:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	0a5b      	lsrs	r3, r3, #9
 8003da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc6:	ee17 2a90 	vmov	r2, s15
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003dce:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003de4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df4:	ee17 2a90 	vmov	r2, s15
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	0e1b      	lsrs	r3, r3, #24
 8003e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e22:	ee17 2a90 	vmov	r2, s15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e2a:	e008      	b.n	8003e3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	3724      	adds	r7, #36	; 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	58024400 	.word	0x58024400
 8003e50:	03d09000 	.word	0x03d09000
 8003e54:	46000000 	.word	0x46000000
 8003e58:	4c742400 	.word	0x4c742400
 8003e5c:	4a742400 	.word	0x4a742400
 8003e60:	4af42400 	.word	0x4af42400

08003e64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e6c:	4ba1      	ldr	r3, [pc, #644]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e76:	4b9f      	ldr	r3, [pc, #636]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	0d1b      	lsrs	r3, r3, #20
 8003e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e82:	4b9c      	ldr	r3, [pc, #624]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e8e:	4b99      	ldr	r3, [pc, #612]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	08db      	lsrs	r3, r3, #3
 8003e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8111 	beq.w	80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	f000 8083 	beq.w	8003fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f200 80a1 	bhi.w	8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d056      	beq.n	8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ece:	e099      	b.n	8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02d      	beq.n	8003f38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003edc:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	4a84      	ldr	r2, [pc, #528]	; (80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	ee07 3a90 	vmov	s15, r3
 8003ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f06:	4b7b      	ldr	r3, [pc, #492]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f36:	e087      	b.n	8004048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004100 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4a:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7a:	e065      	b.n	8004048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8e:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fbe:	e043      	b.n	8004048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fe6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004002:	e021      	b.n	8004048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004026:	ed97 6a03 	vldr	s12, [r7, #12]
 800402a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800402e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004046:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004048:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	0a5b      	lsrs	r3, r3, #9
 800404e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800405e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004062:	edd7 6a07 	vldr	s13, [r7, #28]
 8004066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406e:	ee17 2a90 	vmov	r2, s15
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004080:	ee07 3a90 	vmov	s15, r3
 8004084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800408c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004090:	edd7 6a07 	vldr	s13, [r7, #28]
 8004094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800409c:	ee17 2a90 	vmov	r2, s15
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	0e1b      	lsrs	r3, r3, #24
 80040aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040be:	edd7 6a07 	vldr	s13, [r7, #28]
 80040c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ca:	ee17 2a90 	vmov	r2, s15
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
}
 80040e6:	bf00      	nop
 80040e8:	3724      	adds	r7, #36	; 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	58024400 	.word	0x58024400
 80040f8:	03d09000 	.word	0x03d09000
 80040fc:	46000000 	.word	0x46000000
 8004100:	4c742400 	.word	0x4c742400
 8004104:	4a742400 	.word	0x4a742400
 8004108:	4af42400 	.word	0x4af42400

0800410c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800411a:	4b53      	ldr	r3, [pc, #332]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b03      	cmp	r3, #3
 8004124:	d101      	bne.n	800412a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e099      	b.n	800425e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800412a:	4b4f      	ldr	r3, [pc, #316]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4e      	ldr	r2, [pc, #312]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004136:	f7fd f83d 	bl	80011b4 <HAL_GetTick>
 800413a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800413c:	e008      	b.n	8004150 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800413e:	f7fd f839 	bl	80011b4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e086      	b.n	800425e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004150:	4b45      	ldr	r3, [pc, #276]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800415c:	4b42      	ldr	r3, [pc, #264]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	493f      	ldr	r1, [pc, #252]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 800416c:	4313      	orrs	r3, r2
 800416e:	628b      	str	r3, [r1, #40]	; 0x28
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	3b01      	subs	r3, #1
 8004176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	3b01      	subs	r3, #1
 8004180:	025b      	lsls	r3, r3, #9
 8004182:	b29b      	uxth	r3, r3
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	3b01      	subs	r3, #1
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	3b01      	subs	r3, #1
 800419a:	061b      	lsls	r3, r3, #24
 800419c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041a0:	4931      	ldr	r1, [pc, #196]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	492d      	ldr	r1, [pc, #180]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041b8:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f023 0220 	bic.w	r2, r3, #32
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4928      	ldr	r1, [pc, #160]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041ca:	4b27      	ldr	r3, [pc, #156]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4a26      	ldr	r2, [pc, #152]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041d0:	f023 0310 	bic.w	r3, r3, #16
 80041d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041da:	4b24      	ldr	r3, [pc, #144]	; (800426c <RCCEx_PLL2_Config+0x160>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	69d2      	ldr	r2, [r2, #28]
 80041e2:	00d2      	lsls	r2, r2, #3
 80041e4:	4920      	ldr	r1, [pc, #128]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041ea:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041f0:	f043 0310 	orr.w	r3, r3, #16
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004208:	e00f      	b.n	800422a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004210:	4b15      	ldr	r3, [pc, #84]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800421c:	e005      	b.n	800422a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a11      	ldr	r2, [pc, #68]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800422a:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004236:	f7fc ffbd 	bl	80011b4 <HAL_GetTick>
 800423a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800423c:	e008      	b.n	8004250 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800423e:	f7fc ffb9 	bl	80011b4 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e006      	b.n	800425e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <RCCEx_PLL2_Config+0x15c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	58024400 	.word	0x58024400
 800426c:	ffff0007 	.word	0xffff0007

08004270 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800427e:	4b53      	ldr	r3, [pc, #332]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d101      	bne.n	800428e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e099      	b.n	80043c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800428e:	4b4f      	ldr	r3, [pc, #316]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a4e      	ldr	r2, [pc, #312]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429a:	f7fc ff8b 	bl	80011b4 <HAL_GetTick>
 800429e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042a2:	f7fc ff87 	bl	80011b4 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e086      	b.n	80043c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042b4:	4b45      	ldr	r3, [pc, #276]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042c0:	4b42      	ldr	r3, [pc, #264]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	051b      	lsls	r3, r3, #20
 80042ce:	493f      	ldr	r1, [pc, #252]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	628b      	str	r3, [r1, #40]	; 0x28
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	3b01      	subs	r3, #1
 80042da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	025b      	lsls	r3, r3, #9
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004304:	4931      	ldr	r1, [pc, #196]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004306:	4313      	orrs	r3, r2
 8004308:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800430a:	4b30      	ldr	r3, [pc, #192]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	492d      	ldr	r1, [pc, #180]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800431c:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	4928      	ldr	r1, [pc, #160]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800432e:	4b27      	ldr	r3, [pc, #156]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	4a26      	ldr	r2, [pc, #152]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 800433c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <RCCEx_PLL3_Config+0x160>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	69d2      	ldr	r2, [r2, #28]
 8004346:	00d2      	lsls	r2, r2, #3
 8004348:	4920      	ldr	r1, [pc, #128]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 800434a:	4313      	orrs	r3, r2
 800434c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800434e:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004366:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800436a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800436c:	e00f      	b.n	800438e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d106      	bne.n	8004382 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004374:	4b15      	ldr	r3, [pc, #84]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4a14      	ldr	r2, [pc, #80]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 800437a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800437e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004380:	e005      	b.n	800438e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	4a11      	ldr	r2, [pc, #68]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 8004394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439a:	f7fc ff0b 	bl	80011b4 <HAL_GetTick>
 800439e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043a0:	e008      	b.n	80043b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043a2:	f7fc ff07 	bl	80011b4 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e006      	b.n	80043c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <RCCEx_PLL3_Config+0x15c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	58024400 	.word	0x58024400
 80043d0:	ffff0007 	.word	0xffff0007

080043d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e049      	b.n	800447a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fd26 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fad6 	bl	80049c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d001      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e054      	b.n	8004546 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d01d      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_TIM_Base_Start_IT+0xd4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <HAL_TIM_Base_Start_IT+0xd8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <HAL_TIM_Base_Start_IT+0xdc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <HAL_TIM_Base_Start_IT+0xe0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_TIM_Base_Start_IT+0xe4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1b      	ldr	r2, [pc, #108]	; (800456c <HAL_TIM_Base_Start_IT+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d115      	bne.n	8004530 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_TIM_Base_Start_IT+0xec>)
 800450c:	4013      	ands	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d015      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0xbe>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451c:	d011      	beq.n	8004542 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452e:	e008      	b.n	8004542 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e000      	b.n	8004544 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40010400 	.word	0x40010400
 8004568:	40001800 	.word	0x40001800
 800456c:	40014000 	.word	0x40014000
 8004570:	00010007 	.word	0x00010007

08004574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d020      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0202 	mvn.w	r2, #2
 80045a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9e2 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9d4 	bl	8004974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f9e5 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d020      	beq.n	8004624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01b      	beq.n	8004624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0204 	mvn.w	r2, #4
 80045f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f9bc 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9ae 	bl	8004974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f9bf 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d020      	beq.n	8004670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01b      	beq.n	8004670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0208 	mvn.w	r2, #8
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2204      	movs	r2, #4
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f996 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f988 	bl	8004974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f999 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	d020      	beq.n	80046bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0210 	mvn.w	r2, #16
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2208      	movs	r2, #8
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f970 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f962 	bl	8004974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f973 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0201 	mvn.w	r2, #1
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fa3e 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00c      	beq.n	800470e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fb37 	bl	8004d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00c      	beq.n	8004732 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800472a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb2f 	bl	8004d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800474e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f92d 	bl	80049b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0220 	mvn.w	r2, #32
 8004772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 faf7 	bl	8004d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_ConfigClockSource+0x1c>
 800479c:	2302      	movs	r3, #2
 800479e:	e0dc      	b.n	800495a <HAL_TIM_ConfigClockSource+0x1d6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_TIM_ConfigClockSource+0x1e0>)
 80047bc:	4013      	ands	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a64      	ldr	r2, [pc, #400]	; (8004968 <HAL_TIM_ConfigClockSource+0x1e4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	f000 80a9 	beq.w	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 80047dc:	4a62      	ldr	r2, [pc, #392]	; (8004968 <HAL_TIM_ConfigClockSource+0x1e4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	f200 80ae 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 80047e4:	4a61      	ldr	r2, [pc, #388]	; (800496c <HAL_TIM_ConfigClockSource+0x1e8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	f000 80a1 	beq.w	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 80047ec:	4a5f      	ldr	r2, [pc, #380]	; (800496c <HAL_TIM_ConfigClockSource+0x1e8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	f200 80a6 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 80047f4:	4a5e      	ldr	r2, [pc, #376]	; (8004970 <HAL_TIM_ConfigClockSource+0x1ec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	f000 8099 	beq.w	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 80047fc:	4a5c      	ldr	r2, [pc, #368]	; (8004970 <HAL_TIM_ConfigClockSource+0x1ec>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	f200 809e 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004804:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004808:	f000 8091 	beq.w	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 800480c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004810:	f200 8096 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004818:	f000 8089 	beq.w	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 800481c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004820:	f200 808e 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	d03e      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x124>
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482e:	f200 8087 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	f000 8086 	beq.w	8004946 <HAL_TIM_ConfigClockSource+0x1c2>
 800483a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483e:	d87f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004840:	2b70      	cmp	r3, #112	; 0x70
 8004842:	d01a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0xf6>
 8004844:	2b70      	cmp	r3, #112	; 0x70
 8004846:	d87b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004848:	2b60      	cmp	r3, #96	; 0x60
 800484a:	d050      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x16a>
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d877      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004850:	2b50      	cmp	r3, #80	; 0x50
 8004852:	d03c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x14a>
 8004854:	2b50      	cmp	r3, #80	; 0x50
 8004856:	d873      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d058      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x18a>
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d86f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004860:	2b30      	cmp	r3, #48	; 0x30
 8004862:	d064      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 8004864:	2b30      	cmp	r3, #48	; 0x30
 8004866:	d86b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d060      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d867      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 8004874:	2b10      	cmp	r3, #16
 8004876:	d05a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x1aa>
 8004878:	e062      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6899      	ldr	r1, [r3, #8]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f000 f9bf 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800489c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	609a      	str	r2, [r3, #8]
      break;
 80048a6:	e04f      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6899      	ldr	r1, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f000 f9a8 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ca:	609a      	str	r2, [r3, #8]
      break;
 80048cc:	e03c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 f918 	bl	8004b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2150      	movs	r1, #80	; 0x50
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f972 	bl	8004bd0 <TIM_ITRx_SetConfig>
      break;
 80048ec:	e02c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f000 f937 	bl	8004b6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2160      	movs	r1, #96	; 0x60
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f962 	bl	8004bd0 <TIM_ITRx_SetConfig>
      break;
 800490c:	e01c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	461a      	mov	r2, r3
 800491c:	f000 f8f8 	bl	8004b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2140      	movs	r1, #64	; 0x40
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f952 	bl	8004bd0 <TIM_ITRx_SetConfig>
      break;
 800492c:	e00c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f000 f949 	bl	8004bd0 <TIM_ITRx_SetConfig>
      break;
 800493e:	e003      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e000      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	ffceff88 	.word	0xffceff88
 8004968:	00100040 	.word	0x00100040
 800496c:	00100030 	.word	0x00100030
 8004970:	00100020 	.word	0x00100020

08004974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a46      	ldr	r2, [pc, #280]	; (8004af0 <TIM_Base_SetConfig+0x12c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d00f      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a43      	ldr	r2, [pc, #268]	; (8004af4 <TIM_Base_SetConfig+0x130>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a42      	ldr	r2, [pc, #264]	; (8004af8 <TIM_Base_SetConfig+0x134>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a41      	ldr	r2, [pc, #260]	; (8004afc <TIM_Base_SetConfig+0x138>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a40      	ldr	r2, [pc, #256]	; (8004b00 <TIM_Base_SetConfig+0x13c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d108      	bne.n	8004a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <TIM_Base_SetConfig+0x12c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01f      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a24:	d01b      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a32      	ldr	r2, [pc, #200]	; (8004af4 <TIM_Base_SetConfig+0x130>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d017      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a31      	ldr	r2, [pc, #196]	; (8004af8 <TIM_Base_SetConfig+0x134>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a30      	ldr	r2, [pc, #192]	; (8004afc <TIM_Base_SetConfig+0x138>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00f      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <TIM_Base_SetConfig+0x13c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2e      	ldr	r2, [pc, #184]	; (8004b04 <TIM_Base_SetConfig+0x140>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2d      	ldr	r2, [pc, #180]	; (8004b08 <TIM_Base_SetConfig+0x144>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_Base_SetConfig+0x9a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <TIM_Base_SetConfig+0x148>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d108      	bne.n	8004a70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_Base_SetConfig+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00f      	beq.n	8004abc <TIM_Base_SetConfig+0xf8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_Base_SetConfig+0x13c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_Base_SetConfig+0xf8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_Base_SetConfig+0x140>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <TIM_Base_SetConfig+0xf8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <TIM_Base_SetConfig+0x144>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_Base_SetConfig+0xf8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <TIM_Base_SetConfig+0x148>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d103      	bne.n	8004ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f023 0201 	bic.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	611a      	str	r2, [r3, #16]
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800

08004b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 030a 	bic.w	r3, r3, #10
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b087      	sub	sp, #28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f023 0210 	bic.w	r2, r3, #16
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <TIM_ITRx_SetConfig+0x38>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f043 0307 	orr.w	r3, r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	609a      	str	r2, [r3, #8]
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	ffcfff8f 	.word	0xffcfff8f

08004c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e06d      	b.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a30      	ldr	r2, [pc, #192]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2f      	ldr	r2, [pc, #188]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d108      	bne.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d01d      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10c      	bne.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40001800 	.word	0x40001800
 8004d64:	40014000 	.word	0x40014000

08004d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e042      	b.n	8004e3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fc f8d1 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2224      	movs	r2, #36	; 0x24
 8004dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 ff22 	bl	8005c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8b3 	bl	8004f60 <UART_SetConfig>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e01b      	b.n	8004e3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 ffa1 	bl	8005d7c <UART_CheckIdleState>
 8004e3a:	4603      	mov	r3, r0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08a      	sub	sp, #40	; 0x28
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	4613      	mov	r3, r2
 8004e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d17b      	bne.n	8004f56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_UART_Transmit+0x26>
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e074      	b.n	8004f58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2221      	movs	r2, #33	; 0x21
 8004e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7e:	f7fc f999 	bl	80011b4 <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9c:	d108      	bne.n	8004eb0 <HAL_UART_Transmit+0x6c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	e003      	b.n	8004eb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004eb8:	e030      	b.n	8004f1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f001 f803 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e03d      	b.n	8004f58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e007      	b.n	8004f0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1c8      	bne.n	8004eba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 ffcc 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e006      	b.n	8004f58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
  }
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f64:	b092      	sub	sp, #72	; 0x48
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4bbe      	ldr	r3, [pc, #760]	; (8005288 <UART_SetConfig+0x328>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4ab3      	ldr	r2, [pc, #716]	; (800528c <UART_SetConfig+0x32c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	4baf      	ldr	r3, [pc, #700]	; (8005290 <UART_SetConfig+0x330>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	f023 010f 	bic.w	r1, r3, #15
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4aa6      	ldr	r2, [pc, #664]	; (8005294 <UART_SetConfig+0x334>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d177      	bne.n	80050f0 <UART_SetConfig+0x190>
 8005000:	4ba5      	ldr	r3, [pc, #660]	; (8005298 <UART_SetConfig+0x338>)
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005008:	2b28      	cmp	r3, #40	; 0x28
 800500a:	d86d      	bhi.n	80050e8 <UART_SetConfig+0x188>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0xb4>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	080050b9 	.word	0x080050b9
 8005018:	080050e9 	.word	0x080050e9
 800501c:	080050e9 	.word	0x080050e9
 8005020:	080050e9 	.word	0x080050e9
 8005024:	080050e9 	.word	0x080050e9
 8005028:	080050e9 	.word	0x080050e9
 800502c:	080050e9 	.word	0x080050e9
 8005030:	080050e9 	.word	0x080050e9
 8005034:	080050c1 	.word	0x080050c1
 8005038:	080050e9 	.word	0x080050e9
 800503c:	080050e9 	.word	0x080050e9
 8005040:	080050e9 	.word	0x080050e9
 8005044:	080050e9 	.word	0x080050e9
 8005048:	080050e9 	.word	0x080050e9
 800504c:	080050e9 	.word	0x080050e9
 8005050:	080050e9 	.word	0x080050e9
 8005054:	080050c9 	.word	0x080050c9
 8005058:	080050e9 	.word	0x080050e9
 800505c:	080050e9 	.word	0x080050e9
 8005060:	080050e9 	.word	0x080050e9
 8005064:	080050e9 	.word	0x080050e9
 8005068:	080050e9 	.word	0x080050e9
 800506c:	080050e9 	.word	0x080050e9
 8005070:	080050e9 	.word	0x080050e9
 8005074:	080050d1 	.word	0x080050d1
 8005078:	080050e9 	.word	0x080050e9
 800507c:	080050e9 	.word	0x080050e9
 8005080:	080050e9 	.word	0x080050e9
 8005084:	080050e9 	.word	0x080050e9
 8005088:	080050e9 	.word	0x080050e9
 800508c:	080050e9 	.word	0x080050e9
 8005090:	080050e9 	.word	0x080050e9
 8005094:	080050d9 	.word	0x080050d9
 8005098:	080050e9 	.word	0x080050e9
 800509c:	080050e9 	.word	0x080050e9
 80050a0:	080050e9 	.word	0x080050e9
 80050a4:	080050e9 	.word	0x080050e9
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050e9 	.word	0x080050e9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e326      	b.n	800570e <UART_SetConfig+0x7ae>
 80050c0:	2304      	movs	r3, #4
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e322      	b.n	800570e <UART_SetConfig+0x7ae>
 80050c8:	2308      	movs	r3, #8
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ce:	e31e      	b.n	800570e <UART_SetConfig+0x7ae>
 80050d0:	2310      	movs	r3, #16
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e31a      	b.n	800570e <UART_SetConfig+0x7ae>
 80050d8:	2320      	movs	r3, #32
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e316      	b.n	800570e <UART_SetConfig+0x7ae>
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e312      	b.n	800570e <UART_SetConfig+0x7ae>
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e30e      	b.n	800570e <UART_SetConfig+0x7ae>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a69      	ldr	r2, [pc, #420]	; (800529c <UART_SetConfig+0x33c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d130      	bne.n	800515c <UART_SetConfig+0x1fc>
 80050fa:	4b67      	ldr	r3, [pc, #412]	; (8005298 <UART_SetConfig+0x338>)
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b05      	cmp	r3, #5
 8005104:	d826      	bhi.n	8005154 <UART_SetConfig+0x1f4>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0x1ac>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005125 	.word	0x08005125
 8005110:	0800512d 	.word	0x0800512d
 8005114:	08005135 	.word	0x08005135
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005145 	.word	0x08005145
 8005120:	0800514d 	.word	0x0800514d
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e2f0      	b.n	800570e <UART_SetConfig+0x7ae>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005132:	e2ec      	b.n	800570e <UART_SetConfig+0x7ae>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513a:	e2e8      	b.n	800570e <UART_SetConfig+0x7ae>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005142:	e2e4      	b.n	800570e <UART_SetConfig+0x7ae>
 8005144:	2320      	movs	r3, #32
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e2e0      	b.n	800570e <UART_SetConfig+0x7ae>
 800514c:	2340      	movs	r3, #64	; 0x40
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e2dc      	b.n	800570e <UART_SetConfig+0x7ae>
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e2d8      	b.n	800570e <UART_SetConfig+0x7ae>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a4f      	ldr	r2, [pc, #316]	; (80052a0 <UART_SetConfig+0x340>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d130      	bne.n	80051c8 <UART_SetConfig+0x268>
 8005166:	4b4c      	ldr	r3, [pc, #304]	; (8005298 <UART_SetConfig+0x338>)
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b05      	cmp	r3, #5
 8005170:	d826      	bhi.n	80051c0 <UART_SetConfig+0x260>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <UART_SetConfig+0x218>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	08005191 	.word	0x08005191
 800517c:	08005199 	.word	0x08005199
 8005180:	080051a1 	.word	0x080051a1
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e2ba      	b.n	800570e <UART_SetConfig+0x7ae>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e2b6      	b.n	800570e <UART_SetConfig+0x7ae>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e2b2      	b.n	800570e <UART_SetConfig+0x7ae>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e2ae      	b.n	800570e <UART_SetConfig+0x7ae>
 80051b0:	2320      	movs	r3, #32
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e2aa      	b.n	800570e <UART_SetConfig+0x7ae>
 80051b8:	2340      	movs	r3, #64	; 0x40
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e2a6      	b.n	800570e <UART_SetConfig+0x7ae>
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e2a2      	b.n	800570e <UART_SetConfig+0x7ae>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a35      	ldr	r2, [pc, #212]	; (80052a4 <UART_SetConfig+0x344>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d130      	bne.n	8005234 <UART_SetConfig+0x2d4>
 80051d2:	4b31      	ldr	r3, [pc, #196]	; (8005298 <UART_SetConfig+0x338>)
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d826      	bhi.n	800522c <UART_SetConfig+0x2cc>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x284>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	08005205 	.word	0x08005205
 80051ec:	0800520d 	.word	0x0800520d
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e284      	b.n	800570e <UART_SetConfig+0x7ae>
 8005204:	2304      	movs	r3, #4
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e280      	b.n	800570e <UART_SetConfig+0x7ae>
 800520c:	2308      	movs	r3, #8
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e27c      	b.n	800570e <UART_SetConfig+0x7ae>
 8005214:	2310      	movs	r3, #16
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e278      	b.n	800570e <UART_SetConfig+0x7ae>
 800521c:	2320      	movs	r3, #32
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e274      	b.n	800570e <UART_SetConfig+0x7ae>
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e270      	b.n	800570e <UART_SetConfig+0x7ae>
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e26c      	b.n	800570e <UART_SetConfig+0x7ae>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <UART_SetConfig+0x348>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d142      	bne.n	80052c4 <UART_SetConfig+0x364>
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <UART_SetConfig+0x338>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b05      	cmp	r3, #5
 8005248:	d838      	bhi.n	80052bc <UART_SetConfig+0x35c>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <UART_SetConfig+0x2f0>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005269 	.word	0x08005269
 8005254:	08005271 	.word	0x08005271
 8005258:	08005279 	.word	0x08005279
 800525c:	08005281 	.word	0x08005281
 8005260:	080052ad 	.word	0x080052ad
 8005264:	080052b5 	.word	0x080052b5
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e24e      	b.n	800570e <UART_SetConfig+0x7ae>
 8005270:	2304      	movs	r3, #4
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e24a      	b.n	800570e <UART_SetConfig+0x7ae>
 8005278:	2308      	movs	r3, #8
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e246      	b.n	800570e <UART_SetConfig+0x7ae>
 8005280:	2310      	movs	r3, #16
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e242      	b.n	800570e <UART_SetConfig+0x7ae>
 8005288:	cfff69f3 	.word	0xcfff69f3
 800528c:	58000c00 	.word	0x58000c00
 8005290:	11fff4ff 	.word	0x11fff4ff
 8005294:	40011000 	.word	0x40011000
 8005298:	58024400 	.word	0x58024400
 800529c:	40004400 	.word	0x40004400
 80052a0:	40004800 	.word	0x40004800
 80052a4:	40004c00 	.word	0x40004c00
 80052a8:	40005000 	.word	0x40005000
 80052ac:	2320      	movs	r3, #32
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e22c      	b.n	800570e <UART_SetConfig+0x7ae>
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e228      	b.n	800570e <UART_SetConfig+0x7ae>
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e224      	b.n	800570e <UART_SetConfig+0x7ae>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4ab1      	ldr	r2, [pc, #708]	; (8005590 <UART_SetConfig+0x630>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d176      	bne.n	80053bc <UART_SetConfig+0x45c>
 80052ce:	4bb1      	ldr	r3, [pc, #708]	; (8005594 <UART_SetConfig+0x634>)
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d6:	2b28      	cmp	r3, #40	; 0x28
 80052d8:	d86c      	bhi.n	80053b4 <UART_SetConfig+0x454>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0x380>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005385 	.word	0x08005385
 80052e4:	080053b5 	.word	0x080053b5
 80052e8:	080053b5 	.word	0x080053b5
 80052ec:	080053b5 	.word	0x080053b5
 80052f0:	080053b5 	.word	0x080053b5
 80052f4:	080053b5 	.word	0x080053b5
 80052f8:	080053b5 	.word	0x080053b5
 80052fc:	080053b5 	.word	0x080053b5
 8005300:	0800538d 	.word	0x0800538d
 8005304:	080053b5 	.word	0x080053b5
 8005308:	080053b5 	.word	0x080053b5
 800530c:	080053b5 	.word	0x080053b5
 8005310:	080053b5 	.word	0x080053b5
 8005314:	080053b5 	.word	0x080053b5
 8005318:	080053b5 	.word	0x080053b5
 800531c:	080053b5 	.word	0x080053b5
 8005320:	08005395 	.word	0x08005395
 8005324:	080053b5 	.word	0x080053b5
 8005328:	080053b5 	.word	0x080053b5
 800532c:	080053b5 	.word	0x080053b5
 8005330:	080053b5 	.word	0x080053b5
 8005334:	080053b5 	.word	0x080053b5
 8005338:	080053b5 	.word	0x080053b5
 800533c:	080053b5 	.word	0x080053b5
 8005340:	0800539d 	.word	0x0800539d
 8005344:	080053b5 	.word	0x080053b5
 8005348:	080053b5 	.word	0x080053b5
 800534c:	080053b5 	.word	0x080053b5
 8005350:	080053b5 	.word	0x080053b5
 8005354:	080053b5 	.word	0x080053b5
 8005358:	080053b5 	.word	0x080053b5
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053b5 	.word	0x080053b5
 8005368:	080053b5 	.word	0x080053b5
 800536c:	080053b5 	.word	0x080053b5
 8005370:	080053b5 	.word	0x080053b5
 8005374:	080053b5 	.word	0x080053b5
 8005378:	080053b5 	.word	0x080053b5
 800537c:	080053b5 	.word	0x080053b5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e1c0      	b.n	800570e <UART_SetConfig+0x7ae>
 800538c:	2304      	movs	r3, #4
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e1bc      	b.n	800570e <UART_SetConfig+0x7ae>
 8005394:	2308      	movs	r3, #8
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e1b8      	b.n	800570e <UART_SetConfig+0x7ae>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e1b4      	b.n	800570e <UART_SetConfig+0x7ae>
 80053a4:	2320      	movs	r3, #32
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e1b0      	b.n	800570e <UART_SetConfig+0x7ae>
 80053ac:	2340      	movs	r3, #64	; 0x40
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e1ac      	b.n	800570e <UART_SetConfig+0x7ae>
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e1a8      	b.n	800570e <UART_SetConfig+0x7ae>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a75      	ldr	r2, [pc, #468]	; (8005598 <UART_SetConfig+0x638>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d130      	bne.n	8005428 <UART_SetConfig+0x4c8>
 80053c6:	4b73      	ldr	r3, [pc, #460]	; (8005594 <UART_SetConfig+0x634>)
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d826      	bhi.n	8005420 <UART_SetConfig+0x4c0>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x478>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053f1 	.word	0x080053f1
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e18a      	b.n	800570e <UART_SetConfig+0x7ae>
 80053f8:	2304      	movs	r3, #4
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e186      	b.n	800570e <UART_SetConfig+0x7ae>
 8005400:	2308      	movs	r3, #8
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005406:	e182      	b.n	800570e <UART_SetConfig+0x7ae>
 8005408:	2310      	movs	r3, #16
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540e:	e17e      	b.n	800570e <UART_SetConfig+0x7ae>
 8005410:	2320      	movs	r3, #32
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e17a      	b.n	800570e <UART_SetConfig+0x7ae>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e176      	b.n	800570e <UART_SetConfig+0x7ae>
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e172      	b.n	800570e <UART_SetConfig+0x7ae>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a5b      	ldr	r2, [pc, #364]	; (800559c <UART_SetConfig+0x63c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d130      	bne.n	8005494 <UART_SetConfig+0x534>
 8005432:	4b58      	ldr	r3, [pc, #352]	; (8005594 <UART_SetConfig+0x634>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b05      	cmp	r3, #5
 800543c:	d826      	bhi.n	800548c <UART_SetConfig+0x52c>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0x4e4>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	0800545d 	.word	0x0800545d
 8005448:	08005465 	.word	0x08005465
 800544c:	0800546d 	.word	0x0800546d
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e154      	b.n	800570e <UART_SetConfig+0x7ae>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e150      	b.n	800570e <UART_SetConfig+0x7ae>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e14c      	b.n	800570e <UART_SetConfig+0x7ae>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547a:	e148      	b.n	800570e <UART_SetConfig+0x7ae>
 800547c:	2320      	movs	r3, #32
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005482:	e144      	b.n	800570e <UART_SetConfig+0x7ae>
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e140      	b.n	800570e <UART_SetConfig+0x7ae>
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e13c      	b.n	800570e <UART_SetConfig+0x7ae>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a41      	ldr	r2, [pc, #260]	; (80055a0 <UART_SetConfig+0x640>)
 800549a:	4293      	cmp	r3, r2
 800549c:	f040 8082 	bne.w	80055a4 <UART_SetConfig+0x644>
 80054a0:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <UART_SetConfig+0x634>)
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a8:	2b28      	cmp	r3, #40	; 0x28
 80054aa:	d86d      	bhi.n	8005588 <UART_SetConfig+0x628>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <UART_SetConfig+0x554>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	08005559 	.word	0x08005559
 80054b8:	08005589 	.word	0x08005589
 80054bc:	08005589 	.word	0x08005589
 80054c0:	08005589 	.word	0x08005589
 80054c4:	08005589 	.word	0x08005589
 80054c8:	08005589 	.word	0x08005589
 80054cc:	08005589 	.word	0x08005589
 80054d0:	08005589 	.word	0x08005589
 80054d4:	08005561 	.word	0x08005561
 80054d8:	08005589 	.word	0x08005589
 80054dc:	08005589 	.word	0x08005589
 80054e0:	08005589 	.word	0x08005589
 80054e4:	08005589 	.word	0x08005589
 80054e8:	08005589 	.word	0x08005589
 80054ec:	08005589 	.word	0x08005589
 80054f0:	08005589 	.word	0x08005589
 80054f4:	08005569 	.word	0x08005569
 80054f8:	08005589 	.word	0x08005589
 80054fc:	08005589 	.word	0x08005589
 8005500:	08005589 	.word	0x08005589
 8005504:	08005589 	.word	0x08005589
 8005508:	08005589 	.word	0x08005589
 800550c:	08005589 	.word	0x08005589
 8005510:	08005589 	.word	0x08005589
 8005514:	08005571 	.word	0x08005571
 8005518:	08005589 	.word	0x08005589
 800551c:	08005589 	.word	0x08005589
 8005520:	08005589 	.word	0x08005589
 8005524:	08005589 	.word	0x08005589
 8005528:	08005589 	.word	0x08005589
 800552c:	08005589 	.word	0x08005589
 8005530:	08005589 	.word	0x08005589
 8005534:	08005579 	.word	0x08005579
 8005538:	08005589 	.word	0x08005589
 800553c:	08005589 	.word	0x08005589
 8005540:	08005589 	.word	0x08005589
 8005544:	08005589 	.word	0x08005589
 8005548:	08005589 	.word	0x08005589
 800554c:	08005589 	.word	0x08005589
 8005550:	08005589 	.word	0x08005589
 8005554:	08005581 	.word	0x08005581
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e0d6      	b.n	800570e <UART_SetConfig+0x7ae>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e0d2      	b.n	800570e <UART_SetConfig+0x7ae>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e0ce      	b.n	800570e <UART_SetConfig+0x7ae>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e0ca      	b.n	800570e <UART_SetConfig+0x7ae>
 8005578:	2320      	movs	r3, #32
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e0c6      	b.n	800570e <UART_SetConfig+0x7ae>
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e0c2      	b.n	800570e <UART_SetConfig+0x7ae>
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e0be      	b.n	800570e <UART_SetConfig+0x7ae>
 8005590:	40011400 	.word	0x40011400
 8005594:	58024400 	.word	0x58024400
 8005598:	40007800 	.word	0x40007800
 800559c:	40007c00 	.word	0x40007c00
 80055a0:	40011800 	.word	0x40011800
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4aad      	ldr	r2, [pc, #692]	; (8005860 <UART_SetConfig+0x900>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d176      	bne.n	800569c <UART_SetConfig+0x73c>
 80055ae:	4bad      	ldr	r3, [pc, #692]	; (8005864 <UART_SetConfig+0x904>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b6:	2b28      	cmp	r3, #40	; 0x28
 80055b8:	d86c      	bhi.n	8005694 <UART_SetConfig+0x734>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x660>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	08005665 	.word	0x08005665
 80055c4:	08005695 	.word	0x08005695
 80055c8:	08005695 	.word	0x08005695
 80055cc:	08005695 	.word	0x08005695
 80055d0:	08005695 	.word	0x08005695
 80055d4:	08005695 	.word	0x08005695
 80055d8:	08005695 	.word	0x08005695
 80055dc:	08005695 	.word	0x08005695
 80055e0:	0800566d 	.word	0x0800566d
 80055e4:	08005695 	.word	0x08005695
 80055e8:	08005695 	.word	0x08005695
 80055ec:	08005695 	.word	0x08005695
 80055f0:	08005695 	.word	0x08005695
 80055f4:	08005695 	.word	0x08005695
 80055f8:	08005695 	.word	0x08005695
 80055fc:	08005695 	.word	0x08005695
 8005600:	08005675 	.word	0x08005675
 8005604:	08005695 	.word	0x08005695
 8005608:	08005695 	.word	0x08005695
 800560c:	08005695 	.word	0x08005695
 8005610:	08005695 	.word	0x08005695
 8005614:	08005695 	.word	0x08005695
 8005618:	08005695 	.word	0x08005695
 800561c:	08005695 	.word	0x08005695
 8005620:	0800567d 	.word	0x0800567d
 8005624:	08005695 	.word	0x08005695
 8005628:	08005695 	.word	0x08005695
 800562c:	08005695 	.word	0x08005695
 8005630:	08005695 	.word	0x08005695
 8005634:	08005695 	.word	0x08005695
 8005638:	08005695 	.word	0x08005695
 800563c:	08005695 	.word	0x08005695
 8005640:	08005685 	.word	0x08005685
 8005644:	08005695 	.word	0x08005695
 8005648:	08005695 	.word	0x08005695
 800564c:	08005695 	.word	0x08005695
 8005650:	08005695 	.word	0x08005695
 8005654:	08005695 	.word	0x08005695
 8005658:	08005695 	.word	0x08005695
 800565c:	08005695 	.word	0x08005695
 8005660:	0800568d 	.word	0x0800568d
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e050      	b.n	800570e <UART_SetConfig+0x7ae>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e04c      	b.n	800570e <UART_SetConfig+0x7ae>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e048      	b.n	800570e <UART_SetConfig+0x7ae>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005682:	e044      	b.n	800570e <UART_SetConfig+0x7ae>
 8005684:	2320      	movs	r3, #32
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568a:	e040      	b.n	800570e <UART_SetConfig+0x7ae>
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005692:	e03c      	b.n	800570e <UART_SetConfig+0x7ae>
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569a:	e038      	b.n	800570e <UART_SetConfig+0x7ae>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a71      	ldr	r2, [pc, #452]	; (8005868 <UART_SetConfig+0x908>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d130      	bne.n	8005708 <UART_SetConfig+0x7a8>
 80056a6:	4b6f      	ldr	r3, [pc, #444]	; (8005864 <UART_SetConfig+0x904>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d826      	bhi.n	8005700 <UART_SetConfig+0x7a0>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x758>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	080056e1 	.word	0x080056e1
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e01a      	b.n	800570e <UART_SetConfig+0x7ae>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e016      	b.n	800570e <UART_SetConfig+0x7ae>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e012      	b.n	800570e <UART_SetConfig+0x7ae>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e00e      	b.n	800570e <UART_SetConfig+0x7ae>
 80056f0:	2320      	movs	r3, #32
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f6:	e00a      	b.n	800570e <UART_SetConfig+0x7ae>
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fe:	e006      	b.n	800570e <UART_SetConfig+0x7ae>
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005706:	e002      	b.n	800570e <UART_SetConfig+0x7ae>
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a55      	ldr	r2, [pc, #340]	; (8005868 <UART_SetConfig+0x908>)
 8005714:	4293      	cmp	r3, r2
 8005716:	f040 80f8 	bne.w	800590a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800571a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800571e:	2b20      	cmp	r3, #32
 8005720:	dc46      	bgt.n	80057b0 <UART_SetConfig+0x850>
 8005722:	2b02      	cmp	r3, #2
 8005724:	db75      	blt.n	8005812 <UART_SetConfig+0x8b2>
 8005726:	3b02      	subs	r3, #2
 8005728:	2b1e      	cmp	r3, #30
 800572a:	d872      	bhi.n	8005812 <UART_SetConfig+0x8b2>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0x7d4>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	080057b7 	.word	0x080057b7
 8005738:	08005813 	.word	0x08005813
 800573c:	080057bf 	.word	0x080057bf
 8005740:	08005813 	.word	0x08005813
 8005744:	08005813 	.word	0x08005813
 8005748:	08005813 	.word	0x08005813
 800574c:	080057cf 	.word	0x080057cf
 8005750:	08005813 	.word	0x08005813
 8005754:	08005813 	.word	0x08005813
 8005758:	08005813 	.word	0x08005813
 800575c:	08005813 	.word	0x08005813
 8005760:	08005813 	.word	0x08005813
 8005764:	08005813 	.word	0x08005813
 8005768:	08005813 	.word	0x08005813
 800576c:	080057df 	.word	0x080057df
 8005770:	08005813 	.word	0x08005813
 8005774:	08005813 	.word	0x08005813
 8005778:	08005813 	.word	0x08005813
 800577c:	08005813 	.word	0x08005813
 8005780:	08005813 	.word	0x08005813
 8005784:	08005813 	.word	0x08005813
 8005788:	08005813 	.word	0x08005813
 800578c:	08005813 	.word	0x08005813
 8005790:	08005813 	.word	0x08005813
 8005794:	08005813 	.word	0x08005813
 8005798:	08005813 	.word	0x08005813
 800579c:	08005813 	.word	0x08005813
 80057a0:	08005813 	.word	0x08005813
 80057a4:	08005813 	.word	0x08005813
 80057a8:	08005813 	.word	0x08005813
 80057ac:	08005805 	.word	0x08005805
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d02a      	beq.n	800580a <UART_SetConfig+0x8aa>
 80057b4:	e02d      	b.n	8005812 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057b6:	f7fe f9eb 	bl	8003b90 <HAL_RCCEx_GetD3PCLK1Freq>
 80057ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057bc:	e02f      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe f9fa 	bl	8003bbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057cc:	e027      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ce:	f107 0318 	add.w	r3, r7, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fb46 	bl	8003e64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057dc:	e01f      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <UART_SetConfig+0x904>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ea:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <UART_SetConfig+0x904>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	08db      	lsrs	r3, r3, #3
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <UART_SetConfig+0x90c>)
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057fc:	e00f      	b.n	800581e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057fe:	4b1b      	ldr	r3, [pc, #108]	; (800586c <UART_SetConfig+0x90c>)
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005802:	e00c      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005804:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <UART_SetConfig+0x910>)
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800581c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 81ee 	beq.w	8005c02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <UART_SetConfig+0x914>)
 800582c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005830:	461a      	mov	r2, r3
 8005832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005834:	fbb3 f3f2 	udiv	r3, r3, r2
 8005838:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4413      	add	r3, r2
 8005844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005846:	429a      	cmp	r2, r3
 8005848:	d305      	bcc.n	8005856 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	429a      	cmp	r2, r3
 8005854:	d910      	bls.n	8005878 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800585c:	e1d1      	b.n	8005c02 <UART_SetConfig+0xca2>
 800585e:	bf00      	nop
 8005860:	40011c00 	.word	0x40011c00
 8005864:	58024400 	.word	0x58024400
 8005868:	58000c00 	.word	0x58000c00
 800586c:	03d09000 	.word	0x03d09000
 8005870:	003d0900 	.word	0x003d0900
 8005874:	08006c04 	.word	0x08006c04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	2200      	movs	r2, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	60fa      	str	r2, [r7, #12]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	4ac0      	ldr	r2, [pc, #768]	; (8005b88 <UART_SetConfig+0xc28>)
 8005886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800588a:	b29b      	uxth	r3, r3
 800588c:	2200      	movs	r2, #0
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800589a:	f7fa fd81 	bl	80003a0 <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	020b      	lsls	r3, r1, #8
 80058b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058b4:	0202      	lsls	r2, r0, #8
 80058b6:	6979      	ldr	r1, [r7, #20]
 80058b8:	6849      	ldr	r1, [r1, #4]
 80058ba:	0849      	lsrs	r1, r1, #1
 80058bc:	2000      	movs	r0, #0
 80058be:	460c      	mov	r4, r1
 80058c0:	4605      	mov	r5, r0
 80058c2:	eb12 0804 	adds.w	r8, r2, r4
 80058c6:	eb43 0905 	adc.w	r9, r3, r5
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	469a      	mov	sl, r3
 80058d2:	4693      	mov	fp, r2
 80058d4:	4652      	mov	r2, sl
 80058d6:	465b      	mov	r3, fp
 80058d8:	4640      	mov	r0, r8
 80058da:	4649      	mov	r1, r9
 80058dc:	f7fa fd60 	bl	80003a0 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ee:	d308      	bcc.n	8005902 <UART_SetConfig+0x9a2>
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f6:	d204      	bcs.n	8005902 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058fe:	60da      	str	r2, [r3, #12]
 8005900:	e17f      	b.n	8005c02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005908:	e17b      	b.n	8005c02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005912:	f040 80bd 	bne.w	8005a90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005916:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800591a:	2b20      	cmp	r3, #32
 800591c:	dc48      	bgt.n	80059b0 <UART_SetConfig+0xa50>
 800591e:	2b00      	cmp	r3, #0
 8005920:	db7b      	blt.n	8005a1a <UART_SetConfig+0xaba>
 8005922:	2b20      	cmp	r3, #32
 8005924:	d879      	bhi.n	8005a1a <UART_SetConfig+0xaba>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <UART_SetConfig+0x9cc>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	080059b7 	.word	0x080059b7
 8005930:	080059bf 	.word	0x080059bf
 8005934:	08005a1b 	.word	0x08005a1b
 8005938:	08005a1b 	.word	0x08005a1b
 800593c:	080059c7 	.word	0x080059c7
 8005940:	08005a1b 	.word	0x08005a1b
 8005944:	08005a1b 	.word	0x08005a1b
 8005948:	08005a1b 	.word	0x08005a1b
 800594c:	080059d7 	.word	0x080059d7
 8005950:	08005a1b 	.word	0x08005a1b
 8005954:	08005a1b 	.word	0x08005a1b
 8005958:	08005a1b 	.word	0x08005a1b
 800595c:	08005a1b 	.word	0x08005a1b
 8005960:	08005a1b 	.word	0x08005a1b
 8005964:	08005a1b 	.word	0x08005a1b
 8005968:	08005a1b 	.word	0x08005a1b
 800596c:	080059e7 	.word	0x080059e7
 8005970:	08005a1b 	.word	0x08005a1b
 8005974:	08005a1b 	.word	0x08005a1b
 8005978:	08005a1b 	.word	0x08005a1b
 800597c:	08005a1b 	.word	0x08005a1b
 8005980:	08005a1b 	.word	0x08005a1b
 8005984:	08005a1b 	.word	0x08005a1b
 8005988:	08005a1b 	.word	0x08005a1b
 800598c:	08005a1b 	.word	0x08005a1b
 8005990:	08005a1b 	.word	0x08005a1b
 8005994:	08005a1b 	.word	0x08005a1b
 8005998:	08005a1b 	.word	0x08005a1b
 800599c:	08005a1b 	.word	0x08005a1b
 80059a0:	08005a1b 	.word	0x08005a1b
 80059a4:	08005a1b 	.word	0x08005a1b
 80059a8:	08005a1b 	.word	0x08005a1b
 80059ac:	08005a0d 	.word	0x08005a0d
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d02e      	beq.n	8005a12 <UART_SetConfig+0xab2>
 80059b4:	e031      	b.n	8005a1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b6:	f7fc ff01 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80059ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059bc:	e033      	b.n	8005a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059be:	f7fc ff13 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 80059c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059c4:	e02f      	b.n	8005a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe f8f6 	bl	8003bbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059d4:	e027      	b.n	8005a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d6:	f107 0318 	add.w	r3, r7, #24
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fa42 	bl	8003e64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059e4:	e01f      	b.n	8005a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e6:	4b69      	ldr	r3, [pc, #420]	; (8005b8c <UART_SetConfig+0xc2c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059f2:	4b66      	ldr	r3, [pc, #408]	; (8005b8c <UART_SetConfig+0xc2c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	4a64      	ldr	r2, [pc, #400]	; (8005b90 <UART_SetConfig+0xc30>)
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a04:	e00f      	b.n	8005a26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005a06:	4b62      	ldr	r3, [pc, #392]	; (8005b90 <UART_SetConfig+0xc30>)
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a0a:	e00c      	b.n	8005a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a0c:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <UART_SetConfig+0xc34>)
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a10:	e009      	b.n	8005a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a18:	e005      	b.n	8005a26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80ea 	beq.w	8005c02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	4a55      	ldr	r2, [pc, #340]	; (8005b88 <UART_SetConfig+0xc28>)
 8005a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a40:	005a      	lsls	r2, r3, #1
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	441a      	add	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	d916      	bls.n	8005a88 <UART_SetConfig+0xb28>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d212      	bcs.n	8005a88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f023 030f 	bic.w	r3, r3, #15
 8005a6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	e0bc      	b.n	8005c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a8e:	e0b8      	b.n	8005c02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	dc4b      	bgt.n	8005b30 <UART_SetConfig+0xbd0>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f2c0 8087 	blt.w	8005bac <UART_SetConfig+0xc4c>
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	f200 8084 	bhi.w	8005bac <UART_SetConfig+0xc4c>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <UART_SetConfig+0xb4c>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005b37 	.word	0x08005b37
 8005ab0:	08005b3f 	.word	0x08005b3f
 8005ab4:	08005bad 	.word	0x08005bad
 8005ab8:	08005bad 	.word	0x08005bad
 8005abc:	08005b47 	.word	0x08005b47
 8005ac0:	08005bad 	.word	0x08005bad
 8005ac4:	08005bad 	.word	0x08005bad
 8005ac8:	08005bad 	.word	0x08005bad
 8005acc:	08005b57 	.word	0x08005b57
 8005ad0:	08005bad 	.word	0x08005bad
 8005ad4:	08005bad 	.word	0x08005bad
 8005ad8:	08005bad 	.word	0x08005bad
 8005adc:	08005bad 	.word	0x08005bad
 8005ae0:	08005bad 	.word	0x08005bad
 8005ae4:	08005bad 	.word	0x08005bad
 8005ae8:	08005bad 	.word	0x08005bad
 8005aec:	08005b67 	.word	0x08005b67
 8005af0:	08005bad 	.word	0x08005bad
 8005af4:	08005bad 	.word	0x08005bad
 8005af8:	08005bad 	.word	0x08005bad
 8005afc:	08005bad 	.word	0x08005bad
 8005b00:	08005bad 	.word	0x08005bad
 8005b04:	08005bad 	.word	0x08005bad
 8005b08:	08005bad 	.word	0x08005bad
 8005b0c:	08005bad 	.word	0x08005bad
 8005b10:	08005bad 	.word	0x08005bad
 8005b14:	08005bad 	.word	0x08005bad
 8005b18:	08005bad 	.word	0x08005bad
 8005b1c:	08005bad 	.word	0x08005bad
 8005b20:	08005bad 	.word	0x08005bad
 8005b24:	08005bad 	.word	0x08005bad
 8005b28:	08005bad 	.word	0x08005bad
 8005b2c:	08005b9f 	.word	0x08005b9f
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d037      	beq.n	8005ba4 <UART_SetConfig+0xc44>
 8005b34:	e03a      	b.n	8005bac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b36:	f7fc fe41 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8005b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b3c:	e03c      	b.n	8005bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b3e:	f7fc fe53 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8005b42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b44:	e038      	b.n	8005bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe f836 	bl	8003bbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b54:	e030      	b.n	8005bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b56:	f107 0318 	add.w	r3, r7, #24
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe f982 	bl	8003e64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b64:	e028      	b.n	8005bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <UART_SetConfig+0xc2c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <UART_SetConfig+0xc2c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	08db      	lsrs	r3, r3, #3
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	4a04      	ldr	r2, [pc, #16]	; (8005b90 <UART_SetConfig+0xc30>)
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b84:	e018      	b.n	8005bb8 <UART_SetConfig+0xc58>
 8005b86:	bf00      	nop
 8005b88:	08006c04 	.word	0x08006c04
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	03d09000 	.word	0x03d09000
 8005b94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <UART_SetConfig+0xccc>)
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9c:	e00c      	b.n	8005bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <UART_SetConfig+0xcd0>)
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba2:	e009      	b.n	8005bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005baa:	e005      	b.n	8005bb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bb6:	bf00      	nop
    }

    if (pclk != 0U)
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d021      	beq.n	8005c02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <UART_SetConfig+0xcd4>)
 8005bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	441a      	add	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	2b0f      	cmp	r3, #15
 8005be6:	d909      	bls.n	8005bfc <UART_SetConfig+0xc9c>
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bee:	d205      	bcs.n	8005bfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e002      	b.n	8005c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3748      	adds	r7, #72	; 0x48
 8005c26:	46bd      	mov	sp, r7
 8005c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2c:	03d09000 	.word	0x03d09000
 8005c30:	003d0900 	.word	0x003d0900
 8005c34:	08006c04 	.word	0x08006c04

08005c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d36:	d10a      	bne.n	8005d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b098      	sub	sp, #96	; 0x60
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d8c:	f7fb fa12 	bl	80011b4 <HAL_GetTick>
 8005d90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d12f      	bne.n	8005e00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da8:	2200      	movs	r2, #0
 8005daa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f88e 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d022      	beq.n	8005e00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dce:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dda:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e6      	bne.n	8005dba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e063      	b.n	8005ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d149      	bne.n	8005ea2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	2200      	movs	r2, #0
 8005e18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f857 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d03c      	beq.n	8005ea2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	623b      	str	r3, [r7, #32]
   return(result);
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e46:	633b      	str	r3, [r7, #48]	; 0x30
 8005e48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e6      	bne.n	8005e28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e7a:	61fa      	str	r2, [r7, #28]
 8005e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	69b9      	ldr	r1, [r7, #24]
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	617b      	str	r3, [r7, #20]
   return(result);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e5      	bne.n	8005e5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e012      	b.n	8005ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3758      	adds	r7, #88	; 0x58
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee0:	e04f      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d04b      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eea:	f7fb f963 	bl	80011b4 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e04e      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d037      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b80      	cmp	r3, #128	; 0x80
 8005f16:	d034      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d031      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d110      	bne.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2208      	movs	r2, #8
 8005f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f839 	bl	8005fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e029      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5c:	d111      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f81f 	bl	8005fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e00f      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d0a0      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b095      	sub	sp, #84	; 0x54
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <UART_EndRxTransfer+0xc8>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3308      	adds	r3, #8
 8006004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d118      	bne.n	8006054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	647b      	str	r3, [r7, #68]	; 0x44
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	613b      	str	r3, [r7, #16]
   return(result);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e6      	bne.n	8006022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006068:	bf00      	nop
 800606a:	3754      	adds	r7, #84	; 0x54
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	effffffe 	.word	0xeffffffe

08006078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UARTEx_DisableFifoMode+0x16>
 800608a:	2302      	movs	r3, #2
 800608c:	e027      	b.n	80060de <HAL_UARTEx_DisableFifoMode+0x66>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2224      	movs	r2, #36	; 0x24
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060fe:	2302      	movs	r3, #2
 8006100:	e02d      	b.n	800615e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	; 0x24
 800610e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f850 	bl	80061e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800617a:	2302      	movs	r3, #2
 800617c:	e02d      	b.n	80061da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2224      	movs	r2, #36	; 0x24
 800618a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f812 	bl	80061e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d108      	bne.n	8006206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006204:	e031      	b.n	800626a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006206:	2310      	movs	r3, #16
 8006208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800620a:	2310      	movs	r3, #16
 800620c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0e5b      	lsrs	r3, r3, #25
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	0f5b      	lsrs	r3, r3, #29
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	7b3a      	ldrb	r2, [r7, #12]
 8006232:	4911      	ldr	r1, [pc, #68]	; (8006278 <UARTEx_SetNbDataToProcess+0x94>)
 8006234:	5c8a      	ldrb	r2, [r1, r2]
 8006236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800623a:	7b3a      	ldrb	r2, [r7, #12]
 800623c:	490f      	ldr	r1, [pc, #60]	; (800627c <UARTEx_SetNbDataToProcess+0x98>)
 800623e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006240:	fb93 f3f2 	sdiv	r3, r3, r2
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	7b7a      	ldrb	r2, [r7, #13]
 8006250:	4909      	ldr	r1, [pc, #36]	; (8006278 <UARTEx_SetNbDataToProcess+0x94>)
 8006252:	5c8a      	ldrb	r2, [r1, r2]
 8006254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006258:	7b7a      	ldrb	r2, [r7, #13]
 800625a:	4908      	ldr	r1, [pc, #32]	; (800627c <UARTEx_SetNbDataToProcess+0x98>)
 800625c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800625e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	08006c1c 	.word	0x08006c1c
 800627c:	08006c24 	.word	0x08006c24

08006280 <__errno>:
 8006280:	4b01      	ldr	r3, [pc, #4]	; (8006288 <__errno+0x8>)
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	24000010 	.word	0x24000010

0800628c <__libc_init_array>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4d0d      	ldr	r5, [pc, #52]	; (80062c4 <__libc_init_array+0x38>)
 8006290:	4c0d      	ldr	r4, [pc, #52]	; (80062c8 <__libc_init_array+0x3c>)
 8006292:	1b64      	subs	r4, r4, r5
 8006294:	10a4      	asrs	r4, r4, #2
 8006296:	2600      	movs	r6, #0
 8006298:	42a6      	cmp	r6, r4
 800629a:	d109      	bne.n	80062b0 <__libc_init_array+0x24>
 800629c:	4d0b      	ldr	r5, [pc, #44]	; (80062cc <__libc_init_array+0x40>)
 800629e:	4c0c      	ldr	r4, [pc, #48]	; (80062d0 <__libc_init_array+0x44>)
 80062a0:	f000 fc8e 	bl	8006bc0 <_init>
 80062a4:	1b64      	subs	r4, r4, r5
 80062a6:	10a4      	asrs	r4, r4, #2
 80062a8:	2600      	movs	r6, #0
 80062aa:	42a6      	cmp	r6, r4
 80062ac:	d105      	bne.n	80062ba <__libc_init_array+0x2e>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b4:	4798      	blx	r3
 80062b6:	3601      	adds	r6, #1
 80062b8:	e7ee      	b.n	8006298 <__libc_init_array+0xc>
 80062ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80062be:	4798      	blx	r3
 80062c0:	3601      	adds	r6, #1
 80062c2:	e7f2      	b.n	80062aa <__libc_init_array+0x1e>
 80062c4:	08006c68 	.word	0x08006c68
 80062c8:	08006c68 	.word	0x08006c68
 80062cc:	08006c68 	.word	0x08006c68
 80062d0:	08006c6c 	.word	0x08006c6c

080062d4 <memset>:
 80062d4:	4402      	add	r2, r0
 80062d6:	4603      	mov	r3, r0
 80062d8:	4293      	cmp	r3, r2
 80062da:	d100      	bne.n	80062de <memset+0xa>
 80062dc:	4770      	bx	lr
 80062de:	f803 1b01 	strb.w	r1, [r3], #1
 80062e2:	e7f9      	b.n	80062d8 <memset+0x4>

080062e4 <siprintf>:
 80062e4:	b40e      	push	{r1, r2, r3}
 80062e6:	b500      	push	{lr}
 80062e8:	b09c      	sub	sp, #112	; 0x70
 80062ea:	ab1d      	add	r3, sp, #116	; 0x74
 80062ec:	9002      	str	r0, [sp, #8]
 80062ee:	9006      	str	r0, [sp, #24]
 80062f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062f4:	4809      	ldr	r0, [pc, #36]	; (800631c <siprintf+0x38>)
 80062f6:	9107      	str	r1, [sp, #28]
 80062f8:	9104      	str	r1, [sp, #16]
 80062fa:	4909      	ldr	r1, [pc, #36]	; (8006320 <siprintf+0x3c>)
 80062fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006300:	9105      	str	r1, [sp, #20]
 8006302:	6800      	ldr	r0, [r0, #0]
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	a902      	add	r1, sp, #8
 8006308:	f000 f868 	bl	80063dc <_svfiprintf_r>
 800630c:	9b02      	ldr	r3, [sp, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	b01c      	add	sp, #112	; 0x70
 8006314:	f85d eb04 	ldr.w	lr, [sp], #4
 8006318:	b003      	add	sp, #12
 800631a:	4770      	bx	lr
 800631c:	24000010 	.word	0x24000010
 8006320:	ffff0208 	.word	0xffff0208

08006324 <__ssputs_r>:
 8006324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	688e      	ldr	r6, [r1, #8]
 800632a:	429e      	cmp	r6, r3
 800632c:	4682      	mov	sl, r0
 800632e:	460c      	mov	r4, r1
 8006330:	4690      	mov	r8, r2
 8006332:	461f      	mov	r7, r3
 8006334:	d838      	bhi.n	80063a8 <__ssputs_r+0x84>
 8006336:	898a      	ldrh	r2, [r1, #12]
 8006338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800633c:	d032      	beq.n	80063a4 <__ssputs_r+0x80>
 800633e:	6825      	ldr	r5, [r4, #0]
 8006340:	6909      	ldr	r1, [r1, #16]
 8006342:	eba5 0901 	sub.w	r9, r5, r1
 8006346:	6965      	ldr	r5, [r4, #20]
 8006348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800634c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006350:	3301      	adds	r3, #1
 8006352:	444b      	add	r3, r9
 8006354:	106d      	asrs	r5, r5, #1
 8006356:	429d      	cmp	r5, r3
 8006358:	bf38      	it	cc
 800635a:	461d      	movcc	r5, r3
 800635c:	0553      	lsls	r3, r2, #21
 800635e:	d531      	bpl.n	80063c4 <__ssputs_r+0xa0>
 8006360:	4629      	mov	r1, r5
 8006362:	f000 fb63 	bl	8006a2c <_malloc_r>
 8006366:	4606      	mov	r6, r0
 8006368:	b950      	cbnz	r0, 8006380 <__ssputs_r+0x5c>
 800636a:	230c      	movs	r3, #12
 800636c:	f8ca 3000 	str.w	r3, [sl]
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006380:	6921      	ldr	r1, [r4, #16]
 8006382:	464a      	mov	r2, r9
 8006384:	f000 fabe 	bl	8006904 <memcpy>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800638e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	6126      	str	r6, [r4, #16]
 8006396:	6165      	str	r5, [r4, #20]
 8006398:	444e      	add	r6, r9
 800639a:	eba5 0509 	sub.w	r5, r5, r9
 800639e:	6026      	str	r6, [r4, #0]
 80063a0:	60a5      	str	r5, [r4, #8]
 80063a2:	463e      	mov	r6, r7
 80063a4:	42be      	cmp	r6, r7
 80063a6:	d900      	bls.n	80063aa <__ssputs_r+0x86>
 80063a8:	463e      	mov	r6, r7
 80063aa:	6820      	ldr	r0, [r4, #0]
 80063ac:	4632      	mov	r2, r6
 80063ae:	4641      	mov	r1, r8
 80063b0:	f000 fab6 	bl	8006920 <memmove>
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	1b9b      	subs	r3, r3, r6
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4433      	add	r3, r6
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	2000      	movs	r0, #0
 80063c2:	e7db      	b.n	800637c <__ssputs_r+0x58>
 80063c4:	462a      	mov	r2, r5
 80063c6:	f000 fba5 	bl	8006b14 <_realloc_r>
 80063ca:	4606      	mov	r6, r0
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d1e1      	bne.n	8006394 <__ssputs_r+0x70>
 80063d0:	6921      	ldr	r1, [r4, #16]
 80063d2:	4650      	mov	r0, sl
 80063d4:	f000 fabe 	bl	8006954 <_free_r>
 80063d8:	e7c7      	b.n	800636a <__ssputs_r+0x46>
	...

080063dc <_svfiprintf_r>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	4698      	mov	r8, r3
 80063e2:	898b      	ldrh	r3, [r1, #12]
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	b09d      	sub	sp, #116	; 0x74
 80063e8:	4607      	mov	r7, r0
 80063ea:	460d      	mov	r5, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	d50e      	bpl.n	800640e <_svfiprintf_r+0x32>
 80063f0:	690b      	ldr	r3, [r1, #16]
 80063f2:	b963      	cbnz	r3, 800640e <_svfiprintf_r+0x32>
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	f000 fb19 	bl	8006a2c <_malloc_r>
 80063fa:	6028      	str	r0, [r5, #0]
 80063fc:	6128      	str	r0, [r5, #16]
 80063fe:	b920      	cbnz	r0, 800640a <_svfiprintf_r+0x2e>
 8006400:	230c      	movs	r3, #12
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e0d1      	b.n	80065ae <_svfiprintf_r+0x1d2>
 800640a:	2340      	movs	r3, #64	; 0x40
 800640c:	616b      	str	r3, [r5, #20]
 800640e:	2300      	movs	r3, #0
 8006410:	9309      	str	r3, [sp, #36]	; 0x24
 8006412:	2320      	movs	r3, #32
 8006414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006418:	f8cd 800c 	str.w	r8, [sp, #12]
 800641c:	2330      	movs	r3, #48	; 0x30
 800641e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065c8 <_svfiprintf_r+0x1ec>
 8006422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006426:	f04f 0901 	mov.w	r9, #1
 800642a:	4623      	mov	r3, r4
 800642c:	469a      	mov	sl, r3
 800642e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006432:	b10a      	cbz	r2, 8006438 <_svfiprintf_r+0x5c>
 8006434:	2a25      	cmp	r2, #37	; 0x25
 8006436:	d1f9      	bne.n	800642c <_svfiprintf_r+0x50>
 8006438:	ebba 0b04 	subs.w	fp, sl, r4
 800643c:	d00b      	beq.n	8006456 <_svfiprintf_r+0x7a>
 800643e:	465b      	mov	r3, fp
 8006440:	4622      	mov	r2, r4
 8006442:	4629      	mov	r1, r5
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff ff6d 	bl	8006324 <__ssputs_r>
 800644a:	3001      	adds	r0, #1
 800644c:	f000 80aa 	beq.w	80065a4 <_svfiprintf_r+0x1c8>
 8006450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006452:	445a      	add	r2, fp
 8006454:	9209      	str	r2, [sp, #36]	; 0x24
 8006456:	f89a 3000 	ldrb.w	r3, [sl]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a2 	beq.w	80065a4 <_svfiprintf_r+0x1c8>
 8006460:	2300      	movs	r3, #0
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800646a:	f10a 0a01 	add.w	sl, sl, #1
 800646e:	9304      	str	r3, [sp, #16]
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006476:	931a      	str	r3, [sp, #104]	; 0x68
 8006478:	4654      	mov	r4, sl
 800647a:	2205      	movs	r2, #5
 800647c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006480:	4851      	ldr	r0, [pc, #324]	; (80065c8 <_svfiprintf_r+0x1ec>)
 8006482:	f7f9 ff3d 	bl	8000300 <memchr>
 8006486:	9a04      	ldr	r2, [sp, #16]
 8006488:	b9d8      	cbnz	r0, 80064c2 <_svfiprintf_r+0xe6>
 800648a:	06d0      	lsls	r0, r2, #27
 800648c:	bf44      	itt	mi
 800648e:	2320      	movmi	r3, #32
 8006490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006494:	0711      	lsls	r1, r2, #28
 8006496:	bf44      	itt	mi
 8006498:	232b      	movmi	r3, #43	; 0x2b
 800649a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800649e:	f89a 3000 	ldrb.w	r3, [sl]
 80064a2:	2b2a      	cmp	r3, #42	; 0x2a
 80064a4:	d015      	beq.n	80064d2 <_svfiprintf_r+0xf6>
 80064a6:	9a07      	ldr	r2, [sp, #28]
 80064a8:	4654      	mov	r4, sl
 80064aa:	2000      	movs	r0, #0
 80064ac:	f04f 0c0a 	mov.w	ip, #10
 80064b0:	4621      	mov	r1, r4
 80064b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b6:	3b30      	subs	r3, #48	; 0x30
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	d94e      	bls.n	800655a <_svfiprintf_r+0x17e>
 80064bc:	b1b0      	cbz	r0, 80064ec <_svfiprintf_r+0x110>
 80064be:	9207      	str	r2, [sp, #28]
 80064c0:	e014      	b.n	80064ec <_svfiprintf_r+0x110>
 80064c2:	eba0 0308 	sub.w	r3, r0, r8
 80064c6:	fa09 f303 	lsl.w	r3, r9, r3
 80064ca:	4313      	orrs	r3, r2
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	46a2      	mov	sl, r4
 80064d0:	e7d2      	b.n	8006478 <_svfiprintf_r+0x9c>
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	1d19      	adds	r1, r3, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	9103      	str	r1, [sp, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bfbb      	ittet	lt
 80064de:	425b      	neglt	r3, r3
 80064e0:	f042 0202 	orrlt.w	r2, r2, #2
 80064e4:	9307      	strge	r3, [sp, #28]
 80064e6:	9307      	strlt	r3, [sp, #28]
 80064e8:	bfb8      	it	lt
 80064ea:	9204      	strlt	r2, [sp, #16]
 80064ec:	7823      	ldrb	r3, [r4, #0]
 80064ee:	2b2e      	cmp	r3, #46	; 0x2e
 80064f0:	d10c      	bne.n	800650c <_svfiprintf_r+0x130>
 80064f2:	7863      	ldrb	r3, [r4, #1]
 80064f4:	2b2a      	cmp	r3, #42	; 0x2a
 80064f6:	d135      	bne.n	8006564 <_svfiprintf_r+0x188>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	1d1a      	adds	r2, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9203      	str	r2, [sp, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	bfb8      	it	lt
 8006504:	f04f 33ff 	movlt.w	r3, #4294967295
 8006508:	3402      	adds	r4, #2
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065d8 <_svfiprintf_r+0x1fc>
 8006510:	7821      	ldrb	r1, [r4, #0]
 8006512:	2203      	movs	r2, #3
 8006514:	4650      	mov	r0, sl
 8006516:	f7f9 fef3 	bl	8000300 <memchr>
 800651a:	b140      	cbz	r0, 800652e <_svfiprintf_r+0x152>
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	eba0 000a 	sub.w	r0, r0, sl
 8006522:	fa03 f000 	lsl.w	r0, r3, r0
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	4303      	orrs	r3, r0
 800652a:	3401      	adds	r4, #1
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006532:	4826      	ldr	r0, [pc, #152]	; (80065cc <_svfiprintf_r+0x1f0>)
 8006534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006538:	2206      	movs	r2, #6
 800653a:	f7f9 fee1 	bl	8000300 <memchr>
 800653e:	2800      	cmp	r0, #0
 8006540:	d038      	beq.n	80065b4 <_svfiprintf_r+0x1d8>
 8006542:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <_svfiprintf_r+0x1f4>)
 8006544:	bb1b      	cbnz	r3, 800658e <_svfiprintf_r+0x1b2>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	3307      	adds	r3, #7
 800654a:	f023 0307 	bic.w	r3, r3, #7
 800654e:	3308      	adds	r3, #8
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006554:	4433      	add	r3, r6
 8006556:	9309      	str	r3, [sp, #36]	; 0x24
 8006558:	e767      	b.n	800642a <_svfiprintf_r+0x4e>
 800655a:	fb0c 3202 	mla	r2, ip, r2, r3
 800655e:	460c      	mov	r4, r1
 8006560:	2001      	movs	r0, #1
 8006562:	e7a5      	b.n	80064b0 <_svfiprintf_r+0xd4>
 8006564:	2300      	movs	r3, #0
 8006566:	3401      	adds	r4, #1
 8006568:	9305      	str	r3, [sp, #20]
 800656a:	4619      	mov	r1, r3
 800656c:	f04f 0c0a 	mov.w	ip, #10
 8006570:	4620      	mov	r0, r4
 8006572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006576:	3a30      	subs	r2, #48	; 0x30
 8006578:	2a09      	cmp	r2, #9
 800657a:	d903      	bls.n	8006584 <_svfiprintf_r+0x1a8>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0c5      	beq.n	800650c <_svfiprintf_r+0x130>
 8006580:	9105      	str	r1, [sp, #20]
 8006582:	e7c3      	b.n	800650c <_svfiprintf_r+0x130>
 8006584:	fb0c 2101 	mla	r1, ip, r1, r2
 8006588:	4604      	mov	r4, r0
 800658a:	2301      	movs	r3, #1
 800658c:	e7f0      	b.n	8006570 <_svfiprintf_r+0x194>
 800658e:	ab03      	add	r3, sp, #12
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	462a      	mov	r2, r5
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <_svfiprintf_r+0x1f8>)
 8006596:	a904      	add	r1, sp, #16
 8006598:	4638      	mov	r0, r7
 800659a:	f3af 8000 	nop.w
 800659e:	1c42      	adds	r2, r0, #1
 80065a0:	4606      	mov	r6, r0
 80065a2:	d1d6      	bne.n	8006552 <_svfiprintf_r+0x176>
 80065a4:	89ab      	ldrh	r3, [r5, #12]
 80065a6:	065b      	lsls	r3, r3, #25
 80065a8:	f53f af2c 	bmi.w	8006404 <_svfiprintf_r+0x28>
 80065ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ae:	b01d      	add	sp, #116	; 0x74
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b4:	ab03      	add	r3, sp, #12
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	462a      	mov	r2, r5
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <_svfiprintf_r+0x1f8>)
 80065bc:	a904      	add	r1, sp, #16
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 f87a 	bl	80066b8 <_printf_i>
 80065c4:	e7eb      	b.n	800659e <_svfiprintf_r+0x1c2>
 80065c6:	bf00      	nop
 80065c8:	08006c2c 	.word	0x08006c2c
 80065cc:	08006c36 	.word	0x08006c36
 80065d0:	00000000 	.word	0x00000000
 80065d4:	08006325 	.word	0x08006325
 80065d8:	08006c32 	.word	0x08006c32

080065dc <_printf_common>:
 80065dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	4616      	mov	r6, r2
 80065e2:	4699      	mov	r9, r3
 80065e4:	688a      	ldr	r2, [r1, #8]
 80065e6:	690b      	ldr	r3, [r1, #16]
 80065e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	bfb8      	it	lt
 80065f0:	4613      	movlt	r3, r2
 80065f2:	6033      	str	r3, [r6, #0]
 80065f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065f8:	4607      	mov	r7, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	b10a      	cbz	r2, 8006602 <_printf_common+0x26>
 80065fe:	3301      	adds	r3, #1
 8006600:	6033      	str	r3, [r6, #0]
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	0699      	lsls	r1, r3, #26
 8006606:	bf42      	ittt	mi
 8006608:	6833      	ldrmi	r3, [r6, #0]
 800660a:	3302      	addmi	r3, #2
 800660c:	6033      	strmi	r3, [r6, #0]
 800660e:	6825      	ldr	r5, [r4, #0]
 8006610:	f015 0506 	ands.w	r5, r5, #6
 8006614:	d106      	bne.n	8006624 <_printf_common+0x48>
 8006616:	f104 0a19 	add.w	sl, r4, #25
 800661a:	68e3      	ldr	r3, [r4, #12]
 800661c:	6832      	ldr	r2, [r6, #0]
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	42ab      	cmp	r3, r5
 8006622:	dc26      	bgt.n	8006672 <_printf_common+0x96>
 8006624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006628:	1e13      	subs	r3, r2, #0
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	bf18      	it	ne
 800662e:	2301      	movne	r3, #1
 8006630:	0692      	lsls	r2, r2, #26
 8006632:	d42b      	bmi.n	800668c <_printf_common+0xb0>
 8006634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006638:	4649      	mov	r1, r9
 800663a:	4638      	mov	r0, r7
 800663c:	47c0      	blx	r8
 800663e:	3001      	adds	r0, #1
 8006640:	d01e      	beq.n	8006680 <_printf_common+0xa4>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	68e5      	ldr	r5, [r4, #12]
 8006646:	6832      	ldr	r2, [r6, #0]
 8006648:	f003 0306 	and.w	r3, r3, #6
 800664c:	2b04      	cmp	r3, #4
 800664e:	bf08      	it	eq
 8006650:	1aad      	subeq	r5, r5, r2
 8006652:	68a3      	ldr	r3, [r4, #8]
 8006654:	6922      	ldr	r2, [r4, #16]
 8006656:	bf0c      	ite	eq
 8006658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800665c:	2500      	movne	r5, #0
 800665e:	4293      	cmp	r3, r2
 8006660:	bfc4      	itt	gt
 8006662:	1a9b      	subgt	r3, r3, r2
 8006664:	18ed      	addgt	r5, r5, r3
 8006666:	2600      	movs	r6, #0
 8006668:	341a      	adds	r4, #26
 800666a:	42b5      	cmp	r5, r6
 800666c:	d11a      	bne.n	80066a4 <_printf_common+0xc8>
 800666e:	2000      	movs	r0, #0
 8006670:	e008      	b.n	8006684 <_printf_common+0xa8>
 8006672:	2301      	movs	r3, #1
 8006674:	4652      	mov	r2, sl
 8006676:	4649      	mov	r1, r9
 8006678:	4638      	mov	r0, r7
 800667a:	47c0      	blx	r8
 800667c:	3001      	adds	r0, #1
 800667e:	d103      	bne.n	8006688 <_printf_common+0xac>
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006688:	3501      	adds	r5, #1
 800668a:	e7c6      	b.n	800661a <_printf_common+0x3e>
 800668c:	18e1      	adds	r1, r4, r3
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	2030      	movs	r0, #48	; 0x30
 8006692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006696:	4422      	add	r2, r4
 8006698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800669c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066a0:	3302      	adds	r3, #2
 80066a2:	e7c7      	b.n	8006634 <_printf_common+0x58>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4622      	mov	r2, r4
 80066a8:	4649      	mov	r1, r9
 80066aa:	4638      	mov	r0, r7
 80066ac:	47c0      	blx	r8
 80066ae:	3001      	adds	r0, #1
 80066b0:	d0e6      	beq.n	8006680 <_printf_common+0xa4>
 80066b2:	3601      	adds	r6, #1
 80066b4:	e7d9      	b.n	800666a <_printf_common+0x8e>
	...

080066b8 <_printf_i>:
 80066b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	7e0f      	ldrb	r7, [r1, #24]
 80066be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066c0:	2f78      	cmp	r7, #120	; 0x78
 80066c2:	4691      	mov	r9, r2
 80066c4:	4680      	mov	r8, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	469a      	mov	sl, r3
 80066ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066ce:	d807      	bhi.n	80066e0 <_printf_i+0x28>
 80066d0:	2f62      	cmp	r7, #98	; 0x62
 80066d2:	d80a      	bhi.n	80066ea <_printf_i+0x32>
 80066d4:	2f00      	cmp	r7, #0
 80066d6:	f000 80d8 	beq.w	800688a <_printf_i+0x1d2>
 80066da:	2f58      	cmp	r7, #88	; 0x58
 80066dc:	f000 80a3 	beq.w	8006826 <_printf_i+0x16e>
 80066e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066e8:	e03a      	b.n	8006760 <_printf_i+0xa8>
 80066ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066ee:	2b15      	cmp	r3, #21
 80066f0:	d8f6      	bhi.n	80066e0 <_printf_i+0x28>
 80066f2:	a101      	add	r1, pc, #4	; (adr r1, 80066f8 <_printf_i+0x40>)
 80066f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066f8:	08006751 	.word	0x08006751
 80066fc:	08006765 	.word	0x08006765
 8006700:	080066e1 	.word	0x080066e1
 8006704:	080066e1 	.word	0x080066e1
 8006708:	080066e1 	.word	0x080066e1
 800670c:	080066e1 	.word	0x080066e1
 8006710:	08006765 	.word	0x08006765
 8006714:	080066e1 	.word	0x080066e1
 8006718:	080066e1 	.word	0x080066e1
 800671c:	080066e1 	.word	0x080066e1
 8006720:	080066e1 	.word	0x080066e1
 8006724:	08006871 	.word	0x08006871
 8006728:	08006795 	.word	0x08006795
 800672c:	08006853 	.word	0x08006853
 8006730:	080066e1 	.word	0x080066e1
 8006734:	080066e1 	.word	0x080066e1
 8006738:	08006893 	.word	0x08006893
 800673c:	080066e1 	.word	0x080066e1
 8006740:	08006795 	.word	0x08006795
 8006744:	080066e1 	.word	0x080066e1
 8006748:	080066e1 	.word	0x080066e1
 800674c:	0800685b 	.word	0x0800685b
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	1d1a      	adds	r2, r3, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	602a      	str	r2, [r5, #0]
 8006758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800675c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006760:	2301      	movs	r3, #1
 8006762:	e0a3      	b.n	80068ac <_printf_i+0x1f4>
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	6829      	ldr	r1, [r5, #0]
 8006768:	0606      	lsls	r6, r0, #24
 800676a:	f101 0304 	add.w	r3, r1, #4
 800676e:	d50a      	bpl.n	8006786 <_printf_i+0xce>
 8006770:	680e      	ldr	r6, [r1, #0]
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	2e00      	cmp	r6, #0
 8006776:	da03      	bge.n	8006780 <_printf_i+0xc8>
 8006778:	232d      	movs	r3, #45	; 0x2d
 800677a:	4276      	negs	r6, r6
 800677c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006780:	485e      	ldr	r0, [pc, #376]	; (80068fc <_printf_i+0x244>)
 8006782:	230a      	movs	r3, #10
 8006784:	e019      	b.n	80067ba <_printf_i+0x102>
 8006786:	680e      	ldr	r6, [r1, #0]
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800678e:	bf18      	it	ne
 8006790:	b236      	sxthne	r6, r6
 8006792:	e7ef      	b.n	8006774 <_printf_i+0xbc>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	6820      	ldr	r0, [r4, #0]
 8006798:	1d19      	adds	r1, r3, #4
 800679a:	6029      	str	r1, [r5, #0]
 800679c:	0601      	lsls	r1, r0, #24
 800679e:	d501      	bpl.n	80067a4 <_printf_i+0xec>
 80067a0:	681e      	ldr	r6, [r3, #0]
 80067a2:	e002      	b.n	80067aa <_printf_i+0xf2>
 80067a4:	0646      	lsls	r6, r0, #25
 80067a6:	d5fb      	bpl.n	80067a0 <_printf_i+0xe8>
 80067a8:	881e      	ldrh	r6, [r3, #0]
 80067aa:	4854      	ldr	r0, [pc, #336]	; (80068fc <_printf_i+0x244>)
 80067ac:	2f6f      	cmp	r7, #111	; 0x6f
 80067ae:	bf0c      	ite	eq
 80067b0:	2308      	moveq	r3, #8
 80067b2:	230a      	movne	r3, #10
 80067b4:	2100      	movs	r1, #0
 80067b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067ba:	6865      	ldr	r5, [r4, #4]
 80067bc:	60a5      	str	r5, [r4, #8]
 80067be:	2d00      	cmp	r5, #0
 80067c0:	bfa2      	ittt	ge
 80067c2:	6821      	ldrge	r1, [r4, #0]
 80067c4:	f021 0104 	bicge.w	r1, r1, #4
 80067c8:	6021      	strge	r1, [r4, #0]
 80067ca:	b90e      	cbnz	r6, 80067d0 <_printf_i+0x118>
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	d04d      	beq.n	800686c <_printf_i+0x1b4>
 80067d0:	4615      	mov	r5, r2
 80067d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80067d6:	fb03 6711 	mls	r7, r3, r1, r6
 80067da:	5dc7      	ldrb	r7, [r0, r7]
 80067dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067e0:	4637      	mov	r7, r6
 80067e2:	42bb      	cmp	r3, r7
 80067e4:	460e      	mov	r6, r1
 80067e6:	d9f4      	bls.n	80067d2 <_printf_i+0x11a>
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d10b      	bne.n	8006804 <_printf_i+0x14c>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	07de      	lsls	r6, r3, #31
 80067f0:	d508      	bpl.n	8006804 <_printf_i+0x14c>
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	6861      	ldr	r1, [r4, #4]
 80067f6:	4299      	cmp	r1, r3
 80067f8:	bfde      	ittt	le
 80067fa:	2330      	movle	r3, #48	; 0x30
 80067fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006800:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006804:	1b52      	subs	r2, r2, r5
 8006806:	6122      	str	r2, [r4, #16]
 8006808:	f8cd a000 	str.w	sl, [sp]
 800680c:	464b      	mov	r3, r9
 800680e:	aa03      	add	r2, sp, #12
 8006810:	4621      	mov	r1, r4
 8006812:	4640      	mov	r0, r8
 8006814:	f7ff fee2 	bl	80065dc <_printf_common>
 8006818:	3001      	adds	r0, #1
 800681a:	d14c      	bne.n	80068b6 <_printf_i+0x1fe>
 800681c:	f04f 30ff 	mov.w	r0, #4294967295
 8006820:	b004      	add	sp, #16
 8006822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006826:	4835      	ldr	r0, [pc, #212]	; (80068fc <_printf_i+0x244>)
 8006828:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800682c:	6829      	ldr	r1, [r5, #0]
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	f851 6b04 	ldr.w	r6, [r1], #4
 8006834:	6029      	str	r1, [r5, #0]
 8006836:	061d      	lsls	r5, r3, #24
 8006838:	d514      	bpl.n	8006864 <_printf_i+0x1ac>
 800683a:	07df      	lsls	r7, r3, #31
 800683c:	bf44      	itt	mi
 800683e:	f043 0320 	orrmi.w	r3, r3, #32
 8006842:	6023      	strmi	r3, [r4, #0]
 8006844:	b91e      	cbnz	r6, 800684e <_printf_i+0x196>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	f023 0320 	bic.w	r3, r3, #32
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	2310      	movs	r3, #16
 8006850:	e7b0      	b.n	80067b4 <_printf_i+0xfc>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	f043 0320 	orr.w	r3, r3, #32
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	2378      	movs	r3, #120	; 0x78
 800685c:	4828      	ldr	r0, [pc, #160]	; (8006900 <_printf_i+0x248>)
 800685e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006862:	e7e3      	b.n	800682c <_printf_i+0x174>
 8006864:	0659      	lsls	r1, r3, #25
 8006866:	bf48      	it	mi
 8006868:	b2b6      	uxthmi	r6, r6
 800686a:	e7e6      	b.n	800683a <_printf_i+0x182>
 800686c:	4615      	mov	r5, r2
 800686e:	e7bb      	b.n	80067e8 <_printf_i+0x130>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	6826      	ldr	r6, [r4, #0]
 8006874:	6961      	ldr	r1, [r4, #20]
 8006876:	1d18      	adds	r0, r3, #4
 8006878:	6028      	str	r0, [r5, #0]
 800687a:	0635      	lsls	r5, r6, #24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	d501      	bpl.n	8006884 <_printf_i+0x1cc>
 8006880:	6019      	str	r1, [r3, #0]
 8006882:	e002      	b.n	800688a <_printf_i+0x1d2>
 8006884:	0670      	lsls	r0, r6, #25
 8006886:	d5fb      	bpl.n	8006880 <_printf_i+0x1c8>
 8006888:	8019      	strh	r1, [r3, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	4615      	mov	r5, r2
 8006890:	e7ba      	b.n	8006808 <_printf_i+0x150>
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	1d1a      	adds	r2, r3, #4
 8006896:	602a      	str	r2, [r5, #0]
 8006898:	681d      	ldr	r5, [r3, #0]
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	2100      	movs	r1, #0
 800689e:	4628      	mov	r0, r5
 80068a0:	f7f9 fd2e 	bl	8000300 <memchr>
 80068a4:	b108      	cbz	r0, 80068aa <_printf_i+0x1f2>
 80068a6:	1b40      	subs	r0, r0, r5
 80068a8:	6060      	str	r0, [r4, #4]
 80068aa:	6863      	ldr	r3, [r4, #4]
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	2300      	movs	r3, #0
 80068b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b4:	e7a8      	b.n	8006808 <_printf_i+0x150>
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	462a      	mov	r2, r5
 80068ba:	4649      	mov	r1, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	47d0      	blx	sl
 80068c0:	3001      	adds	r0, #1
 80068c2:	d0ab      	beq.n	800681c <_printf_i+0x164>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	079b      	lsls	r3, r3, #30
 80068c8:	d413      	bmi.n	80068f2 <_printf_i+0x23a>
 80068ca:	68e0      	ldr	r0, [r4, #12]
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	4298      	cmp	r0, r3
 80068d0:	bfb8      	it	lt
 80068d2:	4618      	movlt	r0, r3
 80068d4:	e7a4      	b.n	8006820 <_printf_i+0x168>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4632      	mov	r2, r6
 80068da:	4649      	mov	r1, r9
 80068dc:	4640      	mov	r0, r8
 80068de:	47d0      	blx	sl
 80068e0:	3001      	adds	r0, #1
 80068e2:	d09b      	beq.n	800681c <_printf_i+0x164>
 80068e4:	3501      	adds	r5, #1
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	9903      	ldr	r1, [sp, #12]
 80068ea:	1a5b      	subs	r3, r3, r1
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dcf2      	bgt.n	80068d6 <_printf_i+0x21e>
 80068f0:	e7eb      	b.n	80068ca <_printf_i+0x212>
 80068f2:	2500      	movs	r5, #0
 80068f4:	f104 0619 	add.w	r6, r4, #25
 80068f8:	e7f5      	b.n	80068e6 <_printf_i+0x22e>
 80068fa:	bf00      	nop
 80068fc:	08006c3d 	.word	0x08006c3d
 8006900:	08006c4e 	.word	0x08006c4e

08006904 <memcpy>:
 8006904:	440a      	add	r2, r1
 8006906:	4291      	cmp	r1, r2
 8006908:	f100 33ff 	add.w	r3, r0, #4294967295
 800690c:	d100      	bne.n	8006910 <memcpy+0xc>
 800690e:	4770      	bx	lr
 8006910:	b510      	push	{r4, lr}
 8006912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800691a:	4291      	cmp	r1, r2
 800691c:	d1f9      	bne.n	8006912 <memcpy+0xe>
 800691e:	bd10      	pop	{r4, pc}

08006920 <memmove>:
 8006920:	4288      	cmp	r0, r1
 8006922:	b510      	push	{r4, lr}
 8006924:	eb01 0402 	add.w	r4, r1, r2
 8006928:	d902      	bls.n	8006930 <memmove+0x10>
 800692a:	4284      	cmp	r4, r0
 800692c:	4623      	mov	r3, r4
 800692e:	d807      	bhi.n	8006940 <memmove+0x20>
 8006930:	1e43      	subs	r3, r0, #1
 8006932:	42a1      	cmp	r1, r4
 8006934:	d008      	beq.n	8006948 <memmove+0x28>
 8006936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800693a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800693e:	e7f8      	b.n	8006932 <memmove+0x12>
 8006940:	4402      	add	r2, r0
 8006942:	4601      	mov	r1, r0
 8006944:	428a      	cmp	r2, r1
 8006946:	d100      	bne.n	800694a <memmove+0x2a>
 8006948:	bd10      	pop	{r4, pc}
 800694a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800694e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006952:	e7f7      	b.n	8006944 <memmove+0x24>

08006954 <_free_r>:
 8006954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006956:	2900      	cmp	r1, #0
 8006958:	d044      	beq.n	80069e4 <_free_r+0x90>
 800695a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695e:	9001      	str	r0, [sp, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f1a1 0404 	sub.w	r4, r1, #4
 8006966:	bfb8      	it	lt
 8006968:	18e4      	addlt	r4, r4, r3
 800696a:	f000 f913 	bl	8006b94 <__malloc_lock>
 800696e:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <_free_r+0x94>)
 8006970:	9801      	ldr	r0, [sp, #4]
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	b933      	cbnz	r3, 8006984 <_free_r+0x30>
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	6014      	str	r4, [r2, #0]
 800697a:	b003      	add	sp, #12
 800697c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006980:	f000 b90e 	b.w	8006ba0 <__malloc_unlock>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d908      	bls.n	800699a <_free_r+0x46>
 8006988:	6825      	ldr	r5, [r4, #0]
 800698a:	1961      	adds	r1, r4, r5
 800698c:	428b      	cmp	r3, r1
 800698e:	bf01      	itttt	eq
 8006990:	6819      	ldreq	r1, [r3, #0]
 8006992:	685b      	ldreq	r3, [r3, #4]
 8006994:	1949      	addeq	r1, r1, r5
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	e7ed      	b.n	8006976 <_free_r+0x22>
 800699a:	461a      	mov	r2, r3
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	b10b      	cbz	r3, 80069a4 <_free_r+0x50>
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d9fa      	bls.n	800699a <_free_r+0x46>
 80069a4:	6811      	ldr	r1, [r2, #0]
 80069a6:	1855      	adds	r5, r2, r1
 80069a8:	42a5      	cmp	r5, r4
 80069aa:	d10b      	bne.n	80069c4 <_free_r+0x70>
 80069ac:	6824      	ldr	r4, [r4, #0]
 80069ae:	4421      	add	r1, r4
 80069b0:	1854      	adds	r4, r2, r1
 80069b2:	42a3      	cmp	r3, r4
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	d1e0      	bne.n	800697a <_free_r+0x26>
 80069b8:	681c      	ldr	r4, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	6053      	str	r3, [r2, #4]
 80069be:	4421      	add	r1, r4
 80069c0:	6011      	str	r1, [r2, #0]
 80069c2:	e7da      	b.n	800697a <_free_r+0x26>
 80069c4:	d902      	bls.n	80069cc <_free_r+0x78>
 80069c6:	230c      	movs	r3, #12
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	e7d6      	b.n	800697a <_free_r+0x26>
 80069cc:	6825      	ldr	r5, [r4, #0]
 80069ce:	1961      	adds	r1, r4, r5
 80069d0:	428b      	cmp	r3, r1
 80069d2:	bf04      	itt	eq
 80069d4:	6819      	ldreq	r1, [r3, #0]
 80069d6:	685b      	ldreq	r3, [r3, #4]
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	bf04      	itt	eq
 80069dc:	1949      	addeq	r1, r1, r5
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	6054      	str	r4, [r2, #4]
 80069e2:	e7ca      	b.n	800697a <_free_r+0x26>
 80069e4:	b003      	add	sp, #12
 80069e6:	bd30      	pop	{r4, r5, pc}
 80069e8:	240005cc 	.word	0x240005cc

080069ec <sbrk_aligned>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4e0e      	ldr	r6, [pc, #56]	; (8006a28 <sbrk_aligned+0x3c>)
 80069f0:	460c      	mov	r4, r1
 80069f2:	6831      	ldr	r1, [r6, #0]
 80069f4:	4605      	mov	r5, r0
 80069f6:	b911      	cbnz	r1, 80069fe <sbrk_aligned+0x12>
 80069f8:	f000 f8bc 	bl	8006b74 <_sbrk_r>
 80069fc:	6030      	str	r0, [r6, #0]
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 f8b7 	bl	8006b74 <_sbrk_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d00a      	beq.n	8006a20 <sbrk_aligned+0x34>
 8006a0a:	1cc4      	adds	r4, r0, #3
 8006a0c:	f024 0403 	bic.w	r4, r4, #3
 8006a10:	42a0      	cmp	r0, r4
 8006a12:	d007      	beq.n	8006a24 <sbrk_aligned+0x38>
 8006a14:	1a21      	subs	r1, r4, r0
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 f8ac 	bl	8006b74 <_sbrk_r>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d101      	bne.n	8006a24 <sbrk_aligned+0x38>
 8006a20:	f04f 34ff 	mov.w	r4, #4294967295
 8006a24:	4620      	mov	r0, r4
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	240005d0 	.word	0x240005d0

08006a2c <_malloc_r>:
 8006a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a30:	1ccd      	adds	r5, r1, #3
 8006a32:	f025 0503 	bic.w	r5, r5, #3
 8006a36:	3508      	adds	r5, #8
 8006a38:	2d0c      	cmp	r5, #12
 8006a3a:	bf38      	it	cc
 8006a3c:	250c      	movcc	r5, #12
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	4607      	mov	r7, r0
 8006a42:	db01      	blt.n	8006a48 <_malloc_r+0x1c>
 8006a44:	42a9      	cmp	r1, r5
 8006a46:	d905      	bls.n	8006a54 <_malloc_r+0x28>
 8006a48:	230c      	movs	r3, #12
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	2600      	movs	r6, #0
 8006a4e:	4630      	mov	r0, r6
 8006a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a54:	4e2e      	ldr	r6, [pc, #184]	; (8006b10 <_malloc_r+0xe4>)
 8006a56:	f000 f89d 	bl	8006b94 <__malloc_lock>
 8006a5a:	6833      	ldr	r3, [r6, #0]
 8006a5c:	461c      	mov	r4, r3
 8006a5e:	bb34      	cbnz	r4, 8006aae <_malloc_r+0x82>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4638      	mov	r0, r7
 8006a64:	f7ff ffc2 	bl	80069ec <sbrk_aligned>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	d14d      	bne.n	8006b0a <_malloc_r+0xde>
 8006a6e:	6834      	ldr	r4, [r6, #0]
 8006a70:	4626      	mov	r6, r4
 8006a72:	2e00      	cmp	r6, #0
 8006a74:	d140      	bne.n	8006af8 <_malloc_r+0xcc>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	eb04 0803 	add.w	r8, r4, r3
 8006a80:	f000 f878 	bl	8006b74 <_sbrk_r>
 8006a84:	4580      	cmp	r8, r0
 8006a86:	d13a      	bne.n	8006afe <_malloc_r+0xd2>
 8006a88:	6821      	ldr	r1, [r4, #0]
 8006a8a:	3503      	adds	r5, #3
 8006a8c:	1a6d      	subs	r5, r5, r1
 8006a8e:	f025 0503 	bic.w	r5, r5, #3
 8006a92:	3508      	adds	r5, #8
 8006a94:	2d0c      	cmp	r5, #12
 8006a96:	bf38      	it	cc
 8006a98:	250c      	movcc	r5, #12
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff ffa5 	bl	80069ec <sbrk_aligned>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d02b      	beq.n	8006afe <_malloc_r+0xd2>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	442b      	add	r3, r5
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	e00e      	b.n	8006acc <_malloc_r+0xa0>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	1b52      	subs	r2, r2, r5
 8006ab2:	d41e      	bmi.n	8006af2 <_malloc_r+0xc6>
 8006ab4:	2a0b      	cmp	r2, #11
 8006ab6:	d916      	bls.n	8006ae6 <_malloc_r+0xba>
 8006ab8:	1961      	adds	r1, r4, r5
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	6025      	str	r5, [r4, #0]
 8006abe:	bf18      	it	ne
 8006ac0:	6059      	strne	r1, [r3, #4]
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	bf08      	it	eq
 8006ac6:	6031      	streq	r1, [r6, #0]
 8006ac8:	5162      	str	r2, [r4, r5]
 8006aca:	604b      	str	r3, [r1, #4]
 8006acc:	4638      	mov	r0, r7
 8006ace:	f104 060b 	add.w	r6, r4, #11
 8006ad2:	f000 f865 	bl	8006ba0 <__malloc_unlock>
 8006ad6:	f026 0607 	bic.w	r6, r6, #7
 8006ada:	1d23      	adds	r3, r4, #4
 8006adc:	1af2      	subs	r2, r6, r3
 8006ade:	d0b6      	beq.n	8006a4e <_malloc_r+0x22>
 8006ae0:	1b9b      	subs	r3, r3, r6
 8006ae2:	50a3      	str	r3, [r4, r2]
 8006ae4:	e7b3      	b.n	8006a4e <_malloc_r+0x22>
 8006ae6:	6862      	ldr	r2, [r4, #4]
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	bf0c      	ite	eq
 8006aec:	6032      	streq	r2, [r6, #0]
 8006aee:	605a      	strne	r2, [r3, #4]
 8006af0:	e7ec      	b.n	8006acc <_malloc_r+0xa0>
 8006af2:	4623      	mov	r3, r4
 8006af4:	6864      	ldr	r4, [r4, #4]
 8006af6:	e7b2      	b.n	8006a5e <_malloc_r+0x32>
 8006af8:	4634      	mov	r4, r6
 8006afa:	6876      	ldr	r6, [r6, #4]
 8006afc:	e7b9      	b.n	8006a72 <_malloc_r+0x46>
 8006afe:	230c      	movs	r3, #12
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	4638      	mov	r0, r7
 8006b04:	f000 f84c 	bl	8006ba0 <__malloc_unlock>
 8006b08:	e7a1      	b.n	8006a4e <_malloc_r+0x22>
 8006b0a:	6025      	str	r5, [r4, #0]
 8006b0c:	e7de      	b.n	8006acc <_malloc_r+0xa0>
 8006b0e:	bf00      	nop
 8006b10:	240005cc 	.word	0x240005cc

08006b14 <_realloc_r>:
 8006b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b18:	4680      	mov	r8, r0
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	460e      	mov	r6, r1
 8006b1e:	b921      	cbnz	r1, 8006b2a <_realloc_r+0x16>
 8006b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b24:	4611      	mov	r1, r2
 8006b26:	f7ff bf81 	b.w	8006a2c <_malloc_r>
 8006b2a:	b92a      	cbnz	r2, 8006b38 <_realloc_r+0x24>
 8006b2c:	f7ff ff12 	bl	8006954 <_free_r>
 8006b30:	4625      	mov	r5, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b38:	f000 f838 	bl	8006bac <_malloc_usable_size_r>
 8006b3c:	4284      	cmp	r4, r0
 8006b3e:	4607      	mov	r7, r0
 8006b40:	d802      	bhi.n	8006b48 <_realloc_r+0x34>
 8006b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b46:	d812      	bhi.n	8006b6e <_realloc_r+0x5a>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7ff ff6e 	bl	8006a2c <_malloc_r>
 8006b50:	4605      	mov	r5, r0
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d0ed      	beq.n	8006b32 <_realloc_r+0x1e>
 8006b56:	42bc      	cmp	r4, r7
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	bf28      	it	cs
 8006b5e:	463a      	movcs	r2, r7
 8006b60:	f7ff fed0 	bl	8006904 <memcpy>
 8006b64:	4631      	mov	r1, r6
 8006b66:	4640      	mov	r0, r8
 8006b68:	f7ff fef4 	bl	8006954 <_free_r>
 8006b6c:	e7e1      	b.n	8006b32 <_realloc_r+0x1e>
 8006b6e:	4635      	mov	r5, r6
 8006b70:	e7df      	b.n	8006b32 <_realloc_r+0x1e>
	...

08006b74 <_sbrk_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d06      	ldr	r5, [pc, #24]	; (8006b90 <_sbrk_r+0x1c>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f7fa f812 	bl	8000ba8 <_sbrk>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_sbrk_r+0x1a>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_sbrk_r+0x1a>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	240005d4 	.word	0x240005d4

08006b94 <__malloc_lock>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__malloc_lock+0x8>)
 8006b96:	f000 b811 	b.w	8006bbc <__retarget_lock_acquire_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	240005d8 	.word	0x240005d8

08006ba0 <__malloc_unlock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__malloc_unlock+0x8>)
 8006ba2:	f000 b80c 	b.w	8006bbe <__retarget_lock_release_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	240005d8 	.word	0x240005d8

08006bac <_malloc_usable_size_r>:
 8006bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb0:	1f18      	subs	r0, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bfbc      	itt	lt
 8006bb6:	580b      	ldrlt	r3, [r1, r0]
 8006bb8:	18c0      	addlt	r0, r0, r3
 8006bba:	4770      	bx	lr

08006bbc <__retarget_lock_acquire_recursive>:
 8006bbc:	4770      	bx	lr

08006bbe <__retarget_lock_release_recursive>:
 8006bbe:	4770      	bx	lr

08006bc0 <_init>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

08006bcc <_fini>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr
