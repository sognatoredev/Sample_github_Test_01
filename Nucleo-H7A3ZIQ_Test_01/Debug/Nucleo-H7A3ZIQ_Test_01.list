
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b80  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  24000010  08005e84  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000110  08005e84  00020110  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000158ed  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002732  00000000  00000000  0003592b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001060  00000000  00000000  00038060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f58  00000000  00000000  000390c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030c7f  00000000  00000000  0003a018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016370  00000000  00000000  0006ac97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e7f3  00000000  00000000  00081007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bf7fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000444c  00000000  00000000  001bf84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005e14 	.word	0x08005e14

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005e14 	.word	0x08005e14

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LED_Process>:
/* Includes ------------------------------------------------------------------*/
#include "LED_Proc.h"


void LED_Process (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    HAL_Delay(500);
 80005f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f8:	f000 fc82 	bl	8000f00 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80005fc:	2101      	movs	r1, #1
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <LED_Process+0x2c>)
 8000600:	f000 ff7b 	bl	80014fa <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <LED_Process+0x2c>)
 800060a:	f000 ff76 	bl	80014fa <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800060e:	2102      	movs	r1, #2
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <LED_Process+0x30>)
 8000612:	f000 ff72 	bl	80014fa <HAL_GPIO_TogglePin>
    //HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	58020400 	.word	0x58020400
 8000620:	58021000 	.word	0x58021000

08000624 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	; 0x38
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b80      	ldr	r3, [pc, #512]	; (800083c <MX_GPIO_Init+0x218>)
 800063c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000640:	4a7e      	ldr	r2, [pc, #504]	; (800083c <MX_GPIO_Init+0x218>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800064a:	4b7c      	ldr	r3, [pc, #496]	; (800083c <MX_GPIO_Init+0x218>)
 800064c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	623b      	str	r3, [r7, #32]
 8000656:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000658:	4b78      	ldr	r3, [pc, #480]	; (800083c <MX_GPIO_Init+0x218>)
 800065a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800065e:	4a77      	ldr	r2, [pc, #476]	; (800083c <MX_GPIO_Init+0x218>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000668:	4b74      	ldr	r3, [pc, #464]	; (800083c <MX_GPIO_Init+0x218>)
 800066a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800066e:	f003 0320 	and.w	r3, r3, #32
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	4b71      	ldr	r3, [pc, #452]	; (800083c <MX_GPIO_Init+0x218>)
 8000678:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800067c:	4a6f      	ldr	r2, [pc, #444]	; (800083c <MX_GPIO_Init+0x218>)
 800067e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000682:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000686:	4b6d      	ldr	r3, [pc, #436]	; (800083c <MX_GPIO_Init+0x218>)
 8000688:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800068c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b69      	ldr	r3, [pc, #420]	; (800083c <MX_GPIO_Init+0x218>)
 8000696:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800069a:	4a68      	ldr	r2, [pc, #416]	; (800083c <MX_GPIO_Init+0x218>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006a4:	4b65      	ldr	r3, [pc, #404]	; (800083c <MX_GPIO_Init+0x218>)
 80006a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b62      	ldr	r3, [pc, #392]	; (800083c <MX_GPIO_Init+0x218>)
 80006b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b8:	4a60      	ldr	r2, [pc, #384]	; (800083c <MX_GPIO_Init+0x218>)
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c2:	4b5e      	ldr	r3, [pc, #376]	; (800083c <MX_GPIO_Init+0x218>)
 80006c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <MX_GPIO_Init+0x218>)
 80006d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d6:	4a59      	ldr	r2, [pc, #356]	; (800083c <MX_GPIO_Init+0x218>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e0:	4b56      	ldr	r3, [pc, #344]	; (800083c <MX_GPIO_Init+0x218>)
 80006e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b53      	ldr	r3, [pc, #332]	; (800083c <MX_GPIO_Init+0x218>)
 80006f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f4:	4a51      	ldr	r2, [pc, #324]	; (800083c <MX_GPIO_Init+0x218>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006fe:	4b4f      	ldr	r3, [pc, #316]	; (800083c <MX_GPIO_Init+0x218>)
 8000700:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070c:	4b4b      	ldr	r3, [pc, #300]	; (800083c <MX_GPIO_Init+0x218>)
 800070e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000712:	4a4a      	ldr	r2, [pc, #296]	; (800083c <MX_GPIO_Init+0x218>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800071c:	4b47      	ldr	r3, [pc, #284]	; (800083c <MX_GPIO_Init+0x218>)
 800071e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000730:	4843      	ldr	r0, [pc, #268]	; (8000840 <MX_GPIO_Init+0x21c>)
 8000732:	f000 fec9 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f244 0101 	movw	r1, #16385	; 0x4001
 800073c:	4841      	ldr	r0, [pc, #260]	; (8000844 <MX_GPIO_Init+0x220>)
 800073e:	f000 fec3 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <MX_GPIO_Init+0x224>)
 8000748:	f000 febe 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	483a      	ldr	r0, [pc, #232]	; (800084c <MX_GPIO_Init+0x228>)
 8000762:	f000 fd01 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	4830      	ldr	r0, [pc, #192]	; (8000840 <MX_GPIO_Init+0x21c>)
 8000780:	f000 fcf2 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000784:	f244 0301 	movw	r3, #16385	; 0x4001
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	4829      	ldr	r0, [pc, #164]	; (8000844 <MX_GPIO_Init+0x220>)
 800079e:	f000 fce3 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4826      	ldr	r0, [pc, #152]	; (8000850 <MX_GPIO_Init+0x22c>)
 80007b8:	f000 fcd6 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80007bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4820      	ldr	r0, [pc, #128]	; (8000854 <MX_GPIO_Init+0x230>)
 80007d2:	f000 fcc9 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007e8:	230a      	movs	r3, #10
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	4818      	ldr	r0, [pc, #96]	; (8000854 <MX_GPIO_Init+0x230>)
 80007f4:	f000 fcb8 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80007f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4619      	mov	r1, r3
 8000810:	4810      	ldr	r0, [pc, #64]	; (8000854 <MX_GPIO_Init+0x230>)
 8000812:	f000 fca9 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000816:	2302      	movs	r3, #2
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4619      	mov	r1, r3
 800082c:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_GPIO_Init+0x224>)
 800082e:	f000 fc9b 	bl	8001168 <HAL_GPIO_Init>

}
 8000832:	bf00      	nop
 8000834:	3738      	adds	r7, #56	; 0x38
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	58024400 	.word	0x58024400
 8000840:	58021400 	.word	0x58021400
 8000844:	58020400 	.word	0x58020400
 8000848:	58021000 	.word	0x58021000
 800084c:	58020800 	.word	0x58020800
 8000850:	58021800 	.word	0x58021800
 8000854:	58020000 	.word	0x58020000

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fabe 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f80c 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f7ff fede 	bl	8000624 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000868:	f000 f9d0 	bl	8000c0c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800086c:	f000 fa84 	bl	8000d78 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000870:	f000 f950 	bl	8000b14 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Process();
 8000874:	f7ff febc 	bl	80005f0 <LED_Process>
  {
 8000878:	e7fc      	b.n	8000874 <main+0x1c>
	...

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09c      	sub	sp, #112	; 0x70
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	224c      	movs	r2, #76	; 0x4c
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 faba 	bl	8005e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2220      	movs	r2, #32
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f005 fab4 	bl	8005e04 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <SystemClock_Config+0xe4>)
 800089e:	f04f 32ff 	mov.w	r2, #4294967295
 80008a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a6:	2004      	movs	r0, #4
 80008a8:	f000 fe42 	bl	8001530 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <SystemClock_Config+0xe8>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <SystemClock_Config+0xe8>)
 80008b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <SystemClock_Config+0xe8>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c8:	bf00      	nop
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <SystemClock_Config+0xe8>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d6:	d1f8      	bne.n	80008ca <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008d8:	2321      	movs	r3, #33	; 0x21
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80008f2:	2346      	movs	r3, #70	; 0x46
 80008f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000902:	230c      	movs	r3, #12
 8000904:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000906:	2300      	movs	r3, #0
 8000908:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fe66 	bl	80015e4 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800091e:	f000 f823 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	233f      	movs	r3, #63	; 0x3f
 8000924:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2303      	movs	r3, #3
 8000928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2107      	movs	r1, #7
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fa7d 	bl	8001e48 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000954:	f000 f808 	bl	8000968 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3770      	adds	r7, #112	; 0x70
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	58024400 	.word	0x58024400
 8000964:	58024800 	.word	0x58024800

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_MspInit+0x30>)
 800097c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000980:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x30>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x30>)
 800098c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	58024400 	.word	0x58024400

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 fa64 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM1_UP_IRQHandler+0x10>)
 8000a02:	f003 fbe4 	bl	80041ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400002c 	.word	0x2400002c

08000a10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a28:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <SystemInit+0xd0>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <SystemInit+0xd0>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <SystemInit+0xd4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 030f 	and.w	r3, r3, #15
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d807      	bhi.n	8000a54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <SystemInit+0xd4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 030f 	bic.w	r3, r3, #15
 8000a4c:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <SystemInit+0xd4>)
 8000a4e:	f043 0303 	orr.w	r3, r3, #3
 8000a52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <SystemInit+0xd8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <SystemInit+0xd8>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <SystemInit+0xd8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <SystemInit+0xd8>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4924      	ldr	r1, [pc, #144]	; (8000afc <SystemInit+0xd8>)
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <SystemInit+0xdc>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <SystemInit+0xd4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 030c 	and.w	r3, r3, #12
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <SystemInit+0xd4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f023 030f 	bic.w	r3, r3, #15
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <SystemInit+0xd4>)
 8000a88:	f043 0303 	orr.w	r3, r3, #3
 8000a8c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <SystemInit+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <SystemInit+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <SystemInit+0xd8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <SystemInit+0xd8>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <SystemInit+0xe0>)
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <SystemInit+0xd8>)
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <SystemInit+0xe4>)
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <SystemInit+0xd8>)
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <SystemInit+0xe8>)
 8000ab0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <SystemInit+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <SystemInit+0xd8>)
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <SystemInit+0xe8>)
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <SystemInit+0xd8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <SystemInit+0xd8>)
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <SystemInit+0xe8>)
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <SystemInit+0xd8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <SystemInit+0xd8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a09      	ldr	r2, [pc, #36]	; (8000afc <SystemInit+0xd8>)
 8000ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ada:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <SystemInit+0xd8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <SystemInit+0xec>)
 8000ae4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ae8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00
 8000af8:	52002000 	.word	0x52002000
 8000afc:	58024400 	.word	0x58024400
 8000b00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b04:	02020200 	.word	0x02020200
 8000b08:	01ff0000 	.word	0x01ff0000
 8000b0c:	01010280 	.word	0x01010280
 8000b10:	52004000 	.word	0x52004000

08000b14 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b34:	4a20      	ldr	r2, [pc, #128]	; (8000bb8 <MX_TIM1_Init+0xa4>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b3a:	f240 1217 	movw	r2, #279	; 0x117
 8000b3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b60:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b62:	f003 fadd 	bl	8004120 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f7ff fefc 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b7e:	f003 fc2d 	bl	80043dc <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b88:	f7ff feee 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b9e:	f003 fe81 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ba8:	f7ff fede 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2400002c 	.word	0x2400002c
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d116      	bne.n	8000bfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_TIM_Base_MspInit+0x4c>)
 8000be0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2019      	movs	r0, #25
 8000bf2:	f000 fa84 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 fa9b 	bl	8001132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40010000 	.word	0x40010000
 8000c08:	58024400 	.word	0x58024400

08000c0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <MX_USART3_UART_Init+0x94>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c54:	4811      	ldr	r0, [pc, #68]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c56:	f003 fed1 	bl	80049fc <HAL_UART_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c60:	f7ff fe82 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c68:	f004 ffdd 	bl	8005c26 <HAL_UARTEx_SetTxFifoThreshold>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c72:	f7ff fe79 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c7a:	f005 f812 	bl	8005ca2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c84:	f7ff fe70 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c8a:	f004 ff93 	bl	8005bb4 <HAL_UARTEx_DisableFifoMode>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c94:	f7ff fe68 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	24000078 	.word	0x24000078
 8000ca0:	40004800 	.word	0x40004800

08000ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0ba      	sub	sp, #232	; 0xe8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	22c0      	movs	r2, #192	; 0xc0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 f89d 	bl	8005e04 <memset>
  if(uartHandle->Instance==USART3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <HAL_UART_MspInit+0xc8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d146      	bne.n	8000d62 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd4:	f04f 0202 	mov.w	r2, #2
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fc38 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cf6:	f7ff fe37 	bl	8000968 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_UART_MspInit+0xcc>)
 8000cfc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d00:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d06:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d50:	2307      	movs	r3, #7
 8000d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_UART_MspInit+0xd0>)
 8000d5e:	f000 fa03 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d62:	bf00      	nop
 8000d64:	37e8      	adds	r7, #232	; 0xe8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004800 	.word	0x40004800
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020c00 	.word	0x58020c00

08000d78 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d8c:	f7ff fe4a 	bl	8000a24 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f005 f801 	bl	8005dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fd4d 	bl	8000858 <main>
  bx  lr
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000dc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dc8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dcc:	08005e74 	.word	0x08005e74
  ldr r2, =_sbss
 8000dd0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dd4:	24000110 	.word	0x24000110

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f980 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000de8:	f001 f9e4 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8000dec:	4602      	mov	r2, r0
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_Init+0x68>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	f003 030f 	and.w	r3, r3, #15
 8000df8:	4913      	ldr	r1, [pc, #76]	; (8000e48 <HAL_Init+0x6c>)
 8000dfa:	5ccb      	ldrb	r3, [r1, r3]
 8000dfc:	f003 031f 	and.w	r3, r3, #31
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_Init+0x68>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_Init+0x6c>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_Init+0x70>)
 8000e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <HAL_Init+0x74>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f814 	bl	8000e54 <HAL_InitTick>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e002      	b.n	8000e3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e36:	f7ff fd9d 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58024400 	.word	0x58024400
 8000e48:	08005e2c 	.word	0x08005e2c
 8000e4c:	24000004 	.word	0x24000004
 8000e50:	24000000 	.word	0x24000000

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_InitTick+0x60>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e021      	b.n	8000eac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_InitTick+0x64>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_InitTick+0x60>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f965 	bl	800114e <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x68>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2400000c 	.word	0x2400000c
 8000eb8:	24000000 	.word	0x24000000
 8000ebc:	24000008 	.word	0x24000008

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2400000c 	.word	0x2400000c
 8000ee4:	2400010c 	.word	0x2400010c

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2400010c 	.word	0x2400010c

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2400000c 	.word	0x2400000c

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	05fa0000 	.word	0x05fa0000

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff40 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff90 	bl	800103c <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5f 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff33 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffa4 	bl	80010a4 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001176:	4b89      	ldr	r3, [pc, #548]	; (800139c <HAL_GPIO_Init+0x234>)
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800117a:	e194      	b.n	80014a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8186 	beq.w	80014a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x44>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b03      	cmp	r3, #3
 8001218:	d017      	beq.n	800124a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d123      	bne.n	800129e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	69b9      	ldr	r1, [r7, #24]
 800129a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0203 	and.w	r2, r3, #3
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80e0 	beq.w	80014a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_GPIO_Init+0x238>)
 80012e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012e6:	4a2e      	ldr	r2, [pc, #184]	; (80013a0 <HAL_GPIO_Init+0x238>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_GPIO_Init+0x238>)
 80012f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <HAL_GPIO_Init+0x23c>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <HAL_GPIO_Init+0x240>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d052      	beq.n	80013d0 <HAL_GPIO_Init+0x268>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_GPIO_Init+0x244>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d031      	beq.n	8001396 <HAL_GPIO_Init+0x22e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_GPIO_Init+0x248>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x22a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_GPIO_Init+0x24c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_GPIO_Init+0x250>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <HAL_GPIO_Init+0x254>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <HAL_GPIO_Init+0x258>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x21a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <HAL_GPIO_Init+0x25c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x216>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_GPIO_Init+0x260>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x212>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_GPIO_Init+0x264>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x20e>
 8001372:	2309      	movs	r3, #9
 8001374:	e02d      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 8001376:	230a      	movs	r3, #10
 8001378:	e02b      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 800137a:	2308      	movs	r3, #8
 800137c:	e029      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 800137e:	2307      	movs	r3, #7
 8001380:	e027      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 8001382:	2306      	movs	r3, #6
 8001384:	e025      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 8001386:	2305      	movs	r3, #5
 8001388:	e023      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 800138a:	2304      	movs	r3, #4
 800138c:	e021      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 800138e:	2303      	movs	r3, #3
 8001390:	e01f      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 8001392:	2302      	movs	r3, #2
 8001394:	e01d      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 8001396:	2301      	movs	r3, #1
 8001398:	e01b      	b.n	80013d2 <HAL_GPIO_Init+0x26a>
 800139a:	bf00      	nop
 800139c:	58000080 	.word	0x58000080
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58000400 	.word	0x58000400
 80013a8:	58020000 	.word	0x58020000
 80013ac:	58020400 	.word	0x58020400
 80013b0:	58020800 	.word	0x58020800
 80013b4:	58020c00 	.word	0x58020c00
 80013b8:	58021000 	.word	0x58021000
 80013bc:	58021400 	.word	0x58021400
 80013c0:	58021800 	.word	0x58021800
 80013c4:	58021c00 	.word	0x58021c00
 80013c8:	58022000 	.word	0x58022000
 80013cc:	58022400 	.word	0x58022400
 80013d0:	2300      	movs	r3, #0
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	f002 0203 	and.w	r2, r2, #3
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	4093      	lsls	r3, r2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e2:	4938      	ldr	r1, [pc, #224]	; (80014c4 <HAL_GPIO_Init+0x35c>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f47f ae63 	bne.w	800117c <HAL_GPIO_Init+0x14>
  }
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3724      	adds	r7, #36	; 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58000400 	.word	0x58000400

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800150c:	887a      	ldrh	r2, [r7, #2]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	041a      	lsls	r2, r3, #16
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43d9      	mvns	r1, r3
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	400b      	ands	r3, r1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	2b06      	cmp	r3, #6
 8001542:	d00a      	beq.n	800155a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d001      	beq.n	8001556 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e040      	b.n	80015d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e03e      	b.n	80015d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001562:	491f      	ldr	r1, [pc, #124]	; (80015e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800156a:	f7ff fcbd 	bl	8000ee8 <HAL_GetTick>
 800156e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001570:	e009      	b.n	8001586 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001572:	f7ff fcb9 	bl	8000ee8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001580:	d901      	bls.n	8001586 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e028      	b.n	80015d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001592:	d1ee      	bne.n	8001572 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b1e      	cmp	r3, #30
 8001598:	d008      	beq.n	80015ac <HAL_PWREx_ConfigSupply+0x7c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b2e      	cmp	r3, #46	; 0x2e
 800159e:	d005      	beq.n	80015ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b1d      	cmp	r3, #29
 80015a4:	d002      	beq.n	80015ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b2d      	cmp	r3, #45	; 0x2d
 80015aa:	d114      	bne.n	80015d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015ac:	f7ff fc9c 	bl	8000ee8 <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015b2:	e009      	b.n	80015c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015b4:	f7ff fc98 	bl	8000ee8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c2:	d901      	bls.n	80015c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e007      	b.n	80015d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d1ee      	bne.n	80015b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	58024800 	.word	0x58024800

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	; 0x30
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f000 bc1f 	b.w	8001e36 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80b3 	beq.w	800176c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001606:	4b95      	ldr	r3, [pc, #596]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001610:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	2b10      	cmp	r3, #16
 800161a:	d007      	beq.n	800162c <HAL_RCC_OscConfig+0x48>
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	2b18      	cmp	r3, #24
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x64>
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d10d      	bne.n	8001648 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8098 	beq.w	800176a <HAL_RCC_OscConfig+0x186>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 8093 	bne.w	800176a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e3f6      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x7c>
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a81      	ldr	r2, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e058      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <HAL_RCC_OscConfig+0xaa>
 8001668:	4b7c      	ldr	r3, [pc, #496]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a7b      	ldr	r2, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b79      	ldr	r3, [pc, #484]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a78      	ldr	r2, [pc, #480]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800167a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a75      	ldr	r2, [pc, #468]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e041      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001696:	d112      	bne.n	80016be <HAL_RCC_OscConfig+0xda>
 8001698:	4b70      	ldr	r3, [pc, #448]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a6f      	ldr	r2, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800169e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b6d      	ldr	r3, [pc, #436]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6c      	ldr	r2, [pc, #432]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a69      	ldr	r2, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e029      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80016c6:	d112      	bne.n	80016ee <HAL_RCC_OscConfig+0x10a>
 80016c8:	4b64      	ldr	r3, [pc, #400]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a60      	ldr	r2, [pc, #384]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5d      	ldr	r2, [pc, #372]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e011      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
 80016ee:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5a      	ldr	r2, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a54      	ldr	r2, [pc, #336]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800170c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001710:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d013      	beq.n	8001742 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fbe5 	bl	8000ee8 <HAL_GetTick>
 800171e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001722:	f7ff fbe1 	bl	8000ee8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e380      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001734:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x13e>
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fbd1 	bl	8000ee8 <HAL_GetTick>
 8001746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174a:	f7ff fbcd 	bl	8000ee8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e36c      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175c:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x166>
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 808c 	beq.w	8001892 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001782:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1bc>
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	2b18      	cmp	r3, #24
 8001794:	d137      	bne.n	8001806 <HAL_RCC_OscConfig+0x222>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d132      	bne.n	8001806 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1d4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e33e      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 0219 	bic.w	r2, r3, #25
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4925      	ldr	r1, [pc, #148]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb8d 	bl	8000ee8 <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb89 	bl	8000ee8 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e328      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_OscConfig+0x278>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	4917      	ldr	r1, [pc, #92]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d028      	beq.n	8001860 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0219 	bic.w	r2, r3, #25
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4910      	ldr	r1, [pc, #64]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fb62 	bl	8000ee8 <HAL_GetTick>
 8001824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fb5e 	bl	8000ee8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e2fd      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_RCC_OscConfig+0x278>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	061b      	lsls	r3, r3, #24
 8001854:	4901      	ldr	r1, [pc, #4]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
 800185a:	e01a      	b.n	8001892 <HAL_RCC_OscConfig+0x2ae>
 800185c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001860:	4b97      	ldr	r3, [pc, #604]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a96      	ldr	r2, [pc, #600]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fb3c 	bl	8000ee8 <HAL_GetTick>
 8001870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff fb38 	bl	8000ee8 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e2d7      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001886:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d06a      	beq.n	8001974 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018a8:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d007      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2e0>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b18      	cmp	r3, #24
 80018b8:	d11b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x30e>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d116      	bne.n	80018f2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018c4:	4b7e      	ldr	r3, [pc, #504]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_OscConfig+0x2f8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e2ac      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	4975      	ldr	r1, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018f0:	e040      	b.n	8001974 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d023      	beq.n	8001942 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018fa:	4b71      	ldr	r3, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a70      	ldr	r2, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff faef 	bl	8000ee8 <HAL_GetTick>
 800190a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800190e:	f7ff faeb 	bl	8000ee8 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e28a      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001920:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800192c:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	4961      	ldr	r1, [pc, #388]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 800193c:	4313      	orrs	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
 8001940:	e018      	b.n	8001974 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001942:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a5e      	ldr	r2, [pc, #376]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff facb 	bl	8000ee8 <HAL_GetTick>
 8001952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001956:	f7ff fac7 	bl	8000ee8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e266      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001968:	4b55      	ldr	r3, [pc, #340]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d036      	beq.n	80019ee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d019      	beq.n	80019bc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 800198a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800198c:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff faa8 	bl	8000ee8 <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff faa4 	bl	8000ee8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e243      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ae:	4b44      	ldr	r3, [pc, #272]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80019b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x3b8>
 80019ba:	e018      	b.n	80019ee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019bc:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80019be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c0:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa8e 	bl	8000ee8 <HAL_GetTick>
 80019cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff fa8a 	bl	8000ee8 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e229      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 80019e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fa6b 	bl	8000ee8 <HAL_GetTick>
 8001a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a16:	f7ff fa67 	bl	8000ee8 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e206      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x432>
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fa51 	bl	8000ee8 <HAL_GetTick>
 8001a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a4a:	f7ff fa4d 	bl	8000ee8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1ec      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80af 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_RCC_OscConfig+0x4e0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_RCC_OscConfig+0x4e0>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a82:	f7ff fa31 	bl	8000ee8 <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff fa2d 	bl	8000ee8 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	; 0x64
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e1cc      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_OscConfig+0x4e0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4e4>
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a02      	ldr	r2, [pc, #8]	; (8001ac0 <HAL_RCC_OscConfig+0x4dc>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	e05b      	b.n	8001b76 <HAL_RCC_OscConfig+0x592>
 8001abe:	bf00      	nop
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	58024800 	.word	0x58024800
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x512>
 8001ad0:	4b9d      	ldr	r3, [pc, #628]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a9c      	ldr	r2, [pc, #624]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	4b9a      	ldr	r3, [pc, #616]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a99      	ldr	r2, [pc, #612]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	4b97      	ldr	r3, [pc, #604]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a96      	ldr	r2, [pc, #600]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001aee:	f023 0304 	bic.w	r3, r3, #4
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	e03f      	b.n	8001b76 <HAL_RCC_OscConfig+0x592>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d112      	bne.n	8001b24 <HAL_RCC_OscConfig+0x540>
 8001afe:	4b92      	ldr	r3, [pc, #584]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a91      	ldr	r2, [pc, #580]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	4b8f      	ldr	r3, [pc, #572]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a8e      	ldr	r2, [pc, #568]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a8b      	ldr	r2, [pc, #556]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	e028      	b.n	8001b76 <HAL_RCC_OscConfig+0x592>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b85      	cmp	r3, #133	; 0x85
 8001b2a:	d112      	bne.n	8001b52 <HAL_RCC_OscConfig+0x56e>
 8001b2c:	4b86      	ldr	r3, [pc, #536]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a85      	ldr	r2, [pc, #532]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	4b83      	ldr	r3, [pc, #524]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a82      	ldr	r2, [pc, #520]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e011      	b.n	8001b76 <HAL_RCC_OscConfig+0x592>
 8001b52:	4b7d      	ldr	r3, [pc, #500]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a7c      	ldr	r2, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	4b7a      	ldr	r3, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a79      	ldr	r2, [pc, #484]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a76      	ldr	r2, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f9b3 	bl	8000ee8 <HAL_GetTick>
 8001b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff f9af 	bl	8000ee8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e14c      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCC_OscConfig+0x5a2>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff f99d 	bl	8000ee8 <HAL_GetTick>
 8001bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f999 	bl	8000ee8 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e136      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bc8:	4b5f      	ldr	r3, [pc, #380]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 812b 	beq.w	8001e34 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bde:	4b5a      	ldr	r3, [pc, #360]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001be6:	2b18      	cmp	r3, #24
 8001be8:	f000 80bb 	beq.w	8001d62 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f040 8095 	bne.w	8001d20 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a53      	ldr	r2, [pc, #332]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f971 	bl	8000ee8 <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff f96d 	bl	8000ee8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e10c      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c1c:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c28:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_OscConfig+0x768>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	4942      	ldr	r1, [pc, #264]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	628b      	str	r3, [r1, #40]	; 0x28
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	3b01      	subs	r3, #1
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c72:	4935      	ldr	r1, [pc, #212]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c84:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_OscConfig+0x76c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	492d      	ldr	r1, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f023 020c 	bic.w	r2, r3, #12
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	4928      	ldr	r1, [pc, #160]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f023 0202 	bic.w	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4924      	ldr	r1, [pc, #144]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f8f6 	bl	8000ee8 <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff f8f2 	bl	8000ee8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e091      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x71c>
 8001d1e:	e089      	b.n	8001e34 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_RCC_OscConfig+0x764>)
 8001d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f8dc 	bl	8000ee8 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d32:	e00f      	b.n	8001d54 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff f8d8 	bl	8000ee8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d908      	bls.n	8001d54 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e077      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
 8001d46:	bf00      	nop
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	fffffc0c 	.word	0xfffffc0c
 8001d50:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e9      	bne.n	8001d34 <HAL_RCC_OscConfig+0x750>
 8001d60:	e068      	b.n	8001e34 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d031      	beq.n	8001dda <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d12a      	bne.n	8001dda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d122      	bne.n	8001dda <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d11a      	bne.n	8001dda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	0a5b      	lsrs	r3, r3, #9
 8001da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d111      	bne.n	8001dda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d108      	bne.n	8001dda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	0e1b      	lsrs	r3, r3, #24
 8001dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e02b      	b.n	8001e36 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001de8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d01f      	beq.n	8001e34 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e00:	f7ff f872 	bl	8000ee8 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e06:	bf00      	nop
 8001e08:	f7ff f86e 	bl	8000ee8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d0f9      	beq.n	8001e08 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_OscConfig+0x860>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e20:	00d2      	lsls	r2, r2, #3
 8001e22:	4907      	ldr	r1, [pc, #28]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_RCC_OscConfig+0x85c>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3730      	adds	r7, #48	; 0x30
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	58024400 	.word	0x58024400
 8001e44:	ffff0007 	.word	0xffff0007

08001e48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e19c      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d910      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b87      	ldr	r3, [pc, #540]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 020f 	bic.w	r2, r3, #15
 8001e72:	4985      	ldr	r1, [pc, #532]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b83      	ldr	r3, [pc, #524]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e184      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d908      	bls.n	8001eba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ea8:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	4975      	ldr	r1, [pc, #468]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	4b70      	ldr	r3, [pc, #448]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d908      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	496a      	ldr	r1, [pc, #424]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f04:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	495e      	ldr	r1, [pc, #376]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f32:	4b56      	ldr	r3, [pc, #344]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4953      	ldr	r1, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d908      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f023 020f 	bic.w	r2, r3, #15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4947      	ldr	r1, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d055      	beq.n	800202a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f7e:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4940      	ldr	r1, [pc, #256]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f98:	4b3c      	ldr	r3, [pc, #240]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d121      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0f6      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d115      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0ea      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0de      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d6      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4925      	ldr	r1, [pc, #148]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffa:	f7fe ff75 	bl	8000ee8 <HAL_GetTick>
 8001ffe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002000:	e00a      	b.n	8002018 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002002:	f7fe ff71 	bl	8000ee8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0be      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	429a      	cmp	r2, r3
 8002028:	d1eb      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d010      	beq.n	8002058 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	429a      	cmp	r2, r3
 8002044:	d208      	bcs.n	8002058 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f023 020f 	bic.w	r2, r3, #15
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8002054:	4313      	orrs	r3, r2
 8002056:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d214      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 020f 	bic.w	r2, r3, #15
 800206e:	4906      	ldr	r1, [pc, #24]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e086      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
 8002088:	52002000 	.word	0x52002000
 800208c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d208      	bcs.n	80020be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	4939      	ldr	r1, [pc, #228]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d208      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	492e      	ldr	r1, [pc, #184]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002104:	429a      	cmp	r2, r3
 8002106:	d208      	bcs.n	800211a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4922      	ldr	r1, [pc, #136]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002116:	4313      	orrs	r3, r2
 8002118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d208      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4917      	ldr	r1, [pc, #92]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002144:	4313      	orrs	r3, r2
 8002146:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002148:	f000 f834 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x35c>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_RCC_ClockConfig+0x35c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x360>)
 800217e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x364>)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x368>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fe62 	bl	8000e54 <HAL_InitTick>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	58024400 	.word	0x58024400
 80021a4:	08005e2c 	.word	0x08005e2c
 80021a8:	24000004 	.word	0x24000004
 80021ac:	24000000 	.word	0x24000000
 80021b0:	24000008 	.word	0x24000008

080021b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ba:	4bb3      	ldr	r3, [pc, #716]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c2:	2b18      	cmp	r3, #24
 80021c4:	f200 8155 	bhi.w	8002472 <HAL_RCC_GetSysClockFreq+0x2be>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	08002235 	.word	0x08002235
 80021d4:	08002473 	.word	0x08002473
 80021d8:	08002473 	.word	0x08002473
 80021dc:	08002473 	.word	0x08002473
 80021e0:	08002473 	.word	0x08002473
 80021e4:	08002473 	.word	0x08002473
 80021e8:	08002473 	.word	0x08002473
 80021ec:	08002473 	.word	0x08002473
 80021f0:	0800225b 	.word	0x0800225b
 80021f4:	08002473 	.word	0x08002473
 80021f8:	08002473 	.word	0x08002473
 80021fc:	08002473 	.word	0x08002473
 8002200:	08002473 	.word	0x08002473
 8002204:	08002473 	.word	0x08002473
 8002208:	08002473 	.word	0x08002473
 800220c:	08002473 	.word	0x08002473
 8002210:	08002261 	.word	0x08002261
 8002214:	08002473 	.word	0x08002473
 8002218:	08002473 	.word	0x08002473
 800221c:	08002473 	.word	0x08002473
 8002220:	08002473 	.word	0x08002473
 8002224:	08002473 	.word	0x08002473
 8002228:	08002473 	.word	0x08002473
 800222c:	08002473 	.word	0x08002473
 8002230:	08002267 	.word	0x08002267
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002234:	4b94      	ldr	r3, [pc, #592]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002240:	4b91      	ldr	r3, [pc, #580]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002252:	e111      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002254:	4b8d      	ldr	r3, [pc, #564]	; (800248c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002256:	61bb      	str	r3, [r7, #24]
      break;
 8002258:	e10e      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800225a:	4b8d      	ldr	r3, [pc, #564]	; (8002490 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800225c:	61bb      	str	r3, [r7, #24]
      break;
 800225e:	e10b      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002260:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002262:	61bb      	str	r3, [r7, #24]
      break;
 8002264:	e108      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002270:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800227c:	4b82      	ldr	r3, [pc, #520]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002286:	4b80      	ldr	r3, [pc, #512]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80e1 	beq.w	800246c <HAL_RCC_GetSysClockFreq+0x2b8>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	f000 8083 	beq.w	80023b8 <HAL_RCC_GetSysClockFreq+0x204>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	f200 80a1 	bhi.w	80023fc <HAL_RCC_GetSysClockFreq+0x248>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x114>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d056      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022c6:	e099      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022c8:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02d      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022d4:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	4a6b      	ldr	r2, [pc, #428]	; (800248c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800230e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002312:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002498 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800231a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800231e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800232e:	e087      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800249c <HAL_RCC_GetSysClockFreq+0x2e8>
 800233e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002342:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002352:	ed97 6a02 	vldr	s12, [r7, #8]
 8002356:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800235a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800235e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800236a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002372:	e065      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002386:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002396:	ed97 6a02 	vldr	s12, [r7, #8]
 800239a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800239e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023b6:	e043      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80024a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ca:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023da:	ed97 6a02 	vldr	s12, [r7, #8]
 80023de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002498 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023fa:	e021      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002406:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800240a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800241e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002422:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002498 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800242a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800242e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800243e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	0a5b      	lsrs	r3, r3, #9
 8002446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800244a:	3301      	adds	r3, #1
 800244c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002458:	edd7 6a07 	vldr	s13, [r7, #28]
 800245c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002464:	ee17 3a90 	vmov	r3, s15
 8002468:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800246a:	e005      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
      break;
 8002470:	e002      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002474:	61bb      	str	r3, [r7, #24]
      break;
 8002476:	bf00      	nop
  }

  return sysclockfreq;
 8002478:	69bb      	ldr	r3, [r7, #24]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	58024400 	.word	0x58024400
 800248c:	03d09000 	.word	0x03d09000
 8002490:	003d0900 	.word	0x003d0900
 8002494:	007a1200 	.word	0x007a1200
 8002498:	46000000 	.word	0x46000000
 800249c:	4c742400 	.word	0x4c742400
 80024a0:	4a742400 	.word	0x4a742400
 80024a4:	4af42400 	.word	0x4af42400

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80024ae:	f7ff fe81 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490f      	ldr	r1, [pc, #60]	; (80024fc <HAL_RCC_GetHCLKFreq+0x54>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_RCC_GetHCLKFreq+0x54>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_RCC_GetHCLKFreq+0x58>)
 80024e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RCC_GetHCLKFreq+0x58>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024400 	.word	0x58024400
 80024fc:	08005e2c 	.word	0x08005e2c
 8002500:	24000004 	.word	0x24000004
 8002504:	24000000 	.word	0x24000000

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800250c:	f7ff ffcc 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4904      	ldr	r1, [pc, #16]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	58024400 	.word	0x58024400
 8002530:	08005e2c 	.word	0x08005e2c

08002534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002538:	f7ff ffb6 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4904      	ldr	r1, [pc, #16]	; (800255c <HAL_RCC_GetPCLK2Freq+0x28>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	58024400 	.word	0x58024400
 800255c:	08005e2c 	.word	0x08005e2c

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002564:	b0c8      	sub	sp, #288	; 0x120
 8002566:	af00      	add	r7, sp, #0
 8002568:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800256c:	2300      	movs	r3, #0
 800256e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002572:	2300      	movs	r3, #0
 8002574:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002584:	2500      	movs	r5, #0
 8002586:	ea54 0305 	orrs.w	r3, r4, r5
 800258a:	d049      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800258c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002596:	d02f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002598:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800259c:	d828      	bhi.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800259e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a2:	d01a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a8:	d822      	bhi.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025b2:	d007      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025b4:	e01c      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b6:	4ba7      	ldr	r3, [pc, #668]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	4aa6      	ldr	r2, [pc, #664]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025c2:	e01a      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c8:	3308      	adds	r3, #8
 80025ca:	2102      	movs	r1, #2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 fc43 	bl	8003e58 <RCCEx_PLL2_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025d8:	e00f      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80025da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025de:	3328      	adds	r3, #40	; 0x28
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 fcea 	bl	8003fbc <RCCEx_PLL3_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025ee:	e004      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80025f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002602:	4b94      	ldr	r3, [pc, #592]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800260a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002610:	4a90      	ldr	r2, [pc, #576]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002612:	430b      	orrs	r3, r1
 8002614:	6513      	str	r3, [r2, #80]	; 0x50
 8002616:	e003      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800261c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800262c:	f04f 0900 	mov.w	r9, #0
 8002630:	ea58 0309 	orrs.w	r3, r8, r9
 8002634:	d047      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	2b04      	cmp	r3, #4
 800263e:	d82a      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002640:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	0800265d 	.word	0x0800265d
 800264c:	0800266b 	.word	0x0800266b
 8002650:	08002681 	.word	0x08002681
 8002654:	0800269f 	.word	0x0800269f
 8002658:	0800269f 	.word	0x0800269f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265c:	4b7d      	ldr	r3, [pc, #500]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	4a7c      	ldr	r2, [pc, #496]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002668:	e01a      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800266a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800266e:	3308      	adds	r3, #8
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fbf0 	bl	8003e58 <RCCEx_PLL2_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800267e:	e00f      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002684:	3328      	adds	r3, #40	; 0x28
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fc97 	bl	8003fbc <RCCEx_PLL3_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002694:	e004      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800269c:	e000      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800269e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	f023 0107 	bic.w	r1, r3, #7
 80026b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a67      	ldr	r2, [pc, #412]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6513      	str	r3, [r2, #80]	; 0x50
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80026c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80026d2:	f04f 0b00 	mov.w	fp, #0
 80026d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80026da:	d054      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80026dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026e6:	d036      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80026e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026ec:	d82f      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f2:	d032      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80026f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f8:	d829      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026fa:	2bc0      	cmp	r3, #192	; 0xc0
 80026fc:	d02f      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80026fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002700:	d825      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d018      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d821      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d007      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002712:	e01c      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002714:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	4a4e      	ldr	r2, [pc, #312]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800271a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002720:	e01e      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002726:	3308      	adds	r3, #8
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f001 fb94 	bl	8003e58 <RCCEx_PLL2_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002736:	e013      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800273c:	3328      	adds	r3, #40	; 0x28
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f001 fc3b 	bl	8003fbc <RCCEx_PLL3_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800274c:	e008      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002754:	e004      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002756:	bf00      	nop
 8002758:	e002      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800275e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	4a37      	ldr	r2, [pc, #220]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002778:	430b      	orrs	r3, r1
 800277a:	6513      	str	r3, [r2, #80]	; 0x50
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002782:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002792:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800279c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80027a0:	460b      	mov	r3, r1
 80027a2:	4313      	orrs	r3, r2
 80027a4:	d05c      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80027a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027b0:	d03b      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027b2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027b6:	d834      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027bc:	d037      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80027be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c2:	d82e      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027c8:	d033      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80027ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027ce:	d828      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d4:	d01a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d822      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80027e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e4:	d007      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80027e6:	e01c      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80027f4:	e01e      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027fa:	3308      	adds	r3, #8
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 fb2a 	bl	8003e58 <RCCEx_PLL2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800280a:	e013      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800280c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002810:	3328      	adds	r3, #40	; 0x28
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fbd1 	bl	8003fbc <RCCEx_PLL3_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002820:	e008      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002828:	e004      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	4a02      	ldr	r2, [pc, #8]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800284c:	430b      	orrs	r3, r1
 800284e:	6513      	str	r3, [r2, #80]	; 0x50
 8002850:	e006      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002852:	bf00      	nop
 8002854:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800285c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800286c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002876:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800287a:	460b      	mov	r3, r1
 800287c:	4313      	orrs	r3, r2
 800287e:	d03a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	2b30      	cmp	r3, #48	; 0x30
 8002888:	d01f      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800288a:	2b30      	cmp	r3, #48	; 0x30
 800288c:	d819      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800288e:	2b20      	cmp	r3, #32
 8002890:	d00c      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002892:	2b20      	cmp	r3, #32
 8002894:	d815      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d019      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800289a:	2b10      	cmp	r3, #16
 800289c:	d111      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289e:	4bae      	ldr	r3, [pc, #696]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	4aad      	ldr	r2, [pc, #692]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80028aa:	e011      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b0:	3308      	adds	r3, #8
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 facf 	bl	8003e58 <RCCEx_PLL2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80028c0:	e006      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028c8:	e002      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80028ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028d8:	4b9f      	ldr	r3, [pc, #636]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80028e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a9c      	ldr	r2, [pc, #624]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028e8:	430b      	orrs	r3, r1
 80028ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ec:	e003      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002902:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800290c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002910:	460b      	mov	r3, r1
 8002912:	4313      	orrs	r3, r2
 8002914:	d051      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800291a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002920:	d035      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002926:	d82e      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800292c:	d031      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800292e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002932:	d828      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d01a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800293a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293e:	d822      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002948:	d007      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800294a:	e01c      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800294c:	4b82      	ldr	r3, [pc, #520]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	4a81      	ldr	r2, [pc, #516]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002958:	e01c      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800295a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295e:	3308      	adds	r3, #8
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fa78 	bl	8003e58 <RCCEx_PLL2_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800296e:	e011      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002974:	3328      	adds	r3, #40	; 0x28
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fb1f 	bl	8003fbc <RCCEx_PLL3_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800298c:	e002      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002994:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800299c:	4b6e      	ldr	r3, [pc, #440]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800299e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80029a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029aa:	4a6b      	ldr	r2, [pc, #428]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6513      	str	r3, [r2, #80]	; 0x50
 80029b0:	e003      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80029c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80029d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80029d4:	460b      	mov	r3, r1
 80029d6:	4313      	orrs	r3, r2
 80029d8:	d053      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80029da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e4:	d033      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80029e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ea:	d82c      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80029ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029f0:	d02f      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80029f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029f6:	d826      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80029f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029fc:	d02b      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80029fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a02:	d820      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a08:	d012      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a0e:	d81a      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d022      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d115      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1e:	3308      	adds	r3, #8
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 fa18 	bl	8003e58 <RCCEx_PLL2_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a2e:	e015      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a34:	3328      	adds	r3, #40	; 0x28
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fabf 	bl	8003fbc <RCCEx_PLL3_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a44:	e00a      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a4c:	e006      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a4e:	bf00      	nop
 8002a50:	e004      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a52:	bf00      	nop
 8002a54:	e002      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a72:	4a39      	ldr	r2, [pc, #228]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6513      	str	r3, [r2, #80]	; 0x50
 8002a78:	e003      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a98:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	d060      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aaa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002aae:	d039      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002ab0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002ab4:	d832      	bhi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aba:	d035      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac0:	d82c      	bhi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d031      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d826      	bhi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ace:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ad2:	d02d      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ad8:	d820      	bhi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ade:	d012      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae4:	d81a      	bhi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d024      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aee:	d115      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af4:	3308      	adds	r3, #8
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f9ad 	bl	8003e58 <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b04:	e017      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b0a:	3328      	adds	r3, #40	; 0x28
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f001 fa54 	bl	8003fbc <RCCEx_PLL3_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b1a:	e00c      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b22:	e008      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b24:	bf00      	nop
 8002b26:	e006      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b28:	bf00      	nop
 8002b2a:	e004      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b2c:	bf00      	nop
 8002b2e:	e002      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10e      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b4e:	4a02      	ldr	r2, [pc, #8]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6593      	str	r3, [r2, #88]	; 0x58
 8002b54:	e006      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4313      	orrs	r3, r2
 8002b82:	d037      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8e:	d00e      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b94:	d816      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d018      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9e:	d111      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba0:	4bc4      	ldr	r3, [pc, #784]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	4ac3      	ldr	r2, [pc, #780]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002bac:	e00f      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f94e 	bl	8003e58 <RCCEx_PLL2_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002bc2:	e004      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bca:	e000      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bd6:	4bb7      	ldr	r3, [pc, #732]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be4:	4ab3      	ldr	r2, [pc, #716]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6513      	str	r3, [r2, #80]	; 0x50
 8002bea:	e003      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4313      	orrs	r3, r2
 8002c12:	d039      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d81c      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c61 	.word	0x08002c61
 8002c28:	08002c35 	.word	0x08002c35
 8002c2c:	08002c43 	.word	0x08002c43
 8002c30:	08002c61 	.word	0x08002c61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c34:	4b9f      	ldr	r3, [pc, #636]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	4a9e      	ldr	r2, [pc, #632]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c40:	e00f      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c46:	3308      	adds	r3, #8
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f904 	bl	8003e58 <RCCEx_PLL2_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c56:	e004      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c5e:	e000      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c6a:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f023 0103 	bic.w	r1, r3, #3
 8002c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	4a8e      	ldr	r2, [pc, #568]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7e:	e003      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f000 8099 	beq.w	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002caa:	4b83      	ldr	r3, [pc, #524]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a82      	ldr	r2, [pc, #520]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe f917 	bl	8000ee8 <HAL_GetTick>
 8002cba:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fe f912 	bl	8000ee8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d903      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd8:	4b77      	ldr	r3, [pc, #476]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ed      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d173      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cf8:	4053      	eors	r3, r2
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d015      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d02:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d0e:	4b69      	ldr	r3, [pc, #420]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a68      	ldr	r2, [pc, #416]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d1a:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d26:	4a63      	ldr	r2, [pc, #396]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3a:	d118      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f8d4 	bl	8000ee8 <HAL_GetTick>
 8002d40:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d44:	e00d      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe f8cf 	bl	8000ee8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d50:	1ad2      	subs	r2, r2, r3
 8002d52:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d903      	bls.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002d60:	e005      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d62:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0eb      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002d6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d129      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d86:	d10e      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d98:	091a      	lsrs	r2, r3, #4
 8002d9a:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	4a45      	ldr	r2, [pc, #276]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6113      	str	r3, [r2, #16]
 8002da4:	e005      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002db0:	6113      	str	r3, [r2, #16]
 8002db2:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002db4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc2:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc8:	e008      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002dd2:	e003      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f002 0301 	and.w	r3, r2, #1
 8002de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002df2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f000 8090 	beq.w	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e06:	2b28      	cmp	r3, #40	; 0x28
 8002e08:	d870      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002ef5 	.word	0x08002ef5
 8002e14:	08002eed 	.word	0x08002eed
 8002e18:	08002eed 	.word	0x08002eed
 8002e1c:	08002eed 	.word	0x08002eed
 8002e20:	08002eed 	.word	0x08002eed
 8002e24:	08002eed 	.word	0x08002eed
 8002e28:	08002eed 	.word	0x08002eed
 8002e2c:	08002eed 	.word	0x08002eed
 8002e30:	08002ec1 	.word	0x08002ec1
 8002e34:	08002eed 	.word	0x08002eed
 8002e38:	08002eed 	.word	0x08002eed
 8002e3c:	08002eed 	.word	0x08002eed
 8002e40:	08002eed 	.word	0x08002eed
 8002e44:	08002eed 	.word	0x08002eed
 8002e48:	08002eed 	.word	0x08002eed
 8002e4c:	08002eed 	.word	0x08002eed
 8002e50:	08002ed7 	.word	0x08002ed7
 8002e54:	08002eed 	.word	0x08002eed
 8002e58:	08002eed 	.word	0x08002eed
 8002e5c:	08002eed 	.word	0x08002eed
 8002e60:	08002eed 	.word	0x08002eed
 8002e64:	08002eed 	.word	0x08002eed
 8002e68:	08002eed 	.word	0x08002eed
 8002e6c:	08002eed 	.word	0x08002eed
 8002e70:	08002ef5 	.word	0x08002ef5
 8002e74:	08002eed 	.word	0x08002eed
 8002e78:	08002eed 	.word	0x08002eed
 8002e7c:	08002eed 	.word	0x08002eed
 8002e80:	08002eed 	.word	0x08002eed
 8002e84:	08002eed 	.word	0x08002eed
 8002e88:	08002eed 	.word	0x08002eed
 8002e8c:	08002eed 	.word	0x08002eed
 8002e90:	08002ef5 	.word	0x08002ef5
 8002e94:	08002eed 	.word	0x08002eed
 8002e98:	08002eed 	.word	0x08002eed
 8002e9c:	08002eed 	.word	0x08002eed
 8002ea0:	08002eed 	.word	0x08002eed
 8002ea4:	08002eed 	.word	0x08002eed
 8002ea8:	08002eed 	.word	0x08002eed
 8002eac:	08002eed 	.word	0x08002eed
 8002eb0:	08002ef5 	.word	0x08002ef5
 8002eb4:	58024400 	.word	0x58024400
 8002eb8:	58024800 	.word	0x58024800
 8002ebc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 ffc5 	bl	8003e58 <RCCEx_PLL2_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ed4:	e00f      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eda:	3328      	adds	r3, #40	; 0x28
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 f86c 	bl	8003fbc <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eea:	e004      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002efe:	4bc0      	ldr	r3, [pc, #768]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0e:	4abc      	ldr	r2, [pc, #752]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6553      	str	r3, [r2, #84]	; 0x54
 8002f14:	e003      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f002 0302 	and.w	r3, r2, #2
 8002f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f34:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	d043      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d824      	bhi.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f9d 	.word	0x08002f9d
 8002f54:	08002f69 	.word	0x08002f69
 8002f58:	08002f7f 	.word	0x08002f7f
 8002f5c:	08002f9d 	.word	0x08002f9d
 8002f60:	08002f9d 	.word	0x08002f9d
 8002f64:	08002f9d 	.word	0x08002f9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 ff71 	bl	8003e58 <RCCEx_PLL2_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f7c:	e00f      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f82:	3328      	adds	r3, #40	; 0x28
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 f818 	bl	8003fbc <RCCEx_PLL3_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f92:	e004      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fa6:	4b96      	ldr	r3, [pc, #600]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f023 0107 	bic.w	r1, r3, #7
 8002fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb6:	4a92      	ldr	r2, [pc, #584]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6553      	str	r3, [r2, #84]	; 0x54
 8002fbc:	e003      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fc2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f002 0304 	and.w	r3, r2, #4
 8002fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fdc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	d043      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d824      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	08003045 	.word	0x08003045
 8002ffc:	08003011 	.word	0x08003011
 8003000:	08003027 	.word	0x08003027
 8003004:	08003045 	.word	0x08003045
 8003008:	08003045 	.word	0x08003045
 800300c:	08003045 	.word	0x08003045
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003014:	3308      	adds	r3, #8
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f000 ff1d 	bl	8003e58 <RCCEx_PLL2_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003024:	e00f      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302a:	3328      	adds	r3, #40	; 0x28
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f000 ffc4 	bl	8003fbc <RCCEx_PLL3_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800303a:	e004      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003042:	e000      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003046:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10b      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	f023 0107 	bic.w	r1, r3, #7
 8003056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800305e:	4a68      	ldr	r2, [pc, #416]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003060:	430b      	orrs	r3, r1
 8003062:	6593      	str	r3, [r2, #88]	; 0x58
 8003064:	e003      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003066:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800306a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f002 0320 	and.w	r3, r2, #32
 800307a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003088:	460b      	mov	r3, r1
 800308a:	4313      	orrs	r3, r2
 800308c:	d055      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800308e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309a:	d033      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800309c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a0:	d82c      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d02f      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d826      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030b2:	d02b      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80030b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030b8:	d820      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030be:	d012      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80030c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c4:	d81a      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d022      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80030ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ce:	d115      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d4:	3308      	adds	r3, #8
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 febd 	bl	8003e58 <RCCEx_PLL2_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030e4:	e015      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ea:	3328      	adds	r3, #40	; 0x28
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 ff64 	bl	8003fbc <RCCEx_PLL3_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030fa:	e00a      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003102:	e006      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003104:	bf00      	nop
 8003106:	e004      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003108:	bf00      	nop
 800310a:	e002      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003112:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312a:	4a35      	ldr	r2, [pc, #212]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800312c:	430b      	orrs	r3, r1
 800312e:	6553      	str	r3, [r2, #84]	; 0x54
 8003130:	e003      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003132:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003136:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800313a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003150:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003154:	460b      	mov	r3, r1
 8003156:	4313      	orrs	r3, r2
 8003158:	d058      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800315a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003162:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003166:	d033      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003168:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800316c:	d82c      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800316e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003172:	d02f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d826      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800317a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800317e:	d02b      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003180:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003184:	d820      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318a:	d012      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800318c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003190:	d81a      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d022      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d115      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800319c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a0:	3308      	adds	r3, #8
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fe57 	bl	8003e58 <RCCEx_PLL2_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031b0:	e015      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b6:	3328      	adds	r3, #40	; 0x28
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fefe 	bl	8003fbc <RCCEx_PLL3_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031c6:	e00a      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031ce:	e006      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031d0:	bf00      	nop
 80031d2:	e004      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031d4:	bf00      	nop
 80031d6:	e002      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031d8:	bf00      	nop
 80031da:	e000      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80031dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10e      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80031ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031f6:	4a02      	ldr	r2, [pc, #8]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6593      	str	r3, [r2, #88]	; 0x58
 80031fc:	e006      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003204:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003208:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800320c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003222:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003226:	460b      	mov	r3, r1
 8003228:	4313      	orrs	r3, r2
 800322a:	d055      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800322c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003230:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003234:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003238:	d033      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800323a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800323e:	d82c      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003244:	d02f      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324a:	d826      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800324c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003250:	d02b      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003252:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003256:	d820      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325c:	d012      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800325e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003262:	d81a      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d022      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326c:	d115      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800326e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003272:	3308      	adds	r3, #8
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fdee 	bl	8003e58 <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003282:	e015      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003288:	3328      	adds	r3, #40	; 0x28
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fe95 	bl	8003fbc <RCCEx_PLL3_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032a2:	bf00      	nop
 80032a4:	e004      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032b8:	4ba1      	ldr	r3, [pc, #644]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80032c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032c8:	4a9d      	ldr	r2, [pc, #628]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ca:	430b      	orrs	r3, r1
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
 80032ce:	e003      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f002 0308 	and.w	r3, r2, #8
 80032e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80032f2:	460b      	mov	r3, r1
 80032f4:	4313      	orrs	r3, r2
 80032f6:	d01e      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330a:	3328      	adds	r3, #40	; 0x28
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fe54 	bl	8003fbc <RCCEx_PLL3_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003320:	4b87      	ldr	r3, [pc, #540]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003330:	4a83      	ldr	r2, [pc, #524]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003332:	430b      	orrs	r3, r1
 8003334:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f002 0310 	and.w	r3, r2, #16
 8003342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003346:	2300      	movs	r3, #0
 8003348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800334c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003350:	460b      	mov	r3, r1
 8003352:	4313      	orrs	r3, r2
 8003354:	d01e      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003362:	d10c      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003368:	3328      	adds	r3, #40	; 0x28
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fe25 	bl	8003fbc <RCCEx_PLL3_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800337e:	4b70      	ldr	r3, [pc, #448]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800338e:	4a6c      	ldr	r2, [pc, #432]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003390:	430b      	orrs	r3, r1
 8003392:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80033a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033a4:	2300      	movs	r3, #0
 80033a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80033ae:	460b      	mov	r3, r1
 80033b0:	4313      	orrs	r3, r2
 80033b2:	d03e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80033b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c0:	d022      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80033c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c6:	d81b      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d00b      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80033d2:	e015      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d8:	3308      	adds	r3, #8
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd3b 	bl	8003e58 <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033e8:	e00f      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ee:	3328      	adds	r3, #40	; 0x28
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fde2 	bl	8003fbc <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033fe:	e004      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003412:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800341a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003422:	4a47      	ldr	r2, [pc, #284]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003424:	430b      	orrs	r3, r1
 8003426:	6593      	str	r3, [r2, #88]	; 0x58
 8003428:	e003      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800342e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800343e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003440:	2300      	movs	r3, #0
 8003442:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003444:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d03b      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800344e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800345a:	d01f      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800345c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003460:	d818      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003466:	d003      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800346c:	d007      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800346e:	e011      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	4a32      	ldr	r2, [pc, #200]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800347c:	e00f      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800347e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003482:	3328      	adds	r3, #40	; 0x28
 8003484:	2101      	movs	r1, #1
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fd98 	bl	8003fbc <RCCEx_PLL3_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003492:	e004      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800349c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6553      	str	r3, [r2, #84]	; 0x54
 80034bc:	e003      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80034c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80034d2:	673b      	str	r3, [r7, #112]	; 0x70
 80034d4:	2300      	movs	r3, #0
 80034d6:	677b      	str	r3, [r7, #116]	; 0x74
 80034d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80034dc:	460b      	mov	r3, r1
 80034de:	4313      	orrs	r3, r2
 80034e0:	d034      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d007      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80034f2:	e011      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4a11      	ldr	r2, [pc, #68]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003500:	e00e      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003506:	3308      	adds	r3, #8
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fca4 	bl	8003e58 <RCCEx_PLL2_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003516:	e003      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800351e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003520:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	4a02      	ldr	r2, [pc, #8]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003538:	430b      	orrs	r3, r1
 800353a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800353c:	e006      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003548:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003558:	66bb      	str	r3, [r7, #104]	; 0x68
 800355a:	2300      	movs	r3, #0
 800355c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800355e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d00c      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356c:	3328      	adds	r3, #40	; 0x28
 800356e:	2102      	movs	r1, #2
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fd23 	bl	8003fbc <RCCEx_PLL3_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800358e:	663b      	str	r3, [r7, #96]	; 0x60
 8003590:	2300      	movs	r3, #0
 8003592:	667b      	str	r3, [r7, #100]	; 0x64
 8003594:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003598:	460b      	mov	r3, r1
 800359a:	4313      	orrs	r3, r2
 800359c:	d038      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800359e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035aa:	d018      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80035ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b0:	d811      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d014      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d80b      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d011      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c6:	d106      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c8:	4bc3      	ldr	r3, [pc, #780]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4ac2      	ldr	r2, [pc, #776]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035dc:	e004      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80035e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035f0:	4bb9      	ldr	r3, [pc, #740]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	4ab5      	ldr	r2, [pc, #724]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003602:	430b      	orrs	r3, r1
 8003604:	6553      	str	r3, [r2, #84]	; 0x54
 8003606:	e003      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800360c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800361c:	65bb      	str	r3, [r7, #88]	; 0x58
 800361e:	2300      	movs	r3, #0
 8003620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003622:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800362c:	4baa      	ldr	r3, [pc, #680]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363a:	4aa7      	ldr	r2, [pc, #668]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800363c:	430b      	orrs	r3, r1
 800363e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800364c:	653b      	str	r3, [r7, #80]	; 0x50
 800364e:	2300      	movs	r3, #0
 8003650:	657b      	str	r3, [r7, #84]	; 0x54
 8003652:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003656:	460b      	mov	r3, r1
 8003658:	4313      	orrs	r3, r2
 800365a:	d009      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800365c:	4b9e      	ldr	r3, [pc, #632]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a9b      	ldr	r2, [pc, #620]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800367c:	64bb      	str	r3, [r7, #72]	; 0x48
 800367e:	2300      	movs	r3, #0
 8003680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003682:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800368c:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369a:	4a8f      	ldr	r2, [pc, #572]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
 80036ae:	2300      	movs	r3, #0
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
 80036b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80036b6:	460b      	mov	r3, r1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036bc:	4b86      	ldr	r3, [pc, #536]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4a85      	ldr	r2, [pc, #532]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036c6:	6113      	str	r3, [r2, #16]
 80036c8:	4b83      	ldr	r3, [pc, #524]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036ca:	6919      	ldr	r1, [r3, #16]
 80036cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036d4:	4a80      	ldr	r2, [pc, #512]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036d6:	430b      	orrs	r3, r1
 80036d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e8:	2300      	movs	r3, #0
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80036f0:	460b      	mov	r3, r1
 80036f2:	4313      	orrs	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036f6:	4b78      	ldr	r3, [pc, #480]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80036fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	4a74      	ldr	r2, [pc, #464]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003706:	430b      	orrs	r3, r1
 8003708:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800370a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
 8003718:	2300      	movs	r3, #0
 800371a:	637b      	str	r3, [r7, #52]	; 0x34
 800371c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003726:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800372e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	4a68      	ldr	r2, [pc, #416]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800373c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	2100      	movs	r1, #0
 8003746:	62b9      	str	r1, [r7, #40]	; 0x28
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d011      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	3308      	adds	r3, #8
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fb79 	bl	8003e58 <RCCEx_PLL2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800376c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003778:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800377c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	2100      	movs	r1, #0
 8003786:	6239      	str	r1, [r7, #32]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
 800378e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	d011      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379c:	3308      	adds	r3, #8
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fb59 	bl	8003e58 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80037bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	2100      	movs	r1, #0
 80037c6:	61b9      	str	r1, [r7, #24]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037d2:	460b      	mov	r3, r1
 80037d4:	4313      	orrs	r3, r2
 80037d6:	d011      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037dc:	3308      	adds	r3, #8
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fb39 	bl	8003e58 <RCCEx_PLL2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	2100      	movs	r1, #0
 8003806:	6139      	str	r1, [r7, #16]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d011      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381c:	3328      	adds	r3, #40	; 0x28
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fbcb 	bl	8003fbc <RCCEx_PLL3_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800382c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003838:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	2100      	movs	r1, #0
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d011      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800385c:	3328      	adds	r3, #40	; 0x28
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fbab 	bl	8003fbc <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800386c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003878:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	2100      	movs	r1, #0
 8003886:	6039      	str	r1, [r7, #0]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	d011      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389c:	3328      	adds	r3, #40	; 0x28
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fb8b 	bl	8003fbc <RCCEx_PLL3_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80038bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	58024400 	.word	0x58024400

080038dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80038e0:	f7fe fde2 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4904      	ldr	r1, [pc, #16]	; (8003904 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	58024400 	.word	0x58024400
 8003904:	08005e2c 	.word	0x08005e2c

08003908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003910:	4ba1      	ldr	r3, [pc, #644]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800391a:	4b9f      	ldr	r3, [pc, #636]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	0b1b      	lsrs	r3, r3, #12
 8003920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003924:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003926:	4b9c      	ldr	r3, [pc, #624]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003932:	4b99      	ldr	r3, [pc, #612]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8111 	beq.w	8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b02      	cmp	r3, #2
 800395a:	f000 8083 	beq.w	8003a64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b02      	cmp	r3, #2
 8003962:	f200 80a1 	bhi.w	8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d056      	beq.n	8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003972:	e099      	b.n	8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003974:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02d      	beq.n	80039dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003980:	4b85      	ldr	r3, [pc, #532]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	08db      	lsrs	r3, r3, #3
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	4a84      	ldr	r2, [pc, #528]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039aa:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80039be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80039da:	e087      	b.n	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ee:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a1e:	e065      	b.n	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b59      	ldr	r3, [pc, #356]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a62:	e043      	b.n	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa6:	e021      	b.n	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ace:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	0a5b      	lsrs	r3, r3, #9
 8003af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b12:	ee17 2a90 	vmov	r2, s15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b40:	ee17 2a90 	vmov	r2, s15
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	0e1b      	lsrs	r3, r3, #24
 8003b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6e:	ee17 2a90 	vmov	r2, s15
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b76:	e008      	b.n	8003b8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	03d09000 	.word	0x03d09000
 8003ba0:	46000000 	.word	0x46000000
 8003ba4:	4c742400 	.word	0x4c742400
 8003ba8:	4a742400 	.word	0x4a742400
 8003bac:	4af42400 	.word	0x4af42400

08003bb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bb8:	4ba1      	ldr	r3, [pc, #644]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003bc2:	4b9f      	ldr	r3, [pc, #636]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	0d1b      	lsrs	r3, r3, #20
 8003bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003bce:	4b9c      	ldr	r3, [pc, #624]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003bda:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	08db      	lsrs	r3, r3, #3
 8003be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8111 	beq.w	8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f000 8083 	beq.w	8003d0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	f200 80a1 	bhi.w	8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d056      	beq.n	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c1a:	e099      	b.n	8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c1c:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d02d      	beq.n	8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c28:	4b85      	ldr	r3, [pc, #532]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	08db      	lsrs	r3, r3, #3
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	4a84      	ldr	r2, [pc, #528]	; (8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	ee07 3a90 	vmov	s15, r3
 8003c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c82:	e087      	b.n	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c96:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003caa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cc6:	e065      	b.n	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cda:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d0a:	e043      	b.n	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1e:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d4e:	e021      	b.n	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	0a5b      	lsrs	r3, r3, #9
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dba:	ee17 2a90 	vmov	r2, s15
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de8:	ee17 2a90 	vmov	r2, s15
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e16:	ee17 2a90 	vmov	r2, s15
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e1e:	e008      	b.n	8003e32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
}
 8003e32:	bf00      	nop
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	58024400 	.word	0x58024400
 8003e44:	03d09000 	.word	0x03d09000
 8003e48:	46000000 	.word	0x46000000
 8003e4c:	4c742400 	.word	0x4c742400
 8003e50:	4a742400 	.word	0x4a742400
 8003e54:	4af42400 	.word	0x4af42400

08003e58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e66:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d101      	bne.n	8003e76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e099      	b.n	8003faa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e76:	4b4f      	ldr	r3, [pc, #316]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4e      	ldr	r2, [pc, #312]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fd f831 	bl	8000ee8 <HAL_GetTick>
 8003e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e8a:	f7fd f82d 	bl	8000ee8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e086      	b.n	8003faa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e9c:	4b45      	ldr	r3, [pc, #276]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ea8:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	493f      	ldr	r1, [pc, #252]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	628b      	str	r3, [r1, #40]	; 0x28
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	025b      	lsls	r3, r3, #9
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eec:	4931      	ldr	r1, [pc, #196]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ef2:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	492d      	ldr	r1, [pc, #180]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f023 0220 	bic.w	r2, r3, #32
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	4928      	ldr	r1, [pc, #160]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f16:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
 8003f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f22:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <RCCEx_PLL2_Config+0x160>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	69d2      	ldr	r2, [r2, #28]
 8003f2e:	00d2      	lsls	r2, r2, #3
 8003f30:	4920      	ldr	r1, [pc, #128]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f36:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	f043 0310 	orr.w	r3, r3, #16
 8003f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f54:	e00f      	b.n	8003f76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d106      	bne.n	8003f6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f68:	e005      	b.n	8003f76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a11      	ldr	r2, [pc, #68]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fc ffb1 	bl	8000ee8 <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f88:	e008      	b.n	8003f9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f8a:	f7fc ffad 	bl	8000ee8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e006      	b.n	8003faa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	ffff0007 	.word	0xffff0007

08003fbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fca:	4b53      	ldr	r3, [pc, #332]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d101      	bne.n	8003fda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e099      	b.n	800410e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fda:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4e      	ldr	r2, [pc, #312]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe6:	f7fc ff7f 	bl	8000ee8 <HAL_GetTick>
 8003fea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fec:	e008      	b.n	8004000 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fee:	f7fc ff7b 	bl	8000ee8 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e086      	b.n	800410e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004000:	4b45      	ldr	r3, [pc, #276]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800400c:	4b42      	ldr	r3, [pc, #264]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	051b      	lsls	r3, r3, #20
 800401a:	493f      	ldr	r1, [pc, #252]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 800401c:	4313      	orrs	r3, r2
 800401e:	628b      	str	r3, [r1, #40]	; 0x28
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	3b01      	subs	r3, #1
 8004026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	3b01      	subs	r3, #1
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	b29b      	uxth	r3, r3
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	3b01      	subs	r3, #1
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	3b01      	subs	r3, #1
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004050:	4931      	ldr	r1, [pc, #196]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004056:	4b30      	ldr	r3, [pc, #192]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	492d      	ldr	r1, [pc, #180]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	4928      	ldr	r1, [pc, #160]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <RCCEx_PLL3_Config+0x160>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	69d2      	ldr	r2, [r2, #28]
 8004092:	00d2      	lsls	r2, r2, #3
 8004094:	4920      	ldr	r1, [pc, #128]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004096:	4313      	orrs	r3, r2
 8004098:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800409a:	4b1f      	ldr	r3, [pc, #124]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040b8:	e00f      	b.n	80040da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040c0:	4b15      	ldr	r3, [pc, #84]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040cc:	e005      	b.n	80040da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	4a11      	ldr	r2, [pc, #68]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e6:	f7fc feff 	bl	8000ee8 <HAL_GetTick>
 80040ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040ec:	e008      	b.n	8004100 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ee:	f7fc fefb 	bl	8000ee8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e006      	b.n	800410e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <RCCEx_PLL3_Config+0x15c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
 800411c:	ffff0007 	.word	0xffff0007

08004120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e049      	b.n	80041c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc fd38 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 fa5c 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01b      	beq.n	8004232 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0202 	mvn.w	r2, #2
 8004202:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f9e1 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 800421e:	e005      	b.n	800422c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f9d3 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9e4 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01b      	beq.n	800427e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f06f 0204 	mvn.w	r2, #4
 800424e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9bb 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 800426a:	e005      	b.n	8004278 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f9ad 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9be 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01b      	beq.n	80042ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f06f 0208 	mvn.w	r2, #8
 800429a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f995 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 80042b6:	e005      	b.n	80042c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f987 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f998 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01b      	beq.n	8004316 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0210 	mvn.w	r2, #16
 80042e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2208      	movs	r2, #8
 80042ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f96f 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 8004302:	e005      	b.n	8004310 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f961 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f972 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0201 	mvn.w	r2, #1
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fc fb6b 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fb36 	bl	80049d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fb2e 	bl	80049e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f92c 	bl	8004608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0220 	mvn.w	r2, #32
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 faf6 	bl	80049c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_TIM_ConfigClockSource+0x1c>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e0dc      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x1d6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800441e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a64      	ldr	r2, [pc, #400]	; (80045c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f000 80a9 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 8004434:	4a62      	ldr	r2, [pc, #392]	; (80045c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f200 80ae 	bhi.w	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 800443c:	4a61      	ldr	r2, [pc, #388]	; (80045c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f000 80a1 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 8004444:	4a5f      	ldr	r2, [pc, #380]	; (80045c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	f200 80a6 	bhi.w	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 800444c:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800444e:	4293      	cmp	r3, r2
 8004450:	f000 8099 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 8004454:	4a5c      	ldr	r2, [pc, #368]	; (80045c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f200 809e 	bhi.w	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 800445c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004460:	f000 8091 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 8004464:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004468:	f200 8096 	bhi.w	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 800446c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004470:	f000 8089 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 8004474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004478:	f200 808e 	bhi.w	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004480:	d03e      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0x124>
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004486:	f200 8087 	bhi.w	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	f000 8086 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1c2>
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d87f      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 8004498:	2b70      	cmp	r3, #112	; 0x70
 800449a:	d01a      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0xf6>
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d87b      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 80044a0:	2b60      	cmp	r3, #96	; 0x60
 80044a2:	d050      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x16a>
 80044a4:	2b60      	cmp	r3, #96	; 0x60
 80044a6:	d877      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d03c      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x14a>
 80044ac:	2b50      	cmp	r3, #80	; 0x50
 80044ae:	d873      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d058      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x18a>
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d86f      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d064      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	d86b      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d060      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d867      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d05c      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d05a      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x1aa>
 80044d0:	e062      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6899      	ldr	r1, [r3, #8]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f000 f9bf 	bl	8004864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	609a      	str	r2, [r3, #8]
      break;
 80044fe:	e04f      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6899      	ldr	r1, [r3, #8]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f000 f9a8 	bl	8004864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004522:	609a      	str	r2, [r3, #8]
      break;
 8004524:	e03c      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	461a      	mov	r2, r3
 8004534:	f000 f918 	bl	8004768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2150      	movs	r1, #80	; 0x50
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f972 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 8004544:	e02c      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	f000 f937 	bl	80047c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2160      	movs	r1, #96	; 0x60
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f962 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 8004564:	e01c      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	461a      	mov	r2, r3
 8004574:	f000 f8f8 	bl	8004768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f952 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 8004584:	e00c      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f000 f949 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 8004596:	e003      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      break;
 800459c:	e000      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800459e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	ffceff88 	.word	0xffceff88
 80045c0:	00100040 	.word	0x00100040
 80045c4:	00100030 	.word	0x00100030
 80045c8:	00100020 	.word	0x00100020

080045cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a46      	ldr	r2, [pc, #280]	; (8004748 <TIM_Base_SetConfig+0x12c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d00f      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a43      	ldr	r2, [pc, #268]	; (800474c <TIM_Base_SetConfig+0x130>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00b      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a42      	ldr	r2, [pc, #264]	; (8004750 <TIM_Base_SetConfig+0x134>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a41      	ldr	r2, [pc, #260]	; (8004754 <TIM_Base_SetConfig+0x138>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d003      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a40      	ldr	r2, [pc, #256]	; (8004758 <TIM_Base_SetConfig+0x13c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d108      	bne.n	800466e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a35      	ldr	r2, [pc, #212]	; (8004748 <TIM_Base_SetConfig+0x12c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d01b      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a32      	ldr	r2, [pc, #200]	; (800474c <TIM_Base_SetConfig+0x130>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d017      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a31      	ldr	r2, [pc, #196]	; (8004750 <TIM_Base_SetConfig+0x134>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a30      	ldr	r2, [pc, #192]	; (8004754 <TIM_Base_SetConfig+0x138>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00f      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a2f      	ldr	r2, [pc, #188]	; (8004758 <TIM_Base_SetConfig+0x13c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2e      	ldr	r2, [pc, #184]	; (800475c <TIM_Base_SetConfig+0x140>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <TIM_Base_SetConfig+0x144>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <TIM_Base_SetConfig+0x148>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a16      	ldr	r2, [pc, #88]	; (8004748 <TIM_Base_SetConfig+0x12c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00f      	beq.n	8004714 <TIM_Base_SetConfig+0xf8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <TIM_Base_SetConfig+0x13c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_Base_SetConfig+0xf8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a17      	ldr	r2, [pc, #92]	; (800475c <TIM_Base_SetConfig+0x140>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_Base_SetConfig+0xf8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a16      	ldr	r2, [pc, #88]	; (8004760 <TIM_Base_SetConfig+0x144>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0xf8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <TIM_Base_SetConfig+0x148>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d103      	bne.n	800471c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f023 0201 	bic.w	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]
  }
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800

08004768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 030a 	bic.w	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b087      	sub	sp, #28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f023 0210 	bic.w	r2, r3, #16
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004802:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <TIM_ITRx_SetConfig+0x38>)
 800483c:	4013      	ands	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	f043 0307 	orr.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	609a      	str	r2, [r3, #8]
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	ffcfff8f 	.word	0xffcfff8f

08004864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	431a      	orrs	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e06d      	b.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d022      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492e:	d01d      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d018      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d009      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a15      	ldr	r2, [pc, #84]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10c      	bne.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40001800 	.word	0x40001800
 80049bc:	40014000 	.word	0x40014000

080049c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e042      	b.n	8004a94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fc f93f 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2224      	movs	r2, #36	; 0x24
 8004a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fe94 	bl	8005774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f825 	bl	8004a9c <UART_SetConfig>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e01b      	b.n	8004a94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 ff13 	bl	80058b8 <UART_CheckIdleState>
 8004a92:	4603      	mov	r3, r0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa0:	b092      	sub	sp, #72	; 0x48
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4bbe      	ldr	r3, [pc, #760]	; (8004dc4 <UART_SetConfig+0x328>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4ab3      	ldr	r2, [pc, #716]	; (8004dc8 <UART_SetConfig+0x32c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b04:	4313      	orrs	r3, r2
 8004b06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	4baf      	ldr	r3, [pc, #700]	; (8004dcc <UART_SetConfig+0x330>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f023 010f 	bic.w	r1, r3, #15
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4aa6      	ldr	r2, [pc, #664]	; (8004dd0 <UART_SetConfig+0x334>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d177      	bne.n	8004c2c <UART_SetConfig+0x190>
 8004b3c:	4ba5      	ldr	r3, [pc, #660]	; (8004dd4 <UART_SetConfig+0x338>)
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b44:	2b28      	cmp	r3, #40	; 0x28
 8004b46:	d86d      	bhi.n	8004c24 <UART_SetConfig+0x188>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0xb4>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004bf5 	.word	0x08004bf5
 8004b54:	08004c25 	.word	0x08004c25
 8004b58:	08004c25 	.word	0x08004c25
 8004b5c:	08004c25 	.word	0x08004c25
 8004b60:	08004c25 	.word	0x08004c25
 8004b64:	08004c25 	.word	0x08004c25
 8004b68:	08004c25 	.word	0x08004c25
 8004b6c:	08004c25 	.word	0x08004c25
 8004b70:	08004bfd 	.word	0x08004bfd
 8004b74:	08004c25 	.word	0x08004c25
 8004b78:	08004c25 	.word	0x08004c25
 8004b7c:	08004c25 	.word	0x08004c25
 8004b80:	08004c25 	.word	0x08004c25
 8004b84:	08004c25 	.word	0x08004c25
 8004b88:	08004c25 	.word	0x08004c25
 8004b8c:	08004c25 	.word	0x08004c25
 8004b90:	08004c05 	.word	0x08004c05
 8004b94:	08004c25 	.word	0x08004c25
 8004b98:	08004c25 	.word	0x08004c25
 8004b9c:	08004c25 	.word	0x08004c25
 8004ba0:	08004c25 	.word	0x08004c25
 8004ba4:	08004c25 	.word	0x08004c25
 8004ba8:	08004c25 	.word	0x08004c25
 8004bac:	08004c25 	.word	0x08004c25
 8004bb0:	08004c0d 	.word	0x08004c0d
 8004bb4:	08004c25 	.word	0x08004c25
 8004bb8:	08004c25 	.word	0x08004c25
 8004bbc:	08004c25 	.word	0x08004c25
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004c25 	.word	0x08004c25
 8004bc8:	08004c25 	.word	0x08004c25
 8004bcc:	08004c25 	.word	0x08004c25
 8004bd0:	08004c15 	.word	0x08004c15
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c25 	.word	0x08004c25
 8004be0:	08004c25 	.word	0x08004c25
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e326      	b.n	800524a <UART_SetConfig+0x7ae>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c02:	e322      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0a:	e31e      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c12:	e31a      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c14:	2320      	movs	r3, #32
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1a:	e316      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c1c:	2340      	movs	r3, #64	; 0x40
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c22:	e312      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2a:	e30e      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a69      	ldr	r2, [pc, #420]	; (8004dd8 <UART_SetConfig+0x33c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d130      	bne.n	8004c98 <UART_SetConfig+0x1fc>
 8004c36:	4b67      	ldr	r3, [pc, #412]	; (8004dd4 <UART_SetConfig+0x338>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d826      	bhi.n	8004c90 <UART_SetConfig+0x1f4>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <UART_SetConfig+0x1ac>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c61 	.word	0x08004c61
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	08004c71 	.word	0x08004c71
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c66:	e2f0      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6e:	e2ec      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c76:	e2e8      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7e:	e2e4      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c80:	2320      	movs	r3, #32
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e2e0      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8e:	e2dc      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c96:	e2d8      	b.n	800524a <UART_SetConfig+0x7ae>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a4f      	ldr	r2, [pc, #316]	; (8004ddc <UART_SetConfig+0x340>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d130      	bne.n	8004d04 <UART_SetConfig+0x268>
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <UART_SetConfig+0x338>)
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d826      	bhi.n	8004cfc <UART_SetConfig+0x260>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x218>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ccd 	.word	0x08004ccd
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e2ba      	b.n	800524a <UART_SetConfig+0x7ae>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e2b6      	b.n	800524a <UART_SetConfig+0x7ae>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e2b2      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e2ae      	b.n	800524a <UART_SetConfig+0x7ae>
 8004cec:	2320      	movs	r3, #32
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e2aa      	b.n	800524a <UART_SetConfig+0x7ae>
 8004cf4:	2340      	movs	r3, #64	; 0x40
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e2a6      	b.n	800524a <UART_SetConfig+0x7ae>
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d02:	e2a2      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a35      	ldr	r2, [pc, #212]	; (8004de0 <UART_SetConfig+0x344>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d130      	bne.n	8004d70 <UART_SetConfig+0x2d4>
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <UART_SetConfig+0x338>)
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d826      	bhi.n	8004d68 <UART_SetConfig+0x2cc>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x284>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d39 	.word	0x08004d39
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	08004d49 	.word	0x08004d49
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3e:	e284      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d46:	e280      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e27c      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e278      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d58:	2320      	movs	r3, #32
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e274      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d60:	2340      	movs	r3, #64	; 0x40
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e270      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6e:	e26c      	b.n	800524a <UART_SetConfig+0x7ae>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <UART_SetConfig+0x348>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d142      	bne.n	8004e00 <UART_SetConfig+0x364>
 8004d7a:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <UART_SetConfig+0x338>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	d838      	bhi.n	8004df8 <UART_SetConfig+0x35c>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x2f0>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004da5 	.word	0x08004da5
 8004d90:	08004dad 	.word	0x08004dad
 8004d94:	08004db5 	.word	0x08004db5
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004daa:	e24e      	b.n	800524a <UART_SetConfig+0x7ae>
 8004dac:	2304      	movs	r3, #4
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db2:	e24a      	b.n	800524a <UART_SetConfig+0x7ae>
 8004db4:	2308      	movs	r3, #8
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dba:	e246      	b.n	800524a <UART_SetConfig+0x7ae>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc2:	e242      	b.n	800524a <UART_SetConfig+0x7ae>
 8004dc4:	cfff69f3 	.word	0xcfff69f3
 8004dc8:	58000c00 	.word	0x58000c00
 8004dcc:	11fff4ff 	.word	0x11fff4ff
 8004dd0:	40011000 	.word	0x40011000
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	40004400 	.word	0x40004400
 8004ddc:	40004800 	.word	0x40004800
 8004de0:	40004c00 	.word	0x40004c00
 8004de4:	40005000 	.word	0x40005000
 8004de8:	2320      	movs	r3, #32
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e22c      	b.n	800524a <UART_SetConfig+0x7ae>
 8004df0:	2340      	movs	r3, #64	; 0x40
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e228      	b.n	800524a <UART_SetConfig+0x7ae>
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfe:	e224      	b.n	800524a <UART_SetConfig+0x7ae>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4ab1      	ldr	r2, [pc, #708]	; (80050cc <UART_SetConfig+0x630>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d176      	bne.n	8004ef8 <UART_SetConfig+0x45c>
 8004e0a:	4bb1      	ldr	r3, [pc, #708]	; (80050d0 <UART_SetConfig+0x634>)
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e12:	2b28      	cmp	r3, #40	; 0x28
 8004e14:	d86c      	bhi.n	8004ef0 <UART_SetConfig+0x454>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <UART_SetConfig+0x380>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004ec1 	.word	0x08004ec1
 8004e20:	08004ef1 	.word	0x08004ef1
 8004e24:	08004ef1 	.word	0x08004ef1
 8004e28:	08004ef1 	.word	0x08004ef1
 8004e2c:	08004ef1 	.word	0x08004ef1
 8004e30:	08004ef1 	.word	0x08004ef1
 8004e34:	08004ef1 	.word	0x08004ef1
 8004e38:	08004ef1 	.word	0x08004ef1
 8004e3c:	08004ec9 	.word	0x08004ec9
 8004e40:	08004ef1 	.word	0x08004ef1
 8004e44:	08004ef1 	.word	0x08004ef1
 8004e48:	08004ef1 	.word	0x08004ef1
 8004e4c:	08004ef1 	.word	0x08004ef1
 8004e50:	08004ef1 	.word	0x08004ef1
 8004e54:	08004ef1 	.word	0x08004ef1
 8004e58:	08004ef1 	.word	0x08004ef1
 8004e5c:	08004ed1 	.word	0x08004ed1
 8004e60:	08004ef1 	.word	0x08004ef1
 8004e64:	08004ef1 	.word	0x08004ef1
 8004e68:	08004ef1 	.word	0x08004ef1
 8004e6c:	08004ef1 	.word	0x08004ef1
 8004e70:	08004ef1 	.word	0x08004ef1
 8004e74:	08004ef1 	.word	0x08004ef1
 8004e78:	08004ef1 	.word	0x08004ef1
 8004e7c:	08004ed9 	.word	0x08004ed9
 8004e80:	08004ef1 	.word	0x08004ef1
 8004e84:	08004ef1 	.word	0x08004ef1
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004ef1 	.word	0x08004ef1
 8004e90:	08004ef1 	.word	0x08004ef1
 8004e94:	08004ef1 	.word	0x08004ef1
 8004e98:	08004ef1 	.word	0x08004ef1
 8004e9c:	08004ee1 	.word	0x08004ee1
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08004ef1 	.word	0x08004ef1
 8004ea8:	08004ef1 	.word	0x08004ef1
 8004eac:	08004ef1 	.word	0x08004ef1
 8004eb0:	08004ef1 	.word	0x08004ef1
 8004eb4:	08004ef1 	.word	0x08004ef1
 8004eb8:	08004ef1 	.word	0x08004ef1
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e1c0      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e1bc      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e1b8      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e1b4      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e1b0      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e1ac      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e1a8      	b.n	800524a <UART_SetConfig+0x7ae>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a75      	ldr	r2, [pc, #468]	; (80050d4 <UART_SetConfig+0x638>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d130      	bne.n	8004f64 <UART_SetConfig+0x4c8>
 8004f02:	4b73      	ldr	r3, [pc, #460]	; (80050d0 <UART_SetConfig+0x634>)
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d826      	bhi.n	8004f5c <UART_SetConfig+0x4c0>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <UART_SetConfig+0x478>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f2d 	.word	0x08004f2d
 8004f18:	08004f35 	.word	0x08004f35
 8004f1c:	08004f3d 	.word	0x08004f3d
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f4d 	.word	0x08004f4d
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f32:	e18a      	b.n	800524a <UART_SetConfig+0x7ae>
 8004f34:	2304      	movs	r3, #4
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3a:	e186      	b.n	800524a <UART_SetConfig+0x7ae>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f42:	e182      	b.n	800524a <UART_SetConfig+0x7ae>
 8004f44:	2310      	movs	r3, #16
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e17e      	b.n	800524a <UART_SetConfig+0x7ae>
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e17a      	b.n	800524a <UART_SetConfig+0x7ae>
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e176      	b.n	800524a <UART_SetConfig+0x7ae>
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e172      	b.n	800524a <UART_SetConfig+0x7ae>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5b      	ldr	r2, [pc, #364]	; (80050d8 <UART_SetConfig+0x63c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d130      	bne.n	8004fd0 <UART_SetConfig+0x534>
 8004f6e:	4b58      	ldr	r3, [pc, #352]	; (80050d0 <UART_SetConfig+0x634>)
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d826      	bhi.n	8004fc8 <UART_SetConfig+0x52c>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x4e4>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004f99 	.word	0x08004f99
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	08004fa9 	.word	0x08004fa9
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9e:	e154      	b.n	800524a <UART_SetConfig+0x7ae>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa6:	e150      	b.n	800524a <UART_SetConfig+0x7ae>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e14c      	b.n	800524a <UART_SetConfig+0x7ae>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e148      	b.n	800524a <UART_SetConfig+0x7ae>
 8004fb8:	2320      	movs	r3, #32
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e144      	b.n	800524a <UART_SetConfig+0x7ae>
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e140      	b.n	800524a <UART_SetConfig+0x7ae>
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e13c      	b.n	800524a <UART_SetConfig+0x7ae>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a41      	ldr	r2, [pc, #260]	; (80050dc <UART_SetConfig+0x640>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f040 8082 	bne.w	80050e0 <UART_SetConfig+0x644>
 8004fdc:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <UART_SetConfig+0x634>)
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe4:	2b28      	cmp	r3, #40	; 0x28
 8004fe6:	d86d      	bhi.n	80050c4 <UART_SetConfig+0x628>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x554>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005095 	.word	0x08005095
 8004ff4:	080050c5 	.word	0x080050c5
 8004ff8:	080050c5 	.word	0x080050c5
 8004ffc:	080050c5 	.word	0x080050c5
 8005000:	080050c5 	.word	0x080050c5
 8005004:	080050c5 	.word	0x080050c5
 8005008:	080050c5 	.word	0x080050c5
 800500c:	080050c5 	.word	0x080050c5
 8005010:	0800509d 	.word	0x0800509d
 8005014:	080050c5 	.word	0x080050c5
 8005018:	080050c5 	.word	0x080050c5
 800501c:	080050c5 	.word	0x080050c5
 8005020:	080050c5 	.word	0x080050c5
 8005024:	080050c5 	.word	0x080050c5
 8005028:	080050c5 	.word	0x080050c5
 800502c:	080050c5 	.word	0x080050c5
 8005030:	080050a5 	.word	0x080050a5
 8005034:	080050c5 	.word	0x080050c5
 8005038:	080050c5 	.word	0x080050c5
 800503c:	080050c5 	.word	0x080050c5
 8005040:	080050c5 	.word	0x080050c5
 8005044:	080050c5 	.word	0x080050c5
 8005048:	080050c5 	.word	0x080050c5
 800504c:	080050c5 	.word	0x080050c5
 8005050:	080050ad 	.word	0x080050ad
 8005054:	080050c5 	.word	0x080050c5
 8005058:	080050c5 	.word	0x080050c5
 800505c:	080050c5 	.word	0x080050c5
 8005060:	080050c5 	.word	0x080050c5
 8005064:	080050c5 	.word	0x080050c5
 8005068:	080050c5 	.word	0x080050c5
 800506c:	080050c5 	.word	0x080050c5
 8005070:	080050b5 	.word	0x080050b5
 8005074:	080050c5 	.word	0x080050c5
 8005078:	080050c5 	.word	0x080050c5
 800507c:	080050c5 	.word	0x080050c5
 8005080:	080050c5 	.word	0x080050c5
 8005084:	080050c5 	.word	0x080050c5
 8005088:	080050c5 	.word	0x080050c5
 800508c:	080050c5 	.word	0x080050c5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e0d6      	b.n	800524a <UART_SetConfig+0x7ae>
 800509c:	2304      	movs	r3, #4
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e0d2      	b.n	800524a <UART_SetConfig+0x7ae>
 80050a4:	2308      	movs	r3, #8
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e0ce      	b.n	800524a <UART_SetConfig+0x7ae>
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e0ca      	b.n	800524a <UART_SetConfig+0x7ae>
 80050b4:	2320      	movs	r3, #32
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e0c6      	b.n	800524a <UART_SetConfig+0x7ae>
 80050bc:	2340      	movs	r3, #64	; 0x40
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e0c2      	b.n	800524a <UART_SetConfig+0x7ae>
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e0be      	b.n	800524a <UART_SetConfig+0x7ae>
 80050cc:	40011400 	.word	0x40011400
 80050d0:	58024400 	.word	0x58024400
 80050d4:	40007800 	.word	0x40007800
 80050d8:	40007c00 	.word	0x40007c00
 80050dc:	40011800 	.word	0x40011800
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4aad      	ldr	r2, [pc, #692]	; (800539c <UART_SetConfig+0x900>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d176      	bne.n	80051d8 <UART_SetConfig+0x73c>
 80050ea:	4bad      	ldr	r3, [pc, #692]	; (80053a0 <UART_SetConfig+0x904>)
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050f2:	2b28      	cmp	r3, #40	; 0x28
 80050f4:	d86c      	bhi.n	80051d0 <UART_SetConfig+0x734>
 80050f6:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <UART_SetConfig+0x660>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	080051a1 	.word	0x080051a1
 8005100:	080051d1 	.word	0x080051d1
 8005104:	080051d1 	.word	0x080051d1
 8005108:	080051d1 	.word	0x080051d1
 800510c:	080051d1 	.word	0x080051d1
 8005110:	080051d1 	.word	0x080051d1
 8005114:	080051d1 	.word	0x080051d1
 8005118:	080051d1 	.word	0x080051d1
 800511c:	080051a9 	.word	0x080051a9
 8005120:	080051d1 	.word	0x080051d1
 8005124:	080051d1 	.word	0x080051d1
 8005128:	080051d1 	.word	0x080051d1
 800512c:	080051d1 	.word	0x080051d1
 8005130:	080051d1 	.word	0x080051d1
 8005134:	080051d1 	.word	0x080051d1
 8005138:	080051d1 	.word	0x080051d1
 800513c:	080051b1 	.word	0x080051b1
 8005140:	080051d1 	.word	0x080051d1
 8005144:	080051d1 	.word	0x080051d1
 8005148:	080051d1 	.word	0x080051d1
 800514c:	080051d1 	.word	0x080051d1
 8005150:	080051d1 	.word	0x080051d1
 8005154:	080051d1 	.word	0x080051d1
 8005158:	080051d1 	.word	0x080051d1
 800515c:	080051b9 	.word	0x080051b9
 8005160:	080051d1 	.word	0x080051d1
 8005164:	080051d1 	.word	0x080051d1
 8005168:	080051d1 	.word	0x080051d1
 800516c:	080051d1 	.word	0x080051d1
 8005170:	080051d1 	.word	0x080051d1
 8005174:	080051d1 	.word	0x080051d1
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051c1 	.word	0x080051c1
 8005180:	080051d1 	.word	0x080051d1
 8005184:	080051d1 	.word	0x080051d1
 8005188:	080051d1 	.word	0x080051d1
 800518c:	080051d1 	.word	0x080051d1
 8005190:	080051d1 	.word	0x080051d1
 8005194:	080051d1 	.word	0x080051d1
 8005198:	080051d1 	.word	0x080051d1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e050      	b.n	800524a <UART_SetConfig+0x7ae>
 80051a8:	2304      	movs	r3, #4
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e04c      	b.n	800524a <UART_SetConfig+0x7ae>
 80051b0:	2308      	movs	r3, #8
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e048      	b.n	800524a <UART_SetConfig+0x7ae>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e044      	b.n	800524a <UART_SetConfig+0x7ae>
 80051c0:	2320      	movs	r3, #32
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e040      	b.n	800524a <UART_SetConfig+0x7ae>
 80051c8:	2340      	movs	r3, #64	; 0x40
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e03c      	b.n	800524a <UART_SetConfig+0x7ae>
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e038      	b.n	800524a <UART_SetConfig+0x7ae>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a71      	ldr	r2, [pc, #452]	; (80053a4 <UART_SetConfig+0x908>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d130      	bne.n	8005244 <UART_SetConfig+0x7a8>
 80051e2:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <UART_SetConfig+0x904>)
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d826      	bhi.n	800523c <UART_SetConfig+0x7a0>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0x758>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	0800520d 	.word	0x0800520d
 80051f8:	08005215 	.word	0x08005215
 80051fc:	0800521d 	.word	0x0800521d
 8005200:	08005225 	.word	0x08005225
 8005204:	0800522d 	.word	0x0800522d
 8005208:	08005235 	.word	0x08005235
 800520c:	2302      	movs	r3, #2
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e01a      	b.n	800524a <UART_SetConfig+0x7ae>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e016      	b.n	800524a <UART_SetConfig+0x7ae>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e012      	b.n	800524a <UART_SetConfig+0x7ae>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e00e      	b.n	800524a <UART_SetConfig+0x7ae>
 800522c:	2320      	movs	r3, #32
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e00a      	b.n	800524a <UART_SetConfig+0x7ae>
 8005234:	2340      	movs	r3, #64	; 0x40
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e006      	b.n	800524a <UART_SetConfig+0x7ae>
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e002      	b.n	800524a <UART_SetConfig+0x7ae>
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a55      	ldr	r2, [pc, #340]	; (80053a4 <UART_SetConfig+0x908>)
 8005250:	4293      	cmp	r3, r2
 8005252:	f040 80f8 	bne.w	8005446 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005256:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800525a:	2b20      	cmp	r3, #32
 800525c:	dc46      	bgt.n	80052ec <UART_SetConfig+0x850>
 800525e:	2b02      	cmp	r3, #2
 8005260:	db75      	blt.n	800534e <UART_SetConfig+0x8b2>
 8005262:	3b02      	subs	r3, #2
 8005264:	2b1e      	cmp	r3, #30
 8005266:	d872      	bhi.n	800534e <UART_SetConfig+0x8b2>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <UART_SetConfig+0x7d4>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	080052f3 	.word	0x080052f3
 8005274:	0800534f 	.word	0x0800534f
 8005278:	080052fb 	.word	0x080052fb
 800527c:	0800534f 	.word	0x0800534f
 8005280:	0800534f 	.word	0x0800534f
 8005284:	0800534f 	.word	0x0800534f
 8005288:	0800530b 	.word	0x0800530b
 800528c:	0800534f 	.word	0x0800534f
 8005290:	0800534f 	.word	0x0800534f
 8005294:	0800534f 	.word	0x0800534f
 8005298:	0800534f 	.word	0x0800534f
 800529c:	0800534f 	.word	0x0800534f
 80052a0:	0800534f 	.word	0x0800534f
 80052a4:	0800534f 	.word	0x0800534f
 80052a8:	0800531b 	.word	0x0800531b
 80052ac:	0800534f 	.word	0x0800534f
 80052b0:	0800534f 	.word	0x0800534f
 80052b4:	0800534f 	.word	0x0800534f
 80052b8:	0800534f 	.word	0x0800534f
 80052bc:	0800534f 	.word	0x0800534f
 80052c0:	0800534f 	.word	0x0800534f
 80052c4:	0800534f 	.word	0x0800534f
 80052c8:	0800534f 	.word	0x0800534f
 80052cc:	0800534f 	.word	0x0800534f
 80052d0:	0800534f 	.word	0x0800534f
 80052d4:	0800534f 	.word	0x0800534f
 80052d8:	0800534f 	.word	0x0800534f
 80052dc:	0800534f 	.word	0x0800534f
 80052e0:	0800534f 	.word	0x0800534f
 80052e4:	0800534f 	.word	0x0800534f
 80052e8:	08005341 	.word	0x08005341
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d02a      	beq.n	8005346 <UART_SetConfig+0x8aa>
 80052f0:	e02d      	b.n	800534e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80052f2:	f7fe faf3 	bl	80038dc <HAL_RCCEx_GetD3PCLK1Freq>
 80052f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052f8:	e02f      	b.n	800535a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fb02 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005308:	e027      	b.n	800535a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800530a:	f107 0318 	add.w	r3, r7, #24
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fc4e 	bl	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005318:	e01f      	b.n	800535a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <UART_SetConfig+0x904>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005326:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <UART_SetConfig+0x904>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	08db      	lsrs	r3, r3, #3
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <UART_SetConfig+0x90c>)
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005338:	e00f      	b.n	800535a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800533a:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <UART_SetConfig+0x90c>)
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800533e:	e00c      	b.n	800535a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <UART_SetConfig+0x910>)
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005344:	e009      	b.n	800535a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800534c:	e005      	b.n	800535a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 81ee 	beq.w	800573e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <UART_SetConfig+0x914>)
 8005368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800536c:	461a      	mov	r2, r3
 800536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005370:	fbb3 f3f2 	udiv	r3, r3, r2
 8005374:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	429a      	cmp	r2, r3
 8005384:	d305      	bcc.n	8005392 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	429a      	cmp	r2, r3
 8005390:	d910      	bls.n	80053b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005398:	e1d1      	b.n	800573e <UART_SetConfig+0xca2>
 800539a:	bf00      	nop
 800539c:	40011c00 	.word	0x40011c00
 80053a0:	58024400 	.word	0x58024400
 80053a4:	58000c00 	.word	0x58000c00
 80053a8:	03d09000 	.word	0x03d09000
 80053ac:	003d0900 	.word	0x003d0900
 80053b0:	08005e3c 	.word	0x08005e3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	2200      	movs	r2, #0
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	60fa      	str	r2, [r7, #12]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	4ac0      	ldr	r2, [pc, #768]	; (80056c4 <UART_SetConfig+0xc28>)
 80053c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2200      	movs	r2, #0
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053d6:	f7fa ff89 	bl	80002ec <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	020b      	lsls	r3, r1, #8
 80053ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053f0:	0202      	lsls	r2, r0, #8
 80053f2:	6979      	ldr	r1, [r7, #20]
 80053f4:	6849      	ldr	r1, [r1, #4]
 80053f6:	0849      	lsrs	r1, r1, #1
 80053f8:	2000      	movs	r0, #0
 80053fa:	460c      	mov	r4, r1
 80053fc:	4605      	mov	r5, r0
 80053fe:	eb12 0804 	adds.w	r8, r2, r4
 8005402:	eb43 0905 	adc.w	r9, r3, r5
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	469a      	mov	sl, r3
 800540e:	4693      	mov	fp, r2
 8005410:	4652      	mov	r2, sl
 8005412:	465b      	mov	r3, fp
 8005414:	4640      	mov	r0, r8
 8005416:	4649      	mov	r1, r9
 8005418:	f7fa ff68 	bl	80002ec <__aeabi_uldivmod>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4613      	mov	r3, r2
 8005422:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800542a:	d308      	bcc.n	800543e <UART_SetConfig+0x9a2>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d204      	bcs.n	800543e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	e17f      	b.n	800573e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005444:	e17b      	b.n	800573e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544e:	f040 80bd 	bne.w	80055cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005452:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005456:	2b20      	cmp	r3, #32
 8005458:	dc48      	bgt.n	80054ec <UART_SetConfig+0xa50>
 800545a:	2b00      	cmp	r3, #0
 800545c:	db7b      	blt.n	8005556 <UART_SetConfig+0xaba>
 800545e:	2b20      	cmp	r3, #32
 8005460:	d879      	bhi.n	8005556 <UART_SetConfig+0xaba>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0x9cc>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	080054f3 	.word	0x080054f3
 800546c:	080054fb 	.word	0x080054fb
 8005470:	08005557 	.word	0x08005557
 8005474:	08005557 	.word	0x08005557
 8005478:	08005503 	.word	0x08005503
 800547c:	08005557 	.word	0x08005557
 8005480:	08005557 	.word	0x08005557
 8005484:	08005557 	.word	0x08005557
 8005488:	08005513 	.word	0x08005513
 800548c:	08005557 	.word	0x08005557
 8005490:	08005557 	.word	0x08005557
 8005494:	08005557 	.word	0x08005557
 8005498:	08005557 	.word	0x08005557
 800549c:	08005557 	.word	0x08005557
 80054a0:	08005557 	.word	0x08005557
 80054a4:	08005557 	.word	0x08005557
 80054a8:	08005523 	.word	0x08005523
 80054ac:	08005557 	.word	0x08005557
 80054b0:	08005557 	.word	0x08005557
 80054b4:	08005557 	.word	0x08005557
 80054b8:	08005557 	.word	0x08005557
 80054bc:	08005557 	.word	0x08005557
 80054c0:	08005557 	.word	0x08005557
 80054c4:	08005557 	.word	0x08005557
 80054c8:	08005557 	.word	0x08005557
 80054cc:	08005557 	.word	0x08005557
 80054d0:	08005557 	.word	0x08005557
 80054d4:	08005557 	.word	0x08005557
 80054d8:	08005557 	.word	0x08005557
 80054dc:	08005557 	.word	0x08005557
 80054e0:	08005557 	.word	0x08005557
 80054e4:	08005557 	.word	0x08005557
 80054e8:	08005549 	.word	0x08005549
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d02e      	beq.n	800554e <UART_SetConfig+0xab2>
 80054f0:	e031      	b.n	8005556 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f2:	f7fd f809 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 80054f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054f8:	e033      	b.n	8005562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054fa:	f7fd f81b 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 80054fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005500:	e02f      	b.n	8005562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe f9fe 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005510:	e027      	b.n	8005562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005512:	f107 0318 	add.w	r3, r7, #24
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fb4a 	bl	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005520:	e01f      	b.n	8005562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005522:	4b69      	ldr	r3, [pc, #420]	; (80056c8 <UART_SetConfig+0xc2c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800552e:	4b66      	ldr	r3, [pc, #408]	; (80056c8 <UART_SetConfig+0xc2c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	08db      	lsrs	r3, r3, #3
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	4a64      	ldr	r2, [pc, #400]	; (80056cc <UART_SetConfig+0xc30>)
 800553a:	fa22 f303 	lsr.w	r3, r2, r3
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005540:	e00f      	b.n	8005562 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005542:	4b62      	ldr	r3, [pc, #392]	; (80056cc <UART_SetConfig+0xc30>)
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005546:	e00c      	b.n	8005562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005548:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <UART_SetConfig+0xc34>)
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800554c:	e009      	b.n	8005562 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005554:	e005      	b.n	8005562 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80ea 	beq.w	800573e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	4a55      	ldr	r2, [pc, #340]	; (80056c4 <UART_SetConfig+0xc28>)
 8005570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005574:	461a      	mov	r2, r3
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005578:	fbb3 f3f2 	udiv	r3, r3, r2
 800557c:	005a      	lsls	r2, r3, #1
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	441a      	add	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d916      	bls.n	80055c4 <UART_SetConfig+0xb28>
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d212      	bcs.n	80055c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f023 030f 	bic.w	r3, r3, #15
 80055a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055b6:	4313      	orrs	r3, r2
 80055b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e0bc      	b.n	800573e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055ca:	e0b8      	b.n	800573e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	dc4b      	bgt.n	800566c <UART_SetConfig+0xbd0>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f2c0 8087 	blt.w	80056e8 <UART_SetConfig+0xc4c>
 80055da:	2b20      	cmp	r3, #32
 80055dc:	f200 8084 	bhi.w	80056e8 <UART_SetConfig+0xc4c>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <UART_SetConfig+0xb4c>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	08005673 	.word	0x08005673
 80055ec:	0800567b 	.word	0x0800567b
 80055f0:	080056e9 	.word	0x080056e9
 80055f4:	080056e9 	.word	0x080056e9
 80055f8:	08005683 	.word	0x08005683
 80055fc:	080056e9 	.word	0x080056e9
 8005600:	080056e9 	.word	0x080056e9
 8005604:	080056e9 	.word	0x080056e9
 8005608:	08005693 	.word	0x08005693
 800560c:	080056e9 	.word	0x080056e9
 8005610:	080056e9 	.word	0x080056e9
 8005614:	080056e9 	.word	0x080056e9
 8005618:	080056e9 	.word	0x080056e9
 800561c:	080056e9 	.word	0x080056e9
 8005620:	080056e9 	.word	0x080056e9
 8005624:	080056e9 	.word	0x080056e9
 8005628:	080056a3 	.word	0x080056a3
 800562c:	080056e9 	.word	0x080056e9
 8005630:	080056e9 	.word	0x080056e9
 8005634:	080056e9 	.word	0x080056e9
 8005638:	080056e9 	.word	0x080056e9
 800563c:	080056e9 	.word	0x080056e9
 8005640:	080056e9 	.word	0x080056e9
 8005644:	080056e9 	.word	0x080056e9
 8005648:	080056e9 	.word	0x080056e9
 800564c:	080056e9 	.word	0x080056e9
 8005650:	080056e9 	.word	0x080056e9
 8005654:	080056e9 	.word	0x080056e9
 8005658:	080056e9 	.word	0x080056e9
 800565c:	080056e9 	.word	0x080056e9
 8005660:	080056e9 	.word	0x080056e9
 8005664:	080056e9 	.word	0x080056e9
 8005668:	080056db 	.word	0x080056db
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d037      	beq.n	80056e0 <UART_SetConfig+0xc44>
 8005670:	e03a      	b.n	80056e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005672:	f7fc ff49 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8005676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005678:	e03c      	b.n	80056f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567a:	f7fc ff5b 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 800567e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005680:	e038      	b.n	80056f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe f93e 	bl	8003908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005690:	e030      	b.n	80056f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005692:	f107 0318 	add.w	r3, r7, #24
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fa8a 	bl	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056a0:	e028      	b.n	80056f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <UART_SetConfig+0xc2c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d012      	beq.n	80056d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <UART_SetConfig+0xc2c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	08db      	lsrs	r3, r3, #3
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <UART_SetConfig+0xc30>)
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056c0:	e018      	b.n	80056f4 <UART_SetConfig+0xc58>
 80056c2:	bf00      	nop
 80056c4:	08005e3c 	.word	0x08005e3c
 80056c8:	58024400 	.word	0x58024400
 80056cc:	03d09000 	.word	0x03d09000
 80056d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80056d4:	4b24      	ldr	r3, [pc, #144]	; (8005768 <UART_SetConfig+0xccc>)
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d8:	e00c      	b.n	80056f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056da:	4b24      	ldr	r3, [pc, #144]	; (800576c <UART_SetConfig+0xcd0>)
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056de:	e009      	b.n	80056f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e6:	e005      	b.n	80056f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056f2:	bf00      	nop
    }

    if (pclk != 0U)
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d021      	beq.n	800573e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <UART_SetConfig+0xcd4>)
 8005700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005704:	461a      	mov	r2, r3
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	fbb3 f2f2 	udiv	r2, r3, r2
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	441a      	add	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	2b0f      	cmp	r3, #15
 8005722:	d909      	bls.n	8005738 <UART_SetConfig+0xc9c>
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572a:	d205      	bcs.n	8005738 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	b29a      	uxth	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e002      	b.n	800573e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2201      	movs	r2, #1
 8005742:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2201      	movs	r2, #1
 800574a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2200      	movs	r2, #0
 8005758:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800575a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800575e:	4618      	mov	r0, r3
 8005760:	3748      	adds	r7, #72	; 0x48
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005768:	03d09000 	.word	0x03d09000
 800576c:	003d0900 	.word	0x003d0900
 8005770:	08005e3c 	.word	0x08005e3c

08005774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005872:	d10a      	bne.n	800588a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b098      	sub	sp, #96	; 0x60
 80058bc:	af02      	add	r7, sp, #8
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c8:	f7fb fb0e 	bl	8000ee8 <HAL_GetTick>
 80058cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d12f      	bne.n	800593c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f88e 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d022      	beq.n	800593c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	653b      	str	r3, [r7, #80]	; 0x50
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005914:	647b      	str	r3, [r7, #68]	; 0x44
 8005916:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800591a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e063      	b.n	8005a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d149      	bne.n	80059de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005952:	2200      	movs	r2, #0
 8005954:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f857 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d03c      	beq.n	80059de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	623b      	str	r3, [r7, #32]
   return(result);
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
 8005984:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e6      	bne.n	8005964 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b6:	61fa      	str	r2, [r7, #28]
 80059b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	69b9      	ldr	r1, [r7, #24]
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	617b      	str	r3, [r7, #20]
   return(result);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e5      	bne.n	8005996 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e012      	b.n	8005a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3758      	adds	r7, #88	; 0x58
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1c:	e04f      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d04b      	beq.n	8005abe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a26:	f7fb fa5f 	bl	8000ee8 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e04e      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d037      	beq.n	8005abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d034      	beq.n	8005abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b40      	cmp	r3, #64	; 0x40
 8005a58:	d031      	beq.n	8005abe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d110      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f839 	bl	8005ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2208      	movs	r2, #8
 8005a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e029      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a98:	d111      	bne.n	8005abe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f81f 	bl	8005ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00f      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d0a0      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b095      	sub	sp, #84	; 0x54
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e6      	bne.n	8005af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	4b1e      	ldr	r3, [pc, #120]	; (8005bb0 <UART_EndRxTransfer+0xc8>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e5      	bne.n	8005b22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d118      	bne.n	8005b90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f023 0310 	bic.w	r3, r3, #16
 8005b72:	647b      	str	r3, [r7, #68]	; 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6979      	ldr	r1, [r7, #20]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e6      	bne.n	8005b5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ba4:	bf00      	nop
 8005ba6:	3754      	adds	r7, #84	; 0x54
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	effffffe 	.word	0xeffffffe

08005bb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_UARTEx_DisableFifoMode+0x16>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e027      	b.n	8005c1a <HAL_UARTEx_DisableFifoMode+0x66>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2224      	movs	r2, #36	; 0x24
 8005bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e02d      	b.n	8005c9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2224      	movs	r2, #36	; 0x24
 8005c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f850 	bl	8005d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e02d      	b.n	8005d16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2224      	movs	r2, #36	; 0x24
 8005cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f812 	bl	8005d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d108      	bne.n	8005d42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d40:	e031      	b.n	8005da6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d42:	2310      	movs	r3, #16
 8005d44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d46:	2310      	movs	r3, #16
 8005d48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	0e5b      	lsrs	r3, r3, #25
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	0f5b      	lsrs	r3, r3, #29
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	7b3a      	ldrb	r2, [r7, #12]
 8005d6e:	4911      	ldr	r1, [pc, #68]	; (8005db4 <UARTEx_SetNbDataToProcess+0x94>)
 8005d70:	5c8a      	ldrb	r2, [r1, r2]
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d76:	7b3a      	ldrb	r2, [r7, #12]
 8005d78:	490f      	ldr	r1, [pc, #60]	; (8005db8 <UARTEx_SetNbDataToProcess+0x98>)
 8005d7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	7b7a      	ldrb	r2, [r7, #13]
 8005d8c:	4909      	ldr	r1, [pc, #36]	; (8005db4 <UARTEx_SetNbDataToProcess+0x94>)
 8005d8e:	5c8a      	ldrb	r2, [r1, r2]
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d94:	7b7a      	ldrb	r2, [r7, #13]
 8005d96:	4908      	ldr	r1, [pc, #32]	; (8005db8 <UARTEx_SetNbDataToProcess+0x98>)
 8005d98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	08005e54 	.word	0x08005e54
 8005db8:	08005e5c 	.word	0x08005e5c

08005dbc <__libc_init_array>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	4d0d      	ldr	r5, [pc, #52]	; (8005df4 <__libc_init_array+0x38>)
 8005dc0:	4c0d      	ldr	r4, [pc, #52]	; (8005df8 <__libc_init_array+0x3c>)
 8005dc2:	1b64      	subs	r4, r4, r5
 8005dc4:	10a4      	asrs	r4, r4, #2
 8005dc6:	2600      	movs	r6, #0
 8005dc8:	42a6      	cmp	r6, r4
 8005dca:	d109      	bne.n	8005de0 <__libc_init_array+0x24>
 8005dcc:	4d0b      	ldr	r5, [pc, #44]	; (8005dfc <__libc_init_array+0x40>)
 8005dce:	4c0c      	ldr	r4, [pc, #48]	; (8005e00 <__libc_init_array+0x44>)
 8005dd0:	f000 f820 	bl	8005e14 <_init>
 8005dd4:	1b64      	subs	r4, r4, r5
 8005dd6:	10a4      	asrs	r4, r4, #2
 8005dd8:	2600      	movs	r6, #0
 8005dda:	42a6      	cmp	r6, r4
 8005ddc:	d105      	bne.n	8005dea <__libc_init_array+0x2e>
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de4:	4798      	blx	r3
 8005de6:	3601      	adds	r6, #1
 8005de8:	e7ee      	b.n	8005dc8 <__libc_init_array+0xc>
 8005dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dee:	4798      	blx	r3
 8005df0:	3601      	adds	r6, #1
 8005df2:	e7f2      	b.n	8005dda <__libc_init_array+0x1e>
 8005df4:	08005e6c 	.word	0x08005e6c
 8005df8:	08005e6c 	.word	0x08005e6c
 8005dfc:	08005e6c 	.word	0x08005e6c
 8005e00:	08005e70 	.word	0x08005e70

08005e04 <memset>:
 8005e04:	4402      	add	r2, r0
 8005e06:	4603      	mov	r3, r0
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d100      	bne.n	8005e0e <memset+0xa>
 8005e0c:	4770      	bx	lr
 8005e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e12:	e7f9      	b.n	8005e08 <memset+0x4>

08005e14 <_init>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr

08005e20 <_fini>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr
