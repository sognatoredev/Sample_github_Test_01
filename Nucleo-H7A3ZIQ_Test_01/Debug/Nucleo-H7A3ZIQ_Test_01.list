
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c98  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800717c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005bc  24000074  080071f0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000630  080071f0  00020630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017591  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ba3  00000000  00000000  00037633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e8  00000000  00000000  0003a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fb0  00000000  00000000  0003b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031dcf  00000000  00000000  0003c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017f1c  00000000  00000000  0006e03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140001  00000000  00000000  00085f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c5f5c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004990  00000000  00000000  001c5fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006f30 	.word	0x08006f30

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08006f30 	.word	0x08006f30

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <Button_Process>:
#include "button_proc.h"

uint8_t prvbtnstate = 0;

void Button_Process (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
    uint8_t currentlybtnstate = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]
    
    // Timer 로 처리하는 것을 추천하겠음.
    currentlybtnstate = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	4810      	ldr	r0, [pc, #64]	; (80006f4 <Button_Process+0x50>)
 80006b4:	f001 fa02 	bl	8001abc <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]

    if (prvbtnstate != currentlybtnstate)
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <Button_Process+0x54>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d011      	beq.n	80006ea <Button_Process+0x46>
    {
        prvbtnstate = currentlybtnstate;
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <Button_Process+0x54>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	7013      	strb	r3, [r2, #0]

        sprintf(uart3_tx_buf, "Button Toggle.\r\n");
 80006cc:	490b      	ldr	r1, [pc, #44]	; (80006fc <Button_Process+0x58>)
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <Button_Process+0x5c>)
 80006d0:	f005 ffc0 	bl	8006654 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <Button_Process+0x5c>)
 80006d6:	f7ff fe0b 	bl	80002f0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	4907      	ldr	r1, [pc, #28]	; (8000700 <Button_Process+0x5c>)
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <Button_Process+0x60>)
 80006e6:	f004 fd65 	bl	80051b4 <HAL_UART_Transmit>
    }
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	58020800 	.word	0x58020800
 80006f8:	24000090 	.word	0x24000090
 80006fc:	08006f48 	.word	0x08006f48
 8000700:	2400021c 	.word	0x2400021c
 8000704:	2400017c 	.word	0x2400017c

08000708 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	; 0x38
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b80      	ldr	r3, [pc, #512]	; (8000920 <MX_GPIO_Init+0x218>)
 8000720:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000724:	4a7e      	ldr	r2, [pc, #504]	; (8000920 <MX_GPIO_Init+0x218>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800072e:	4b7c      	ldr	r3, [pc, #496]	; (8000920 <MX_GPIO_Init+0x218>)
 8000730:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073c:	4b78      	ldr	r3, [pc, #480]	; (8000920 <MX_GPIO_Init+0x218>)
 800073e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000742:	4a77      	ldr	r2, [pc, #476]	; (8000920 <MX_GPIO_Init+0x218>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074c:	4b74      	ldr	r3, [pc, #464]	; (8000920 <MX_GPIO_Init+0x218>)
 800074e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	4b71      	ldr	r3, [pc, #452]	; (8000920 <MX_GPIO_Init+0x218>)
 800075c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000760:	4a6f      	ldr	r2, [pc, #444]	; (8000920 <MX_GPIO_Init+0x218>)
 8000762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000766:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076a:	4b6d      	ldr	r3, [pc, #436]	; (8000920 <MX_GPIO_Init+0x218>)
 800076c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	4b69      	ldr	r3, [pc, #420]	; (8000920 <MX_GPIO_Init+0x218>)
 800077a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077e:	4a68      	ldr	r2, [pc, #416]	; (8000920 <MX_GPIO_Init+0x218>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000788:	4b65      	ldr	r3, [pc, #404]	; (8000920 <MX_GPIO_Init+0x218>)
 800078a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b62      	ldr	r3, [pc, #392]	; (8000920 <MX_GPIO_Init+0x218>)
 8000798:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079c:	4a60      	ldr	r2, [pc, #384]	; (8000920 <MX_GPIO_Init+0x218>)
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a6:	4b5e      	ldr	r3, [pc, #376]	; (8000920 <MX_GPIO_Init+0x218>)
 80007a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b4:	4b5a      	ldr	r3, [pc, #360]	; (8000920 <MX_GPIO_Init+0x218>)
 80007b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ba:	4a59      	ldr	r2, [pc, #356]	; (8000920 <MX_GPIO_Init+0x218>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c4:	4b56      	ldr	r3, [pc, #344]	; (8000920 <MX_GPIO_Init+0x218>)
 80007c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b53      	ldr	r3, [pc, #332]	; (8000920 <MX_GPIO_Init+0x218>)
 80007d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d8:	4a51      	ldr	r2, [pc, #324]	; (8000920 <MX_GPIO_Init+0x218>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e2:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f0:	4b4b      	ldr	r3, [pc, #300]	; (8000920 <MX_GPIO_Init+0x218>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f6:	4a4a      	ldr	r2, [pc, #296]	; (8000920 <MX_GPIO_Init+0x218>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000800:	4b47      	ldr	r3, [pc, #284]	; (8000920 <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000814:	4843      	ldr	r0, [pc, #268]	; (8000924 <MX_GPIO_Init+0x21c>)
 8000816:	f001 f969 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000820:	4841      	ldr	r0, [pc, #260]	; (8000928 <MX_GPIO_Init+0x220>)
 8000822:	f001 f963 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	4840      	ldr	r0, [pc, #256]	; (800092c <MX_GPIO_Init+0x224>)
 800082c:	f001 f95e 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	4619      	mov	r1, r3
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <MX_GPIO_Init+0x228>)
 8000846:	f000 ff89 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4830      	ldr	r0, [pc, #192]	; (8000924 <MX_GPIO_Init+0x21c>)
 8000864:	f000 ff7a 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000868:	f244 0301 	movw	r3, #16385	; 0x4001
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	4619      	mov	r1, r3
 8000880:	4829      	ldr	r0, [pc, #164]	; (8000928 <MX_GPIO_Init+0x220>)
 8000882:	f000 ff6b 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4826      	ldr	r0, [pc, #152]	; (8000934 <MX_GPIO_Init+0x22c>)
 800089c:	f000 ff5e 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80008a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4820      	ldr	r0, [pc, #128]	; (8000938 <MX_GPIO_Init+0x230>)
 80008b6:	f000 ff51 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008cc:	230a      	movs	r3, #10
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_GPIO_Init+0x230>)
 80008d8:	f000 ff40 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80008dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <MX_GPIO_Init+0x230>)
 80008f6:	f000 ff31 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008fa:	2302      	movs	r3, #2
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_GPIO_Init+0x224>)
 8000912:	f000 ff23 	bl	800175c <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3738      	adds	r7, #56	; 0x38
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	58024400 	.word	0x58024400
 8000924:	58021400 	.word	0x58021400
 8000928:	58020400 	.word	0x58020400
 800092c:	58021000 	.word	0x58021000
 8000930:	58020800 	.word	0x58020800
 8000934:	58021800 	.word	0x58021800
 8000938:	58020000 	.word	0x58020000

0800093c <LED_Process>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
void LED_Process (void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <LED_Process+0x54>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000948:	d307      	bcc.n	800095a <LED_Process+0x1e>
  {
    TIM1_CNT = 0;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <LED_Process+0x54>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]

    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000950:	2101      	movs	r1, #1
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <LED_Process+0x58>)
 8000954:	f001 f8e3 	bl	8001b1e <HAL_GPIO_TogglePin>
  else if (TIM8_CNT > 99999) // 10us * 99999 period Timer8 Counter.
  {
    TIM8_CNT = 0;
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
  }
}
 8000958:	e018      	b.n	800098c <LED_Process+0x50>
  else if (TIM2_CNT > 9) // 100ms * 9 period Timer2 Counter.
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <LED_Process+0x5c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b09      	cmp	r3, #9
 8000960:	d907      	bls.n	8000972 <LED_Process+0x36>
    TIM2_CNT = 0;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <LED_Process+0x5c>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000968:	2102      	movs	r1, #2
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <LED_Process+0x60>)
 800096c:	f001 f8d7 	bl	8001b1e <HAL_GPIO_TogglePin>
}
 8000970:	e00c      	b.n	800098c <LED_Process+0x50>
  else if (TIM8_CNT > 99999) // 10us * 99999 period Timer8 Counter.
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <LED_Process+0x64>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <LED_Process+0x68>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d907      	bls.n	800098c <LED_Process+0x50>
    TIM8_CNT = 0;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <LED_Process+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <LED_Process+0x58>)
 8000988:	f001 f8c9 	bl	8001b1e <HAL_GPIO_TogglePin>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000210 	.word	0x24000210
 8000994:	58020400 	.word	0x58020400
 8000998:	24000214 	.word	0x24000214
 800099c:	58021000 	.word	0x58021000
 80009a0:	24000218 	.word	0x24000218
 80009a4:	0001869f 	.word	0x0001869f

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fd34 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f824 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b4:	f7ff fea8 	bl	8000708 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009b8:	f000 fb3c 	bl	8001034 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009bc:	f000 fbf0 	bl	80011a0 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 80009c0:	f000 f9dc 	bl	8000d7c <MX_TIM1_Init>
  MX_TIM2_Init();
 80009c4:	f000 fa2e 	bl	8000e24 <MX_TIM2_Init>
  MX_TIM8_Init();
 80009c8:	f000 fa7c 	bl	8000ec4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <main+0x48>)
 80009ce:	f003 ff11 	bl	80047f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80009d2:	4808      	ldr	r0, [pc, #32]	; (80009f4 <main+0x4c>)
 80009d4:	f003 ff0e 	bl	80047f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <main+0x50>)
 80009da:	f003 ff0b 	bl	80047f4 <HAL_TIM_Base_Start_IT>

  BootMessagePrint();
 80009de:	f000 fbe7 	bl	80011b0 <BootMessagePrint>
  GetClockSourcePrint();
 80009e2:	f000 fc61 	bl	80012a8 <GetClockSourcePrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Process();
 80009e6:	f7ff ffa9 	bl	800093c <LED_Process>
    Button_Process();
 80009ea:	f7ff fe5b 	bl	80006a4 <Button_Process>
    LED_Process();
 80009ee:	e7fa      	b.n	80009e6 <main+0x3e>
 80009f0:	24000098 	.word	0x24000098
 80009f4:	240000e4 	.word	0x240000e4
 80009f8:	24000130 	.word	0x24000130

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	224c      	movs	r2, #76	; 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 fe1a 	bl	8006644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fe14 	bl	8006644 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <SystemClock_Config+0xe4>)
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a26:	2004      	movs	r0, #4
 8000a28:	f001 f894 	bl	8001b54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <SystemClock_Config+0xe8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <SystemClock_Config+0xe8>)
 8000a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <SystemClock_Config+0xe8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a48:	bf00      	nop
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <SystemClock_Config+0xe8>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a56:	d1f8      	bne.n	8000a4a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a58:	2321      	movs	r3, #33	; 0x21
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a62:	2301      	movs	r3, #1
 8000a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a72:	2346      	movs	r3, #70	; 0x46
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a82:	230c      	movs	r3, #12
 8000a84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f8b8 	bl	8001c08 <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a9e:	f000 f823 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	233f      	movs	r3, #63	; 0x3f
 8000aa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab2:	2340      	movs	r3, #64	; 0x40
 8000ab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab6:	2340      	movs	r3, #64	; 0x40
 8000ab8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2107      	movs	r1, #7
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fccf 	bl	800246c <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ad4:	f000 f808 	bl	8000ae8 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3770      	adds	r7, #112	; 0x70
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	58024800 	.word	0x58024800

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x30>)
 8000afc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x30>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58024400 	.word	0x58024400

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 fcc2 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM1_UP_IRQHandler+0x10>)
 8000b82:	f003 feaf 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24000098 	.word	0x24000098

08000b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM2_IRQHandler+0x10>)
 8000b96:	f003 fea5 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240000e4 	.word	0x240000e4

08000ba4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000baa:	f003 fe9b 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000130 	.word	0x24000130

08000bb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d105      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    TIM1_CNT++;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bd2:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
  {
    TIM8_CNT++;
  }
}
 8000bd4:	e014      	b.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bde:	d105      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x34>
    TIM2_CNT++;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	e009      	b.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d104      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x48>
    TIM8_CNT++;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	24000210 	.word	0x24000210
 8000c14:	24000214 	.word	0x24000214
 8000c18:	40010400 	.word	0x40010400
 8000c1c:	24000218 	.word	0x24000218

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f005 fcce 	bl	80065f0 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	24100000 	.word	0x24100000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	24000094 	.word	0x24000094
 8000c88:	24000630 	.word	0x24000630

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <SystemInit+0xd0>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <SystemInit+0xd0>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <SystemInit+0xd4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d807      	bhi.n	8000cbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cac:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <SystemInit+0xd4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 030f 	bic.w	r3, r3, #15
 8000cb4:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <SystemInit+0xd4>)
 8000cb6:	f043 0303 	orr.w	r3, r3, #3
 8000cba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <SystemInit+0xd8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <SystemInit+0xd8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <SystemInit+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <SystemInit+0xd8>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4924      	ldr	r1, [pc, #144]	; (8000d64 <SystemInit+0xd8>)
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <SystemInit+0xdc>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <SystemInit+0xd4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <SystemInit+0xd4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f023 030f 	bic.w	r3, r3, #15
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <SystemInit+0xd4>)
 8000cf0:	f043 0303 	orr.w	r3, r3, #3
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <SystemInit+0xd8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <SystemInit+0xd8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <SystemInit+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <SystemInit+0xd8>)
 8000d0a:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <SystemInit+0xe0>)
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <SystemInit+0xd8>)
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <SystemInit+0xe4>)
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <SystemInit+0xd8>)
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <SystemInit+0xe8>)
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <SystemInit+0xd8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <SystemInit+0xd8>)
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <SystemInit+0xe8>)
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <SystemInit+0xd8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <SystemInit+0xd8>)
 8000d2e:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <SystemInit+0xe8>)
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <SystemInit+0xd8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <SystemInit+0xd8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <SystemInit+0xd8>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <SystemInit+0xd8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <SystemInit+0xec>)
 8000d4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	52002000 	.word	0x52002000
 8000d64:	58024400 	.word	0x58024400
 8000d68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d6c:	02020200 	.word	0x02020200
 8000d70:	01ff0000 	.word	0x01ff0000
 8000d74:	01010280 	.word	0x01010280
 8000d78:	52004000 	.word	0x52004000

08000d7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <MX_TIM1_Init+0xa4>)
 8000d9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000da2:	f240 1217 	movw	r2, #279	; 0x117
 8000da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000db0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc8:	4814      	ldr	r0, [pc, #80]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000dca:	f003 fcbb 	bl	8004744 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000dd4:	f7ff fe88 	bl	8000ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4619      	mov	r1, r3
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000de6:	f003 fe85 	bl	8004af4 <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000df0:	f7ff fe7a 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_TIM1_Init+0xa0>)
 8000e06:	f004 f8d9 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e10:	f7ff fe6a 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24000098 	.word	0x24000098
 8000e20:	40010000 	.word	0x40010000

08000e24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e4c:	f240 1217 	movw	r2, #279	; 0x117
 8000e50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e5a:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <MX_TIM2_Init+0x9c>)
 8000e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e6a:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e6c:	f003 fc6a 	bl	8004744 <HAL_TIM_Base_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e76:	f7ff fe37 	bl	8000ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e88:	f003 fe34 	bl	8004af4 <HAL_TIM_ConfigClockSource>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e92:	f7ff fe29 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000ea4:	f004 f88a 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eae:	f7ff fe1b 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	240000e4 	.word	0x240000e4
 8000ec0:	0001869f 	.word	0x0001869f

08000ec4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000ee4:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <MX_TIM8_Init+0xa4>)
 8000ee6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000eea:	f240 1217 	movw	r2, #279	; 0x117
 8000eee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000ef8:	2209      	movs	r2, #9
 8000efa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f0e:	4815      	ldr	r0, [pc, #84]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000f10:	f003 fc18 	bl	8004744 <HAL_TIM_Base_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000f1a:	f7ff fde5 	bl	8000ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000f2c:	f003 fde2 	bl	8004af4 <HAL_TIM_ConfigClockSource>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000f36:	f7ff fdd7 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM8_Init+0xa0>)
 8000f4c:	f004 f836 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f56:	f7ff fdc7 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24000130 	.word	0x24000130
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a2b      	ldr	r2, [pc, #172]	; (8001028 <HAL_TIM_Base_MspInit+0xbc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d117      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000f80:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000f90:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f000 fba6 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f000 fbbd 	bl	8001726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000fac:	e038      	b.n	8001020 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM2)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb6:	d117      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000fba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000fca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f000 fb89 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe0:	201c      	movs	r0, #28
 8000fe2:	f000 fba0 	bl	8001726 <HAL_NVIC_EnableIRQ>
}
 8000fe6:	e01b      	b.n	8001020 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM8)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_TIM_Base_MspInit+0xc4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d116      	bne.n	8001020 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000ff4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0xc0>)
 8001004:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	202c      	movs	r0, #44	; 0x2c
 8001016:	f000 fb6c 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800101a:	202c      	movs	r0, #44	; 0x2c
 800101c:	f000 fb83 	bl	8001726 <HAL_NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010000 	.word	0x40010000
 800102c:	58024400 	.word	0x58024400
 8001030:	40010400 	.word	0x40010400

08001034 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <MX_USART3_UART_Init+0x94>)
 800103c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 800107e:	f004 f849 	bl	8005114 <HAL_UART_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001088:	f7ff fd2e 	bl	8000ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 8001090:	f005 f9e3 	bl	800645a <HAL_UARTEx_SetTxFifoThreshold>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800109a:	f7ff fd25 	bl	8000ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 80010a2:	f005 fa18 	bl	80064d6 <HAL_UARTEx_SetRxFifoThreshold>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f7ff fd1c 	bl	8000ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_USART3_UART_Init+0x90>)
 80010b2:	f005 f999 	bl	80063e8 <HAL_UARTEx_DisableFifoMode>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010bc:	f7ff fd14 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400017c 	.word	0x2400017c
 80010c8:	40004800 	.word	0x40004800

080010cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ba      	sub	sp, #232	; 0xe8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	22c0      	movs	r2, #192	; 0xc0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 faa9 	bl	8006644 <memset>
  if(uartHandle->Instance==USART3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_UART_MspInit+0xc8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d146      	bne.n	800118a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010fc:	f04f 0202 	mov.w	r2, #2
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fd36 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800111e:	f7ff fce3 	bl	8000ae8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_UART_MspInit+0xcc>)
 8001124:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_UART_MspInit+0xcc>)
 800112a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_UART_MspInit+0xcc>)
 8001134:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0xcc>)
 8001142:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_UART_MspInit+0xcc>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0xcc>)
 8001152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800115e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001178:	2307      	movs	r3, #7
 800117a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_UART_MspInit+0xd0>)
 8001186:	f000 fae9 	bl	800175c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	37e8      	adds	r7, #232	; 0xe8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004800 	.word	0x40004800
 8001198:	58024400 	.word	0x58024400
 800119c:	58020c00 	.word	0x58020c00

080011a0 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "----------------------------------------\r\n");
 80011b4:	4930      	ldr	r1, [pc, #192]	; (8001278 <BootMessagePrint+0xc8>)
 80011b6:	4831      	ldr	r0, [pc, #196]	; (800127c <BootMessagePrint+0xcc>)
 80011b8:	f005 fa4c 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80011bc:	482f      	ldr	r0, [pc, #188]	; (800127c <BootMessagePrint+0xcc>)
 80011be:	f7ff f897 	bl	80002f0 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	492c      	ldr	r1, [pc, #176]	; (800127c <BootMessagePrint+0xcc>)
 80011cc:	482c      	ldr	r0, [pc, #176]	; (8001280 <BootMessagePrint+0xd0>)
 80011ce:	f003 fff1 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <BootMessagePrint+0xd4>)
 80011d4:	492c      	ldr	r1, [pc, #176]	; (8001288 <BootMessagePrint+0xd8>)
 80011d6:	4829      	ldr	r0, [pc, #164]	; (800127c <BootMessagePrint+0xcc>)
 80011d8:	f005 fa3c 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80011dc:	4827      	ldr	r0, [pc, #156]	; (800127c <BootMessagePrint+0xcc>)
 80011de:	f7ff f887 	bl	80002f0 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <BootMessagePrint+0xcc>)
 80011ec:	4824      	ldr	r0, [pc, #144]	; (8001280 <BootMessagePrint+0xd0>)
 80011ee:	f003 ffe1 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 80011f2:	4a26      	ldr	r2, [pc, #152]	; (800128c <BootMessagePrint+0xdc>)
 80011f4:	4926      	ldr	r1, [pc, #152]	; (8001290 <BootMessagePrint+0xe0>)
 80011f6:	4821      	ldr	r0, [pc, #132]	; (800127c <BootMessagePrint+0xcc>)
 80011f8:	f005 fa2c 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <BootMessagePrint+0xcc>)
 80011fe:	f7ff f877 	bl	80002f0 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	491c      	ldr	r1, [pc, #112]	; (800127c <BootMessagePrint+0xcc>)
 800120c:	481c      	ldr	r0, [pc, #112]	; (8001280 <BootMessagePrint+0xd0>)
 800120e:	f003 ffd1 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 8001212:	4a20      	ldr	r2, [pc, #128]	; (8001294 <BootMessagePrint+0xe4>)
 8001214:	4920      	ldr	r1, [pc, #128]	; (8001298 <BootMessagePrint+0xe8>)
 8001216:	4819      	ldr	r0, [pc, #100]	; (800127c <BootMessagePrint+0xcc>)
 8001218:	f005 fa1c 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800121c:	4817      	ldr	r0, [pc, #92]	; (800127c <BootMessagePrint+0xcc>)
 800121e:	f7ff f867 	bl	80002f0 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	4914      	ldr	r1, [pc, #80]	; (800127c <BootMessagePrint+0xcc>)
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <BootMessagePrint+0xd0>)
 800122e:	f003 ffc1 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <BootMessagePrint+0xec>)
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <BootMessagePrint+0xf0>)
 8001236:	491b      	ldr	r1, [pc, #108]	; (80012a4 <BootMessagePrint+0xf4>)
 8001238:	4810      	ldr	r0, [pc, #64]	; (800127c <BootMessagePrint+0xcc>)
 800123a:	f005 fa0b 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <BootMessagePrint+0xcc>)
 8001240:	f7ff f856 	bl	80002f0 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	490b      	ldr	r1, [pc, #44]	; (800127c <BootMessagePrint+0xcc>)
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <BootMessagePrint+0xd0>)
 8001250:	f003 ffb0 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "----------------------------------------\r\n" );
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <BootMessagePrint+0xc8>)
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <BootMessagePrint+0xcc>)
 8001258:	f005 f9fc 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <BootMessagePrint+0xcc>)
 800125e:	f7ff f847 	bl	80002f0 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	4904      	ldr	r1, [pc, #16]	; (800127c <BootMessagePrint+0xcc>)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <BootMessagePrint+0xd0>)
 800126e:	f003 ffa1 	bl	80051b4 <HAL_UART_Transmit>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	08006f5c 	.word	0x08006f5c
 800127c:	2400021c 	.word	0x2400021c
 8001280:	2400017c 	.word	0x2400017c
 8001284:	08006f88 	.word	0x08006f88
 8001288:	08006f98 	.word	0x08006f98
 800128c:	08006fb4 	.word	0x08006fb4
 8001290:	08006fbc 	.word	0x08006fbc
 8001294:	08006fd8 	.word	0x08006fd8
 8001298:	08006fec 	.word	0x08006fec
 800129c:	08007008 	.word	0x08007008
 80012a0:	08007014 	.word	0x08007014
 80012a4:	08007020 	.word	0x08007020

080012a8 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "----------------------------------------\r\n");
 80012ac:	493d      	ldr	r1, [pc, #244]	; (80013a4 <GetClockSourcePrint+0xfc>)
 80012ae:	483e      	ldr	r0, [pc, #248]	; (80013a8 <GetClockSourcePrint+0x100>)
 80012b0:	f005 f9d0 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80012b4:	483c      	ldr	r0, [pc, #240]	; (80013a8 <GetClockSourcePrint+0x100>)
 80012b6:	f7ff f81b 	bl	80002f0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	4939      	ldr	r1, [pc, #228]	; (80013a8 <GetClockSourcePrint+0x100>)
 80012c4:	4839      	ldr	r0, [pc, #228]	; (80013ac <GetClockSourcePrint+0x104>)
 80012c6:	f003 ff75 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80012ca:	f001 fa85 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <GetClockSourcePrint+0x108>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	461a      	mov	r2, r3
 80012da:	4936      	ldr	r1, [pc, #216]	; (80013b4 <GetClockSourcePrint+0x10c>)
 80012dc:	4832      	ldr	r0, [pc, #200]	; (80013a8 <GetClockSourcePrint+0x100>)
 80012de:	f005 f9b9 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80012e2:	4831      	ldr	r0, [pc, #196]	; (80013a8 <GetClockSourcePrint+0x100>)
 80012e4:	f7ff f804 	bl	80002f0 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	492d      	ldr	r1, [pc, #180]	; (80013a8 <GetClockSourcePrint+0x100>)
 80012f2:	482e      	ldr	r0, [pc, #184]	; (80013ac <GetClockSourcePrint+0x104>)
 80012f4:	f003 ff5e 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80012f8:	f001 fbe8 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a2c      	ldr	r2, [pc, #176]	; (80013b0 <GetClockSourcePrint+0x108>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9b      	lsrs	r3, r3, #18
 8001306:	461a      	mov	r2, r3
 8001308:	492b      	ldr	r1, [pc, #172]	; (80013b8 <GetClockSourcePrint+0x110>)
 800130a:	4827      	ldr	r0, [pc, #156]	; (80013a8 <GetClockSourcePrint+0x100>)
 800130c:	f005 f9a2 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001310:	4825      	ldr	r0, [pc, #148]	; (80013a8 <GetClockSourcePrint+0x100>)
 8001312:	f7fe ffed 	bl	80002f0 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	4922      	ldr	r1, [pc, #136]	; (80013a8 <GetClockSourcePrint+0x100>)
 8001320:	4822      	ldr	r0, [pc, #136]	; (80013ac <GetClockSourcePrint+0x104>)
 8001322:	f003 ff47 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001326:	f001 fc01 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 800132a:	4603      	mov	r3, r0
 800132c:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <GetClockSourcePrint+0x108>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0c9b      	lsrs	r3, r3, #18
 8001334:	461a      	mov	r2, r3
 8001336:	4921      	ldr	r1, [pc, #132]	; (80013bc <GetClockSourcePrint+0x114>)
 8001338:	481b      	ldr	r0, [pc, #108]	; (80013a8 <GetClockSourcePrint+0x100>)
 800133a:	f005 f98b 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <GetClockSourcePrint+0x100>)
 8001340:	f7fe ffd6 	bl	80002f0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
 800134c:	4916      	ldr	r1, [pc, #88]	; (80013a8 <GetClockSourcePrint+0x100>)
 800134e:	4817      	ldr	r0, [pc, #92]	; (80013ac <GetClockSourcePrint+0x104>)
 8001350:	f003 ff30 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001354:	f001 fc00 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8001358:	4603      	mov	r3, r0
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <GetClockSourcePrint+0x108>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	0c9b      	lsrs	r3, r3, #18
 8001362:	461a      	mov	r2, r3
 8001364:	4916      	ldr	r1, [pc, #88]	; (80013c0 <GetClockSourcePrint+0x118>)
 8001366:	4810      	ldr	r0, [pc, #64]	; (80013a8 <GetClockSourcePrint+0x100>)
 8001368:	f005 f974 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <GetClockSourcePrint+0x100>)
 800136e:	f7fe ffbf 	bl	80002f0 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	b29a      	uxth	r2, r3
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	490b      	ldr	r1, [pc, #44]	; (80013a8 <GetClockSourcePrint+0x100>)
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <GetClockSourcePrint+0x104>)
 800137e:	f003 ff19 	bl	80051b4 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "----------------------------------------\r\n" );
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <GetClockSourcePrint+0xfc>)
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <GetClockSourcePrint+0x100>)
 8001386:	f005 f965 	bl	8006654 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <GetClockSourcePrint+0x100>)
 800138c:	f7fe ffb0 	bl	80002f0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	4903      	ldr	r1, [pc, #12]	; (80013a8 <GetClockSourcePrint+0x100>)
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <GetClockSourcePrint+0x104>)
 800139c:	f003 ff0a 	bl	80051b4 <HAL_UART_Transmit>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08006f5c 	.word	0x08006f5c
 80013a8:	2400021c 	.word	0x2400021c
 80013ac:	2400017c 	.word	0x2400017c
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	08007040 	.word	0x08007040
 80013b8:	08007070 	.word	0x08007070
 80013bc:	080070a0 	.word	0x080070a0
 80013c0:	080070d0 	.word	0x080070d0

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013c8:	f7ff fc60 	bl	8000c8c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e4:	4c0a      	ldr	r4, [pc, #40]	; (8001410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013f2:	f005 f903 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f6:	f7ff fad7 	bl	80009a8 <main>
  bx  lr
 80013fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001400:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001404:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001408:	0800717c 	.word	0x0800717c
  ldr r2, =_sbss
 800140c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001410:	24000630 	.word	0x24000630

08001414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141e:	2003      	movs	r0, #3
 8001420:	f000 f95c 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001424:	f001 f9d8 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8001428:	4602      	mov	r2, r0
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_Init+0x68>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	4913      	ldr	r1, [pc, #76]	; (8001484 <HAL_Init+0x6c>)
 8001436:	5ccb      	ldrb	r3, [r1, r3]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_Init+0x68>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_Init+0x6c>)
 800144c:	5cd3      	ldrb	r3, [r2, r3]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <HAL_Init+0x70>)
 800145a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_Init+0x74>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f814 	bl	8001490 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e002      	b.n	8001478 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001472:	f7ff fb3f 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	58024400 	.word	0x58024400
 8001484:	08007100 	.word	0x08007100
 8001488:	24000004 	.word	0x24000004
 800148c:	24000000 	.word	0x24000000

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_InitTick+0x60>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e021      	b.n	80014e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_InitTick+0x64>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_InitTick+0x60>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f941 	bl	8001742 <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f90b 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x68>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2400000c 	.word	0x2400000c
 80014f4:	24000000 	.word	0x24000000
 80014f8:	24000008 	.word	0x24000008

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2400000c 	.word	0x2400000c
 8001520:	2400061c 	.word	0x2400061c

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2400061c 	.word	0x2400061c

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <__NVIC_SetPriorityGrouping+0x40>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	4313      	orrs	r3, r2
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x40>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00
 8001580:	05fa0000 	.word	0x05fa0000

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff40 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff90 	bl	8001630 <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5f 	bl	80015dc <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff33 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa4 	bl	8001698 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <HAL_GPIO_Init+0x234>)
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800176e:	e194      	b.n	8001a9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8186 	beq.w	8001a94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d005      	beq.n	80017a0 <HAL_GPIO_Init+0x44>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 0201 	and.w	r2, r3, #1
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b03      	cmp	r3, #3
 800180c:	d017      	beq.n	800183e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d123      	bne.n	8001892 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	69b9      	ldr	r1, [r7, #24]
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80e0 	beq.w	8001a94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_GPIO_Init+0x238>)
 80018d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80018da:	4a2e      	ldr	r2, [pc, #184]	; (8001994 <HAL_GPIO_Init+0x238>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_GPIO_Init+0x238>)
 80018e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a29      	ldr	r2, [pc, #164]	; (8001998 <HAL_GPIO_Init+0x23c>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <HAL_GPIO_Init+0x240>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d052      	beq.n	80019c4 <HAL_GPIO_Init+0x268>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_GPIO_Init+0x244>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d031      	beq.n	800198a <HAL_GPIO_Init+0x22e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_GPIO_Init+0x248>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d02b      	beq.n	8001986 <HAL_GPIO_Init+0x22a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_GPIO_Init+0x24c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d025      	beq.n	8001982 <HAL_GPIO_Init+0x226>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_GPIO_Init+0x250>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01f      	beq.n	800197e <HAL_GPIO_Init+0x222>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_GPIO_Init+0x254>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_GPIO_Init+0x21e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1a      	ldr	r2, [pc, #104]	; (80019b4 <HAL_GPIO_Init+0x258>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_GPIO_Init+0x25c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00d      	beq.n	8001972 <HAL_GPIO_Init+0x216>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x260>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x212>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_GPIO_Init+0x264>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_GPIO_Init+0x20e>
 8001966:	2309      	movs	r3, #9
 8001968:	e02d      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800196a:	230a      	movs	r3, #10
 800196c:	e02b      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800196e:	2308      	movs	r3, #8
 8001970:	e029      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001972:	2307      	movs	r3, #7
 8001974:	e027      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001976:	2306      	movs	r3, #6
 8001978:	e025      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800197a:	2305      	movs	r3, #5
 800197c:	e023      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800197e:	2304      	movs	r3, #4
 8001980:	e021      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001982:	2303      	movs	r3, #3
 8001984:	e01f      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001986:	2302      	movs	r3, #2
 8001988:	e01d      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800198a:	2301      	movs	r3, #1
 800198c:	e01b      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800198e:	bf00      	nop
 8001990:	58000080 	.word	0x58000080
 8001994:	58024400 	.word	0x58024400
 8001998:	58000400 	.word	0x58000400
 800199c:	58020000 	.word	0x58020000
 80019a0:	58020400 	.word	0x58020400
 80019a4:	58020800 	.word	0x58020800
 80019a8:	58020c00 	.word	0x58020c00
 80019ac:	58021000 	.word	0x58021000
 80019b0:	58021400 	.word	0x58021400
 80019b4:	58021800 	.word	0x58021800
 80019b8:	58021c00 	.word	0x58021c00
 80019bc:	58022000 	.word	0x58022000
 80019c0:	58022400 	.word	0x58022400
 80019c4:	2300      	movs	r3, #0
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d6:	4938      	ldr	r1, [pc, #224]	; (8001ab8 <HAL_GPIO_Init+0x35c>)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae63 	bne.w	8001770 <HAL_GPIO_Init+0x14>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3724      	adds	r7, #36	; 0x24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	58000400 	.word	0x58000400

08001abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e001      	b.n	8001ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b30:	887a      	ldrh	r2, [r7, #2]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	041a      	lsls	r2, r3, #16
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	400b      	ands	r3, r1
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d00a      	beq.n	8001b7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e040      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e03e      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b86:	491f      	ldr	r1, [pc, #124]	; (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b8e:	f7ff fcc9 	bl	8001524 <HAL_GetTick>
 8001b92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b94:	e009      	b.n	8001baa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b96:	f7ff fcc5 	bl	8001524 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba4:	d901      	bls.n	8001baa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e028      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b1e      	cmp	r3, #30
 8001bbc:	d008      	beq.n	8001bd0 <HAL_PWREx_ConfigSupply+0x7c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8001bc2:	d005      	beq.n	8001bd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b1d      	cmp	r3, #29
 8001bc8:	d002      	beq.n	8001bd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b2d      	cmp	r3, #45	; 0x2d
 8001bce:	d114      	bne.n	8001bfa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001bd0:	f7ff fca8 	bl	8001524 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bd6:	e009      	b.n	8001bec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bd8:	f7ff fca4 	bl	8001524 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be6:	d901      	bls.n	8001bec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e007      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	58024800 	.word	0x58024800

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f000 bc1f 	b.w	800245a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80b3 	beq.w	8001d90 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	4b95      	ldr	r3, [pc, #596]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c34:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_OscConfig+0x48>
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	2b18      	cmp	r3, #24
 8001c44:	d112      	bne.n	8001c6c <HAL_RCC_OscConfig+0x64>
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d10d      	bne.n	8001c6c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8098 	beq.w	8001d8e <HAL_RCC_OscConfig+0x186>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 8093 	bne.w	8001d8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e3f6      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x7c>
 8001c76:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a81      	ldr	r2, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e058      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d112      	bne.n	8001cb2 <HAL_RCC_OscConfig+0xaa>
 8001c8c:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b79      	ldr	r3, [pc, #484]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a78      	ldr	r2, [pc, #480]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001c9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e041      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cba:	d112      	bne.n	8001ce2 <HAL_RCC_OscConfig+0xda>
 8001cbc:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6f      	ldr	r2, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6c      	ldr	r2, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a69      	ldr	r2, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e029      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001cea:	d112      	bne.n	8001d12 <HAL_RCC_OscConfig+0x10a>
 8001cec:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e011      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a5a      	ldr	r2, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a54      	ldr	r2, [pc, #336]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d013      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fbf1 	bl	8001524 <HAL_GetTick>
 8001d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d46:	f7ff fbed 	bl	8001524 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e380      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d58:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x13e>
 8001d64:	e014      	b.n	8001d90 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff fbdd 	bl	8001524 <HAL_GetTick>
 8001d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6e:	f7ff fbd9 	bl	8001524 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e36c      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d80:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x166>
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 808c 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001da6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1bc>
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	2b18      	cmp	r3, #24
 8001db8:	d137      	bne.n	8001e2a <HAL_RCC_OscConfig+0x222>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d132      	bne.n	8001e2a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1d4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e33e      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 0219 	bic.w	r2, r3, #25
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4925      	ldr	r1, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7ff fb99 	bl	8001524 <HAL_GetTick>
 8001df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff fb95 	bl	8001524 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e328      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	4917      	ldr	r1, [pc, #92]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e28:	e045      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d028      	beq.n	8001e84 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0219 	bic.w	r2, r3, #25
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4910      	ldr	r1, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fb6e 	bl	8001524 <HAL_GetTick>
 8001e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fb6a 	bl	8001524 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e2fd      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	061b      	lsls	r3, r3, #24
 8001e78:	4901      	ldr	r1, [pc, #4]	; (8001e80 <HAL_RCC_OscConfig+0x278>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
 8001e7e:	e01a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2ae>
 8001e80:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b97      	ldr	r3, [pc, #604]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a96      	ldr	r2, [pc, #600]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fb48 	bl	8001524 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff fb44 	bl	8001524 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e2d7      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eaa:	4b8e      	ldr	r3, [pc, #568]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d06a      	beq.n	8001f98 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec2:	4b88      	ldr	r3, [pc, #544]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ecc:	4b85      	ldr	r3, [pc, #532]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d007      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2e0>
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b18      	cmp	r3, #24
 8001edc:	d11b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x30e>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d116      	bne.n	8001f16 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee8:	4b7e      	ldr	r3, [pc, #504]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2f8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e2ac      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f00:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	4975      	ldr	r1, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f14:	e040      	b.n	8001f98 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d023      	beq.n	8001f66 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f1e:	4b71      	ldr	r3, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a70      	ldr	r2, [pc, #448]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fafb 	bl	8001524 <HAL_GetTick>
 8001f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f32:	f7ff faf7 	bl	8001524 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e28a      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f44:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f50:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	4961      	ldr	r1, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e018      	b.n	8001f98 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f66:	4b5f      	ldr	r3, [pc, #380]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5e      	ldr	r2, [pc, #376]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff fad7 	bl	8001524 <HAL_GetTick>
 8001f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fad3 	bl	8001524 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e266      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f8c:	4b55      	ldr	r3, [pc, #340]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d036      	beq.n	8002012 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d019      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fac:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb0:	4a4c      	ldr	r2, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fab4 	bl	8001524 <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fab0 	bl	8001524 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e243      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fd2:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x3b8>
 8001fde:	e018      	b.n	8002012 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe0:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff fa9a 	bl	8001524 <HAL_GetTick>
 8001ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fa96 	bl	8001524 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e229      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8002008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d036      	beq.n	800208c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d019      	beq.n	800205a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 800202c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002030:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002032:	f7ff fa77 	bl	8001524 <HAL_GetTick>
 8002036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203a:	f7ff fa73 	bl	8001524 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e206      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x432>
 8002058:	e018      	b.n	800208c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8002060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002064:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002066:	f7ff fa5d 	bl	8001524 <HAL_GetTick>
 800206a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206e:	f7ff fa59 	bl	8001524 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1ec      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80af 	beq.w	80021f8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_OscConfig+0x4e0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_RCC_OscConfig+0x4e0>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020a6:	f7ff fa3d 	bl	8001524 <HAL_GetTick>
 80020aa:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff fa39 	bl	8001524 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	; 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1cc      	b.n	800245a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_OscConfig+0x4e0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10b      	bne.n	80020ec <HAL_RCC_OscConfig+0x4e4>
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a02      	ldr	r2, [pc, #8]	; (80020e4 <HAL_RCC_OscConfig+0x4dc>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	e05b      	b.n	800219a <HAL_RCC_OscConfig+0x592>
 80020e2:	bf00      	nop
 80020e4:	58024400 	.word	0x58024400
 80020e8:	58024800 	.word	0x58024800
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d112      	bne.n	800211a <HAL_RCC_OscConfig+0x512>
 80020f4:	4b9d      	ldr	r3, [pc, #628]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a9c      	ldr	r2, [pc, #624]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	4b9a      	ldr	r3, [pc, #616]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a99      	ldr	r2, [pc, #612]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	4b97      	ldr	r3, [pc, #604]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a96      	ldr	r2, [pc, #600]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	e03f      	b.n	800219a <HAL_RCC_OscConfig+0x592>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d112      	bne.n	8002148 <HAL_RCC_OscConfig+0x540>
 8002122:	4b92      	ldr	r3, [pc, #584]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a91      	ldr	r2, [pc, #580]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b8f      	ldr	r3, [pc, #572]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a8e      	ldr	r2, [pc, #568]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a8b      	ldr	r2, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	e028      	b.n	800219a <HAL_RCC_OscConfig+0x592>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b85      	cmp	r3, #133	; 0x85
 800214e:	d112      	bne.n	8002176 <HAL_RCC_OscConfig+0x56e>
 8002150:	4b86      	ldr	r3, [pc, #536]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a85      	ldr	r2, [pc, #532]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	4b83      	ldr	r3, [pc, #524]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a82      	ldr	r2, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	4b80      	ldr	r3, [pc, #512]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	e011      	b.n	800219a <HAL_RCC_OscConfig+0x592>
 8002176:	4b7d      	ldr	r3, [pc, #500]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a7c      	ldr	r2, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	4b7a      	ldr	r3, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a79      	ldr	r2, [pc, #484]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
 800218e:	4b77      	ldr	r3, [pc, #476]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a76      	ldr	r2, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7ff f9bf 	bl	8001524 <HAL_GetTick>
 80021a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7ff f9bb 	bl	8001524 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e14c      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ee      	beq.n	80021aa <HAL_RCC_OscConfig+0x5a2>
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff f9a9 	bl	8001524 <HAL_GetTick>
 80021d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff f9a5 	bl	8001524 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e136      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ec:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ee      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 812b 	beq.w	8002458 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002202:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800220a:	2b18      	cmp	r3, #24
 800220c:	f000 80bb 	beq.w	8002386 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b02      	cmp	r3, #2
 8002216:	f040 8095 	bne.w	8002344 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b54      	ldr	r3, [pc, #336]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a53      	ldr	r2, [pc, #332]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff f97d 	bl	8001524 <HAL_GetTick>
 800222a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff f979 	bl	8001524 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e10c      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002240:	4b4a      	ldr	r3, [pc, #296]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800224e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002250:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_OscConfig+0x768>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	430a      	orrs	r2, r1
 8002260:	4942      	ldr	r1, [pc, #264]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002262:	4313      	orrs	r3, r2
 8002264:	628b      	str	r3, [r1, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	3b01      	subs	r3, #1
 800226c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	3b01      	subs	r3, #1
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	b29b      	uxth	r3, r3
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	3b01      	subs	r3, #1
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	3b01      	subs	r3, #1
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002296:	4935      	ldr	r1, [pc, #212]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002298:	4313      	orrs	r3, r2
 800229a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_OscConfig+0x76c>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022b4:	00d2      	lsls	r2, r2, #3
 80022b6:	492d      	ldr	r1, [pc, #180]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f023 020c 	bic.w	r2, r3, #12
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4928      	ldr	r1, [pc, #160]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f023 0202 	bic.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4924      	ldr	r1, [pc, #144]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x764>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff f902 	bl	8001524 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7ff f8fe 	bl	8001524 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e091      	b.n	800245a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x71c>
 8002342:	e089      	b.n	8002458 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_OscConfig+0x764>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_RCC_OscConfig+0x764>)
 800234a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff f8e8 	bl	8001524 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002356:	e00f      	b.n	8002378 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff f8e4 	bl	8001524 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d908      	bls.n	8002378 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e077      	b.n	800245a <HAL_RCC_OscConfig+0x852>
 800236a:	bf00      	nop
 800236c:	58024400 	.word	0x58024400
 8002370:	fffffc0c 	.word	0xfffffc0c
 8002374:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e9      	bne.n	8002358 <HAL_RCC_OscConfig+0x750>
 8002384:	e068      	b.n	8002458 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	2b01      	cmp	r3, #1
 8002398:	d031      	beq.n	80023fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0203 	and.w	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d12a      	bne.n	80023fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d122      	bne.n	80023fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d11a      	bne.n	80023fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d111      	bne.n	80023fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d108      	bne.n	80023fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	0e1b      	lsrs	r3, r3, #24
 80023f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e02b      	b.n	800245a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800240c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d01f      	beq.n	8002458 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002424:	f7ff f87e 	bl	8001524 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800242a:	bf00      	nop
 800242c:	f7ff f87a 	bl	8001524 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	4293      	cmp	r3, r2
 8002436:	d0f9      	beq.n	800242c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 800243a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_RCC_OscConfig+0x860>)
 800243e:	4013      	ands	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002444:	00d2      	lsls	r2, r2, #3
 8002446:	4907      	ldr	r1, [pc, #28]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_RCC_OscConfig+0x85c>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3730      	adds	r7, #48	; 0x30
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	58024400 	.word	0x58024400
 8002468:	ffff0007 	.word	0xffff0007

0800246c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e19c      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b8a      	ldr	r3, [pc, #552]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b87      	ldr	r3, [pc, #540]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020f 	bic.w	r2, r3, #15
 8002496:	4985      	ldr	r1, [pc, #532]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b83      	ldr	r3, [pc, #524]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e184      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d908      	bls.n	80024de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024cc:	4b78      	ldr	r3, [pc, #480]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	4975      	ldr	r1, [pc, #468]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d010      	beq.n	800250c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d908      	bls.n	800250c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024fa:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	496a      	ldr	r1, [pc, #424]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002524:	429a      	cmp	r2, r3
 8002526:	d908      	bls.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	495e      	ldr	r1, [pc, #376]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002536:	4313      	orrs	r3, r2
 8002538:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002552:	429a      	cmp	r2, r3
 8002554:	d908      	bls.n	8002568 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4953      	ldr	r1, [pc, #332]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002564:	4313      	orrs	r3, r2
 8002566:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	429a      	cmp	r2, r3
 8002582:	d908      	bls.n	8002596 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f023 020f 	bic.w	r2, r3, #15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4947      	ldr	r1, [pc, #284]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002592:	4313      	orrs	r3, r2
 8002594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d055      	beq.n	800264e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025a2:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4940      	ldr	r1, [pc, #256]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025bc:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d121      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0f6      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d115      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0ea      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0de      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0d6      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f023 0207 	bic.w	r2, r3, #7
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4925      	ldr	r1, [pc, #148]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800261a:	4313      	orrs	r3, r2
 800261c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261e:	f7fe ff81 	bl	8001524 <HAL_GetTick>
 8002622:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002624:	e00a      	b.n	800263c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002626:	f7fe ff7d 	bl	8001524 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0be      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	429a      	cmp	r2, r3
 800264c:	d1eb      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d010      	beq.n	800267c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	429a      	cmp	r2, r3
 8002668:	d208      	bcs.n	800267c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	490e      	ldr	r1, [pc, #56]	; (80026b0 <HAL_RCC_ClockConfig+0x244>)
 8002678:	4313      	orrs	r3, r2
 800267a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d214      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	4906      	ldr	r1, [pc, #24]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_ClockConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e086      	b.n	80027ba <HAL_RCC_ClockConfig+0x34e>
 80026ac:	52002000 	.word	0x52002000
 80026b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d208      	bcs.n	80026e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026d0:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4939      	ldr	r1, [pc, #228]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d010      	beq.n	8002710 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d208      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	492e      	ldr	r1, [pc, #184]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800270c:	4313      	orrs	r3, r2
 800270e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002728:	429a      	cmp	r2, r3
 800272a:	d208      	bcs.n	800273e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4922      	ldr	r1, [pc, #136]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800273a:	4313      	orrs	r3, r2
 800273c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d010      	beq.n	800276c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002756:	429a      	cmp	r2, r3
 8002758:	d208      	bcs.n	800276c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4917      	ldr	r1, [pc, #92]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002768:	4313      	orrs	r3, r2
 800276a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800276c:	f000 f834 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	4912      	ldr	r1, [pc, #72]	; (80027c8 <HAL_RCC_ClockConfig+0x35c>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_RCC_ClockConfig+0x358>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_RCC_ClockConfig+0x35c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x360>)
 80027a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x364>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x368>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fe6e 	bl	8001490 <HAL_InitTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	58024400 	.word	0x58024400
 80027c8:	08007100 	.word	0x08007100
 80027cc:	24000004 	.word	0x24000004
 80027d0:	24000000 	.word	0x24000000
 80027d4:	24000008 	.word	0x24000008

080027d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027de:	4bb3      	ldr	r3, [pc, #716]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e6:	2b18      	cmp	r3, #24
 80027e8:	f200 8155 	bhi.w	8002a96 <HAL_RCC_GetSysClockFreq+0x2be>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002859 	.word	0x08002859
 80027f8:	08002a97 	.word	0x08002a97
 80027fc:	08002a97 	.word	0x08002a97
 8002800:	08002a97 	.word	0x08002a97
 8002804:	08002a97 	.word	0x08002a97
 8002808:	08002a97 	.word	0x08002a97
 800280c:	08002a97 	.word	0x08002a97
 8002810:	08002a97 	.word	0x08002a97
 8002814:	0800287f 	.word	0x0800287f
 8002818:	08002a97 	.word	0x08002a97
 800281c:	08002a97 	.word	0x08002a97
 8002820:	08002a97 	.word	0x08002a97
 8002824:	08002a97 	.word	0x08002a97
 8002828:	08002a97 	.word	0x08002a97
 800282c:	08002a97 	.word	0x08002a97
 8002830:	08002a97 	.word	0x08002a97
 8002834:	08002885 	.word	0x08002885
 8002838:	08002a97 	.word	0x08002a97
 800283c:	08002a97 	.word	0x08002a97
 8002840:	08002a97 	.word	0x08002a97
 8002844:	08002a97 	.word	0x08002a97
 8002848:	08002a97 	.word	0x08002a97
 800284c:	08002a97 	.word	0x08002a97
 8002850:	08002a97 	.word	0x08002a97
 8002854:	0800288b 	.word	0x0800288b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002858:	4b94      	ldr	r3, [pc, #592]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002864:	4b91      	ldr	r3, [pc, #580]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	4a90      	ldr	r2, [pc, #576]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002876:	e111      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002878:	4b8d      	ldr	r3, [pc, #564]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800287a:	61bb      	str	r3, [r7, #24]
      break;
 800287c:	e10e      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800287e:	4b8d      	ldr	r3, [pc, #564]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002880:	61bb      	str	r3, [r7, #24]
      break;
 8002882:	e10b      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002884:	4b8c      	ldr	r3, [pc, #560]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002886:	61bb      	str	r3, [r7, #24]
      break;
 8002888:	e108      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800288a:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002894:	4b85      	ldr	r3, [pc, #532]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028a0:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028aa:	4b80      	ldr	r3, [pc, #512]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80e1 	beq.w	8002a90 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	f000 8083 	beq.w	80029dc <HAL_RCC_GetSysClockFreq+0x204>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f200 80a1 	bhi.w	8002a20 <HAL_RCC_GetSysClockFreq+0x248>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x114>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d056      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028ea:	e099      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02d      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028f8:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	4a6b      	ldr	r2, [pc, #428]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002922:	4b62      	ldr	r3, [pc, #392]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002932:	ed97 6a02 	vldr	s12, [r7, #8]
 8002936:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 800293a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800293e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002952:	e087      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002966:	4b51      	ldr	r3, [pc, #324]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002976:	ed97 6a02 	vldr	s12, [r7, #8]
 800297a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 800297e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800298a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002996:	e065      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80029be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 80029c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029da:	e043      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ac8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a1e:	e021      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	0a5b      	lsrs	r3, r3, #9
 8002a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a6e:	3301      	adds	r3, #1
 8002a70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a88:	ee17 3a90 	vmov	r3, s15
 8002a8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a8e:	e005      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
      break;
 8002a94:	e002      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a98:	61bb      	str	r3, [r7, #24]
      break;
 8002a9a:	bf00      	nop
  }

  return sysclockfreq;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	03d09000 	.word	0x03d09000
 8002ab4:	003d0900 	.word	0x003d0900
 8002ab8:	007a1200 	.word	0x007a1200
 8002abc:	46000000 	.word	0x46000000
 8002ac0:	4c742400 	.word	0x4c742400
 8002ac4:	4a742400 	.word	0x4a742400
 8002ac8:	4af42400 	.word	0x4af42400

08002acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002ad2:	f7ff fe81 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x50>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490f      	ldr	r1, [pc, #60]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x50>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x54>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	08007100 	.word	0x08007100
 8002b24:	24000004 	.word	0x24000004
 8002b28:	24000000 	.word	0x24000000

08002b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002b30:	f7ff ffcc 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4904      	ldr	r1, [pc, #16]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	58024400 	.word	0x58024400
 8002b54:	08007100 	.word	0x08007100

08002b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002b5c:	f7ff ffb6 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4904      	ldr	r1, [pc, #16]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	08007100 	.word	0x08007100

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b0c8      	sub	sp, #288	; 0x120
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002ba8:	2500      	movs	r5, #0
 8002baa:	ea54 0305 	orrs.w	r3, r4, r5
 8002bae:	d049      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bba:	d02f      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bc0:	d828      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc6:	d01a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bcc:	d822      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bd6:	d007      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bda:	4ba7      	ldr	r3, [pc, #668]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	4aa6      	ldr	r2, [pc, #664]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002be6:	e01a      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bec:	3308      	adds	r3, #8
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fc43 	bl	800447c <RCCEx_PLL2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bfc:	e00f      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c02:	3328      	adds	r3, #40	; 0x28
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fcea 	bl	80045e0 <RCCEx_PLL3_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c12:	e004      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c1a:	e000      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c26:	4b94      	ldr	r3, [pc, #592]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c34:	4a90      	ldr	r2, [pc, #576]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	6513      	str	r3, [r2, #80]	; 0x50
 8002c3a:	e003      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002c50:	f04f 0900 	mov.w	r9, #0
 8002c54:	ea58 0309 	orrs.w	r3, r8, r9
 8002c58:	d047      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d82a      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c64:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c81 	.word	0x08002c81
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002ca5 	.word	0x08002ca5
 8002c78:	08002cc3 	.word	0x08002cc3
 8002c7c:	08002cc3 	.word	0x08002cc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c80:	4b7d      	ldr	r3, [pc, #500]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	4a7c      	ldr	r2, [pc, #496]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c8c:	e01a      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c92:	3308      	adds	r3, #8
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 fbf0 	bl	800447c <RCCEx_PLL2_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ca2:	e00f      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca8:	3328      	adds	r3, #40	; 0x28
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 fc97 	bl	80045e0 <RCCEx_PLL3_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cb8:	e004      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	f023 0107 	bic.w	r1, r3, #7
 8002cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6513      	str	r3, [r2, #80]	; 0x50
 8002ce0:	e003      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ce6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002cf6:	f04f 0b00 	mov.w	fp, #0
 8002cfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cfe:	d054      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d0a:	d036      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002d0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d10:	d82f      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d16:	d032      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	d829      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002d20:	d02f      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002d22:	2bc0      	cmp	r3, #192	; 0xc0
 8002d24:	d825      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d26:	2b80      	cmp	r3, #128	; 0x80
 8002d28:	d018      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002d2a:	2b80      	cmp	r3, #128	; 0x80
 8002d2c:	d821      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d007      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002d36:	e01c      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	4a4e      	ldr	r2, [pc, #312]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002d44:	e01e      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 fb94 	bl	800447c <RCCEx_PLL2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002d5a:	e013      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d60:	3328      	adds	r3, #40	; 0x28
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 fc3b 	bl	80045e0 <RCCEx_PLL3_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002d70:	e008      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d78:	e004      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6513      	str	r3, [r2, #80]	; 0x50
 8002da0:	e003      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002da6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002db6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	d05c      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002dd4:	d03b      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002dd6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002dda:	d834      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de0:	d037      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de6:	d82e      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002de8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002dec:	d033      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002dee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002df2:	d828      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d01a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d822      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d007      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002e0a:	e01c      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e18:	e01e      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e1e:	3308      	adds	r3, #8
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fb2a 	bl	800447c <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e2e:	e013      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e34:	3328      	adds	r3, #40	; 0x28
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 fbd1 	bl	80045e0 <RCCEx_PLL3_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e44:	e008      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e4c:	e004      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002e4e:	bf00      	nop
 8002e50:	e002      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6e:	4a02      	ldr	r2, [pc, #8]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6513      	str	r3, [r2, #80]	; 0x50
 8002e74:	e006      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002e76:	bf00      	nop
 8002e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002e9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	d03a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eaa:	2b30      	cmp	r3, #48	; 0x30
 8002eac:	d01f      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002eae:	2b30      	cmp	r3, #48	; 0x30
 8002eb0:	d819      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d815      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d019      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d111      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec2:	4bae      	ldr	r3, [pc, #696]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	4aad      	ldr	r2, [pc, #692]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002ece:	e011      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 facf 	bl	800447c <RCCEx_PLL2_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002eec:	e002      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002efc:	4b9f      	ldr	r3, [pc, #636]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	4a9c      	ldr	r2, [pc, #624]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4313      	orrs	r3, r2
 8002f38:	d051      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f44:	d035      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	d82e      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002f4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f50:	d031      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002f52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f56:	d828      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5c:	d01a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	d822      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002f6e:	e01c      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f70:	4b82      	ldr	r3, [pc, #520]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4a81      	ldr	r2, [pc, #516]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f82:	3308      	adds	r3, #8
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fa78 	bl	800447c <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f92:	e011      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f98:	3328      	adds	r3, #40	; 0x28
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fb1f 	bl	80045e0 <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e006      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fc0:	4b6e      	ldr	r3, [pc, #440]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fce:	4a6b      	ldr	r2, [pc, #428]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6513      	str	r3, [r2, #80]	; 0x50
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ff4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	d053      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d033      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800300a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800300e:	d82c      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003014:	d02f      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800301a:	d826      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800301c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003020:	d02b      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003026:	d820      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800302c:	d012      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800302e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003032:	d81a      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d115      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	3308      	adds	r3, #8
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f001 fa18 	bl	800447c <RCCEx_PLL2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003052:	e015      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003058:	3328      	adds	r3, #40	; 0x28
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f001 fabf 	bl	80045e0 <RCCEx_PLL3_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003068:	e00a      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003072:	bf00      	nop
 8003074:	e004      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800307e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003080:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003088:	4b3c      	ldr	r3, [pc, #240]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800308a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003096:	4a39      	ldr	r2, [pc, #228]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003098:	430b      	orrs	r3, r1
 800309a:	6513      	str	r3, [r2, #80]	; 0x50
 800309c:	e003      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80030b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4313      	orrs	r3, r2
 80030c4:	d060      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80030d2:	d039      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80030d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80030d8:	d832      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80030da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030de:	d035      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e4:	d82c      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d031      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d826      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80030f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030f6:	d02d      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80030f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030fc:	d820      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80030fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003102:	d012      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003108:	d81a      	bhi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d024      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800310e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003112:	d115      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003118:	3308      	adds	r3, #8
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f001 f9ad 	bl	800447c <RCCEx_PLL2_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003128:	e017      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800312a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312e:	3328      	adds	r3, #40	; 0x28
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f001 fa54 	bl	80045e0 <RCCEx_PLL3_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800313e:	e00c      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003146:	e008      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003148:	bf00      	nop
 800314a:	e006      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800314c:	bf00      	nop
 800314e:	e004      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003150:	bf00      	nop
 8003152:	e002      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003154:	bf00      	nop
 8003156:	e000      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10e      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800316a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003172:	4a02      	ldr	r2, [pc, #8]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003174:	430b      	orrs	r3, r1
 8003176:	6593      	str	r3, [r2, #88]	; 0x58
 8003178:	e006      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800317a:	bf00      	nop
 800317c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003184:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800319e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031a2:	460b      	mov	r3, r1
 80031a4:	4313      	orrs	r3, r2
 80031a6:	d037      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b2:	d00e      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80031b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b8:	d816      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d018      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80031be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c2:	d111      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c4:	4bc4      	ldr	r3, [pc, #784]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	4ac3      	ldr	r2, [pc, #780]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031d0:	e00f      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d6:	3308      	adds	r3, #8
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 f94e 	bl	800447c <RCCEx_PLL2_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031e6:	e004      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80031f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031fa:	4bb7      	ldr	r3, [pc, #732]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003208:	4ab3      	ldr	r2, [pc, #716]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800320a:	430b      	orrs	r3, r1
 800320c:	6513      	str	r3, [r2, #80]	; 0x50
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003214:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800322e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003232:	460b      	mov	r3, r1
 8003234:	4313      	orrs	r3, r2
 8003236:	d039      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	2b03      	cmp	r3, #3
 8003240:	d81c      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	08003285 	.word	0x08003285
 800324c:	08003259 	.word	0x08003259
 8003250:	08003267 	.word	0x08003267
 8003254:	08003285 	.word	0x08003285
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003258:	4b9f      	ldr	r3, [pc, #636]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	4a9e      	ldr	r2, [pc, #632]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800325e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003264:	e00f      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326a:	3308      	adds	r3, #8
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f001 f904 	bl	800447c <RCCEx_PLL2_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800327a:	e004      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003282:	e000      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003286:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800328e:	4b92      	ldr	r3, [pc, #584]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	f023 0103 	bic.w	r1, r3, #3
 8003296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	4a8e      	ldr	r2, [pc, #568]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800329e:	430b      	orrs	r3, r1
 80032a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a2:	e003      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80032b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032bc:	2300      	movs	r3, #0
 80032be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80032c6:	460b      	mov	r3, r1
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f000 8099 	beq.w	8003400 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ce:	4b83      	ldr	r3, [pc, #524]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a82      	ldr	r2, [pc, #520]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032da:	f7fe f923 	bl	8001524 <HAL_GetTick>
 80032de:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e2:	e00b      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fe f91e 	bl	8001524 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b64      	cmp	r3, #100	; 0x64
 80032f2:	d903      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032fa:	e005      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032fc:	4b77      	ldr	r3, [pc, #476]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ed      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003308:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800330c:	2b00      	cmp	r3, #0
 800330e:	d173      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003310:	4b71      	ldr	r3, [pc, #452]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800331c:	4053      	eors	r3, r2
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d015      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003326:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003332:	4b69      	ldr	r3, [pc, #420]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a68      	ldr	r2, [pc, #416]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800334a:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003350:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335e:	d118      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe f8e0 	bl	8001524 <HAL_GetTick>
 8003364:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003368:	e00d      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fe f8db 	bl	8001524 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003374:	1ad2      	subs	r2, r2, r3
 8003376:	f241 3388 	movw	r3, #5000	; 0x1388
 800337a:	429a      	cmp	r2, r3
 800337c:	d903      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003384:	e005      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003386:	4b54      	ldr	r3, [pc, #336]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0eb      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003392:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003396:	2b00      	cmp	r3, #0
 8003398:	d129      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800339a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033aa:	d10e      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x846>
 80033ac:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80033b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033bc:	091a      	lsrs	r2, r3, #4
 80033be:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	4a45      	ldr	r2, [pc, #276]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6113      	str	r3, [r2, #16]
 80033c8:	e005      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	4a42      	ldr	r2, [pc, #264]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033d4:	6113      	str	r3, [r2, #16]
 80033d6:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033e8:	430b      	orrs	r3, r1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	e008      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80033f6:	e003      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f002 0301 	and.w	r3, r2, #1
 800340c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003416:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800341a:	460b      	mov	r3, r1
 800341c:	4313      	orrs	r3, r2
 800341e:	f000 8090 	beq.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	2b28      	cmp	r3, #40	; 0x28
 800342c:	d870      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003519 	.word	0x08003519
 8003438:	08003511 	.word	0x08003511
 800343c:	08003511 	.word	0x08003511
 8003440:	08003511 	.word	0x08003511
 8003444:	08003511 	.word	0x08003511
 8003448:	08003511 	.word	0x08003511
 800344c:	08003511 	.word	0x08003511
 8003450:	08003511 	.word	0x08003511
 8003454:	080034e5 	.word	0x080034e5
 8003458:	08003511 	.word	0x08003511
 800345c:	08003511 	.word	0x08003511
 8003460:	08003511 	.word	0x08003511
 8003464:	08003511 	.word	0x08003511
 8003468:	08003511 	.word	0x08003511
 800346c:	08003511 	.word	0x08003511
 8003470:	08003511 	.word	0x08003511
 8003474:	080034fb 	.word	0x080034fb
 8003478:	08003511 	.word	0x08003511
 800347c:	08003511 	.word	0x08003511
 8003480:	08003511 	.word	0x08003511
 8003484:	08003511 	.word	0x08003511
 8003488:	08003511 	.word	0x08003511
 800348c:	08003511 	.word	0x08003511
 8003490:	08003511 	.word	0x08003511
 8003494:	08003519 	.word	0x08003519
 8003498:	08003511 	.word	0x08003511
 800349c:	08003511 	.word	0x08003511
 80034a0:	08003511 	.word	0x08003511
 80034a4:	08003511 	.word	0x08003511
 80034a8:	08003511 	.word	0x08003511
 80034ac:	08003511 	.word	0x08003511
 80034b0:	08003511 	.word	0x08003511
 80034b4:	08003519 	.word	0x08003519
 80034b8:	08003511 	.word	0x08003511
 80034bc:	08003511 	.word	0x08003511
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003511 	.word	0x08003511
 80034c8:	08003511 	.word	0x08003511
 80034cc:	08003511 	.word	0x08003511
 80034d0:	08003511 	.word	0x08003511
 80034d4:	08003519 	.word	0x08003519
 80034d8:	58024400 	.word	0x58024400
 80034dc:	58024800 	.word	0x58024800
 80034e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e8:	3308      	adds	r3, #8
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 ffc5 	bl	800447c <RCCEx_PLL2_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034f8:	e00f      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034fe:	3328      	adds	r3, #40	; 0x28
 8003500:	2101      	movs	r1, #1
 8003502:	4618      	mov	r0, r3
 8003504:	f001 f86c 	bl	80045e0 <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003522:	4bc0      	ldr	r3, [pc, #768]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003532:	4abc      	ldr	r2, [pc, #752]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6553      	str	r3, [r2, #84]	; 0x54
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800353e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f002 0302 	and.w	r3, r2, #2
 800354e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003558:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800355c:	460b      	mov	r3, r1
 800355e:	4313      	orrs	r3, r2
 8003560:	d043      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800356a:	2b05      	cmp	r3, #5
 800356c:	d824      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035c1 	.word	0x080035c1
 8003578:	0800358d 	.word	0x0800358d
 800357c:	080035a3 	.word	0x080035a3
 8003580:	080035c1 	.word	0x080035c1
 8003584:	080035c1 	.word	0x080035c1
 8003588:	080035c1 	.word	0x080035c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003590:	3308      	adds	r3, #8
 8003592:	2101      	movs	r1, #1
 8003594:	4618      	mov	r0, r3
 8003596:	f000 ff71 	bl	800447c <RCCEx_PLL2_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035a0:	e00f      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a6:	3328      	adds	r3, #40	; 0x28
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 f818 	bl	80045e0 <RCCEx_PLL3_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035b6:	e004      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035be:	e000      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80035c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035ca:	4b96      	ldr	r3, [pc, #600]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f023 0107 	bic.w	r1, r3, #7
 80035d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035da:	4a92      	ldr	r2, [pc, #584]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6553      	str	r3, [r2, #84]	; 0x54
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f002 0304 	and.w	r3, r2, #4
 80035f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003600:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d043      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003612:	2b05      	cmp	r3, #5
 8003614:	d824      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003616:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003669 	.word	0x08003669
 8003620:	08003635 	.word	0x08003635
 8003624:	0800364b 	.word	0x0800364b
 8003628:	08003669 	.word	0x08003669
 800362c:	08003669 	.word	0x08003669
 8003630:	08003669 	.word	0x08003669
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003638:	3308      	adds	r3, #8
 800363a:	2101      	movs	r1, #1
 800363c:	4618      	mov	r0, r3
 800363e:	f000 ff1d 	bl	800447c <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003648:	e00f      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800364a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364e:	3328      	adds	r3, #40	; 0x28
 8003650:	2101      	movs	r1, #1
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ffc4 	bl	80045e0 <RCCEx_PLL3_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800365e:	e004      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003672:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f023 0107 	bic.w	r1, r3, #7
 800367a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003682:	4a68      	ldr	r2, [pc, #416]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800368e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f002 0320 	and.w	r3, r2, #32
 800369e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036a2:	2300      	movs	r3, #0
 80036a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036ac:	460b      	mov	r3, r1
 80036ae:	4313      	orrs	r3, r2
 80036b0:	d055      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036be:	d033      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80036c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c4:	d82c      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d02f      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d826      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80036d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036d6:	d02b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80036d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036dc:	d820      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80036de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e2:	d012      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e8:	d81a      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d022      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80036ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f2:	d115      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f8:	3308      	adds	r3, #8
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 febd 	bl	800447c <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003708:	e015      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800370a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370e:	3328      	adds	r3, #40	; 0x28
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 ff64 	bl	80045e0 <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800371e:	e00a      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003726:	e006      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003728:	bf00      	nop
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800372c:	bf00      	nop
 800372e:	e002      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003736:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800373e:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374e:	4a35      	ldr	r2, [pc, #212]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003750:	430b      	orrs	r3, r1
 8003752:	6553      	str	r3, [r2, #84]	; 0x54
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800375a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800375e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800376a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003774:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003778:	460b      	mov	r3, r1
 800377a:	4313      	orrs	r3, r2
 800377c:	d058      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800377e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003782:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003786:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800378a:	d033      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800378c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003790:	d82c      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	d02f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d826      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800379e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a2:	d02b      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80037a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a8:	d820      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80037aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ae:	d012      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80037b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b4:	d81a      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d022      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d115      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c4:	3308      	adds	r3, #8
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fe57 	bl	800447c <RCCEx_PLL2_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037d4:	e015      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	3328      	adds	r3, #40	; 0x28
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fefe 	bl	80045e0 <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037ea:	e00a      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037f2:	e006      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80037f4:	bf00      	nop
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80037f8:	bf00      	nop
 80037fa:	e002      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800381a:	4a02      	ldr	r2, [pc, #8]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6593      	str	r3, [r2, #88]	; 0x58
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800382c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800383c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003846:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800384a:	460b      	mov	r3, r1
 800384c:	4313      	orrs	r3, r2
 800384e:	d055      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003854:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003858:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800385c:	d033      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800385e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003862:	d82c      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003868:	d02f      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800386a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386e:	d826      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003870:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003874:	d02b      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003876:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800387a:	d820      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800387c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003880:	d012      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003886:	d81a      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d022      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003890:	d115      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003896:	3308      	adds	r3, #8
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fdee 	bl	800447c <RCCEx_PLL2_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038a6:	e015      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ac:	3328      	adds	r3, #40	; 0x28
 80038ae:	2102      	movs	r1, #2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fe95 	bl	80045e0 <RCCEx_PLL3_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038bc:	e00a      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80038d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038dc:	4ba1      	ldr	r3, [pc, #644]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038ec:	4a9d      	ldr	r2, [pc, #628]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038ee:	430b      	orrs	r3, r1
 80038f0:	6593      	str	r3, [r2, #88]	; 0x58
 80038f2:	e003      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f002 0308 	and.w	r3, r2, #8
 8003908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003912:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	d01e      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800391c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d10c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392e:	3328      	adds	r3, #40	; 0x28
 8003930:	2102      	movs	r1, #2
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fe54 	bl	80045e0 <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003944:	4b87      	ldr	r3, [pc, #540]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003954:	4a83      	ldr	r2, [pc, #524]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800395a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f002 0310 	and.w	r3, r2, #16
 8003966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003970:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d01e      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800397a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003986:	d10c      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800398c:	3328      	adds	r3, #40	; 0x28
 800398e:	2102      	movs	r1, #2
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fe25 	bl	80045e0 <RCCEx_PLL3_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039a2:	4b70      	ldr	r3, [pc, #448]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039b2:	4a6c      	ldr	r2, [pc, #432]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80039c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d03e      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e4:	d022      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80039e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ea:	d81b      	bhi.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d00b      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80039f6:	e015      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fc:	3308      	adds	r3, #8
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fd3b 	bl	800447c <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a0c:	e00f      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a12:	3328      	adds	r3, #40	; 0x28
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fde2 	bl	80045e0 <RCCEx_PLL3_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a36:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a46:	4a47      	ldr	r2, [pc, #284]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4c:	e003      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a64:	2300      	movs	r3, #0
 8003a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	d03b      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a7e:	d01f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003a80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a84:	d818      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8a:	d003      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a90:	d007      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003a92:	e011      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a94:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aa0:	e00f      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa6:	3328      	adds	r3, #40	; 0x28
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fd98 	bl	80045e0 <RCCEx_PLL3_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6553      	str	r3, [r2, #84]	; 0x54
 8003ae0:	e003      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ae6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003af6:	673b      	str	r3, [r7, #112]	; 0x70
 8003af8:	2300      	movs	r3, #0
 8003afa:	677b      	str	r3, [r7, #116]	; 0x74
 8003afc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003b00:	460b      	mov	r3, r1
 8003b02:	4313      	orrs	r3, r2
 8003b04:	d034      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d007      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003b16:	e011      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b24:	e00e      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fca4 	bl	800447c <RCCEx_PLL2_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	4a02      	ldr	r2, [pc, #8]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b60:	e006      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003b62:	bf00      	nop
 8003b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b7e:	2300      	movs	r3, #0
 8003b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b90:	3328      	adds	r3, #40	; 0x28
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fd23 	bl	80045e0 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	d038      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bce:	d018      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd4:	d811      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bda:	d014      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d80b      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d011      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bea:	d106      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bec:	4bc3      	ldr	r3, [pc, #780]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	4ac2      	ldr	r2, [pc, #776]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bf8:	e008      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c00:	e004      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c14:	4bb9      	ldr	r3, [pc, #740]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	4ab5      	ldr	r2, [pc, #724]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c26:	430b      	orrs	r3, r1
 8003c28:	6553      	str	r3, [r2, #84]	; 0x54
 8003c2a:	e003      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003c40:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c42:	2300      	movs	r3, #0
 8003c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c50:	4baa      	ldr	r3, [pc, #680]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5e:	4aa7      	ldr	r2, [pc, #668]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003c70:	653b      	str	r3, [r7, #80]	; 0x50
 8003c72:	2300      	movs	r3, #0
 8003c74:	657b      	str	r3, [r7, #84]	; 0x54
 8003c76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c80:	4b9e      	ldr	r3, [pc, #632]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a9b      	ldr	r2, [pc, #620]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003cb0:	4b92      	ldr	r3, [pc, #584]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	4a8f      	ldr	r2, [pc, #572]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ce0:	4b86      	ldr	r3, [pc, #536]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	4a85      	ldr	r2, [pc, #532]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ce6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cea:	6113      	str	r3, [r2, #16]
 8003cec:	4b83      	ldr	r3, [pc, #524]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cee:	6919      	ldr	r1, [r3, #16]
 8003cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003cf8:	4a80      	ldr	r2, [pc, #512]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003d14:	460b      	mov	r3, r1
 8003d16:	4313      	orrs	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d1a:	4b78      	ldr	r3, [pc, #480]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	4a74      	ldr	r2, [pc, #464]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003d44:	460b      	mov	r3, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d4a:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	4a68      	ldr	r2, [pc, #416]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d011      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d80:	3308      	adds	r3, #8
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fb79 	bl	800447c <RCCEx_PLL2_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003d90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	2100      	movs	r1, #0
 8003daa:	6239      	str	r1, [r7, #32]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d011      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fb59 	bl	800447c <RCCEx_PLL2_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ddc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	2100      	movs	r1, #0
 8003dea:	61b9      	str	r1, [r7, #24]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d011      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e00:	3308      	adds	r3, #8
 8003e02:	2102      	movs	r1, #2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fb39 	bl	800447c <RCCEx_PLL2_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	6139      	str	r1, [r7, #16]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e36:	460b      	mov	r3, r1
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	d011      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e40:	3328      	adds	r3, #40	; 0x28
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fbcb 	bl	80045e0 <RCCEx_PLL3_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003e50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d011      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e80:	3328      	adds	r3, #40	; 0x28
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fbab 	bl	80045e0 <RCCEx_PLL3_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	6039      	str	r1, [r7, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	d011      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec0:	3328      	adds	r3, #40	; 0x28
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fb8b 	bl	80045e0 <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003edc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003ee0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400

08003f00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003f04:	f7fe fde2 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	4904      	ldr	r1, [pc, #16]	; (8003f28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	58024400 	.word	0x58024400
 8003f28:	08007100 	.word	0x08007100

08003f2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f34:	4ba1      	ldr	r3, [pc, #644]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f3e:	4b9f      	ldr	r3, [pc, #636]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	0b1b      	lsrs	r3, r3, #12
 8003f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f4a:	4b9c      	ldr	r3, [pc, #624]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f56:	4b99      	ldr	r3, [pc, #612]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	08db      	lsrs	r3, r3, #3
 8003f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8111 	beq.w	800419c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	f000 8083 	beq.w	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	f200 80a1 	bhi.w	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d056      	beq.n	8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f96:	e099      	b.n	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f98:	4b88      	ldr	r3, [pc, #544]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d02d      	beq.n	8004000 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fa4:	4b85      	ldr	r3, [pc, #532]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	4a84      	ldr	r2, [pc, #528]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fce:	4b7b      	ldr	r3, [pc, #492]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ffe:	e087      	b.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800400e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004012:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004022:	ed97 6a03 	vldr	s12, [r7, #12]
 8004026:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004042:	e065      	b.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a03 	vldr	s12, [r7, #12]
 800406a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004086:	e043      	b.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b48      	ldr	r3, [pc, #288]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ca:	e021      	b.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800410e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	0a5b      	lsrs	r3, r3, #9
 8004116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800412a:	edd7 6a07 	vldr	s13, [r7, #28]
 800412e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004136:	ee17 2a90 	vmov	r2, s15
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800413e:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004158:	edd7 6a07 	vldr	s13, [r7, #28]
 800415c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004164:	ee17 2a90 	vmov	r2, s15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	0e1b      	lsrs	r3, r3, #24
 8004172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004186:	edd7 6a07 	vldr	s13, [r7, #28]
 800418a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800418e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004192:	ee17 2a90 	vmov	r2, s15
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800419a:	e008      	b.n	80041ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
}
 80041ae:	bf00      	nop
 80041b0:	3724      	adds	r7, #36	; 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	58024400 	.word	0x58024400
 80041c0:	03d09000 	.word	0x03d09000
 80041c4:	46000000 	.word	0x46000000
 80041c8:	4c742400 	.word	0x4c742400
 80041cc:	4a742400 	.word	0x4a742400
 80041d0:	4af42400 	.word	0x4af42400

080041d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041dc:	4ba1      	ldr	r3, [pc, #644]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80041e6:	4b9f      	ldr	r3, [pc, #636]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	0d1b      	lsrs	r3, r3, #20
 80041ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041f2:	4b9c      	ldr	r3, [pc, #624]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041fe:	4b99      	ldr	r3, [pc, #612]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	08db      	lsrs	r3, r3, #3
 8004204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8111 	beq.w	8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b02      	cmp	r3, #2
 8004226:	f000 8083 	beq.w	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b02      	cmp	r3, #2
 800422e:	f200 80a1 	bhi.w	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d056      	beq.n	80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800423e:	e099      	b.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004240:	4b88      	ldr	r3, [pc, #544]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02d      	beq.n	80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800424c:	4b85      	ldr	r3, [pc, #532]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	08db      	lsrs	r3, r3, #3
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	4a84      	ldr	r2, [pc, #528]	; (8004468 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004276:	4b7b      	ldr	r3, [pc, #492]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004286:	ed97 6a03 	vldr	s12, [r7, #12]
 800428a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042a6:	e087      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ea:	e065      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fe:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800432e:	e043      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004342:	4b48      	ldr	r3, [pc, #288]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	ed97 6a03 	vldr	s12, [r7, #12]
 8004356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004372:	e021      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b37      	ldr	r3, [pc, #220]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a03 	vldr	s12, [r7, #12]
 800439a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	0a5b      	lsrs	r3, r3, #9
 80043be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80043d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043de:	ee17 2a90 	vmov	r2, s15
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80043e6:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	0c1b      	lsrs	r3, r3, #16
 80043ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004400:	edd7 6a07 	vldr	s13, [r7, #28]
 8004404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440c:	ee17 2a90 	vmov	r2, s15
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004414:	4b13      	ldr	r3, [pc, #76]	; (8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	0e1b      	lsrs	r3, r3, #24
 800441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800442a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800442e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443a:	ee17 2a90 	vmov	r2, s15
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004442:	e008      	b.n	8004456 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	bf00      	nop
 8004458:	3724      	adds	r7, #36	; 0x24
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	58024400 	.word	0x58024400
 8004468:	03d09000 	.word	0x03d09000
 800446c:	46000000 	.word	0x46000000
 8004470:	4c742400 	.word	0x4c742400
 8004474:	4a742400 	.word	0x4a742400
 8004478:	4af42400 	.word	0x4af42400

0800447c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800448a:	4b53      	ldr	r3, [pc, #332]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b03      	cmp	r3, #3
 8004494:	d101      	bne.n	800449a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e099      	b.n	80045ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800449a:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a4e      	ldr	r2, [pc, #312]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 80044a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a6:	f7fd f83d 	bl	8001524 <HAL_GetTick>
 80044aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044ae:	f7fd f839 	bl	8001524 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e086      	b.n	80045ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044c0:	4b45      	ldr	r3, [pc, #276]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044cc:	4b42      	ldr	r3, [pc, #264]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	031b      	lsls	r3, r3, #12
 80044da:	493f      	ldr	r1, [pc, #252]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	628b      	str	r3, [r1, #40]	; 0x28
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	025b      	lsls	r3, r3, #9
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	041b      	lsls	r3, r3, #16
 80044fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	3b01      	subs	r3, #1
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004510:	4931      	ldr	r1, [pc, #196]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	492d      	ldr	r1, [pc, #180]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004524:	4313      	orrs	r3, r2
 8004526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	f023 0220 	bic.w	r2, r3, #32
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	4928      	ldr	r1, [pc, #160]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004540:	f023 0310 	bic.w	r3, r3, #16
 8004544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <RCCEx_PLL2_Config+0x160>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	69d2      	ldr	r2, [r2, #28]
 8004552:	00d2      	lsls	r2, r2, #3
 8004554:	4920      	ldr	r1, [pc, #128]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800455a:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004560:	f043 0310 	orr.w	r3, r3, #16
 8004564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004578:	e00f      	b.n	800459a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800458c:	e005      	b.n	800459a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 8004594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 80045a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a6:	f7fc ffbd 	bl	8001524 <HAL_GetTick>
 80045aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045ae:	f7fc ffb9 	bl	8001524 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e006      	b.n	80045ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <RCCEx_PLL2_Config+0x15c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	58024400 	.word	0x58024400
 80045dc:	ffff0007 	.word	0xffff0007

080045e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045ee:	4b53      	ldr	r3, [pc, #332]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d101      	bne.n	80045fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e099      	b.n	8004732 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045fe:	4b4f      	ldr	r3, [pc, #316]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a4e      	ldr	r2, [pc, #312]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460a:	f7fc ff8b 	bl	8001524 <HAL_GetTick>
 800460e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004610:	e008      	b.n	8004624 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004612:	f7fc ff87 	bl	8001524 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e086      	b.n	8004732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004624:	4b45      	ldr	r3, [pc, #276]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	051b      	lsls	r3, r3, #20
 800463e:	493f      	ldr	r1, [pc, #252]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	628b      	str	r3, [r1, #40]	; 0x28
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	3b01      	subs	r3, #1
 800464a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	025b      	lsls	r3, r3, #9
 8004656:	b29b      	uxth	r3, r3
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	3b01      	subs	r3, #1
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004674:	4931      	ldr	r1, [pc, #196]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800467a:	4b30      	ldr	r3, [pc, #192]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	492d      	ldr	r1, [pc, #180]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800468c:	4b2b      	ldr	r3, [pc, #172]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	4928      	ldr	r1, [pc, #160]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800469e:	4b27      	ldr	r3, [pc, #156]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a26      	ldr	r2, [pc, #152]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <RCCEx_PLL3_Config+0x160>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	69d2      	ldr	r2, [r2, #28]
 80046b6:	00d2      	lsls	r2, r2, #3
 80046b8:	4920      	ldr	r1, [pc, #128]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046be:	4b1f      	ldr	r3, [pc, #124]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046dc:	e00f      	b.n	80046fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046e4:	4b15      	ldr	r3, [pc, #84]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046f0:	e005      	b.n	80046fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4a11      	ldr	r2, [pc, #68]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 80046f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a0e      	ldr	r2, [pc, #56]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470a:	f7fc ff0b 	bl	8001524 <HAL_GetTick>
 800470e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004710:	e008      	b.n	8004724 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004712:	f7fc ff07 	bl	8001524 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e006      	b.n	8004732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <RCCEx_PLL3_Config+0x15c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
 8004740:	ffff0007 	.word	0xffff0007

08004744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e049      	b.n	80047ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fbfe 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 fad6 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e054      	b.n	80048b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a26      	ldr	r2, [pc, #152]	; (80048c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d022      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d01d      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a21      	ldr	r2, [pc, #132]	; (80048cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1c      	ldr	r2, [pc, #112]	; (80048d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d115      	bne.n	80048a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_TIM_Base_Start_IT+0xec>)
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d015      	beq.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488c:	d011      	beq.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	e008      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40010400 	.word	0x40010400
 80048d8:	40001800 	.word	0x40001800
 80048dc:	40014000 	.word	0x40014000
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d020      	beq.n	8004948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0202 	mvn.w	r2, #2
 8004918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f9e2 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f9d4 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f9e5 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0204 	mvn.w	r2, #4
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9bc 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f9ae 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f9bf 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d020      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0208 	mvn.w	r2, #8
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2204      	movs	r2, #4
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f996 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f988 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f999 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0210 	mvn.w	r2, #16
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2208      	movs	r2, #8
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f970 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f962 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f973 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00c      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0201 	mvn.w	r2, #1
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc f8b4 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00c      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fb37 	bl	80050ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00c      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fb2f 	bl	8005100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f92d 	bl	8004d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0220 	mvn.w	r2, #32
 8004ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 faf7 	bl	80050d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIM_ConfigClockSource+0x1c>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e0dc      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x1d6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	4b6a      	ldr	r3, [pc, #424]	; (8004cd4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a64      	ldr	r2, [pc, #400]	; (8004cd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f000 80a9 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004b4c:	4a62      	ldr	r2, [pc, #392]	; (8004cd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f200 80ae 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b54:	4a61      	ldr	r2, [pc, #388]	; (8004cdc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f000 80a1 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004b5c:	4a5f      	ldr	r2, [pc, #380]	; (8004cdc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f200 80a6 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b64:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	f000 8099 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004b6c:	4a5c      	ldr	r2, [pc, #368]	; (8004ce0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f200 809e 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b78:	f000 8091 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004b7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b80:	f200 8096 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b88:	f000 8089 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b90:	f200 808e 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b98:	d03e      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0x124>
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9e:	f200 8087 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	f000 8086 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x1c2>
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bae:	d87f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bb0:	2b70      	cmp	r3, #112	; 0x70
 8004bb2:	d01a      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0xf6>
 8004bb4:	2b70      	cmp	r3, #112	; 0x70
 8004bb6:	d87b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bb8:	2b60      	cmp	r3, #96	; 0x60
 8004bba:	d050      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x16a>
 8004bbc:	2b60      	cmp	r3, #96	; 0x60
 8004bbe:	d877      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bc0:	2b50      	cmp	r3, #80	; 0x50
 8004bc2:	d03c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x14a>
 8004bc4:	2b50      	cmp	r3, #80	; 0x50
 8004bc6:	d873      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d058      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x18a>
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d86f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bd0:	2b30      	cmp	r3, #48	; 0x30
 8004bd2:	d064      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004bd4:	2b30      	cmp	r3, #48	; 0x30
 8004bd6:	d86b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d060      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d867      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d05a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x1aa>
 8004be8:	e062      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f000 f9bf 	bl	8004f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
      break;
 8004c16:	e04f      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6899      	ldr	r1, [r3, #8]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f000 f9a8 	bl	8004f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c3a:	609a      	str	r2, [r3, #8]
      break;
 8004c3c:	e03c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 f918 	bl	8004e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2150      	movs	r1, #80	; 0x50
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f972 	bl	8004f40 <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e02c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 f937 	bl	8004ede <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2160      	movs	r1, #96	; 0x60
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f962 	bl	8004f40 <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e01c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 f8f8 	bl	8004e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2140      	movs	r1, #64	; 0x40
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f952 	bl	8004f40 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e00c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 f949 	bl	8004f40 <TIM_ITRx_SetConfig>
      break;
 8004cae:	e003      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	ffceff88 	.word	0xffceff88
 8004cd8:	00100040 	.word	0x00100040
 8004cdc:	00100030 	.word	0x00100030
 8004ce0:	00100020 	.word	0x00100020

08004ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a46      	ldr	r2, [pc, #280]	; (8004e60 <TIM_Base_SetConfig+0x12c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d00f      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a43      	ldr	r2, [pc, #268]	; (8004e64 <TIM_Base_SetConfig+0x130>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a42      	ldr	r2, [pc, #264]	; (8004e68 <TIM_Base_SetConfig+0x134>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d007      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a41      	ldr	r2, [pc, #260]	; (8004e6c <TIM_Base_SetConfig+0x138>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a40      	ldr	r2, [pc, #256]	; (8004e70 <TIM_Base_SetConfig+0x13c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a35      	ldr	r2, [pc, #212]	; (8004e60 <TIM_Base_SetConfig+0x12c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01f      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d01b      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <TIM_Base_SetConfig+0x130>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d017      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a31      	ldr	r2, [pc, #196]	; (8004e68 <TIM_Base_SetConfig+0x134>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a30      	ldr	r2, [pc, #192]	; (8004e6c <TIM_Base_SetConfig+0x138>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00f      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2f      	ldr	r2, [pc, #188]	; (8004e70 <TIM_Base_SetConfig+0x13c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <TIM_Base_SetConfig+0x140>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <TIM_Base_SetConfig+0x144>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0x9a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <TIM_Base_SetConfig+0x148>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d108      	bne.n	8004de0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <TIM_Base_SetConfig+0x12c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00f      	beq.n	8004e2c <TIM_Base_SetConfig+0xf8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <TIM_Base_SetConfig+0x13c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <TIM_Base_SetConfig+0x140>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <TIM_Base_SetConfig+0xf8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <TIM_Base_SetConfig+0x144>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_Base_SetConfig+0xf8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <TIM_Base_SetConfig+0x148>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d103      	bne.n	8004e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f023 0201 	bic.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]
  }
}
 8004e52:	bf00      	nop
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40010400 	.word	0x40010400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40014400 	.word	0x40014400
 8004e7c:	40014800 	.word	0x40014800

08004e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f023 030a 	bic.w	r3, r3, #10
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 0210 	bic.w	r2, r3, #16
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <TIM_ITRx_SetConfig+0x38>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f043 0307 	orr.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	609a      	str	r2, [r3, #8]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	ffcfff8f 	.word	0xffcfff8f

08004f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e06d      	b.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a30      	ldr	r2, [pc, #192]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800500e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a20      	ldr	r2, [pc, #128]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d01d      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1a      	ldr	r2, [pc, #104]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10c      	bne.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40001800 	.word	0x40001800
 80050d4:	40014000 	.word	0x40014000

080050d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e042      	b.n	80051ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fb ffc7 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 ff22 	bl	8005fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8b3 	bl	80052d0 <UART_SetConfig>
 800516a:	4603      	mov	r3, r0
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e01b      	b.n	80051ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 ffa1 	bl	80060ec <UART_CheckIdleState>
 80051aa:	4603      	mov	r3, r0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08a      	sub	sp, #40	; 0x28
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d17b      	bne.n	80052c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_UART_Transmit+0x26>
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e074      	b.n	80052c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2221      	movs	r2, #33	; 0x21
 80051ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ee:	f7fc f999 	bl	8001524 <HAL_GetTick>
 80051f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520c:	d108      	bne.n	8005220 <HAL_UART_Transmit+0x6c>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e003      	b.n	8005228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005228:	e030      	b.n	800528c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	2180      	movs	r1, #128	; 0x80
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f001 f803 	bl	8006240 <UART_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e03d      	b.n	80052c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005260:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	3302      	adds	r3, #2
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e007      	b.n	800527a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1c8      	bne.n	800522a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 ffcc 	bl	8006240 <UART_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e006      	b.n	80052c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e000      	b.n	80052c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
  }
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d4:	b092      	sub	sp, #72	; 0x48
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4bbe      	ldr	r3, [pc, #760]	; (80055f8 <UART_SetConfig+0x328>)
 8005300:	4013      	ands	r3, r2
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005308:	430b      	orrs	r3, r1
 800530a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4ab3      	ldr	r2, [pc, #716]	; (80055fc <UART_SetConfig+0x32c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005338:	4313      	orrs	r3, r2
 800533a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	4baf      	ldr	r3, [pc, #700]	; (8005600 <UART_SetConfig+0x330>)
 8005344:	4013      	ands	r3, r2
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800534c:	430b      	orrs	r3, r1
 800534e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	f023 010f 	bic.w	r1, r3, #15
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4aa6      	ldr	r2, [pc, #664]	; (8005604 <UART_SetConfig+0x334>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d177      	bne.n	8005460 <UART_SetConfig+0x190>
 8005370:	4ba5      	ldr	r3, [pc, #660]	; (8005608 <UART_SetConfig+0x338>)
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005378:	2b28      	cmp	r3, #40	; 0x28
 800537a:	d86d      	bhi.n	8005458 <UART_SetConfig+0x188>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0xb4>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	08005429 	.word	0x08005429
 8005388:	08005459 	.word	0x08005459
 800538c:	08005459 	.word	0x08005459
 8005390:	08005459 	.word	0x08005459
 8005394:	08005459 	.word	0x08005459
 8005398:	08005459 	.word	0x08005459
 800539c:	08005459 	.word	0x08005459
 80053a0:	08005459 	.word	0x08005459
 80053a4:	08005431 	.word	0x08005431
 80053a8:	08005459 	.word	0x08005459
 80053ac:	08005459 	.word	0x08005459
 80053b0:	08005459 	.word	0x08005459
 80053b4:	08005459 	.word	0x08005459
 80053b8:	08005459 	.word	0x08005459
 80053bc:	08005459 	.word	0x08005459
 80053c0:	08005459 	.word	0x08005459
 80053c4:	08005439 	.word	0x08005439
 80053c8:	08005459 	.word	0x08005459
 80053cc:	08005459 	.word	0x08005459
 80053d0:	08005459 	.word	0x08005459
 80053d4:	08005459 	.word	0x08005459
 80053d8:	08005459 	.word	0x08005459
 80053dc:	08005459 	.word	0x08005459
 80053e0:	08005459 	.word	0x08005459
 80053e4:	08005441 	.word	0x08005441
 80053e8:	08005459 	.word	0x08005459
 80053ec:	08005459 	.word	0x08005459
 80053f0:	08005459 	.word	0x08005459
 80053f4:	08005459 	.word	0x08005459
 80053f8:	08005459 	.word	0x08005459
 80053fc:	08005459 	.word	0x08005459
 8005400:	08005459 	.word	0x08005459
 8005404:	08005449 	.word	0x08005449
 8005408:	08005459 	.word	0x08005459
 800540c:	08005459 	.word	0x08005459
 8005410:	08005459 	.word	0x08005459
 8005414:	08005459 	.word	0x08005459
 8005418:	08005459 	.word	0x08005459
 800541c:	08005459 	.word	0x08005459
 8005420:	08005459 	.word	0x08005459
 8005424:	08005451 	.word	0x08005451
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e326      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e322      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e31e      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e31a      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005448:	2320      	movs	r3, #32
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e316      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005450:	2340      	movs	r3, #64	; 0x40
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e312      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e30e      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a69      	ldr	r2, [pc, #420]	; (800560c <UART_SetConfig+0x33c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d130      	bne.n	80054cc <UART_SetConfig+0x1fc>
 800546a:	4b67      	ldr	r3, [pc, #412]	; (8005608 <UART_SetConfig+0x338>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b05      	cmp	r3, #5
 8005474:	d826      	bhi.n	80054c4 <UART_SetConfig+0x1f4>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x1ac>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005495 	.word	0x08005495
 8005480:	0800549d 	.word	0x0800549d
 8005484:	080054a5 	.word	0x080054a5
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	2300      	movs	r3, #0
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e2f0      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e2ec      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e2e8      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e2e4      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80054b4:	2320      	movs	r3, #32
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e2e0      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80054bc:	2340      	movs	r3, #64	; 0x40
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e2dc      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e2d8      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a4f      	ldr	r2, [pc, #316]	; (8005610 <UART_SetConfig+0x340>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d130      	bne.n	8005538 <UART_SetConfig+0x268>
 80054d6:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <UART_SetConfig+0x338>)
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d826      	bhi.n	8005530 <UART_SetConfig+0x260>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <UART_SetConfig+0x218>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	08005501 	.word	0x08005501
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005511 	.word	0x08005511
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005529 	.word	0x08005529
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e2ba      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005508:	2304      	movs	r3, #4
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e2b6      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005510:	2308      	movs	r3, #8
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e2b2      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005518:	2310      	movs	r3, #16
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e2ae      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005520:	2320      	movs	r3, #32
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e2aa      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005528:	2340      	movs	r3, #64	; 0x40
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552e:	e2a6      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005536:	e2a2      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a35      	ldr	r2, [pc, #212]	; (8005614 <UART_SetConfig+0x344>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d130      	bne.n	80055a4 <UART_SetConfig+0x2d4>
 8005542:	4b31      	ldr	r3, [pc, #196]	; (8005608 <UART_SetConfig+0x338>)
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b05      	cmp	r3, #5
 800554c:	d826      	bhi.n	800559c <UART_SetConfig+0x2cc>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <UART_SetConfig+0x284>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	0800556d 	.word	0x0800556d
 8005558:	08005575 	.word	0x08005575
 800555c:	0800557d 	.word	0x0800557d
 8005560:	08005585 	.word	0x08005585
 8005564:	0800558d 	.word	0x0800558d
 8005568:	08005595 	.word	0x08005595
 800556c:	2300      	movs	r3, #0
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e284      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005574:	2304      	movs	r3, #4
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e280      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800557c:	2308      	movs	r3, #8
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e27c      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005584:	2310      	movs	r3, #16
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e278      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800558c:	2320      	movs	r3, #32
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e274      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e270      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e26c      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <UART_SetConfig+0x348>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d142      	bne.n	8005634 <UART_SetConfig+0x364>
 80055ae:	4b16      	ldr	r3, [pc, #88]	; (8005608 <UART_SetConfig+0x338>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d838      	bhi.n	800562c <UART_SetConfig+0x35c>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x2f0>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d9 	.word	0x080055d9
 80055c4:	080055e1 	.word	0x080055e1
 80055c8:	080055e9 	.word	0x080055e9
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	0800561d 	.word	0x0800561d
 80055d4:	08005625 	.word	0x08005625
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055de:	e24e      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e24a      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e246      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e242      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80055f8:	cfff69f3 	.word	0xcfff69f3
 80055fc:	58000c00 	.word	0x58000c00
 8005600:	11fff4ff 	.word	0x11fff4ff
 8005604:	40011000 	.word	0x40011000
 8005608:	58024400 	.word	0x58024400
 800560c:	40004400 	.word	0x40004400
 8005610:	40004800 	.word	0x40004800
 8005614:	40004c00 	.word	0x40004c00
 8005618:	40005000 	.word	0x40005000
 800561c:	2320      	movs	r3, #32
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e22c      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e228      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e224      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4ab1      	ldr	r2, [pc, #708]	; (8005900 <UART_SetConfig+0x630>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d176      	bne.n	800572c <UART_SetConfig+0x45c>
 800563e:	4bb1      	ldr	r3, [pc, #708]	; (8005904 <UART_SetConfig+0x634>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005646:	2b28      	cmp	r3, #40	; 0x28
 8005648:	d86c      	bhi.n	8005724 <UART_SetConfig+0x454>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x380>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	080056f5 	.word	0x080056f5
 8005654:	08005725 	.word	0x08005725
 8005658:	08005725 	.word	0x08005725
 800565c:	08005725 	.word	0x08005725
 8005660:	08005725 	.word	0x08005725
 8005664:	08005725 	.word	0x08005725
 8005668:	08005725 	.word	0x08005725
 800566c:	08005725 	.word	0x08005725
 8005670:	080056fd 	.word	0x080056fd
 8005674:	08005725 	.word	0x08005725
 8005678:	08005725 	.word	0x08005725
 800567c:	08005725 	.word	0x08005725
 8005680:	08005725 	.word	0x08005725
 8005684:	08005725 	.word	0x08005725
 8005688:	08005725 	.word	0x08005725
 800568c:	08005725 	.word	0x08005725
 8005690:	08005705 	.word	0x08005705
 8005694:	08005725 	.word	0x08005725
 8005698:	08005725 	.word	0x08005725
 800569c:	08005725 	.word	0x08005725
 80056a0:	08005725 	.word	0x08005725
 80056a4:	08005725 	.word	0x08005725
 80056a8:	08005725 	.word	0x08005725
 80056ac:	08005725 	.word	0x08005725
 80056b0:	0800570d 	.word	0x0800570d
 80056b4:	08005725 	.word	0x08005725
 80056b8:	08005725 	.word	0x08005725
 80056bc:	08005725 	.word	0x08005725
 80056c0:	08005725 	.word	0x08005725
 80056c4:	08005725 	.word	0x08005725
 80056c8:	08005725 	.word	0x08005725
 80056cc:	08005725 	.word	0x08005725
 80056d0:	08005715 	.word	0x08005715
 80056d4:	08005725 	.word	0x08005725
 80056d8:	08005725 	.word	0x08005725
 80056dc:	08005725 	.word	0x08005725
 80056e0:	08005725 	.word	0x08005725
 80056e4:	08005725 	.word	0x08005725
 80056e8:	08005725 	.word	0x08005725
 80056ec:	08005725 	.word	0x08005725
 80056f0:	0800571d 	.word	0x0800571d
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e1c0      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80056fc:	2304      	movs	r3, #4
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e1bc      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005704:	2308      	movs	r3, #8
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e1b8      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e1b4      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005714:	2320      	movs	r3, #32
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e1b0      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e1ac      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e1a8      	b.n	8005a7e <UART_SetConfig+0x7ae>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a75      	ldr	r2, [pc, #468]	; (8005908 <UART_SetConfig+0x638>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d130      	bne.n	8005798 <UART_SetConfig+0x4c8>
 8005736:	4b73      	ldr	r3, [pc, #460]	; (8005904 <UART_SetConfig+0x634>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	2b05      	cmp	r3, #5
 8005740:	d826      	bhi.n	8005790 <UART_SetConfig+0x4c0>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x478>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005761 	.word	0x08005761
 800574c:	08005769 	.word	0x08005769
 8005750:	08005771 	.word	0x08005771
 8005754:	08005779 	.word	0x08005779
 8005758:	08005781 	.word	0x08005781
 800575c:	08005789 	.word	0x08005789
 8005760:	2300      	movs	r3, #0
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e18a      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e186      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e182      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e17e      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005780:	2320      	movs	r3, #32
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005786:	e17a      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578e:	e176      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005796:	e172      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a5b      	ldr	r2, [pc, #364]	; (800590c <UART_SetConfig+0x63c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d130      	bne.n	8005804 <UART_SetConfig+0x534>
 80057a2:	4b58      	ldr	r3, [pc, #352]	; (8005904 <UART_SetConfig+0x634>)
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b05      	cmp	r3, #5
 80057ac:	d826      	bhi.n	80057fc <UART_SetConfig+0x52c>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0x4e4>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057cd 	.word	0x080057cd
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	080057dd 	.word	0x080057dd
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e154      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057da:	e150      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e2:	e14c      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e148      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80057ec:	2320      	movs	r3, #32
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e144      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80057f4:	2340      	movs	r3, #64	; 0x40
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e140      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e13c      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a41      	ldr	r2, [pc, #260]	; (8005910 <UART_SetConfig+0x640>)
 800580a:	4293      	cmp	r3, r2
 800580c:	f040 8082 	bne.w	8005914 <UART_SetConfig+0x644>
 8005810:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <UART_SetConfig+0x634>)
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005818:	2b28      	cmp	r3, #40	; 0x28
 800581a:	d86d      	bhi.n	80058f8 <UART_SetConfig+0x628>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0x554>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	080058c9 	.word	0x080058c9
 8005828:	080058f9 	.word	0x080058f9
 800582c:	080058f9 	.word	0x080058f9
 8005830:	080058f9 	.word	0x080058f9
 8005834:	080058f9 	.word	0x080058f9
 8005838:	080058f9 	.word	0x080058f9
 800583c:	080058f9 	.word	0x080058f9
 8005840:	080058f9 	.word	0x080058f9
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058f9 	.word	0x080058f9
 800584c:	080058f9 	.word	0x080058f9
 8005850:	080058f9 	.word	0x080058f9
 8005854:	080058f9 	.word	0x080058f9
 8005858:	080058f9 	.word	0x080058f9
 800585c:	080058f9 	.word	0x080058f9
 8005860:	080058f9 	.word	0x080058f9
 8005864:	080058d9 	.word	0x080058d9
 8005868:	080058f9 	.word	0x080058f9
 800586c:	080058f9 	.word	0x080058f9
 8005870:	080058f9 	.word	0x080058f9
 8005874:	080058f9 	.word	0x080058f9
 8005878:	080058f9 	.word	0x080058f9
 800587c:	080058f9 	.word	0x080058f9
 8005880:	080058f9 	.word	0x080058f9
 8005884:	080058e1 	.word	0x080058e1
 8005888:	080058f9 	.word	0x080058f9
 800588c:	080058f9 	.word	0x080058f9
 8005890:	080058f9 	.word	0x080058f9
 8005894:	080058f9 	.word	0x080058f9
 8005898:	080058f9 	.word	0x080058f9
 800589c:	080058f9 	.word	0x080058f9
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	080058e9 	.word	0x080058e9
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	080058f9 	.word	0x080058f9
 80058b4:	080058f9 	.word	0x080058f9
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058f9 	.word	0x080058f9
 80058c0:	080058f9 	.word	0x080058f9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e0d6      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e0d2      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e0ce      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e0ca      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80058e8:	2320      	movs	r3, #32
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e0c6      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80058f0:	2340      	movs	r3, #64	; 0x40
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e0c2      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fe:	e0be      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005900:	40011400 	.word	0x40011400
 8005904:	58024400 	.word	0x58024400
 8005908:	40007800 	.word	0x40007800
 800590c:	40007c00 	.word	0x40007c00
 8005910:	40011800 	.word	0x40011800
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4aad      	ldr	r2, [pc, #692]	; (8005bd0 <UART_SetConfig+0x900>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d176      	bne.n	8005a0c <UART_SetConfig+0x73c>
 800591e:	4bad      	ldr	r3, [pc, #692]	; (8005bd4 <UART_SetConfig+0x904>)
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005926:	2b28      	cmp	r3, #40	; 0x28
 8005928:	d86c      	bhi.n	8005a04 <UART_SetConfig+0x734>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x660>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	080059d5 	.word	0x080059d5
 8005934:	08005a05 	.word	0x08005a05
 8005938:	08005a05 	.word	0x08005a05
 800593c:	08005a05 	.word	0x08005a05
 8005940:	08005a05 	.word	0x08005a05
 8005944:	08005a05 	.word	0x08005a05
 8005948:	08005a05 	.word	0x08005a05
 800594c:	08005a05 	.word	0x08005a05
 8005950:	080059dd 	.word	0x080059dd
 8005954:	08005a05 	.word	0x08005a05
 8005958:	08005a05 	.word	0x08005a05
 800595c:	08005a05 	.word	0x08005a05
 8005960:	08005a05 	.word	0x08005a05
 8005964:	08005a05 	.word	0x08005a05
 8005968:	08005a05 	.word	0x08005a05
 800596c:	08005a05 	.word	0x08005a05
 8005970:	080059e5 	.word	0x080059e5
 8005974:	08005a05 	.word	0x08005a05
 8005978:	08005a05 	.word	0x08005a05
 800597c:	08005a05 	.word	0x08005a05
 8005980:	08005a05 	.word	0x08005a05
 8005984:	08005a05 	.word	0x08005a05
 8005988:	08005a05 	.word	0x08005a05
 800598c:	08005a05 	.word	0x08005a05
 8005990:	080059ed 	.word	0x080059ed
 8005994:	08005a05 	.word	0x08005a05
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005a05 	.word	0x08005a05
 80059a0:	08005a05 	.word	0x08005a05
 80059a4:	08005a05 	.word	0x08005a05
 80059a8:	08005a05 	.word	0x08005a05
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	080059f5 	.word	0x080059f5
 80059b4:	08005a05 	.word	0x08005a05
 80059b8:	08005a05 	.word	0x08005a05
 80059bc:	08005a05 	.word	0x08005a05
 80059c0:	08005a05 	.word	0x08005a05
 80059c4:	08005a05 	.word	0x08005a05
 80059c8:	08005a05 	.word	0x08005a05
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059da:	e050      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e2:	e04c      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ea:	e048      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f2:	e044      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80059f4:	2320      	movs	r3, #32
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fa:	e040      	b.n	8005a7e <UART_SetConfig+0x7ae>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e03c      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e038      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a71      	ldr	r2, [pc, #452]	; (8005bd8 <UART_SetConfig+0x908>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d130      	bne.n	8005a78 <UART_SetConfig+0x7a8>
 8005a16:	4b6f      	ldr	r3, [pc, #444]	; (8005bd4 <UART_SetConfig+0x904>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d826      	bhi.n	8005a70 <UART_SetConfig+0x7a0>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <UART_SetConfig+0x758>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a41 	.word	0x08005a41
 8005a2c:	08005a49 	.word	0x08005a49
 8005a30:	08005a51 	.word	0x08005a51
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2302      	movs	r3, #2
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a46:	e01a      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e016      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a56:	e012      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5e:	e00e      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a66:	e00a      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e006      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e002      	b.n	8005a7e <UART_SetConfig+0x7ae>
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a55      	ldr	r2, [pc, #340]	; (8005bd8 <UART_SetConfig+0x908>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	f040 80f8 	bne.w	8005c7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	dc46      	bgt.n	8005b20 <UART_SetConfig+0x850>
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	db75      	blt.n	8005b82 <UART_SetConfig+0x8b2>
 8005a96:	3b02      	subs	r3, #2
 8005a98:	2b1e      	cmp	r3, #30
 8005a9a:	d872      	bhi.n	8005b82 <UART_SetConfig+0x8b2>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x7d4>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005b27 	.word	0x08005b27
 8005aa8:	08005b83 	.word	0x08005b83
 8005aac:	08005b2f 	.word	0x08005b2f
 8005ab0:	08005b83 	.word	0x08005b83
 8005ab4:	08005b83 	.word	0x08005b83
 8005ab8:	08005b83 	.word	0x08005b83
 8005abc:	08005b3f 	.word	0x08005b3f
 8005ac0:	08005b83 	.word	0x08005b83
 8005ac4:	08005b83 	.word	0x08005b83
 8005ac8:	08005b83 	.word	0x08005b83
 8005acc:	08005b83 	.word	0x08005b83
 8005ad0:	08005b83 	.word	0x08005b83
 8005ad4:	08005b83 	.word	0x08005b83
 8005ad8:	08005b83 	.word	0x08005b83
 8005adc:	08005b4f 	.word	0x08005b4f
 8005ae0:	08005b83 	.word	0x08005b83
 8005ae4:	08005b83 	.word	0x08005b83
 8005ae8:	08005b83 	.word	0x08005b83
 8005aec:	08005b83 	.word	0x08005b83
 8005af0:	08005b83 	.word	0x08005b83
 8005af4:	08005b83 	.word	0x08005b83
 8005af8:	08005b83 	.word	0x08005b83
 8005afc:	08005b83 	.word	0x08005b83
 8005b00:	08005b83 	.word	0x08005b83
 8005b04:	08005b83 	.word	0x08005b83
 8005b08:	08005b83 	.word	0x08005b83
 8005b0c:	08005b83 	.word	0x08005b83
 8005b10:	08005b83 	.word	0x08005b83
 8005b14:	08005b83 	.word	0x08005b83
 8005b18:	08005b83 	.word	0x08005b83
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d02a      	beq.n	8005b7a <UART_SetConfig+0x8aa>
 8005b24:	e02d      	b.n	8005b82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b26:	f7fe f9eb 	bl	8003f00 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b2c:	e02f      	b.n	8005b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe f9fa 	bl	8003f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b3c:	e027      	b.n	8005b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b3e:	f107 0318 	add.w	r3, r7, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fb46 	bl	80041d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b4c:	e01f      	b.n	8005b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b4e:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <UART_SetConfig+0x904>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <UART_SetConfig+0x904>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	08db      	lsrs	r3, r3, #3
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <UART_SetConfig+0x90c>)
 8005b66:	fa22 f303 	lsr.w	r3, r2, r3
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b6c:	e00f      	b.n	8005b8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b6e:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <UART_SetConfig+0x90c>)
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b72:	e00c      	b.n	8005b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b74:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <UART_SetConfig+0x910>)
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b78:	e009      	b.n	8005b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b80:	e005      	b.n	8005b8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 81ee 	beq.w	8005f72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <UART_SetConfig+0x914>)
 8005b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ba8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d305      	bcc.n	8005bc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d910      	bls.n	8005be8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bcc:	e1d1      	b.n	8005f72 <UART_SetConfig+0xca2>
 8005bce:	bf00      	nop
 8005bd0:	40011c00 	.word	0x40011c00
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	58000c00 	.word	0x58000c00
 8005bdc:	03d09000 	.word	0x03d09000
 8005be0:	003d0900 	.word	0x003d0900
 8005be4:	08007110 	.word	0x08007110
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bea:	2200      	movs	r2, #0
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	60fa      	str	r2, [r7, #12]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	4ac0      	ldr	r2, [pc, #768]	; (8005ef8 <UART_SetConfig+0xc28>)
 8005bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c0a:	f7fa fbc9 	bl	80003a0 <__aeabi_uldivmod>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	020b      	lsls	r3, r1, #8
 8005c20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c24:	0202      	lsls	r2, r0, #8
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	6849      	ldr	r1, [r1, #4]
 8005c2a:	0849      	lsrs	r1, r1, #1
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	4605      	mov	r5, r0
 8005c32:	eb12 0804 	adds.w	r8, r2, r4
 8005c36:	eb43 0905 	adc.w	r9, r3, r5
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	469a      	mov	sl, r3
 8005c42:	4693      	mov	fp, r2
 8005c44:	4652      	mov	r2, sl
 8005c46:	465b      	mov	r3, fp
 8005c48:	4640      	mov	r0, r8
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	f7fa fba8 	bl	80003a0 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4613      	mov	r3, r2
 8005c56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5e:	d308      	bcc.n	8005c72 <UART_SetConfig+0x9a2>
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c66:	d204      	bcs.n	8005c72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c6e:	60da      	str	r2, [r3, #12]
 8005c70:	e17f      	b.n	8005f72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c78:	e17b      	b.n	8005f72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c82:	f040 80bd 	bne.w	8005e00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005c86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	dc48      	bgt.n	8005d20 <UART_SetConfig+0xa50>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	db7b      	blt.n	8005d8a <UART_SetConfig+0xaba>
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d879      	bhi.n	8005d8a <UART_SetConfig+0xaba>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x9cc>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005d27 	.word	0x08005d27
 8005ca0:	08005d2f 	.word	0x08005d2f
 8005ca4:	08005d8b 	.word	0x08005d8b
 8005ca8:	08005d8b 	.word	0x08005d8b
 8005cac:	08005d37 	.word	0x08005d37
 8005cb0:	08005d8b 	.word	0x08005d8b
 8005cb4:	08005d8b 	.word	0x08005d8b
 8005cb8:	08005d8b 	.word	0x08005d8b
 8005cbc:	08005d47 	.word	0x08005d47
 8005cc0:	08005d8b 	.word	0x08005d8b
 8005cc4:	08005d8b 	.word	0x08005d8b
 8005cc8:	08005d8b 	.word	0x08005d8b
 8005ccc:	08005d8b 	.word	0x08005d8b
 8005cd0:	08005d8b 	.word	0x08005d8b
 8005cd4:	08005d8b 	.word	0x08005d8b
 8005cd8:	08005d8b 	.word	0x08005d8b
 8005cdc:	08005d57 	.word	0x08005d57
 8005ce0:	08005d8b 	.word	0x08005d8b
 8005ce4:	08005d8b 	.word	0x08005d8b
 8005ce8:	08005d8b 	.word	0x08005d8b
 8005cec:	08005d8b 	.word	0x08005d8b
 8005cf0:	08005d8b 	.word	0x08005d8b
 8005cf4:	08005d8b 	.word	0x08005d8b
 8005cf8:	08005d8b 	.word	0x08005d8b
 8005cfc:	08005d8b 	.word	0x08005d8b
 8005d00:	08005d8b 	.word	0x08005d8b
 8005d04:	08005d8b 	.word	0x08005d8b
 8005d08:	08005d8b 	.word	0x08005d8b
 8005d0c:	08005d8b 	.word	0x08005d8b
 8005d10:	08005d8b 	.word	0x08005d8b
 8005d14:	08005d8b 	.word	0x08005d8b
 8005d18:	08005d8b 	.word	0x08005d8b
 8005d1c:	08005d7d 	.word	0x08005d7d
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d02e      	beq.n	8005d82 <UART_SetConfig+0xab2>
 8005d24:	e031      	b.n	8005d8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d26:	f7fc ff01 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 8005d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d2c:	e033      	b.n	8005d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d2e:	f7fc ff13 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8005d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d34:	e02f      	b.n	8005d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe f8f6 	bl	8003f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d44:	e027      	b.n	8005d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d46:	f107 0318 	add.w	r3, r7, #24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fa42 	bl	80041d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d54:	e01f      	b.n	8005d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d56:	4b69      	ldr	r3, [pc, #420]	; (8005efc <UART_SetConfig+0xc2c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d62:	4b66      	ldr	r3, [pc, #408]	; (8005efc <UART_SetConfig+0xc2c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	4a64      	ldr	r2, [pc, #400]	; (8005f00 <UART_SetConfig+0xc30>)
 8005d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d74:	e00f      	b.n	8005d96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005d76:	4b62      	ldr	r3, [pc, #392]	; (8005f00 <UART_SetConfig+0xc30>)
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d7a:	e00c      	b.n	8005d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d7c:	4b61      	ldr	r3, [pc, #388]	; (8005f04 <UART_SetConfig+0xc34>)
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d80:	e009      	b.n	8005d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d88:	e005      	b.n	8005d96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80ea 	beq.w	8005f72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	4a55      	ldr	r2, [pc, #340]	; (8005ef8 <UART_SetConfig+0xc28>)
 8005da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db0:	005a      	lsls	r2, r3, #1
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	441a      	add	r2, r3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	2b0f      	cmp	r3, #15
 8005dc8:	d916      	bls.n	8005df8 <UART_SetConfig+0xb28>
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d212      	bcs.n	8005df8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f023 030f 	bic.w	r3, r3, #15
 8005dda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dea:	4313      	orrs	r3, r2
 8005dec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	e0bc      	b.n	8005f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005dfe:	e0b8      	b.n	8005f72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	dc4b      	bgt.n	8005ea0 <UART_SetConfig+0xbd0>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f2c0 8087 	blt.w	8005f1c <UART_SetConfig+0xc4c>
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	f200 8084 	bhi.w	8005f1c <UART_SetConfig+0xc4c>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0xb4c>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005ea7 	.word	0x08005ea7
 8005e20:	08005eaf 	.word	0x08005eaf
 8005e24:	08005f1d 	.word	0x08005f1d
 8005e28:	08005f1d 	.word	0x08005f1d
 8005e2c:	08005eb7 	.word	0x08005eb7
 8005e30:	08005f1d 	.word	0x08005f1d
 8005e34:	08005f1d 	.word	0x08005f1d
 8005e38:	08005f1d 	.word	0x08005f1d
 8005e3c:	08005ec7 	.word	0x08005ec7
 8005e40:	08005f1d 	.word	0x08005f1d
 8005e44:	08005f1d 	.word	0x08005f1d
 8005e48:	08005f1d 	.word	0x08005f1d
 8005e4c:	08005f1d 	.word	0x08005f1d
 8005e50:	08005f1d 	.word	0x08005f1d
 8005e54:	08005f1d 	.word	0x08005f1d
 8005e58:	08005f1d 	.word	0x08005f1d
 8005e5c:	08005ed7 	.word	0x08005ed7
 8005e60:	08005f1d 	.word	0x08005f1d
 8005e64:	08005f1d 	.word	0x08005f1d
 8005e68:	08005f1d 	.word	0x08005f1d
 8005e6c:	08005f1d 	.word	0x08005f1d
 8005e70:	08005f1d 	.word	0x08005f1d
 8005e74:	08005f1d 	.word	0x08005f1d
 8005e78:	08005f1d 	.word	0x08005f1d
 8005e7c:	08005f1d 	.word	0x08005f1d
 8005e80:	08005f1d 	.word	0x08005f1d
 8005e84:	08005f1d 	.word	0x08005f1d
 8005e88:	08005f1d 	.word	0x08005f1d
 8005e8c:	08005f1d 	.word	0x08005f1d
 8005e90:	08005f1d 	.word	0x08005f1d
 8005e94:	08005f1d 	.word	0x08005f1d
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08005f0f 	.word	0x08005f0f
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d037      	beq.n	8005f14 <UART_SetConfig+0xc44>
 8005ea4:	e03a      	b.n	8005f1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea6:	f7fc fe41 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 8005eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005eac:	e03c      	b.n	8005f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eae:	f7fc fe53 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8005eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005eb4:	e038      	b.n	8005f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe f836 	bl	8003f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec4:	e030      	b.n	8005f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec6:	f107 0318 	add.w	r3, r7, #24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe f982 	bl	80041d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed4:	e028      	b.n	8005f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <UART_SetConfig+0xc2c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d012      	beq.n	8005f08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <UART_SetConfig+0xc2c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	4a04      	ldr	r2, [pc, #16]	; (8005f00 <UART_SetConfig+0xc30>)
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ef4:	e018      	b.n	8005f28 <UART_SetConfig+0xc58>
 8005ef6:	bf00      	nop
 8005ef8:	08007110 	.word	0x08007110
 8005efc:	58024400 	.word	0x58024400
 8005f00:	03d09000 	.word	0x03d09000
 8005f04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <UART_SetConfig+0xccc>)
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f0c:	e00c      	b.n	8005f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <UART_SetConfig+0xcd0>)
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f12:	e009      	b.n	8005f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f1a:	e005      	b.n	8005f28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f26:	bf00      	nop
    }

    if (pclk != 0U)
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d021      	beq.n	8005f72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	4a1c      	ldr	r2, [pc, #112]	; (8005fa4 <UART_SetConfig+0xcd4>)
 8005f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	441a      	add	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	2b0f      	cmp	r3, #15
 8005f56:	d909      	bls.n	8005f6c <UART_SetConfig+0xc9c>
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5e:	d205      	bcs.n	8005f6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60da      	str	r2, [r3, #12]
 8005f6a:	e002      	b.n	8005f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2200      	movs	r2, #0
 8005f86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3748      	adds	r7, #72	; 0x48
 8005f96:	46bd      	mov	sp, r7
 8005f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f9c:	03d09000 	.word	0x03d09000
 8005fa0:	003d0900 	.word	0x003d0900
 8005fa4:	08007110 	.word	0x08007110

08005fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01a      	beq.n	80060be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a6:	d10a      	bne.n	80060be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b098      	sub	sp, #96	; 0x60
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060fc:	f7fb fa12 	bl	8001524 <HAL_GetTick>
 8006100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b08      	cmp	r3, #8
 800610e:	d12f      	bne.n	8006170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f88e 	bl	8006240 <UART_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d022      	beq.n	8006170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800613e:	653b      	str	r3, [r7, #80]	; 0x50
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006148:	647b      	str	r3, [r7, #68]	; 0x44
 800614a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800614e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e6      	bne.n	800612a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e063      	b.n	8006238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b04      	cmp	r3, #4
 800617c:	d149      	bne.n	8006212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800617e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006186:	2200      	movs	r2, #0
 8006188:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f857 	bl	8006240 <UART_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d03c      	beq.n	8006212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	623b      	str	r3, [r7, #32]
   return(result);
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b6:	633b      	str	r3, [r7, #48]	; 0x30
 80061b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ea:	61fa      	str	r2, [r7, #28]
 80061ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	69b9      	ldr	r1, [r7, #24]
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	617b      	str	r3, [r7, #20]
   return(result);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e012      	b.n	8006238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3758      	adds	r7, #88	; 0x58
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006250:	e04f      	b.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d04b      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625a:	f7fb f963 	bl	8001524 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <UART_WaitOnFlagUntilTimeout+0x30>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e04e      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d037      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d034      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d031      	beq.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d110      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f839 	bl	800631c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2208      	movs	r2, #8
 80062ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e029      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062cc:	d111      	bne.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f81f 	bl	800631c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e00f      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	429a      	cmp	r2, r3
 800630e:	d0a0      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b095      	sub	sp, #84	; 0x54
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006342:	643b      	str	r3, [r7, #64]	; 0x40
 8006344:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006348:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	61fb      	str	r3, [r7, #28]
   return(result);
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <UART_EndRxTransfer+0xc8>)
 800636a:	4013      	ands	r3, r2
 800636c:	64bb      	str	r3, [r7, #72]	; 0x48
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800637c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d118      	bne.n	80063c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	647b      	str	r3, [r7, #68]	; 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063d8:	bf00      	nop
 80063da:	3754      	adds	r7, #84	; 0x54
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	effffffe 	.word	0xeffffffe

080063e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_UARTEx_DisableFifoMode+0x16>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e027      	b.n	800644e <HAL_UARTEx_DisableFifoMode+0x66>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2224      	movs	r2, #36	; 0x24
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800642c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800646e:	2302      	movs	r3, #2
 8006470:	e02d      	b.n	80064ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2224      	movs	r2, #36	; 0x24
 800647e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f850 	bl	8006554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e02d      	b.n	800654a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	; 0x24
 80064fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f812 	bl	8006554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006560:	2b00      	cmp	r3, #0
 8006562:	d108      	bne.n	8006576 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006574:	e031      	b.n	80065da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006576:	2310      	movs	r3, #16
 8006578:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800657a:	2310      	movs	r3, #16
 800657c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	0e5b      	lsrs	r3, r3, #25
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	0f5b      	lsrs	r3, r3, #29
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	7b3a      	ldrb	r2, [r7, #12]
 80065a2:	4911      	ldr	r1, [pc, #68]	; (80065e8 <UARTEx_SetNbDataToProcess+0x94>)
 80065a4:	5c8a      	ldrb	r2, [r1, r2]
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065aa:	7b3a      	ldrb	r2, [r7, #12]
 80065ac:	490f      	ldr	r1, [pc, #60]	; (80065ec <UARTEx_SetNbDataToProcess+0x98>)
 80065ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	7b7a      	ldrb	r2, [r7, #13]
 80065c0:	4909      	ldr	r1, [pc, #36]	; (80065e8 <UARTEx_SetNbDataToProcess+0x94>)
 80065c2:	5c8a      	ldrb	r2, [r1, r2]
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065c8:	7b7a      	ldrb	r2, [r7, #13]
 80065ca:	4908      	ldr	r1, [pc, #32]	; (80065ec <UARTEx_SetNbDataToProcess+0x98>)
 80065cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	08007128 	.word	0x08007128
 80065ec:	08007130 	.word	0x08007130

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	24000010 	.word	0x24000010

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4d0d      	ldr	r5, [pc, #52]	; (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006602:	1b64      	subs	r4, r4, r5
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2600      	movs	r6, #0
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4d0b      	ldr	r5, [pc, #44]	; (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	; (8006640 <__libc_init_array+0x44>)
 8006610:	f000 fc8e 	bl	8006f30 <_init>
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2600      	movs	r6, #0
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	08007174 	.word	0x08007174
 8006638:	08007174 	.word	0x08007174
 800663c:	08007174 	.word	0x08007174
 8006640:	08007178 	.word	0x08007178

08006644 <memset>:
 8006644:	4402      	add	r2, r0
 8006646:	4603      	mov	r3, r0
 8006648:	4293      	cmp	r3, r2
 800664a:	d100      	bne.n	800664e <memset+0xa>
 800664c:	4770      	bx	lr
 800664e:	f803 1b01 	strb.w	r1, [r3], #1
 8006652:	e7f9      	b.n	8006648 <memset+0x4>

08006654 <siprintf>:
 8006654:	b40e      	push	{r1, r2, r3}
 8006656:	b500      	push	{lr}
 8006658:	b09c      	sub	sp, #112	; 0x70
 800665a:	ab1d      	add	r3, sp, #116	; 0x74
 800665c:	9002      	str	r0, [sp, #8]
 800665e:	9006      	str	r0, [sp, #24]
 8006660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <siprintf+0x38>)
 8006666:	9107      	str	r1, [sp, #28]
 8006668:	9104      	str	r1, [sp, #16]
 800666a:	4909      	ldr	r1, [pc, #36]	; (8006690 <siprintf+0x3c>)
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	9105      	str	r1, [sp, #20]
 8006672:	6800      	ldr	r0, [r0, #0]
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	a902      	add	r1, sp, #8
 8006678:	f000 f868 	bl	800674c <_svfiprintf_r>
 800667c:	9b02      	ldr	r3, [sp, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	b01c      	add	sp, #112	; 0x70
 8006684:	f85d eb04 	ldr.w	lr, [sp], #4
 8006688:	b003      	add	sp, #12
 800668a:	4770      	bx	lr
 800668c:	24000010 	.word	0x24000010
 8006690:	ffff0208 	.word	0xffff0208

08006694 <__ssputs_r>:
 8006694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	688e      	ldr	r6, [r1, #8]
 800669a:	429e      	cmp	r6, r3
 800669c:	4682      	mov	sl, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	4690      	mov	r8, r2
 80066a2:	461f      	mov	r7, r3
 80066a4:	d838      	bhi.n	8006718 <__ssputs_r+0x84>
 80066a6:	898a      	ldrh	r2, [r1, #12]
 80066a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066ac:	d032      	beq.n	8006714 <__ssputs_r+0x80>
 80066ae:	6825      	ldr	r5, [r4, #0]
 80066b0:	6909      	ldr	r1, [r1, #16]
 80066b2:	eba5 0901 	sub.w	r9, r5, r1
 80066b6:	6965      	ldr	r5, [r4, #20]
 80066b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066c0:	3301      	adds	r3, #1
 80066c2:	444b      	add	r3, r9
 80066c4:	106d      	asrs	r5, r5, #1
 80066c6:	429d      	cmp	r5, r3
 80066c8:	bf38      	it	cc
 80066ca:	461d      	movcc	r5, r3
 80066cc:	0553      	lsls	r3, r2, #21
 80066ce:	d531      	bpl.n	8006734 <__ssputs_r+0xa0>
 80066d0:	4629      	mov	r1, r5
 80066d2:	f000 fb63 	bl	8006d9c <_malloc_r>
 80066d6:	4606      	mov	r6, r0
 80066d8:	b950      	cbnz	r0, 80066f0 <__ssputs_r+0x5c>
 80066da:	230c      	movs	r3, #12
 80066dc:	f8ca 3000 	str.w	r3, [sl]
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	6921      	ldr	r1, [r4, #16]
 80066f2:	464a      	mov	r2, r9
 80066f4:	f000 fabe 	bl	8006c74 <memcpy>
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	81a3      	strh	r3, [r4, #12]
 8006704:	6126      	str	r6, [r4, #16]
 8006706:	6165      	str	r5, [r4, #20]
 8006708:	444e      	add	r6, r9
 800670a:	eba5 0509 	sub.w	r5, r5, r9
 800670e:	6026      	str	r6, [r4, #0]
 8006710:	60a5      	str	r5, [r4, #8]
 8006712:	463e      	mov	r6, r7
 8006714:	42be      	cmp	r6, r7
 8006716:	d900      	bls.n	800671a <__ssputs_r+0x86>
 8006718:	463e      	mov	r6, r7
 800671a:	6820      	ldr	r0, [r4, #0]
 800671c:	4632      	mov	r2, r6
 800671e:	4641      	mov	r1, r8
 8006720:	f000 fab6 	bl	8006c90 <memmove>
 8006724:	68a3      	ldr	r3, [r4, #8]
 8006726:	1b9b      	subs	r3, r3, r6
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	4433      	add	r3, r6
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	2000      	movs	r0, #0
 8006732:	e7db      	b.n	80066ec <__ssputs_r+0x58>
 8006734:	462a      	mov	r2, r5
 8006736:	f000 fba5 	bl	8006e84 <_realloc_r>
 800673a:	4606      	mov	r6, r0
 800673c:	2800      	cmp	r0, #0
 800673e:	d1e1      	bne.n	8006704 <__ssputs_r+0x70>
 8006740:	6921      	ldr	r1, [r4, #16]
 8006742:	4650      	mov	r0, sl
 8006744:	f000 fabe 	bl	8006cc4 <_free_r>
 8006748:	e7c7      	b.n	80066da <__ssputs_r+0x46>
	...

0800674c <_svfiprintf_r>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	4698      	mov	r8, r3
 8006752:	898b      	ldrh	r3, [r1, #12]
 8006754:	061b      	lsls	r3, r3, #24
 8006756:	b09d      	sub	sp, #116	; 0x74
 8006758:	4607      	mov	r7, r0
 800675a:	460d      	mov	r5, r1
 800675c:	4614      	mov	r4, r2
 800675e:	d50e      	bpl.n	800677e <_svfiprintf_r+0x32>
 8006760:	690b      	ldr	r3, [r1, #16]
 8006762:	b963      	cbnz	r3, 800677e <_svfiprintf_r+0x32>
 8006764:	2140      	movs	r1, #64	; 0x40
 8006766:	f000 fb19 	bl	8006d9c <_malloc_r>
 800676a:	6028      	str	r0, [r5, #0]
 800676c:	6128      	str	r0, [r5, #16]
 800676e:	b920      	cbnz	r0, 800677a <_svfiprintf_r+0x2e>
 8006770:	230c      	movs	r3, #12
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	e0d1      	b.n	800691e <_svfiprintf_r+0x1d2>
 800677a:	2340      	movs	r3, #64	; 0x40
 800677c:	616b      	str	r3, [r5, #20]
 800677e:	2300      	movs	r3, #0
 8006780:	9309      	str	r3, [sp, #36]	; 0x24
 8006782:	2320      	movs	r3, #32
 8006784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006788:	f8cd 800c 	str.w	r8, [sp, #12]
 800678c:	2330      	movs	r3, #48	; 0x30
 800678e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006938 <_svfiprintf_r+0x1ec>
 8006792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006796:	f04f 0901 	mov.w	r9, #1
 800679a:	4623      	mov	r3, r4
 800679c:	469a      	mov	sl, r3
 800679e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067a2:	b10a      	cbz	r2, 80067a8 <_svfiprintf_r+0x5c>
 80067a4:	2a25      	cmp	r2, #37	; 0x25
 80067a6:	d1f9      	bne.n	800679c <_svfiprintf_r+0x50>
 80067a8:	ebba 0b04 	subs.w	fp, sl, r4
 80067ac:	d00b      	beq.n	80067c6 <_svfiprintf_r+0x7a>
 80067ae:	465b      	mov	r3, fp
 80067b0:	4622      	mov	r2, r4
 80067b2:	4629      	mov	r1, r5
 80067b4:	4638      	mov	r0, r7
 80067b6:	f7ff ff6d 	bl	8006694 <__ssputs_r>
 80067ba:	3001      	adds	r0, #1
 80067bc:	f000 80aa 	beq.w	8006914 <_svfiprintf_r+0x1c8>
 80067c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067c2:	445a      	add	r2, fp
 80067c4:	9209      	str	r2, [sp, #36]	; 0x24
 80067c6:	f89a 3000 	ldrb.w	r3, [sl]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 80a2 	beq.w	8006914 <_svfiprintf_r+0x1c8>
 80067d0:	2300      	movs	r3, #0
 80067d2:	f04f 32ff 	mov.w	r2, #4294967295
 80067d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067da:	f10a 0a01 	add.w	sl, sl, #1
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	9307      	str	r3, [sp, #28]
 80067e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067e6:	931a      	str	r3, [sp, #104]	; 0x68
 80067e8:	4654      	mov	r4, sl
 80067ea:	2205      	movs	r2, #5
 80067ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f0:	4851      	ldr	r0, [pc, #324]	; (8006938 <_svfiprintf_r+0x1ec>)
 80067f2:	f7f9 fd85 	bl	8000300 <memchr>
 80067f6:	9a04      	ldr	r2, [sp, #16]
 80067f8:	b9d8      	cbnz	r0, 8006832 <_svfiprintf_r+0xe6>
 80067fa:	06d0      	lsls	r0, r2, #27
 80067fc:	bf44      	itt	mi
 80067fe:	2320      	movmi	r3, #32
 8006800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006804:	0711      	lsls	r1, r2, #28
 8006806:	bf44      	itt	mi
 8006808:	232b      	movmi	r3, #43	; 0x2b
 800680a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800680e:	f89a 3000 	ldrb.w	r3, [sl]
 8006812:	2b2a      	cmp	r3, #42	; 0x2a
 8006814:	d015      	beq.n	8006842 <_svfiprintf_r+0xf6>
 8006816:	9a07      	ldr	r2, [sp, #28]
 8006818:	4654      	mov	r4, sl
 800681a:	2000      	movs	r0, #0
 800681c:	f04f 0c0a 	mov.w	ip, #10
 8006820:	4621      	mov	r1, r4
 8006822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006826:	3b30      	subs	r3, #48	; 0x30
 8006828:	2b09      	cmp	r3, #9
 800682a:	d94e      	bls.n	80068ca <_svfiprintf_r+0x17e>
 800682c:	b1b0      	cbz	r0, 800685c <_svfiprintf_r+0x110>
 800682e:	9207      	str	r2, [sp, #28]
 8006830:	e014      	b.n	800685c <_svfiprintf_r+0x110>
 8006832:	eba0 0308 	sub.w	r3, r0, r8
 8006836:	fa09 f303 	lsl.w	r3, r9, r3
 800683a:	4313      	orrs	r3, r2
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	46a2      	mov	sl, r4
 8006840:	e7d2      	b.n	80067e8 <_svfiprintf_r+0x9c>
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	1d19      	adds	r1, r3, #4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	9103      	str	r1, [sp, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfbb      	ittet	lt
 800684e:	425b      	neglt	r3, r3
 8006850:	f042 0202 	orrlt.w	r2, r2, #2
 8006854:	9307      	strge	r3, [sp, #28]
 8006856:	9307      	strlt	r3, [sp, #28]
 8006858:	bfb8      	it	lt
 800685a:	9204      	strlt	r2, [sp, #16]
 800685c:	7823      	ldrb	r3, [r4, #0]
 800685e:	2b2e      	cmp	r3, #46	; 0x2e
 8006860:	d10c      	bne.n	800687c <_svfiprintf_r+0x130>
 8006862:	7863      	ldrb	r3, [r4, #1]
 8006864:	2b2a      	cmp	r3, #42	; 0x2a
 8006866:	d135      	bne.n	80068d4 <_svfiprintf_r+0x188>
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	1d1a      	adds	r2, r3, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	9203      	str	r2, [sp, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	bfb8      	it	lt
 8006874:	f04f 33ff 	movlt.w	r3, #4294967295
 8006878:	3402      	adds	r4, #2
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006948 <_svfiprintf_r+0x1fc>
 8006880:	7821      	ldrb	r1, [r4, #0]
 8006882:	2203      	movs	r2, #3
 8006884:	4650      	mov	r0, sl
 8006886:	f7f9 fd3b 	bl	8000300 <memchr>
 800688a:	b140      	cbz	r0, 800689e <_svfiprintf_r+0x152>
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	eba0 000a 	sub.w	r0, r0, sl
 8006892:	fa03 f000 	lsl.w	r0, r3, r0
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	4303      	orrs	r3, r0
 800689a:	3401      	adds	r4, #1
 800689c:	9304      	str	r3, [sp, #16]
 800689e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a2:	4826      	ldr	r0, [pc, #152]	; (800693c <_svfiprintf_r+0x1f0>)
 80068a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068a8:	2206      	movs	r2, #6
 80068aa:	f7f9 fd29 	bl	8000300 <memchr>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d038      	beq.n	8006924 <_svfiprintf_r+0x1d8>
 80068b2:	4b23      	ldr	r3, [pc, #140]	; (8006940 <_svfiprintf_r+0x1f4>)
 80068b4:	bb1b      	cbnz	r3, 80068fe <_svfiprintf_r+0x1b2>
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	3307      	adds	r3, #7
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	3308      	adds	r3, #8
 80068c0:	9303      	str	r3, [sp, #12]
 80068c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c4:	4433      	add	r3, r6
 80068c6:	9309      	str	r3, [sp, #36]	; 0x24
 80068c8:	e767      	b.n	800679a <_svfiprintf_r+0x4e>
 80068ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ce:	460c      	mov	r4, r1
 80068d0:	2001      	movs	r0, #1
 80068d2:	e7a5      	b.n	8006820 <_svfiprintf_r+0xd4>
 80068d4:	2300      	movs	r3, #0
 80068d6:	3401      	adds	r4, #1
 80068d8:	9305      	str	r3, [sp, #20]
 80068da:	4619      	mov	r1, r3
 80068dc:	f04f 0c0a 	mov.w	ip, #10
 80068e0:	4620      	mov	r0, r4
 80068e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068e6:	3a30      	subs	r2, #48	; 0x30
 80068e8:	2a09      	cmp	r2, #9
 80068ea:	d903      	bls.n	80068f4 <_svfiprintf_r+0x1a8>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0c5      	beq.n	800687c <_svfiprintf_r+0x130>
 80068f0:	9105      	str	r1, [sp, #20]
 80068f2:	e7c3      	b.n	800687c <_svfiprintf_r+0x130>
 80068f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068f8:	4604      	mov	r4, r0
 80068fa:	2301      	movs	r3, #1
 80068fc:	e7f0      	b.n	80068e0 <_svfiprintf_r+0x194>
 80068fe:	ab03      	add	r3, sp, #12
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	462a      	mov	r2, r5
 8006904:	4b0f      	ldr	r3, [pc, #60]	; (8006944 <_svfiprintf_r+0x1f8>)
 8006906:	a904      	add	r1, sp, #16
 8006908:	4638      	mov	r0, r7
 800690a:	f3af 8000 	nop.w
 800690e:	1c42      	adds	r2, r0, #1
 8006910:	4606      	mov	r6, r0
 8006912:	d1d6      	bne.n	80068c2 <_svfiprintf_r+0x176>
 8006914:	89ab      	ldrh	r3, [r5, #12]
 8006916:	065b      	lsls	r3, r3, #25
 8006918:	f53f af2c 	bmi.w	8006774 <_svfiprintf_r+0x28>
 800691c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800691e:	b01d      	add	sp, #116	; 0x74
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006924:	ab03      	add	r3, sp, #12
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	462a      	mov	r2, r5
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <_svfiprintf_r+0x1f8>)
 800692c:	a904      	add	r1, sp, #16
 800692e:	4638      	mov	r0, r7
 8006930:	f000 f87a 	bl	8006a28 <_printf_i>
 8006934:	e7eb      	b.n	800690e <_svfiprintf_r+0x1c2>
 8006936:	bf00      	nop
 8006938:	08007138 	.word	0x08007138
 800693c:	08007142 	.word	0x08007142
 8006940:	00000000 	.word	0x00000000
 8006944:	08006695 	.word	0x08006695
 8006948:	0800713e 	.word	0x0800713e

0800694c <_printf_common>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	4616      	mov	r6, r2
 8006952:	4699      	mov	r9, r3
 8006954:	688a      	ldr	r2, [r1, #8]
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800695c:	4293      	cmp	r3, r2
 800695e:	bfb8      	it	lt
 8006960:	4613      	movlt	r3, r2
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006968:	4607      	mov	r7, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b10a      	cbz	r2, 8006972 <_printf_common+0x26>
 800696e:	3301      	adds	r3, #1
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	0699      	lsls	r1, r3, #26
 8006976:	bf42      	ittt	mi
 8006978:	6833      	ldrmi	r3, [r6, #0]
 800697a:	3302      	addmi	r3, #2
 800697c:	6033      	strmi	r3, [r6, #0]
 800697e:	6825      	ldr	r5, [r4, #0]
 8006980:	f015 0506 	ands.w	r5, r5, #6
 8006984:	d106      	bne.n	8006994 <_printf_common+0x48>
 8006986:	f104 0a19 	add.w	sl, r4, #25
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	6832      	ldr	r2, [r6, #0]
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	42ab      	cmp	r3, r5
 8006992:	dc26      	bgt.n	80069e2 <_printf_common+0x96>
 8006994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006998:	1e13      	subs	r3, r2, #0
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	bf18      	it	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	0692      	lsls	r2, r2, #26
 80069a2:	d42b      	bmi.n	80069fc <_printf_common+0xb0>
 80069a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a8:	4649      	mov	r1, r9
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d01e      	beq.n	80069f0 <_printf_common+0xa4>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	68e5      	ldr	r5, [r4, #12]
 80069b6:	6832      	ldr	r2, [r6, #0]
 80069b8:	f003 0306 	and.w	r3, r3, #6
 80069bc:	2b04      	cmp	r3, #4
 80069be:	bf08      	it	eq
 80069c0:	1aad      	subeq	r5, r5, r2
 80069c2:	68a3      	ldr	r3, [r4, #8]
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	bf0c      	ite	eq
 80069c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069cc:	2500      	movne	r5, #0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	bfc4      	itt	gt
 80069d2:	1a9b      	subgt	r3, r3, r2
 80069d4:	18ed      	addgt	r5, r5, r3
 80069d6:	2600      	movs	r6, #0
 80069d8:	341a      	adds	r4, #26
 80069da:	42b5      	cmp	r5, r6
 80069dc:	d11a      	bne.n	8006a14 <_printf_common+0xc8>
 80069de:	2000      	movs	r0, #0
 80069e0:	e008      	b.n	80069f4 <_printf_common+0xa8>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4649      	mov	r1, r9
 80069e8:	4638      	mov	r0, r7
 80069ea:	47c0      	blx	r8
 80069ec:	3001      	adds	r0, #1
 80069ee:	d103      	bne.n	80069f8 <_printf_common+0xac>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f8:	3501      	adds	r5, #1
 80069fa:	e7c6      	b.n	800698a <_printf_common+0x3e>
 80069fc:	18e1      	adds	r1, r4, r3
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	2030      	movs	r0, #48	; 0x30
 8006a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a06:	4422      	add	r2, r4
 8006a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a10:	3302      	adds	r3, #2
 8006a12:	e7c7      	b.n	80069a4 <_printf_common+0x58>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4622      	mov	r2, r4
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c0      	blx	r8
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa4>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d9      	b.n	80069da <_printf_common+0x8e>
	...

08006a28 <_printf_i>:
 8006a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	7e0f      	ldrb	r7, [r1, #24]
 8006a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a30:	2f78      	cmp	r7, #120	; 0x78
 8006a32:	4691      	mov	r9, r2
 8006a34:	4680      	mov	r8, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a3e:	d807      	bhi.n	8006a50 <_printf_i+0x28>
 8006a40:	2f62      	cmp	r7, #98	; 0x62
 8006a42:	d80a      	bhi.n	8006a5a <_printf_i+0x32>
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	f000 80d8 	beq.w	8006bfa <_printf_i+0x1d2>
 8006a4a:	2f58      	cmp	r7, #88	; 0x58
 8006a4c:	f000 80a3 	beq.w	8006b96 <_printf_i+0x16e>
 8006a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a58:	e03a      	b.n	8006ad0 <_printf_i+0xa8>
 8006a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a5e:	2b15      	cmp	r3, #21
 8006a60:	d8f6      	bhi.n	8006a50 <_printf_i+0x28>
 8006a62:	a101      	add	r1, pc, #4	; (adr r1, 8006a68 <_printf_i+0x40>)
 8006a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006a51 	.word	0x08006a51
 8006a74:	08006a51 	.word	0x08006a51
 8006a78:	08006a51 	.word	0x08006a51
 8006a7c:	08006a51 	.word	0x08006a51
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a51 	.word	0x08006a51
 8006a88:	08006a51 	.word	0x08006a51
 8006a8c:	08006a51 	.word	0x08006a51
 8006a90:	08006a51 	.word	0x08006a51
 8006a94:	08006be1 	.word	0x08006be1
 8006a98:	08006b05 	.word	0x08006b05
 8006a9c:	08006bc3 	.word	0x08006bc3
 8006aa0:	08006a51 	.word	0x08006a51
 8006aa4:	08006a51 	.word	0x08006a51
 8006aa8:	08006c03 	.word	0x08006c03
 8006aac:	08006a51 	.word	0x08006a51
 8006ab0:	08006b05 	.word	0x08006b05
 8006ab4:	08006a51 	.word	0x08006a51
 8006ab8:	08006a51 	.word	0x08006a51
 8006abc:	08006bcb 	.word	0x08006bcb
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0a3      	b.n	8006c1c <_printf_i+0x1f4>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	6829      	ldr	r1, [r5, #0]
 8006ad8:	0606      	lsls	r6, r0, #24
 8006ada:	f101 0304 	add.w	r3, r1, #4
 8006ade:	d50a      	bpl.n	8006af6 <_printf_i+0xce>
 8006ae0:	680e      	ldr	r6, [r1, #0]
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	2e00      	cmp	r6, #0
 8006ae6:	da03      	bge.n	8006af0 <_printf_i+0xc8>
 8006ae8:	232d      	movs	r3, #45	; 0x2d
 8006aea:	4276      	negs	r6, r6
 8006aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af0:	485e      	ldr	r0, [pc, #376]	; (8006c6c <_printf_i+0x244>)
 8006af2:	230a      	movs	r3, #10
 8006af4:	e019      	b.n	8006b2a <_printf_i+0x102>
 8006af6:	680e      	ldr	r6, [r1, #0]
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006afe:	bf18      	it	ne
 8006b00:	b236      	sxthne	r6, r6
 8006b02:	e7ef      	b.n	8006ae4 <_printf_i+0xbc>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	1d19      	adds	r1, r3, #4
 8006b0a:	6029      	str	r1, [r5, #0]
 8006b0c:	0601      	lsls	r1, r0, #24
 8006b0e:	d501      	bpl.n	8006b14 <_printf_i+0xec>
 8006b10:	681e      	ldr	r6, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <_printf_i+0xf2>
 8006b14:	0646      	lsls	r6, r0, #25
 8006b16:	d5fb      	bpl.n	8006b10 <_printf_i+0xe8>
 8006b18:	881e      	ldrh	r6, [r3, #0]
 8006b1a:	4854      	ldr	r0, [pc, #336]	; (8006c6c <_printf_i+0x244>)
 8006b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b1e:	bf0c      	ite	eq
 8006b20:	2308      	moveq	r3, #8
 8006b22:	230a      	movne	r3, #10
 8006b24:	2100      	movs	r1, #0
 8006b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b2a:	6865      	ldr	r5, [r4, #4]
 8006b2c:	60a5      	str	r5, [r4, #8]
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	bfa2      	ittt	ge
 8006b32:	6821      	ldrge	r1, [r4, #0]
 8006b34:	f021 0104 	bicge.w	r1, r1, #4
 8006b38:	6021      	strge	r1, [r4, #0]
 8006b3a:	b90e      	cbnz	r6, 8006b40 <_printf_i+0x118>
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	d04d      	beq.n	8006bdc <_printf_i+0x1b4>
 8006b40:	4615      	mov	r5, r2
 8006b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b46:	fb03 6711 	mls	r7, r3, r1, r6
 8006b4a:	5dc7      	ldrb	r7, [r0, r7]
 8006b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b50:	4637      	mov	r7, r6
 8006b52:	42bb      	cmp	r3, r7
 8006b54:	460e      	mov	r6, r1
 8006b56:	d9f4      	bls.n	8006b42 <_printf_i+0x11a>
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d10b      	bne.n	8006b74 <_printf_i+0x14c>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07de      	lsls	r6, r3, #31
 8006b60:	d508      	bpl.n	8006b74 <_printf_i+0x14c>
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	4299      	cmp	r1, r3
 8006b68:	bfde      	ittt	le
 8006b6a:	2330      	movle	r3, #48	; 0x30
 8006b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b74:	1b52      	subs	r2, r2, r5
 8006b76:	6122      	str	r2, [r4, #16]
 8006b78:	f8cd a000 	str.w	sl, [sp]
 8006b7c:	464b      	mov	r3, r9
 8006b7e:	aa03      	add	r2, sp, #12
 8006b80:	4621      	mov	r1, r4
 8006b82:	4640      	mov	r0, r8
 8006b84:	f7ff fee2 	bl	800694c <_printf_common>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d14c      	bne.n	8006c26 <_printf_i+0x1fe>
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	b004      	add	sp, #16
 8006b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b96:	4835      	ldr	r0, [pc, #212]	; (8006c6c <_printf_i+0x244>)
 8006b98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b9c:	6829      	ldr	r1, [r5, #0]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ba4:	6029      	str	r1, [r5, #0]
 8006ba6:	061d      	lsls	r5, r3, #24
 8006ba8:	d514      	bpl.n	8006bd4 <_printf_i+0x1ac>
 8006baa:	07df      	lsls	r7, r3, #31
 8006bac:	bf44      	itt	mi
 8006bae:	f043 0320 	orrmi.w	r3, r3, #32
 8006bb2:	6023      	strmi	r3, [r4, #0]
 8006bb4:	b91e      	cbnz	r6, 8006bbe <_printf_i+0x196>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f023 0320 	bic.w	r3, r3, #32
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	2310      	movs	r3, #16
 8006bc0:	e7b0      	b.n	8006b24 <_printf_i+0xfc>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	f043 0320 	orr.w	r3, r3, #32
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	2378      	movs	r3, #120	; 0x78
 8006bcc:	4828      	ldr	r0, [pc, #160]	; (8006c70 <_printf_i+0x248>)
 8006bce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bd2:	e7e3      	b.n	8006b9c <_printf_i+0x174>
 8006bd4:	0659      	lsls	r1, r3, #25
 8006bd6:	bf48      	it	mi
 8006bd8:	b2b6      	uxthmi	r6, r6
 8006bda:	e7e6      	b.n	8006baa <_printf_i+0x182>
 8006bdc:	4615      	mov	r5, r2
 8006bde:	e7bb      	b.n	8006b58 <_printf_i+0x130>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	6826      	ldr	r6, [r4, #0]
 8006be4:	6961      	ldr	r1, [r4, #20]
 8006be6:	1d18      	adds	r0, r3, #4
 8006be8:	6028      	str	r0, [r5, #0]
 8006bea:	0635      	lsls	r5, r6, #24
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	d501      	bpl.n	8006bf4 <_printf_i+0x1cc>
 8006bf0:	6019      	str	r1, [r3, #0]
 8006bf2:	e002      	b.n	8006bfa <_printf_i+0x1d2>
 8006bf4:	0670      	lsls	r0, r6, #25
 8006bf6:	d5fb      	bpl.n	8006bf0 <_printf_i+0x1c8>
 8006bf8:	8019      	strh	r1, [r3, #0]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	4615      	mov	r5, r2
 8006c00:	e7ba      	b.n	8006b78 <_printf_i+0x150>
 8006c02:	682b      	ldr	r3, [r5, #0]
 8006c04:	1d1a      	adds	r2, r3, #4
 8006c06:	602a      	str	r2, [r5, #0]
 8006c08:	681d      	ldr	r5, [r3, #0]
 8006c0a:	6862      	ldr	r2, [r4, #4]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f7f9 fb76 	bl	8000300 <memchr>
 8006c14:	b108      	cbz	r0, 8006c1a <_printf_i+0x1f2>
 8006c16:	1b40      	subs	r0, r0, r5
 8006c18:	6060      	str	r0, [r4, #4]
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c24:	e7a8      	b.n	8006b78 <_printf_i+0x150>
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	462a      	mov	r2, r5
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	47d0      	blx	sl
 8006c30:	3001      	adds	r0, #1
 8006c32:	d0ab      	beq.n	8006b8c <_printf_i+0x164>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	079b      	lsls	r3, r3, #30
 8006c38:	d413      	bmi.n	8006c62 <_printf_i+0x23a>
 8006c3a:	68e0      	ldr	r0, [r4, #12]
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	bfb8      	it	lt
 8006c42:	4618      	movlt	r0, r3
 8006c44:	e7a4      	b.n	8006b90 <_printf_i+0x168>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4632      	mov	r2, r6
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	47d0      	blx	sl
 8006c50:	3001      	adds	r0, #1
 8006c52:	d09b      	beq.n	8006b8c <_printf_i+0x164>
 8006c54:	3501      	adds	r5, #1
 8006c56:	68e3      	ldr	r3, [r4, #12]
 8006c58:	9903      	ldr	r1, [sp, #12]
 8006c5a:	1a5b      	subs	r3, r3, r1
 8006c5c:	42ab      	cmp	r3, r5
 8006c5e:	dcf2      	bgt.n	8006c46 <_printf_i+0x21e>
 8006c60:	e7eb      	b.n	8006c3a <_printf_i+0x212>
 8006c62:	2500      	movs	r5, #0
 8006c64:	f104 0619 	add.w	r6, r4, #25
 8006c68:	e7f5      	b.n	8006c56 <_printf_i+0x22e>
 8006c6a:	bf00      	nop
 8006c6c:	08007149 	.word	0x08007149
 8006c70:	0800715a 	.word	0x0800715a

08006c74 <memcpy>:
 8006c74:	440a      	add	r2, r1
 8006c76:	4291      	cmp	r1, r2
 8006c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c7c:	d100      	bne.n	8006c80 <memcpy+0xc>
 8006c7e:	4770      	bx	lr
 8006c80:	b510      	push	{r4, lr}
 8006c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	d1f9      	bne.n	8006c82 <memcpy+0xe>
 8006c8e:	bd10      	pop	{r4, pc}

08006c90 <memmove>:
 8006c90:	4288      	cmp	r0, r1
 8006c92:	b510      	push	{r4, lr}
 8006c94:	eb01 0402 	add.w	r4, r1, r2
 8006c98:	d902      	bls.n	8006ca0 <memmove+0x10>
 8006c9a:	4284      	cmp	r4, r0
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	d807      	bhi.n	8006cb0 <memmove+0x20>
 8006ca0:	1e43      	subs	r3, r0, #1
 8006ca2:	42a1      	cmp	r1, r4
 8006ca4:	d008      	beq.n	8006cb8 <memmove+0x28>
 8006ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cae:	e7f8      	b.n	8006ca2 <memmove+0x12>
 8006cb0:	4402      	add	r2, r0
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	428a      	cmp	r2, r1
 8006cb6:	d100      	bne.n	8006cba <memmove+0x2a>
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cc2:	e7f7      	b.n	8006cb4 <memmove+0x24>

08006cc4 <_free_r>:
 8006cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	d044      	beq.n	8006d54 <_free_r+0x90>
 8006cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cce:	9001      	str	r0, [sp, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8006cd6:	bfb8      	it	lt
 8006cd8:	18e4      	addlt	r4, r4, r3
 8006cda:	f000 f913 	bl	8006f04 <__malloc_lock>
 8006cde:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <_free_r+0x94>)
 8006ce0:	9801      	ldr	r0, [sp, #4]
 8006ce2:	6813      	ldr	r3, [r2, #0]
 8006ce4:	b933      	cbnz	r3, 8006cf4 <_free_r+0x30>
 8006ce6:	6063      	str	r3, [r4, #4]
 8006ce8:	6014      	str	r4, [r2, #0]
 8006cea:	b003      	add	sp, #12
 8006cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cf0:	f000 b90e 	b.w	8006f10 <__malloc_unlock>
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	d908      	bls.n	8006d0a <_free_r+0x46>
 8006cf8:	6825      	ldr	r5, [r4, #0]
 8006cfa:	1961      	adds	r1, r4, r5
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf01      	itttt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	1949      	addeq	r1, r1, r5
 8006d06:	6021      	streq	r1, [r4, #0]
 8006d08:	e7ed      	b.n	8006ce6 <_free_r+0x22>
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b10b      	cbz	r3, 8006d14 <_free_r+0x50>
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	d9fa      	bls.n	8006d0a <_free_r+0x46>
 8006d14:	6811      	ldr	r1, [r2, #0]
 8006d16:	1855      	adds	r5, r2, r1
 8006d18:	42a5      	cmp	r5, r4
 8006d1a:	d10b      	bne.n	8006d34 <_free_r+0x70>
 8006d1c:	6824      	ldr	r4, [r4, #0]
 8006d1e:	4421      	add	r1, r4
 8006d20:	1854      	adds	r4, r2, r1
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	6011      	str	r1, [r2, #0]
 8006d26:	d1e0      	bne.n	8006cea <_free_r+0x26>
 8006d28:	681c      	ldr	r4, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	6053      	str	r3, [r2, #4]
 8006d2e:	4421      	add	r1, r4
 8006d30:	6011      	str	r1, [r2, #0]
 8006d32:	e7da      	b.n	8006cea <_free_r+0x26>
 8006d34:	d902      	bls.n	8006d3c <_free_r+0x78>
 8006d36:	230c      	movs	r3, #12
 8006d38:	6003      	str	r3, [r0, #0]
 8006d3a:	e7d6      	b.n	8006cea <_free_r+0x26>
 8006d3c:	6825      	ldr	r5, [r4, #0]
 8006d3e:	1961      	adds	r1, r4, r5
 8006d40:	428b      	cmp	r3, r1
 8006d42:	bf04      	itt	eq
 8006d44:	6819      	ldreq	r1, [r3, #0]
 8006d46:	685b      	ldreq	r3, [r3, #4]
 8006d48:	6063      	str	r3, [r4, #4]
 8006d4a:	bf04      	itt	eq
 8006d4c:	1949      	addeq	r1, r1, r5
 8006d4e:	6021      	streq	r1, [r4, #0]
 8006d50:	6054      	str	r4, [r2, #4]
 8006d52:	e7ca      	b.n	8006cea <_free_r+0x26>
 8006d54:	b003      	add	sp, #12
 8006d56:	bd30      	pop	{r4, r5, pc}
 8006d58:	24000620 	.word	0x24000620

08006d5c <sbrk_aligned>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	4e0e      	ldr	r6, [pc, #56]	; (8006d98 <sbrk_aligned+0x3c>)
 8006d60:	460c      	mov	r4, r1
 8006d62:	6831      	ldr	r1, [r6, #0]
 8006d64:	4605      	mov	r5, r0
 8006d66:	b911      	cbnz	r1, 8006d6e <sbrk_aligned+0x12>
 8006d68:	f000 f8bc 	bl	8006ee4 <_sbrk_r>
 8006d6c:	6030      	str	r0, [r6, #0]
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4628      	mov	r0, r5
 8006d72:	f000 f8b7 	bl	8006ee4 <_sbrk_r>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	d00a      	beq.n	8006d90 <sbrk_aligned+0x34>
 8006d7a:	1cc4      	adds	r4, r0, #3
 8006d7c:	f024 0403 	bic.w	r4, r4, #3
 8006d80:	42a0      	cmp	r0, r4
 8006d82:	d007      	beq.n	8006d94 <sbrk_aligned+0x38>
 8006d84:	1a21      	subs	r1, r4, r0
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 f8ac 	bl	8006ee4 <_sbrk_r>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d101      	bne.n	8006d94 <sbrk_aligned+0x38>
 8006d90:	f04f 34ff 	mov.w	r4, #4294967295
 8006d94:	4620      	mov	r0, r4
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	24000624 	.word	0x24000624

08006d9c <_malloc_r>:
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	1ccd      	adds	r5, r1, #3
 8006da2:	f025 0503 	bic.w	r5, r5, #3
 8006da6:	3508      	adds	r5, #8
 8006da8:	2d0c      	cmp	r5, #12
 8006daa:	bf38      	it	cc
 8006dac:	250c      	movcc	r5, #12
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	4607      	mov	r7, r0
 8006db2:	db01      	blt.n	8006db8 <_malloc_r+0x1c>
 8006db4:	42a9      	cmp	r1, r5
 8006db6:	d905      	bls.n	8006dc4 <_malloc_r+0x28>
 8006db8:	230c      	movs	r3, #12
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc4:	4e2e      	ldr	r6, [pc, #184]	; (8006e80 <_malloc_r+0xe4>)
 8006dc6:	f000 f89d 	bl	8006f04 <__malloc_lock>
 8006dca:	6833      	ldr	r3, [r6, #0]
 8006dcc:	461c      	mov	r4, r3
 8006dce:	bb34      	cbnz	r4, 8006e1e <_malloc_r+0x82>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	f7ff ffc2 	bl	8006d5c <sbrk_aligned>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	4604      	mov	r4, r0
 8006ddc:	d14d      	bne.n	8006e7a <_malloc_r+0xde>
 8006dde:	6834      	ldr	r4, [r6, #0]
 8006de0:	4626      	mov	r6, r4
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	d140      	bne.n	8006e68 <_malloc_r+0xcc>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	4631      	mov	r1, r6
 8006dea:	4638      	mov	r0, r7
 8006dec:	eb04 0803 	add.w	r8, r4, r3
 8006df0:	f000 f878 	bl	8006ee4 <_sbrk_r>
 8006df4:	4580      	cmp	r8, r0
 8006df6:	d13a      	bne.n	8006e6e <_malloc_r+0xd2>
 8006df8:	6821      	ldr	r1, [r4, #0]
 8006dfa:	3503      	adds	r5, #3
 8006dfc:	1a6d      	subs	r5, r5, r1
 8006dfe:	f025 0503 	bic.w	r5, r5, #3
 8006e02:	3508      	adds	r5, #8
 8006e04:	2d0c      	cmp	r5, #12
 8006e06:	bf38      	it	cc
 8006e08:	250c      	movcc	r5, #12
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff ffa5 	bl	8006d5c <sbrk_aligned>
 8006e12:	3001      	adds	r0, #1
 8006e14:	d02b      	beq.n	8006e6e <_malloc_r+0xd2>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	442b      	add	r3, r5
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	e00e      	b.n	8006e3c <_malloc_r+0xa0>
 8006e1e:	6822      	ldr	r2, [r4, #0]
 8006e20:	1b52      	subs	r2, r2, r5
 8006e22:	d41e      	bmi.n	8006e62 <_malloc_r+0xc6>
 8006e24:	2a0b      	cmp	r2, #11
 8006e26:	d916      	bls.n	8006e56 <_malloc_r+0xba>
 8006e28:	1961      	adds	r1, r4, r5
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	6025      	str	r5, [r4, #0]
 8006e2e:	bf18      	it	ne
 8006e30:	6059      	strne	r1, [r3, #4]
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	bf08      	it	eq
 8006e36:	6031      	streq	r1, [r6, #0]
 8006e38:	5162      	str	r2, [r4, r5]
 8006e3a:	604b      	str	r3, [r1, #4]
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f104 060b 	add.w	r6, r4, #11
 8006e42:	f000 f865 	bl	8006f10 <__malloc_unlock>
 8006e46:	f026 0607 	bic.w	r6, r6, #7
 8006e4a:	1d23      	adds	r3, r4, #4
 8006e4c:	1af2      	subs	r2, r6, r3
 8006e4e:	d0b6      	beq.n	8006dbe <_malloc_r+0x22>
 8006e50:	1b9b      	subs	r3, r3, r6
 8006e52:	50a3      	str	r3, [r4, r2]
 8006e54:	e7b3      	b.n	8006dbe <_malloc_r+0x22>
 8006e56:	6862      	ldr	r2, [r4, #4]
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	bf0c      	ite	eq
 8006e5c:	6032      	streq	r2, [r6, #0]
 8006e5e:	605a      	strne	r2, [r3, #4]
 8006e60:	e7ec      	b.n	8006e3c <_malloc_r+0xa0>
 8006e62:	4623      	mov	r3, r4
 8006e64:	6864      	ldr	r4, [r4, #4]
 8006e66:	e7b2      	b.n	8006dce <_malloc_r+0x32>
 8006e68:	4634      	mov	r4, r6
 8006e6a:	6876      	ldr	r6, [r6, #4]
 8006e6c:	e7b9      	b.n	8006de2 <_malloc_r+0x46>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	603b      	str	r3, [r7, #0]
 8006e72:	4638      	mov	r0, r7
 8006e74:	f000 f84c 	bl	8006f10 <__malloc_unlock>
 8006e78:	e7a1      	b.n	8006dbe <_malloc_r+0x22>
 8006e7a:	6025      	str	r5, [r4, #0]
 8006e7c:	e7de      	b.n	8006e3c <_malloc_r+0xa0>
 8006e7e:	bf00      	nop
 8006e80:	24000620 	.word	0x24000620

08006e84 <_realloc_r>:
 8006e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e88:	4680      	mov	r8, r0
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	460e      	mov	r6, r1
 8006e8e:	b921      	cbnz	r1, 8006e9a <_realloc_r+0x16>
 8006e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e94:	4611      	mov	r1, r2
 8006e96:	f7ff bf81 	b.w	8006d9c <_malloc_r>
 8006e9a:	b92a      	cbnz	r2, 8006ea8 <_realloc_r+0x24>
 8006e9c:	f7ff ff12 	bl	8006cc4 <_free_r>
 8006ea0:	4625      	mov	r5, r4
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea8:	f000 f838 	bl	8006f1c <_malloc_usable_size_r>
 8006eac:	4284      	cmp	r4, r0
 8006eae:	4607      	mov	r7, r0
 8006eb0:	d802      	bhi.n	8006eb8 <_realloc_r+0x34>
 8006eb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eb6:	d812      	bhi.n	8006ede <_realloc_r+0x5a>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4640      	mov	r0, r8
 8006ebc:	f7ff ff6e 	bl	8006d9c <_malloc_r>
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d0ed      	beq.n	8006ea2 <_realloc_r+0x1e>
 8006ec6:	42bc      	cmp	r4, r7
 8006ec8:	4622      	mov	r2, r4
 8006eca:	4631      	mov	r1, r6
 8006ecc:	bf28      	it	cs
 8006ece:	463a      	movcs	r2, r7
 8006ed0:	f7ff fed0 	bl	8006c74 <memcpy>
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7ff fef4 	bl	8006cc4 <_free_r>
 8006edc:	e7e1      	b.n	8006ea2 <_realloc_r+0x1e>
 8006ede:	4635      	mov	r5, r6
 8006ee0:	e7df      	b.n	8006ea2 <_realloc_r+0x1e>
	...

08006ee4 <_sbrk_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d06      	ldr	r5, [pc, #24]	; (8006f00 <_sbrk_r+0x1c>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	602b      	str	r3, [r5, #0]
 8006ef0:	f7f9 fe96 	bl	8000c20 <_sbrk>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_sbrk_r+0x1a>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_sbrk_r+0x1a>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	24000628 	.word	0x24000628

08006f04 <__malloc_lock>:
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <__malloc_lock+0x8>)
 8006f06:	f000 b811 	b.w	8006f2c <__retarget_lock_acquire_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	2400062c 	.word	0x2400062c

08006f10 <__malloc_unlock>:
 8006f10:	4801      	ldr	r0, [pc, #4]	; (8006f18 <__malloc_unlock+0x8>)
 8006f12:	f000 b80c 	b.w	8006f2e <__retarget_lock_release_recursive>
 8006f16:	bf00      	nop
 8006f18:	2400062c 	.word	0x2400062c

08006f1c <_malloc_usable_size_r>:
 8006f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f20:	1f18      	subs	r0, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bfbc      	itt	lt
 8006f26:	580b      	ldrlt	r3, [r1, r0]
 8006f28:	18c0      	addlt	r0, r0, r3
 8006f2a:	4770      	bx	lr

08006f2c <__retarget_lock_acquire_recursive>:
 8006f2c:	4770      	bx	lr

08006f2e <__retarget_lock_release_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <_init>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr

08006f3c <_fini>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr
