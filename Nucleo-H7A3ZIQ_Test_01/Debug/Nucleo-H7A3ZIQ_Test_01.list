
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800a9a4  0800a9a4  0001a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac1c  0800ac1c  0001ac1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac24  0800ac24  0001ac24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ac28  0800ac28  0001ac28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800ac2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a88  24000074  0800aca0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000afc  0800aca0  00020afc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aafb  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031b7  00000000  00000000  0003ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001210  00000000  00000000  0003dd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010a8  00000000  00000000  0003ef68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000328bd  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bc96  00000000  00000000  000728cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140a70  00000000  00000000  0008e563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cefd3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004df4  00000000  00000000  001cf024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a98c 	.word	0x0800a98c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a98c 	.word	0x0800a98c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <LED_Dimming>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
static void LED_Dimming (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
    if (dutycontrol_flag == 0x00)
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <LED_Dimming+0x74>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d116      	bne.n	80006de <LED_Dimming+0x3a>
    {
        if (TIM1_DutyControl_cnt > 20)
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <LED_Dimming+0x78>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b14      	cmp	r3, #20
 80006b6:	d907      	bls.n	80006c8 <LED_Dimming+0x24>
        {
            TIM1_DutyControl_cnt = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <LED_Dimming+0x78>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

            htim12.Instance->CCR1++;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <LED_Dimming+0x7c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c4:	3201      	adds	r2, #1
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (htim12.Instance->CCR1 >= htim12.Init.Period)
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <LED_Dimming+0x7c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <LED_Dimming+0x7c>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d31b      	bcc.n	800070e <LED_Dimming+0x6a>
        {
            dutycontrol_flag = 0x01;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <LED_Dimming+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]

            // sprintf(uart3_tx_buf, " TIM12 CCR1 : %d\r\n", );
            // HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
        }
    }
}
 80006dc:	e017      	b.n	800070e <LED_Dimming+0x6a>
    else if (dutycontrol_flag == 0x01)
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <LED_Dimming+0x74>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d113      	bne.n	800070e <LED_Dimming+0x6a>
        if (TIM1_DutyControl_cnt > 20)
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <LED_Dimming+0x78>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d907      	bls.n	80006fe <LED_Dimming+0x5a>
            TIM1_DutyControl_cnt = 0;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <LED_Dimming+0x78>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
            htim12.Instance->CCR1--;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <LED_Dimming+0x7c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fa:	3a01      	subs	r2, #1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
        if (htim12.Instance->CCR1 == 0)
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <LED_Dimming+0x7c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <LED_Dimming+0x6a>
            dutycontrol_flag = 0x00;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <LED_Dimming+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	24000ae5 	.word	0x24000ae5
 800071c:	240002d4 	.word	0x240002d4
 8000720:	24000178 	.word	0x24000178

08000724 <LED_Process>:

void LED_Process (void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    //if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
    if (TIM1_CNT >= 500) // 1ms period Timer2 Counter.
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <LED_Process+0x50>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000730:	d307      	bcc.n	8000742 <LED_Process+0x1e>
    {
        TIM1_CNT = 0;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <LED_Process+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]

        HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000738:	2101      	movs	r1, #1
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <LED_Process+0x54>)
 800073c:	f003 fddb 	bl	80042f6 <HAL_GPIO_TogglePin>
 8000740:	e013      	b.n	800076a <LED_Process+0x46>
        // HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
        //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    }
    else if (TIM2_CNT >= 10) // 100ms * 9 period Timer2 Counter.
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <LED_Process+0x58>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b09      	cmp	r3, #9
 8000748:	d907      	bls.n	800075a <LED_Process+0x36>
    {
        TIM2_CNT = 0;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <LED_Process+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000750:	2102      	movs	r1, #2
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LED_Process+0x5c>)
 8000754:	f003 fdcf 	bl	80042f6 <HAL_GPIO_TogglePin>
 8000758:	e007      	b.n	800076a <LED_Process+0x46>
    }
    else if (TIM8_CNT >= 100000) // 10us * 99999 period Timer8 Counter.
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <LED_Process+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LED_Process+0x64>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d902      	bls.n	800076a <LED_Process+0x46>
    {
        TIM8_CNT = 0;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LED_Process+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
        //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    }

    LED_Dimming();
 800076a:	f7ff ff9b 	bl	80006a4 <LED_Dimming>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	240002d0 	.word	0x240002d0
 8000778:	58020400 	.word	0x58020400
 800077c:	240002d8 	.word	0x240002d8
 8000780:	58021000 	.word	0x58021000
 8000784:	240002dc 	.word	0x240002dc
 8000788:	0001869f 	.word	0x0001869f

0800078c <Button_Process>:
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
    }
}
#else
void Button_Process (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  if (userButton_state == 0x01)
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <Button_Process+0x3c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d114      	bne.n	80007c2 <Button_Process+0x36>
  {
    userButton_state = 0x00;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <Button_Process+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
    sprintf(uart3_tx_buf, " Button Interrupt callback. Input Count : %d\r\n", userButton_cnt);
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <Button_Process+0x40>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	490a      	ldr	r1, [pc, #40]	; (80007d0 <Button_Process+0x44>)
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <Button_Process+0x48>)
 80007a8:	f009 fc6e 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <Button_Process+0x48>)
 80007ae:	f7ff fd9f 	bl	80002f0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	4906      	ldr	r1, [pc, #24]	; (80007d4 <Button_Process+0x48>)
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <Button_Process+0x4c>)
 80007be:	f007 ffd9 	bl	8008774 <HAL_UART_Transmit>
  }
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24000ae4 	.word	0x24000ae4
 80007cc:	24000ae2 	.word	0x24000ae2
 80007d0:	0800a9a4 	.word	0x0800a9a4
 80007d4:	240006e0 	.word	0x240006e0
 80007d8:	240001c4 	.word	0x240001c4

080007dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_DMA_Init+0x3c>)
 80007e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_DMA_Init+0x3c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x3c>)
 80007f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	200b      	movs	r0, #11
 8000806:	f001 f9fc 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800080a:	200b      	movs	r0, #11
 800080c:	f001 fa13 	bl	8001c36 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a81      	ldr	r2, [pc, #516]	; (8000a40 <MX_GPIO_Init+0x224>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000850:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a7a      	ldr	r2, [pc, #488]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a72      	ldr	r2, [pc, #456]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b6c      	ldr	r3, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x224>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a6b      	ldr	r2, [pc, #428]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b68      	ldr	r3, [pc, #416]	; (8000a40 <MX_GPIO_Init+0x224>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a63      	ldr	r2, [pc, #396]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a5c      	ldr	r2, [pc, #368]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a54      	ldr	r2, [pc, #336]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000904:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	4a4d      	ldr	r2, [pc, #308]	; (8000a40 <MX_GPIO_Init+0x224>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000914:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4846      	ldr	r0, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x228>)
 800092a:	f003 fccb 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2101      	movs	r1, #1
 8000932:	4845      	ldr	r0, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x22c>)
 8000934:	f003 fcc6 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4843      	ldr	r0, [pc, #268]	; (8000a4c <MX_GPIO_Init+0x230>)
 800093e:	f003 fcc1 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	483d      	ldr	r0, [pc, #244]	; (8000a50 <MX_GPIO_Init+0x234>)
 800095a:	f003 fb03 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x228>)
 8000978:	f003 faf4 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	482d      	ldr	r0, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x22c>)
 8000994:	f003 fae6 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4829      	ldr	r0, [pc, #164]	; (8000a54 <MX_GPIO_Init+0x238>)
 80009ae:	f003 fad9 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_GPIO_Init+0x23c>)
 80009c8:	f003 facc 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009de:	230a      	movs	r3, #10
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <MX_GPIO_Init+0x23c>)
 80009ea:	f003 fabb 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_GPIO_Init+0x23c>)
 8000a08:	f003 faac 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a24:	f003 fa9e 	bl	8003f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 f8e8 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f001 f8ff 	bl	8001c36 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58021400 	.word	0x58021400
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58021000 	.word	0x58021000
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58021800 	.word	0x58021800
 8000a58:	58020000 	.word	0x58020000

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f000 ff3e 	bl	80018e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f83e 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f7ff fed8 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6c:	f7ff feb6 	bl	80007dc <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a70:	f000 fdfa 	bl	8001668 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000a74:	f000 fa7a 	bl	8000f6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a78:	f000 facc 	bl	8001014 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a7c:	f000 fb1a 	bl	80010b4 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000a80:	f000 fd0a 	bl	8001498 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8000a84:	f000 fb6a 	bl	800115c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  BootMessagePrint();
 8000a88:	f000 fdf6 	bl	8001678 <BootMessagePrint>
  GetClockSourcePrint();
 8000a8c:	f000 fe70 	bl	8001770 <GetClockSourcePrint>

  HAL_TIM_Base_Start_IT(&htim1);
 8000a90:	480e      	ldr	r0, [pc, #56]	; (8000acc <main+0x70>)
 8000a92:	f006 fab5 	bl	8007000 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <main+0x74>)
 8000a98:	f006 fab2 	bl	8007000 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <main+0x78>)
 8000a9e:	f006 faaf 	bl	8007000 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <main+0x7c>)
 8000aa6:	f006 fb85 	bl	80071b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <main+0x7c>)
 8000aae:	f006 fc8f 	bl	80073d0 <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_DMA(&huart3, &uart3_rx_buf, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4909      	ldr	r1, [pc, #36]	; (8000adc <main+0x80>)
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <main+0x84>)
 8000ab8:	f007 feea 	bl	8008890 <HAL_UART_Receive_DMA>
    // {
    //   htim12.Instance->CCR1 = i;
    //   //HAL_Delay(20);  // 
    // }

    LED_Process();
 8000abc:	f7ff fe32 	bl	8000724 <LED_Process>
    Button_Process();
 8000ac0:	f7ff fe64 	bl	800078c <Button_Process>
    Uart3_Process();
 8000ac4:	f000 fc8a 	bl	80013dc <Uart3_Process>
  {
 8000ac8:	e7f8      	b.n	8000abc <main+0x60>
 8000aca:	bf00      	nop
 8000acc:	24000094 	.word	0x24000094
 8000ad0:	240000e0 	.word	0x240000e0
 8000ad4:	2400012c 	.word	0x2400012c
 8000ad8:	24000178 	.word	0x24000178
 8000adc:	240002e0 	.word	0x240002e0
 8000ae0:	240001c4 	.word	0x240001c4

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	; 0x70
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	224c      	movs	r2, #76	; 0x4c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f009 fac0 	bl	800a078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2220      	movs	r2, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f009 faba 	bl	800a078 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <SystemClock_Config+0xe4>)
 8000b06:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f003 fc26 	bl	8004360 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b30:	bf00      	nop
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <SystemClock_Config+0xe8>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3e:	d1f8      	bne.n	8000b32 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b40:	2321      	movs	r3, #33	; 0x21
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	2302      	movs	r3, #2
 8000b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000b5a:	2346      	movs	r3, #70	; 0x46
 8000b5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b62:	2304      	movs	r3, #4
 8000b64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fc4a 	bl	8004414 <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b86:	f000 f823 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	233f      	movs	r3, #63	; 0x3f
 8000b8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b9e:	2340      	movs	r3, #64	; 0x40
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2107      	movs	r1, #7
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 f861 	bl	8004c78 <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000bbc:	f000 f808 	bl	8000bd0 <Error_Handler>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3770      	adds	r7, #112	; 0x70
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58024800 	.word	0x58024800

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_MspInit+0x30>)
 8000be4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x30>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x30>)
 8000bf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	58024400 	.word	0x58024400

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000c1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1e:	f000 fef1 	bl	8001a04 <HAL_Delay>
 8000c22:	e7fa      	b.n	8000c1a <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 feae 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA1_Stream0_IRQHandler+0x10>)
 8000c72:	f001 fdf5 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000258 	.word	0x24000258

08000c80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM1_UP_IRQHandler+0x10>)
 8000c86:	f006 fcfd 	bl	8007684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	24000094 	.word	0x24000094

08000c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM2_IRQHandler+0x10>)
 8000c9a:	f006 fcf3 	bl	8007684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	240000e0 	.word	0x240000e0

08000ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cb0:	f003 fb3b 	bl	800432a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000cbe:	f006 fce1 	bl	8007684 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000cc4:	f006 fcde 	bl	8007684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2400012c 	.word	0x2400012c
 8000cd0:	24000178 	.word	0x24000178

08000cd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000cda:	f006 fcd3 	bl	8007684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2400012c 	.word	0x2400012c

08000ce8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10a      	bne.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        TIM1_CNT++;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d02:	6013      	str	r3, [r2, #0]
        TIM1_DutyControl_cnt++;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d0c:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
    {
        TIM8_CNT++;
    }
}
 8000d0e:	e014      	b.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x52>
    else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d105      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x3e>
        TIM2_CNT++;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	e009      	b.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x52>
    else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d104      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x52>
        TIM8_CNT++;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	240002d0 	.word	0x240002d0
 8000d50:	240002d4 	.word	0x240002d4
 8000d54:	240002d8 	.word	0x240002d8
 8000d58:	40010400 	.word	0x40010400
 8000d5c:	240002dc 	.word	0x240002dc

08000d60 <HAL_GPIO_EXTI_Callback>:
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
    userButton_state = 0x01;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
    userButton_cnt++;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d7a:	801a      	strh	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	24000ae4 	.word	0x24000ae4
 8000d8c:	24000ae2 	.word	0x24000ae2

08000d90 <HAL_UARTEx_RxEventCallback>:
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_UARTEx_RxEventCallback+0x28>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d104      	bne.n	8000db0 <HAL_UARTEx_RxEventCallback+0x20>
    {
        /* Process the received data */
        /* Size indicates the number of bytes received */

        /* Restart UART receive */
        HAL_UART_Receive_DMA(&huart3, &uart3_rx_buf, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x2c>)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x30>)
 8000dac:	f007 fd70 	bl	8008890 <HAL_UART_Receive_DMA>
    }
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40004800 	.word	0x40004800
 8000dbc:	240002e0 	.word	0x240002e0
 8000dc0:	240001c4 	.word	0x240001c4

08000dc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_UART_RxCpltCallback+0x3c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10f      	bne.n	8000df6 <HAL_UART_RxCpltCallback+0x32>
    {
        /* Process the received data */
        /* Size indicates the number of bytes received */

        /* Restart UART receive */
        HAL_UART_Receive_DMA(&huart3, (uint8_t *) &uart3_rx_buf[++uart3_rx_index], 1);
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_UART_RxCpltCallback+0x40>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_UART_RxCpltCallback+0x40>)
 8000de0:	801a      	strh	r2, [r3, #0]
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_UART_RxCpltCallback+0x40>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_UART_RxCpltCallback+0x44>)
 8000dea:	4413      	add	r3, r2
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <HAL_UART_RxCpltCallback+0x48>)
 8000df2:	f007 fd4d 	bl	8008890 <HAL_UART_Receive_DMA>
    }
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40004800 	.word	0x40004800
 8000e04:	24000ae0 	.word	0x24000ae0
 8000e08:	240002e0 	.word	0x240002e0
 8000e0c:	240001c4 	.word	0x240001c4

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f009 f8f0 	bl	800a024 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24100000 	.word	0x24100000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	24000090 	.word	0x24000090
 8000e78:	24000b00 	.word	0x24000b00

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <SystemInit+0xd0>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <SystemInit+0xd0>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <SystemInit+0xd4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d807      	bhi.n	8000eac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <SystemInit+0xd4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <SystemInit+0xd4>)
 8000ea6:	f043 0303 	orr.w	r3, r3, #3
 8000eaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <SystemInit+0xd8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <SystemInit+0xd8>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <SystemInit+0xd8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <SystemInit+0xd8>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4924      	ldr	r1, [pc, #144]	; (8000f54 <SystemInit+0xd8>)
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <SystemInit+0xdc>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <SystemInit+0xd4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <SystemInit+0xd4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 030f 	bic.w	r3, r3, #15
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <SystemInit+0xd4>)
 8000ee0:	f043 0303 	orr.w	r3, r3, #3
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <SystemInit+0xd8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <SystemInit+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <SystemInit+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <SystemInit+0xd8>)
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <SystemInit+0xe0>)
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <SystemInit+0xd8>)
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <SystemInit+0xe4>)
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <SystemInit+0xd8>)
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <SystemInit+0xe8>)
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SystemInit+0xd8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <SystemInit+0xd8>)
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <SystemInit+0xe8>)
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <SystemInit+0xd8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <SystemInit+0xd8>)
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <SystemInit+0xe8>)
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <SystemInit+0xd8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <SystemInit+0xd8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <SystemInit+0xd8>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <SystemInit+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <SystemInit+0xec>)
 8000f3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	52002000 	.word	0x52002000
 8000f54:	58024400 	.word	0x58024400
 8000f58:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f5c:	02020200 	.word	0x02020200
 8000f60:	01ff0000 	.word	0x01ff0000
 8000f64:	01010280 	.word	0x01010280
 8000f68:	52004000 	.word	0x52004000

08000f6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_TIM1_Init+0xa0>)
 8000f8c:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_TIM1_Init+0xa4>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_TIM1_Init+0xa0>)
 8000f92:	f240 1217 	movw	r2, #279	; 0x117
 8000f96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_TIM1_Init+0xa0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fba:	f005 ffc9 	bl	8006f50 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000fc4:	f7ff fe04 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_TIM1_Init+0xa0>)
 8000fd6:	f006 fd71 	bl	8007abc <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fe0:	f7ff fdf6 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM1_Init+0xa0>)
 8000ff6:	f007 fac1 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001000:	f7ff fde6 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	24000094 	.word	0x24000094
 8001010:	40010000 	.word	0x40010000

08001014 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_TIM2_Init+0x98>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_TIM2_Init+0x98>)
 800103c:	f240 1217 	movw	r2, #279	; 0x117
 8001040:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_TIM2_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_TIM2_Init+0x98>)
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <MX_TIM2_Init+0x9c>)
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_TIM2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_TIM2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_TIM2_Init+0x98>)
 800105c:	f005 ff78 	bl	8006f50 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001066:	f7ff fdb3 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_TIM2_Init+0x98>)
 8001078:	f006 fd20 	bl	8007abc <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001082:	f7ff fda5 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_TIM2_Init+0x98>)
 8001094:	f007 fa72 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800109e:	f7ff fd97 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	240000e0 	.word	0x240000e0
 80010b0:	0001869f 	.word	0x0001869f

080010b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <MX_TIM8_Init+0xa4>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010da:	f240 1217 	movw	r2, #279	; 0x117
 80010de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010e8:	2209      	movs	r2, #9
 80010ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_TIM8_Init+0xa0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010fe:	4815      	ldr	r0, [pc, #84]	; (8001154 <MX_TIM8_Init+0xa0>)
 8001100:	f005 ff26 	bl	8006f50 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800110a:	f7ff fd61 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_TIM8_Init+0xa0>)
 800111c:	f006 fcce 	bl	8007abc <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001126:	f7ff fd53 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_TIM8_Init+0xa0>)
 800113c:	f007 fa1e 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001146:	f7ff fd43 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2400012c 	.word	0x2400012c
 8001158:	40010400 	.word	0x40010400

0800115c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001190:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <MX_TIM12_Init+0xec>)
 8001192:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 27999;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001196:	f646 525f 	movw	r2, #27999	; 0x6d5f
 800119a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_TIM12_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011a4:	2263      	movs	r2, #99	; 0x63
 80011a6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80011b4:	4823      	ldr	r0, [pc, #140]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011b6:	f005 fecb 	bl	8006f50 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 80011c0:	f7ff fd06 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	4619      	mov	r1, r3
 80011d0:	481c      	ldr	r0, [pc, #112]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011d2:	f006 fc73 	bl	8007abc <HAL_TIM_ConfigClockSource>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80011dc:	f7ff fcf8 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <MX_TIM12_Init+0xe8>)
 80011e2:	f005 ff85 	bl	80070f0 <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80011ec:	f7ff fcf0 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001200:	f007 f9bc 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800120a:	f7ff fce1 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	; 0x60
 8001210:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001226:	f006 fb35 	bl	8007894 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001230:	f7ff fcce 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM12_Init+0xe8>)
 8001236:	f000 f895 	bl	8001364 <HAL_TIM_MspPostInit>

}
 800123a:	bf00      	nop
 800123c:	3738      	adds	r7, #56	; 0x38
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	24000178 	.word	0x24000178
 8001248:	40001800 	.word	0x40001800

0800124c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <HAL_TIM_Base_MspInit+0x108>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d117      	bne.n	800128e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001260:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001264:	4a3c      	ldr	r2, [pc, #240]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001270:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2019      	movs	r0, #25
 8001282:	f000 fcbe 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001286:	2019      	movs	r0, #25
 8001288:	f000 fcd5 	bl	8001c36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800128c:	e05d      	b.n	800134a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001296:	d117      	bne.n	80012c8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 800129a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800129e:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201c      	movs	r0, #28
 80012bc:	f000 fca1 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c0:	201c      	movs	r0, #28
 80012c2:	f000 fcb8 	bl	8001c36 <HAL_NVIC_EnableIRQ>
}
 80012c6:	e040      	b.n	800134a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM8)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_TIM_Base_MspInit+0x110>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d11f      	bne.n	8001312 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 80012e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	202b      	movs	r0, #43	; 0x2b
 80012f6:	f000 fc84 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80012fa:	202b      	movs	r0, #43	; 0x2b
 80012fc:	f000 fc9b 	bl	8001c36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	202c      	movs	r0, #44	; 0x2c
 8001306:	f000 fc7c 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800130a:	202c      	movs	r0, #44	; 0x2c
 800130c:	f000 fc93 	bl	8001c36 <HAL_NVIC_EnableIRQ>
}
 8001310:	e01b      	b.n	800134a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM12)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_TIM_Base_MspInit+0x114>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d116      	bne.n	800134a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 800131e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 8001324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001328:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_TIM_Base_MspInit+0x10c>)
 800132e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	202b      	movs	r0, #43	; 0x2b
 8001340:	f000 fc5f 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001344:	202b      	movs	r0, #43	; 0x2b
 8001346:	f000 fc76 	bl	8001c36 <HAL_NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40010000 	.word	0x40010000
 8001358:	58024400 	.word	0x58024400
 800135c:	40010400 	.word	0x40010400
 8001360:	40001800 	.word	0x40001800

08001364 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_TIM_MspPostInit+0x6c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11f      	bne.n	80013c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_TIM_MspPostInit+0x70>)
 8001388:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_TIM_MspPostInit+0x70>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_TIM_MspPostInit+0x70>)
 8001398:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_TIM_MspPostInit+0x74>)
 80013c2:	f002 fdcf 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40001800 	.word	0x40001800
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020400 	.word	0x58020400

080013dc <Uart3_Process>:
/* Includes ------------------------------------------------------------------*/
#include "uart_proc.h"


void Uart3_Process (void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    if ((uart3_rx_buf[uart3_rx_index - 1] == 0x0A))
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <Uart3_Process+0x9c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4a25      	ldr	r2, [pc, #148]	; (800147c <Uart3_Process+0xa0>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	2b0a      	cmp	r3, #10
 80013ec:	d138      	bne.n	8001460 <Uart3_Process+0x84>
    {
        if (!strncmp("RXBUF ALL PRINT", uart3_rx_buf, UART3_CMP_SIZE))
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <Uart3_Process+0x9c>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	3b02      	subs	r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4921      	ldr	r1, [pc, #132]	; (800147c <Uart3_Process+0xa0>)
 80013f8:	4821      	ldr	r0, [pc, #132]	; (8001480 <Uart3_Process+0xa4>)
 80013fa:	f008 fe65 	bl	800a0c8 <strncmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10f      	bne.n	8001424 <Uart3_Process+0x48>
        {
            sprintf(uart3_tx_buf, "In A\r\n");
 8001404:	491f      	ldr	r1, [pc, #124]	; (8001484 <Uart3_Process+0xa8>)
 8001406:	4820      	ldr	r0, [pc, #128]	; (8001488 <Uart3_Process+0xac>)
 8001408:	f008 fe3e 	bl	800a088 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800140c:	481e      	ldr	r0, [pc, #120]	; (8001488 <Uart3_Process+0xac>)
 800140e:	f7fe ff6f 	bl	80002f0 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	491b      	ldr	r1, [pc, #108]	; (8001488 <Uart3_Process+0xac>)
 800141c:	481b      	ldr	r0, [pc, #108]	; (800148c <Uart3_Process+0xb0>)
 800141e:	f007 f9a9 	bl	8008774 <HAL_UART_Transmit>
 8001422:	e019      	b.n	8001458 <Uart3_Process+0x7c>
        }
        else if (!strncmp("RXBUF CLEAR", uart3_rx_buf, UART3_CMP_SIZE))
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <Uart3_Process+0x9c>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	3b02      	subs	r3, #2
 800142a:	461a      	mov	r2, r3
 800142c:	4913      	ldr	r1, [pc, #76]	; (800147c <Uart3_Process+0xa0>)
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <Uart3_Process+0xb4>)
 8001430:	f008 fe4a 	bl	800a0c8 <strncmp>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10e      	bne.n	8001458 <Uart3_Process+0x7c>
        {
            sprintf(uart3_tx_buf, "In B\r\n");
 800143a:	4916      	ldr	r1, [pc, #88]	; (8001494 <Uart3_Process+0xb8>)
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <Uart3_Process+0xac>)
 800143e:	f008 fe23 	bl	800a088 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <Uart3_Process+0xac>)
 8001444:	f7fe ff54 	bl	80002f0 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	490d      	ldr	r1, [pc, #52]	; (8001488 <Uart3_Process+0xac>)
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <Uart3_Process+0xb0>)
 8001454:	f007 f98e 	bl	8008774 <HAL_UART_Transmit>
        }

        //memset(uart3_rx_buf, 0, uart3_rx_index);
        uart3_rx_index = 0;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <Uart3_Process+0x9c>)
 800145a:	2200      	movs	r2, #0
 800145c:	801a      	strh	r2, [r3, #0]
    
    else if (uart3_rx_index >= 999)
    {
        uart3_rx_index = 0;
    }
}
 800145e:	e008      	b.n	8001472 <Uart3_Process+0x96>
    else if (uart3_rx_index >= 999)
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <Uart3_Process+0x9c>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001468:	4293      	cmp	r3, r2
 800146a:	d902      	bls.n	8001472 <Uart3_Process+0x96>
        uart3_rx_index = 0;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <Uart3_Process+0x9c>)
 800146e:	2200      	movs	r2, #0
 8001470:	801a      	strh	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000ae0 	.word	0x24000ae0
 800147c:	240002e0 	.word	0x240002e0
 8001480:	0800a9d4 	.word	0x0800a9d4
 8001484:	0800a9e4 	.word	0x0800a9e4
 8001488:	240006e0 	.word	0x240006e0
 800148c:	240001c4 	.word	0x240001c4
 8001490:	0800a9ec 	.word	0x0800a9ec
 8001494:	0800a9f8 	.word	0x0800a9f8

08001498 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_USART3_UART_Init+0x90>)
 800149e:	4a23      	ldr	r2, [pc, #140]	; (800152c <MX_USART3_UART_Init+0x94>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014e2:	f007 f8f7 	bl	80086d4 <HAL_UART_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014ec:	f7ff fb70 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_USART3_UART_Init+0x90>)
 80014f4:	f008 fccc 	bl	8009e90 <HAL_UARTEx_SetTxFifoThreshold>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014fe:	f7ff fb67 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <MX_USART3_UART_Init+0x90>)
 8001506:	f008 fd01 	bl	8009f0c <HAL_UARTEx_SetRxFifoThreshold>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001510:	f7ff fb5e 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_USART3_UART_Init+0x90>)
 8001516:	f008 fc82 	bl	8009e1e <HAL_UARTEx_DisableFifoMode>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001520:	f7ff fb56 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	240001c4 	.word	0x240001c4
 800152c:	40004800 	.word	0x40004800

08001530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0ba      	sub	sp, #232	; 0xe8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	22c0      	movs	r2, #192	; 0xc0
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f008 fd91 	bl	800a078 <memset>
  if(uartHandle->Instance==USART3)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <HAL_UART_MspInit+0x124>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d174      	bne.n	800164a <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001560:	f04f 0202 	mov.w	r2, #2
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4618      	mov	r0, r3
 8001578:	f003 ff0a 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001582:	f7ff fb25 	bl	8000bd0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_UART_MspInit+0x128>)
 8001588:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800158c:	4a32      	ldr	r2, [pc, #200]	; (8001658 <HAL_UART_MspInit+0x128>)
 800158e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001592:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_UART_MspInit+0x128>)
 8001598:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800159c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <HAL_UART_MspInit+0x128>)
 80015a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015aa:	4a2b      	ldr	r2, [pc, #172]	; (8001658 <HAL_UART_MspInit+0x128>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_UART_MspInit+0x128>)
 80015b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e6:	4619      	mov	r1, r3
 80015e8:	481c      	ldr	r0, [pc, #112]	; (800165c <HAL_UART_MspInit+0x12c>)
 80015ea:	f002 fcbb 	bl	8003f64 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_UART_MspInit+0x130>)
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <HAL_UART_MspInit+0x134>)
 80015f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_UART_MspInit+0x130>)
 80015f6:	222d      	movs	r2, #45	; 0x2d
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_UART_MspInit+0x130>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0x130>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_UART_MspInit+0x130>)
 800162e:	f000 fb1d 	bl	8001c6c <HAL_DMA_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001638:	f7ff faca 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_UART_MspInit+0x130>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800164a:	bf00      	nop
 800164c:	37e8      	adds	r7, #232	; 0xe8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40004800 	.word	0x40004800
 8001658:	58024400 	.word	0x58024400
 800165c:	58020c00 	.word	0x58020c00
 8001660:	24000258 	.word	0x24000258
 8001664:	40020010 	.word	0x40020010

08001668 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 800167c:	4930      	ldr	r1, [pc, #192]	; (8001740 <BootMessagePrint+0xc8>)
 800167e:	4831      	ldr	r0, [pc, #196]	; (8001744 <BootMessagePrint+0xcc>)
 8001680:	f008 fd02 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001684:	482f      	ldr	r0, [pc, #188]	; (8001744 <BootMessagePrint+0xcc>)
 8001686:	f7fe fe33 	bl	80002f0 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	492c      	ldr	r1, [pc, #176]	; (8001744 <BootMessagePrint+0xcc>)
 8001694:	482c      	ldr	r0, [pc, #176]	; (8001748 <BootMessagePrint+0xd0>)
 8001696:	f007 f86d 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 800169a:	4a2c      	ldr	r2, [pc, #176]	; (800174c <BootMessagePrint+0xd4>)
 800169c:	492c      	ldr	r1, [pc, #176]	; (8001750 <BootMessagePrint+0xd8>)
 800169e:	4829      	ldr	r0, [pc, #164]	; (8001744 <BootMessagePrint+0xcc>)
 80016a0:	f008 fcf2 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80016a4:	4827      	ldr	r0, [pc, #156]	; (8001744 <BootMessagePrint+0xcc>)
 80016a6:	f7fe fe23 	bl	80002f0 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	4924      	ldr	r1, [pc, #144]	; (8001744 <BootMessagePrint+0xcc>)
 80016b4:	4824      	ldr	r0, [pc, #144]	; (8001748 <BootMessagePrint+0xd0>)
 80016b6:	f007 f85d 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 80016ba:	4a26      	ldr	r2, [pc, #152]	; (8001754 <BootMessagePrint+0xdc>)
 80016bc:	4926      	ldr	r1, [pc, #152]	; (8001758 <BootMessagePrint+0xe0>)
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <BootMessagePrint+0xcc>)
 80016c0:	f008 fce2 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <BootMessagePrint+0xcc>)
 80016c6:	f7fe fe13 	bl	80002f0 <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	491c      	ldr	r1, [pc, #112]	; (8001744 <BootMessagePrint+0xcc>)
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <BootMessagePrint+0xd0>)
 80016d6:	f007 f84d 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 80016da:	4a20      	ldr	r2, [pc, #128]	; (800175c <BootMessagePrint+0xe4>)
 80016dc:	4920      	ldr	r1, [pc, #128]	; (8001760 <BootMessagePrint+0xe8>)
 80016de:	4819      	ldr	r0, [pc, #100]	; (8001744 <BootMessagePrint+0xcc>)
 80016e0:	f008 fcd2 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80016e4:	4817      	ldr	r0, [pc, #92]	; (8001744 <BootMessagePrint+0xcc>)
 80016e6:	f7fe fe03 	bl	80002f0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	4914      	ldr	r1, [pc, #80]	; (8001744 <BootMessagePrint+0xcc>)
 80016f4:	4814      	ldr	r0, [pc, #80]	; (8001748 <BootMessagePrint+0xd0>)
 80016f6:	f007 f83d 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <BootMessagePrint+0xec>)
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <BootMessagePrint+0xf0>)
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <BootMessagePrint+0xf4>)
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <BootMessagePrint+0xcc>)
 8001702:	f008 fcc1 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001706:	480f      	ldr	r0, [pc, #60]	; (8001744 <BootMessagePrint+0xcc>)
 8001708:	f7fe fdf2 	bl	80002f0 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	490b      	ldr	r1, [pc, #44]	; (8001744 <BootMessagePrint+0xcc>)
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <BootMessagePrint+0xd0>)
 8001718:	f007 f82c 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800171c:	4908      	ldr	r1, [pc, #32]	; (8001740 <BootMessagePrint+0xc8>)
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <BootMessagePrint+0xcc>)
 8001720:	f008 fcb2 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <BootMessagePrint+0xcc>)
 8001726:	f7fe fde3 	bl	80002f0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	4904      	ldr	r1, [pc, #16]	; (8001744 <BootMessagePrint+0xcc>)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <BootMessagePrint+0xd0>)
 8001736:	f007 f81d 	bl	8008774 <HAL_UART_Transmit>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	0800aa00 	.word	0x0800aa00
 8001744:	240006e0 	.word	0x240006e0
 8001748:	240001c4 	.word	0x240001c4
 800174c:	0800aa30 	.word	0x0800aa30
 8001750:	0800aa40 	.word	0x0800aa40
 8001754:	0800aa5c 	.word	0x0800aa5c
 8001758:	0800aa64 	.word	0x0800aa64
 800175c:	0800aa80 	.word	0x0800aa80
 8001760:	0800aa94 	.word	0x0800aa94
 8001764:	0800aab0 	.word	0x0800aab0
 8001768:	0800aabc 	.word	0x0800aabc
 800176c:	0800aac8 	.word	0x0800aac8

08001770 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 8001774:	493d      	ldr	r1, [pc, #244]	; (800186c <GetClockSourcePrint+0xfc>)
 8001776:	483e      	ldr	r0, [pc, #248]	; (8001870 <GetClockSourcePrint+0x100>)
 8001778:	f008 fc86 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800177c:	483c      	ldr	r0, [pc, #240]	; (8001870 <GetClockSourcePrint+0x100>)
 800177e:	f7fe fdb7 	bl	80002f0 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	4939      	ldr	r1, [pc, #228]	; (8001870 <GetClockSourcePrint+0x100>)
 800178c:	4839      	ldr	r0, [pc, #228]	; (8001874 <GetClockSourcePrint+0x104>)
 800178e:	f006 fff1 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8001792:	f003 fc27 	bl	8004fe4 <HAL_RCC_GetSysClockFreq>
 8001796:	4603      	mov	r3, r0
 8001798:	4a37      	ldr	r2, [pc, #220]	; (8001878 <GetClockSourcePrint+0x108>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	461a      	mov	r2, r3
 80017a2:	4936      	ldr	r1, [pc, #216]	; (800187c <GetClockSourcePrint+0x10c>)
 80017a4:	4832      	ldr	r0, [pc, #200]	; (8001870 <GetClockSourcePrint+0x100>)
 80017a6:	f008 fc6f 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80017aa:	4831      	ldr	r0, [pc, #196]	; (8001870 <GetClockSourcePrint+0x100>)
 80017ac:	f7fe fda0 	bl	80002f0 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	492d      	ldr	r1, [pc, #180]	; (8001870 <GetClockSourcePrint+0x100>)
 80017ba:	482e      	ldr	r0, [pc, #184]	; (8001874 <GetClockSourcePrint+0x104>)
 80017bc:	f006 ffda 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80017c0:	f003 fd8a 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <GetClockSourcePrint+0x108>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	461a      	mov	r2, r3
 80017d0:	492b      	ldr	r1, [pc, #172]	; (8001880 <GetClockSourcePrint+0x110>)
 80017d2:	4827      	ldr	r0, [pc, #156]	; (8001870 <GetClockSourcePrint+0x100>)
 80017d4:	f008 fc58 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80017d8:	4825      	ldr	r0, [pc, #148]	; (8001870 <GetClockSourcePrint+0x100>)
 80017da:	f7fe fd89 	bl	80002f0 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	4922      	ldr	r1, [pc, #136]	; (8001870 <GetClockSourcePrint+0x100>)
 80017e8:	4822      	ldr	r0, [pc, #136]	; (8001874 <GetClockSourcePrint+0x104>)
 80017ea:	f006 ffc3 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80017ee:	f003 fda3 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <GetClockSourcePrint+0x108>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0c9b      	lsrs	r3, r3, #18
 80017fc:	461a      	mov	r2, r3
 80017fe:	4921      	ldr	r1, [pc, #132]	; (8001884 <GetClockSourcePrint+0x114>)
 8001800:	481b      	ldr	r0, [pc, #108]	; (8001870 <GetClockSourcePrint+0x100>)
 8001802:	f008 fc41 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001806:	481a      	ldr	r0, [pc, #104]	; (8001870 <GetClockSourcePrint+0x100>)
 8001808:	f7fe fd72 	bl	80002f0 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	4916      	ldr	r1, [pc, #88]	; (8001870 <GetClockSourcePrint+0x100>)
 8001816:	4817      	ldr	r0, [pc, #92]	; (8001874 <GetClockSourcePrint+0x104>)
 8001818:	f006 ffac 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800181c:	f003 fda2 	bl	8005364 <HAL_RCC_GetPCLK2Freq>
 8001820:	4603      	mov	r3, r0
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <GetClockSourcePrint+0x108>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	461a      	mov	r2, r3
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <GetClockSourcePrint+0x118>)
 800182e:	4810      	ldr	r0, [pc, #64]	; (8001870 <GetClockSourcePrint+0x100>)
 8001830:	f008 fc2a 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <GetClockSourcePrint+0x100>)
 8001836:	f7fe fd5b 	bl	80002f0 <strlen>
 800183a:	4603      	mov	r3, r0
 800183c:	b29a      	uxth	r2, r3
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	490b      	ldr	r1, [pc, #44]	; (8001870 <GetClockSourcePrint+0x100>)
 8001844:	480b      	ldr	r0, [pc, #44]	; (8001874 <GetClockSourcePrint+0x104>)
 8001846:	f006 ff95 	bl	8008774 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <GetClockSourcePrint+0xfc>)
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <GetClockSourcePrint+0x100>)
 800184e:	f008 fc1b 	bl	800a088 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <GetClockSourcePrint+0x100>)
 8001854:	f7fe fd4c 	bl	80002f0 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	4903      	ldr	r1, [pc, #12]	; (8001870 <GetClockSourcePrint+0x100>)
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <GetClockSourcePrint+0x104>)
 8001864:	f006 ff86 	bl	8008774 <HAL_UART_Transmit>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	0800aa00 	.word	0x0800aa00
 8001870:	240006e0 	.word	0x240006e0
 8001874:	240001c4 	.word	0x240001c4
 8001878:	431bde83 	.word	0x431bde83
 800187c:	0800aae8 	.word	0x0800aae8
 8001880:	0800ab18 	.word	0x0800ab18
 8001884:	0800ab48 	.word	0x0800ab48
 8001888:	0800ab78 	.word	0x0800ab78

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001890:	f7ff faf4 	bl	8000e7c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001896:	490d      	ldr	r1, [pc, #52]	; (80018cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ac:	4c0a      	ldr	r4, [pc, #40]	; (80018d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f008 fbb9 	bl	800a030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff f8cd 	bl	8000a5c <main>
  bx  lr
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80018c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018cc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80018d0:	0800ac2c 	.word	0x0800ac2c
  ldr r2, =_sbss
 80018d4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80018d8:	24000afc 	.word	0x24000afc

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>
	...

080018e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e6:	2003      	movs	r0, #3
 80018e8:	f000 f980 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018ec:	f003 fb7a 	bl	8004fe4 <HAL_RCC_GetSysClockFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_Init+0x68>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	4913      	ldr	r1, [pc, #76]	; (800194c <HAL_Init+0x6c>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_Init+0x68>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_Init+0x6c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_Init+0x70>)
 8001922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_Init+0x74>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f814 	bl	8001958 <HAL_InitTick>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e002      	b.n	8001940 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800193a:	f7ff f94f 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	58024400 	.word	0x58024400
 800194c:	0800aba8 	.word	0x0800aba8
 8001950:	24000004 	.word	0x24000004
 8001954:	24000000 	.word	0x24000000

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_InitTick+0x60>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e021      	b.n	80019b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_InitTick+0x64>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_InitTick+0x60>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f965 	bl	8001c52 <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f92f 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x68>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2400000c 	.word	0x2400000c
 80019bc:	24000000 	.word	0x24000000
 80019c0:	24000008 	.word	0x24000008

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2400000c 	.word	0x2400000c
 80019e8:	24000ae8 	.word	0x24000ae8

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	24000ae8 	.word	0x24000ae8

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2400000c 	.word	0x2400000c

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	05fa0000 	.word	0x05fa0000

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff40 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff90 	bl	8001b40 <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5f 	bl	8001aec <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff33 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa4 	bl	8001ba8 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff feba 	bl	80019ec <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e37f      	b.n	8002384 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_DMA_Init+0x1b8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d04a      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a65      	ldr	r2, [pc, #404]	; (8001e28 <HAL_DMA_Init+0x1bc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d045      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a63      	ldr	r2, [pc, #396]	; (8001e2c <HAL_DMA_Init+0x1c0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d040      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <HAL_DMA_Init+0x1c4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d03b      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <HAL_DMA_Init+0x1c8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d036      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <HAL_DMA_Init+0x1cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d031      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_DMA_Init+0x1d0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02c      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_DMA_Init+0x1d4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d027      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_DMA_Init+0x1d8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d022      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a59      	ldr	r2, [pc, #356]	; (8001e48 <HAL_DMA_Init+0x1dc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d01d      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <HAL_DMA_Init+0x1e0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <HAL_DMA_Init+0x1e4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a54      	ldr	r2, [pc, #336]	; (8001e54 <HAL_DMA_Init+0x1e8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <HAL_DMA_Init+0x1ec>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_DMA_Init+0x1f0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_Init+0xb8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_DMA_Init+0x1f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0xbc>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_DMA_Init+0xbe>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 813c 	beq.w	8001fa8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_DMA_Init+0x1b8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d04a      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <HAL_DMA_Init+0x1bc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d045      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_DMA_Init+0x1c0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d040      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <HAL_DMA_Init+0x1c4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d03b      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <HAL_DMA_Init+0x1c8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d036      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_DMA_Init+0x1cc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d031      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_DMA_Init+0x1d0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d02c      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_DMA_Init+0x1d4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d027      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_DMA_Init+0x1d8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d022      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_DMA_Init+0x1dc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d01d      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_DMA_Init+0x1e0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_DMA_Init+0x1e4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_DMA_Init+0x1e8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_DMA_Init+0x1ec>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_DMA_Init+0x1f0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_Init+0x174>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_DMA_Init+0x1f4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <HAL_DMA_Init+0x186>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_DMA_Init+0x196>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e02:	e02f      	b.n	8001e64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e04:	f7ff fdf2 	bl	80019ec <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d928      	bls.n	8001e64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e2af      	b.n	8002384 <HAL_DMA_Init+0x718>
 8001e24:	40020010 	.word	0x40020010
 8001e28:	40020028 	.word	0x40020028
 8001e2c:	40020040 	.word	0x40020040
 8001e30:	40020058 	.word	0x40020058
 8001e34:	40020070 	.word	0x40020070
 8001e38:	40020088 	.word	0x40020088
 8001e3c:	400200a0 	.word	0x400200a0
 8001e40:	400200b8 	.word	0x400200b8
 8001e44:	40020410 	.word	0x40020410
 8001e48:	40020428 	.word	0x40020428
 8001e4c:	40020440 	.word	0x40020440
 8001e50:	40020458 	.word	0x40020458
 8001e54:	40020470 	.word	0x40020470
 8001e58:	40020488 	.word	0x40020488
 8001e5c:	400204a0 	.word	0x400204a0
 8001e60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1c8      	bne.n	8001e04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_DMA_Init+0x3e0>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d107      	bne.n	8001ec8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b28      	cmp	r3, #40	; 0x28
 8001ece:	d903      	bls.n	8001ed8 <HAL_DMA_Init+0x26c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ed6:	d91f      	bls.n	8001f18 <HAL_DMA_Init+0x2ac>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b3e      	cmp	r3, #62	; 0x3e
 8001ede:	d903      	bls.n	8001ee8 <HAL_DMA_Init+0x27c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b42      	cmp	r3, #66	; 0x42
 8001ee6:	d917      	bls.n	8001f18 <HAL_DMA_Init+0x2ac>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b46      	cmp	r3, #70	; 0x46
 8001eee:	d903      	bls.n	8001ef8 <HAL_DMA_Init+0x28c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b48      	cmp	r3, #72	; 0x48
 8001ef6:	d90f      	bls.n	8001f18 <HAL_DMA_Init+0x2ac>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b4e      	cmp	r3, #78	; 0x4e
 8001efe:	d903      	bls.n	8001f08 <HAL_DMA_Init+0x29c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b52      	cmp	r3, #82	; 0x52
 8001f06:	d907      	bls.n	8001f18 <HAL_DMA_Init+0x2ac>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b73      	cmp	r3, #115	; 0x73
 8001f0e:	d905      	bls.n	8001f1c <HAL_DMA_Init+0x2b0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b77      	cmp	r3, #119	; 0x77
 8001f16:	d801      	bhi.n	8001f1c <HAL_DMA_Init+0x2b0>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_DMA_Init+0x2b2>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f28:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f023 0307 	bic.w	r3, r3, #7
 8001f40:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d117      	bne.n	8001f84 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00e      	beq.n	8001f84 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f001 fe72 	bl	8003c50 <DMA_CheckFifoParam>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e1ff      	b.n	8002384 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f001 fdad 	bl	8003aec <DMA_CalcBaseAndBitshift>
 8001f92:	4603      	mov	r3, r0
 8001f94:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	223f      	movs	r2, #63	; 0x3f
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	e0fe      	b.n	80021a6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a28      	ldr	r2, [pc, #160]	; (8002050 <HAL_DMA_Init+0x3e4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d04a      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a27      	ldr	r2, [pc, #156]	; (8002054 <HAL_DMA_Init+0x3e8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d045      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a25      	ldr	r2, [pc, #148]	; (8002058 <HAL_DMA_Init+0x3ec>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d040      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a24      	ldr	r2, [pc, #144]	; (800205c <HAL_DMA_Init+0x3f0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d03b      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_DMA_Init+0x3f4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d036      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a21      	ldr	r2, [pc, #132]	; (8002064 <HAL_DMA_Init+0x3f8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d031      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_DMA_Init+0x3fc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02c      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_DMA_Init+0x400>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d027      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_DMA_Init+0x404>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d022      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_DMA_Init+0x408>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d01d      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_DMA_Init+0x40c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d018      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_DMA_Init+0x410>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_DMA_Init+0x414>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00e      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <HAL_DMA_Init+0x418>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_DMA_Init+0x41c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_DMA_Init+0x3dc>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_DMA_Init+0x420>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d123      	bne.n	8002090 <HAL_DMA_Init+0x424>
 8002048:	2301      	movs	r3, #1
 800204a:	e022      	b.n	8002092 <HAL_DMA_Init+0x426>
 800204c:	fe10803f 	.word	0xfe10803f
 8002050:	48022c08 	.word	0x48022c08
 8002054:	48022c1c 	.word	0x48022c1c
 8002058:	48022c30 	.word	0x48022c30
 800205c:	48022c44 	.word	0x48022c44
 8002060:	48022c58 	.word	0x48022c58
 8002064:	48022c6c 	.word	0x48022c6c
 8002068:	48022c80 	.word	0x48022c80
 800206c:	48022c94 	.word	0x48022c94
 8002070:	58025408 	.word	0x58025408
 8002074:	5802541c 	.word	0x5802541c
 8002078:	58025430 	.word	0x58025430
 800207c:	58025444 	.word	0x58025444
 8002080:	58025458 	.word	0x58025458
 8002084:	5802546c 	.word	0x5802546c
 8002088:	58025480 	.word	0x58025480
 800208c:	58025494 	.word	0x58025494
 8002090:	2300      	movs	r3, #0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d07e      	beq.n	8002194 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a80      	ldr	r2, [pc, #512]	; (800229c <HAL_DMA_Init+0x630>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d021      	beq.n	80020e4 <HAL_DMA_Init+0x478>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a7e      	ldr	r2, [pc, #504]	; (80022a0 <HAL_DMA_Init+0x634>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01c      	beq.n	80020e4 <HAL_DMA_Init+0x478>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7d      	ldr	r2, [pc, #500]	; (80022a4 <HAL_DMA_Init+0x638>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d017      	beq.n	80020e4 <HAL_DMA_Init+0x478>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a7b      	ldr	r2, [pc, #492]	; (80022a8 <HAL_DMA_Init+0x63c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d012      	beq.n	80020e4 <HAL_DMA_Init+0x478>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7a      	ldr	r2, [pc, #488]	; (80022ac <HAL_DMA_Init+0x640>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00d      	beq.n	80020e4 <HAL_DMA_Init+0x478>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a78      	ldr	r2, [pc, #480]	; (80022b0 <HAL_DMA_Init+0x644>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d008      	beq.n	80020e4 <HAL_DMA_Init+0x478>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a77      	ldr	r2, [pc, #476]	; (80022b4 <HAL_DMA_Init+0x648>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <HAL_DMA_Init+0x478>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a75      	ldr	r2, [pc, #468]	; (80022b8 <HAL_DMA_Init+0x64c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <HAL_DMA_Init+0x650>)
 8002102:	4013      	ands	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Init+0x4b4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b80      	cmp	r3, #128	; 0x80
 8002114:	d102      	bne.n	800211c <HAL_DMA_Init+0x4b0>
 8002116:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800211a:	e002      	b.n	8002122 <HAL_DMA_Init+0x4b6>
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_DMA_Init+0x4b6>
 8002120:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68d2      	ldr	r2, [r2, #12]
 8002126:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002150:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <HAL_DMA_Init+0x654>)
 8002168:	4413      	add	r3, r2
 800216a:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <HAL_DMA_Init+0x658>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	009a      	lsls	r2, r3, #2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f001 fcb7 	bl	8003aec <DMA_CalcBaseAndBitshift>
 800217e:	4603      	mov	r3, r0
 8002180:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2201      	movs	r2, #1
 800218c:	409a      	lsls	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	e008      	b.n	80021a6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0ee      	b.n	8002384 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_DMA_Init+0x65c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d072      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <HAL_DMA_Init+0x660>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d06d      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a44      	ldr	r2, [pc, #272]	; (80022d0 <HAL_DMA_Init+0x664>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d068      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a42      	ldr	r2, [pc, #264]	; (80022d4 <HAL_DMA_Init+0x668>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d063      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a41      	ldr	r2, [pc, #260]	; (80022d8 <HAL_DMA_Init+0x66c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d05e      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a3f      	ldr	r2, [pc, #252]	; (80022dc <HAL_DMA_Init+0x670>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d059      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <HAL_DMA_Init+0x674>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d054      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <HAL_DMA_Init+0x678>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d04f      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a3b      	ldr	r2, [pc, #236]	; (80022e8 <HAL_DMA_Init+0x67c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d04a      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a39      	ldr	r2, [pc, #228]	; (80022ec <HAL_DMA_Init+0x680>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d045      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <HAL_DMA_Init+0x684>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d040      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <HAL_DMA_Init+0x688>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d03b      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a35      	ldr	r2, [pc, #212]	; (80022f8 <HAL_DMA_Init+0x68c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d036      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_DMA_Init+0x690>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d031      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a32      	ldr	r2, [pc, #200]	; (8002300 <HAL_DMA_Init+0x694>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d02c      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_DMA_Init+0x698>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d027      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_DMA_Init+0x630>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d022      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <HAL_DMA_Init+0x634>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01d      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <HAL_DMA_Init+0x638>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d018      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_DMA_Init+0x63c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_DMA_Init+0x640>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00e      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_DMA_Init+0x644>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <HAL_DMA_Init+0x648>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_DMA_Init+0x62a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_DMA_Init+0x64c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d138      	bne.n	8002308 <HAL_DMA_Init+0x69c>
 8002296:	2301      	movs	r3, #1
 8002298:	e037      	b.n	800230a <HAL_DMA_Init+0x69e>
 800229a:	bf00      	nop
 800229c:	58025408 	.word	0x58025408
 80022a0:	5802541c 	.word	0x5802541c
 80022a4:	58025430 	.word	0x58025430
 80022a8:	58025444 	.word	0x58025444
 80022ac:	58025458 	.word	0x58025458
 80022b0:	5802546c 	.word	0x5802546c
 80022b4:	58025480 	.word	0x58025480
 80022b8:	58025494 	.word	0x58025494
 80022bc:	fffe000f 	.word	0xfffe000f
 80022c0:	a7fdabf8 	.word	0xa7fdabf8
 80022c4:	cccccccd 	.word	0xcccccccd
 80022c8:	40020010 	.word	0x40020010
 80022cc:	40020028 	.word	0x40020028
 80022d0:	40020040 	.word	0x40020040
 80022d4:	40020058 	.word	0x40020058
 80022d8:	40020070 	.word	0x40020070
 80022dc:	40020088 	.word	0x40020088
 80022e0:	400200a0 	.word	0x400200a0
 80022e4:	400200b8 	.word	0x400200b8
 80022e8:	40020410 	.word	0x40020410
 80022ec:	40020428 	.word	0x40020428
 80022f0:	40020440 	.word	0x40020440
 80022f4:	40020458 	.word	0x40020458
 80022f8:	40020470 	.word	0x40020470
 80022fc:	40020488 	.word	0x40020488
 8002300:	400204a0 	.word	0x400204a0
 8002304:	400204b8 	.word	0x400204b8
 8002308:	2300      	movs	r3, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d032      	beq.n	8002374 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f001 fd1a 	bl	8003d48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d102      	bne.n	8002322 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002336:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <HAL_DMA_Init+0x6f6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b08      	cmp	r3, #8
 8002346:	d80c      	bhi.n	8002362 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f001 fd97 	bl	8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	e008      	b.n	8002374 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e226      	b.n	80027f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_DMA_Start_IT+0x2a>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e21f      	b.n	80027f6 <HAL_DMA_Start_IT+0x46a>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	f040 820a 	bne.w	80027e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a68      	ldr	r2, [pc, #416]	; (8002580 <HAL_DMA_Start_IT+0x1f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a66      	ldr	r2, [pc, #408]	; (8002584 <HAL_DMA_Start_IT+0x1f8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_DMA_Start_IT+0x1fc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a63      	ldr	r2, [pc, #396]	; (800258c <HAL_DMA_Start_IT+0x200>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a62      	ldr	r2, [pc, #392]	; (8002590 <HAL_DMA_Start_IT+0x204>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a60      	ldr	r2, [pc, #384]	; (8002594 <HAL_DMA_Start_IT+0x208>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5f      	ldr	r2, [pc, #380]	; (8002598 <HAL_DMA_Start_IT+0x20c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5d      	ldr	r2, [pc, #372]	; (800259c <HAL_DMA_Start_IT+0x210>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <HAL_DMA_Start_IT+0x214>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5a      	ldr	r2, [pc, #360]	; (80025a4 <HAL_DMA_Start_IT+0x218>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <HAL_DMA_Start_IT+0x21c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_DMA_Start_IT+0x220>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_DMA_Start_IT+0x224>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <HAL_DMA_Start_IT+0x228>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_DMA_Start_IT+0x22c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_DMA_Start_IT+0x230>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d108      	bne.n	800248c <HAL_DMA_Start_IT+0x100>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e007      	b.n	800249c <HAL_DMA_Start_IT+0x110>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f001 f93e 	bl	8003724 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_DMA_Start_IT+0x1f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d04a      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a33      	ldr	r2, [pc, #204]	; (8002584 <HAL_DMA_Start_IT+0x1f8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d045      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_DMA_Start_IT+0x1fc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d040      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_DMA_Start_IT+0x200>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d03b      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <HAL_DMA_Start_IT+0x204>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d036      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HAL_DMA_Start_IT+0x208>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <HAL_DMA_Start_IT+0x20c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d02c      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <HAL_DMA_Start_IT+0x210>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d027      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_DMA_Start_IT+0x214>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_DMA_Start_IT+0x218>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01d      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_DMA_Start_IT+0x21c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_DMA_Start_IT+0x220>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_DMA_Start_IT+0x224>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_DMA_Start_IT+0x228>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_DMA_Start_IT+0x22c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_DMA_Start_IT+0x230>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_DMA_Start_IT+0x1c0>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_DMA_Start_IT+0x1c2>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d036      	beq.n	80025c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 021e 	bic.w	r2, r3, #30
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0216 	orr.w	r2, r2, #22
 8002564:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03e      	beq.n	80025ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0208 	orr.w	r2, r2, #8
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e035      	b.n	80025ec <HAL_DMA_Start_IT+0x260>
 8002580:	40020010 	.word	0x40020010
 8002584:	40020028 	.word	0x40020028
 8002588:	40020040 	.word	0x40020040
 800258c:	40020058 	.word	0x40020058
 8002590:	40020070 	.word	0x40020070
 8002594:	40020088 	.word	0x40020088
 8002598:	400200a0 	.word	0x400200a0
 800259c:	400200b8 	.word	0x400200b8
 80025a0:	40020410 	.word	0x40020410
 80025a4:	40020428 	.word	0x40020428
 80025a8:	40020440 	.word	0x40020440
 80025ac:	40020458 	.word	0x40020458
 80025b0:	40020470 	.word	0x40020470
 80025b4:	40020488 	.word	0x40020488
 80025b8:	400204a0 	.word	0x400204a0
 80025bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 020e 	bic.w	r2, r3, #14
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 020a 	orr.w	r2, r2, #10
 80025d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0204 	orr.w	r2, r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a83      	ldr	r2, [pc, #524]	; (8002800 <HAL_DMA_Start_IT+0x474>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d072      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a82      	ldr	r2, [pc, #520]	; (8002804 <HAL_DMA_Start_IT+0x478>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d06d      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a80      	ldr	r2, [pc, #512]	; (8002808 <HAL_DMA_Start_IT+0x47c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d068      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7f      	ldr	r2, [pc, #508]	; (800280c <HAL_DMA_Start_IT+0x480>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d063      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7d      	ldr	r2, [pc, #500]	; (8002810 <HAL_DMA_Start_IT+0x484>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d05e      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7c      	ldr	r2, [pc, #496]	; (8002814 <HAL_DMA_Start_IT+0x488>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d059      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7a      	ldr	r2, [pc, #488]	; (8002818 <HAL_DMA_Start_IT+0x48c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d054      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_DMA_Start_IT+0x490>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d04f      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a77      	ldr	r2, [pc, #476]	; (8002820 <HAL_DMA_Start_IT+0x494>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a76      	ldr	r2, [pc, #472]	; (8002824 <HAL_DMA_Start_IT+0x498>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d045      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a74      	ldr	r2, [pc, #464]	; (8002828 <HAL_DMA_Start_IT+0x49c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d040      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a73      	ldr	r2, [pc, #460]	; (800282c <HAL_DMA_Start_IT+0x4a0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d03b      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a71      	ldr	r2, [pc, #452]	; (8002830 <HAL_DMA_Start_IT+0x4a4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d036      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a70      	ldr	r2, [pc, #448]	; (8002834 <HAL_DMA_Start_IT+0x4a8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d031      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a6e      	ldr	r2, [pc, #440]	; (8002838 <HAL_DMA_Start_IT+0x4ac>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d02c      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6d      	ldr	r2, [pc, #436]	; (800283c <HAL_DMA_Start_IT+0x4b0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d027      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6b      	ldr	r2, [pc, #428]	; (8002840 <HAL_DMA_Start_IT+0x4b4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d022      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6a      	ldr	r2, [pc, #424]	; (8002844 <HAL_DMA_Start_IT+0x4b8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d01d      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_DMA_Start_IT+0x4bc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d018      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_DMA_Start_IT+0x4c0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d013      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_DMA_Start_IT+0x4c4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00e      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a64      	ldr	r2, [pc, #400]	; (8002854 <HAL_DMA_Start_IT+0x4c8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a62      	ldr	r2, [pc, #392]	; (8002858 <HAL_DMA_Start_IT+0x4cc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a61      	ldr	r2, [pc, #388]	; (800285c <HAL_DMA_Start_IT+0x4d0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <HAL_DMA_Start_IT+0x354>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_DMA_Start_IT+0x356>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01a      	beq.n	800271c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002702:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a37      	ldr	r2, [pc, #220]	; (8002800 <HAL_DMA_Start_IT+0x474>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04a      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a36      	ldr	r2, [pc, #216]	; (8002804 <HAL_DMA_Start_IT+0x478>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d045      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a34      	ldr	r2, [pc, #208]	; (8002808 <HAL_DMA_Start_IT+0x47c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d040      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a33      	ldr	r2, [pc, #204]	; (800280c <HAL_DMA_Start_IT+0x480>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d03b      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a31      	ldr	r2, [pc, #196]	; (8002810 <HAL_DMA_Start_IT+0x484>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d036      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a30      	ldr	r2, [pc, #192]	; (8002814 <HAL_DMA_Start_IT+0x488>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d031      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <HAL_DMA_Start_IT+0x48c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02c      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_DMA_Start_IT+0x490>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d027      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <HAL_DMA_Start_IT+0x494>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d022      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_DMA_Start_IT+0x498>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d01d      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a28      	ldr	r2, [pc, #160]	; (8002828 <HAL_DMA_Start_IT+0x49c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d018      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_DMA_Start_IT+0x4a0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <HAL_DMA_Start_IT+0x4a4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00e      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a24      	ldr	r2, [pc, #144]	; (8002834 <HAL_DMA_Start_IT+0x4a8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_DMA_Start_IT+0x4ac>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_DMA_Start_IT+0x4b0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <HAL_DMA_Start_IT+0x442>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e012      	b.n	80027f4 <HAL_DMA_Start_IT+0x468>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e009      	b.n	80027f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
 8002840:	58025408 	.word	0x58025408
 8002844:	5802541c 	.word	0x5802541c
 8002848:	58025430 	.word	0x58025430
 800284c:	58025444 	.word	0x58025444
 8002850:	58025458 	.word	0x58025458
 8002854:	5802546c 	.word	0x5802546c
 8002858:	58025480 	.word	0x58025480
 800285c:	58025494 	.word	0x58025494

08002860 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800286c:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_DMA_IRQHandler+0x1ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a67      	ldr	r2, [pc, #412]	; (8002a10 <HAL_DMA_IRQHandler+0x1b0>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a9b      	lsrs	r3, r3, #10
 8002878:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5f      	ldr	r2, [pc, #380]	; (8002a14 <HAL_DMA_IRQHandler+0x1b4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d04a      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <HAL_DMA_IRQHandler+0x1b8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d045      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <HAL_DMA_IRQHandler+0x1bc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d040      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5a      	ldr	r2, [pc, #360]	; (8002a20 <HAL_DMA_IRQHandler+0x1c0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d03b      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a59      	ldr	r2, [pc, #356]	; (8002a24 <HAL_DMA_IRQHandler+0x1c4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d036      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a57      	ldr	r2, [pc, #348]	; (8002a28 <HAL_DMA_IRQHandler+0x1c8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d031      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a56      	ldr	r2, [pc, #344]	; (8002a2c <HAL_DMA_IRQHandler+0x1cc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d02c      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a54      	ldr	r2, [pc, #336]	; (8002a30 <HAL_DMA_IRQHandler+0x1d0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d027      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a53      	ldr	r2, [pc, #332]	; (8002a34 <HAL_DMA_IRQHandler+0x1d4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a51      	ldr	r2, [pc, #324]	; (8002a38 <HAL_DMA_IRQHandler+0x1d8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01d      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a50      	ldr	r2, [pc, #320]	; (8002a3c <HAL_DMA_IRQHandler+0x1dc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d018      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_DMA_IRQHandler+0x1e0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a4d      	ldr	r2, [pc, #308]	; (8002a44 <HAL_DMA_IRQHandler+0x1e4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00e      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_DMA_IRQHandler+0x1e8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_DMA_IRQHandler+0x1ec>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_DMA_IRQHandler+0xd2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a48      	ldr	r2, [pc, #288]	; (8002a50 <HAL_DMA_IRQHandler+0x1f0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_DMA_IRQHandler+0xd6>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_DMA_IRQHandler+0xd8>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 842b 	beq.w	8003194 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2208      	movs	r2, #8
 8002948:	409a      	lsls	r2, r3
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a2 	beq.w	8002a98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <HAL_DMA_IRQHandler+0x1b4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d04a      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2d      	ldr	r2, [pc, #180]	; (8002a18 <HAL_DMA_IRQHandler+0x1b8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d045      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <HAL_DMA_IRQHandler+0x1bc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d040      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <HAL_DMA_IRQHandler+0x1c0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d03b      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_DMA_IRQHandler+0x1c4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d036      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <HAL_DMA_IRQHandler+0x1c8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d031      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_DMA_IRQHandler+0x1cc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02c      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_DMA_IRQHandler+0x1d0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d027      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_DMA_IRQHandler+0x1d4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d022      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_DMA_IRQHandler+0x1d8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01d      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_DMA_IRQHandler+0x1dc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_DMA_IRQHandler+0x1e0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_DMA_IRQHandler+0x1e4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_DMA_IRQHandler+0x1e8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_DMA_IRQHandler+0x1ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x194>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_DMA_IRQHandler+0x1f0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12f      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x1f4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e02e      	b.n	8002a68 <HAL_DMA_IRQHandler+0x208>
 8002a0a:	bf00      	nop
 8002a0c:	24000000 	.word	0x24000000
 8002a10:	1b4e81b5 	.word	0x1b4e81b5
 8002a14:	40020010 	.word	0x40020010
 8002a18:	40020028 	.word	0x40020028
 8002a1c:	40020040 	.word	0x40020040
 8002a20:	40020058 	.word	0x40020058
 8002a24:	40020070 	.word	0x40020070
 8002a28:	40020088 	.word	0x40020088
 8002a2c:	400200a0 	.word	0x400200a0
 8002a30:	400200b8 	.word	0x400200b8
 8002a34:	40020410 	.word	0x40020410
 8002a38:	40020428 	.word	0x40020428
 8002a3c:	40020440 	.word	0x40020440
 8002a40:	40020458 	.word	0x40020458
 8002a44:	40020470 	.word	0x40020470
 8002a48:	40020488 	.word	0x40020488
 8002a4c:	400204a0 	.word	0x400204a0
 8002a50:	400204b8 	.word	0x400204b8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0204 	bic.w	r2, r2, #4
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2208      	movs	r2, #8
 8002a86:	409a      	lsls	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d06e      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_DMA_IRQHandler+0x3f8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d04a      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a67      	ldr	r2, [pc, #412]	; (8002c5c <HAL_DMA_IRQHandler+0x3fc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d045      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a66      	ldr	r2, [pc, #408]	; (8002c60 <HAL_DMA_IRQHandler+0x400>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d040      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a64      	ldr	r2, [pc, #400]	; (8002c64 <HAL_DMA_IRQHandler+0x404>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03b      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a63      	ldr	r2, [pc, #396]	; (8002c68 <HAL_DMA_IRQHandler+0x408>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d036      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a61      	ldr	r2, [pc, #388]	; (8002c6c <HAL_DMA_IRQHandler+0x40c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d031      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a60      	ldr	r2, [pc, #384]	; (8002c70 <HAL_DMA_IRQHandler+0x410>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5e      	ldr	r2, [pc, #376]	; (8002c74 <HAL_DMA_IRQHandler+0x414>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_DMA_IRQHandler+0x418>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5b      	ldr	r2, [pc, #364]	; (8002c7c <HAL_DMA_IRQHandler+0x41c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5a      	ldr	r2, [pc, #360]	; (8002c80 <HAL_DMA_IRQHandler+0x420>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_DMA_IRQHandler+0x424>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a57      	ldr	r2, [pc, #348]	; (8002c88 <HAL_DMA_IRQHandler+0x428>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a55      	ldr	r2, [pc, #340]	; (8002c8c <HAL_DMA_IRQHandler+0x42c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a54      	ldr	r2, [pc, #336]	; (8002c90 <HAL_DMA_IRQHandler+0x430>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2ee>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_DMA_IRQHandler+0x434>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10a      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x304>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e003      	b.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2201      	movs	r2, #1
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f043 0202 	orr.w	r2, r3, #2
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2204      	movs	r2, #4
 8002b96:	409a      	lsls	r2, r3
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 808f 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <HAL_DMA_IRQHandler+0x3f8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d04a      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_DMA_IRQHandler+0x3fc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d045      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_DMA_IRQHandler+0x400>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d040      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_DMA_IRQHandler+0x404>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d03b      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <HAL_DMA_IRQHandler+0x408>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d036      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_DMA_IRQHandler+0x40c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d031      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <HAL_DMA_IRQHandler+0x410>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d02c      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_DMA_IRQHandler+0x414>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d027      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <HAL_DMA_IRQHandler+0x418>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d022      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <HAL_DMA_IRQHandler+0x41c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01d      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_DMA_IRQHandler+0x420>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d018      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <HAL_DMA_IRQHandler+0x424>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <HAL_DMA_IRQHandler+0x428>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_DMA_IRQHandler+0x42c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_DMA_IRQHandler+0x430>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3e2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_DMA_IRQHandler+0x434>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d12a      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x438>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e023      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x440>
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2204      	movs	r2, #4
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f043 0204 	orr.w	r2, r3, #4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2210      	movs	r2, #16
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a6 	beq.w	8002e22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a85      	ldr	r2, [pc, #532]	; (8002ef0 <HAL_DMA_IRQHandler+0x690>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d04a      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a83      	ldr	r2, [pc, #524]	; (8002ef4 <HAL_DMA_IRQHandler+0x694>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d045      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a82      	ldr	r2, [pc, #520]	; (8002ef8 <HAL_DMA_IRQHandler+0x698>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d040      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a80      	ldr	r2, [pc, #512]	; (8002efc <HAL_DMA_IRQHandler+0x69c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d03b      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7f      	ldr	r2, [pc, #508]	; (8002f00 <HAL_DMA_IRQHandler+0x6a0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d036      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7d      	ldr	r2, [pc, #500]	; (8002f04 <HAL_DMA_IRQHandler+0x6a4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d031      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <HAL_DMA_IRQHandler+0x6a8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d02c      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7a      	ldr	r2, [pc, #488]	; (8002f0c <HAL_DMA_IRQHandler+0x6ac>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d027      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a79      	ldr	r2, [pc, #484]	; (8002f10 <HAL_DMA_IRQHandler+0x6b0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a77      	ldr	r2, [pc, #476]	; (8002f14 <HAL_DMA_IRQHandler+0x6b4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01d      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a76      	ldr	r2, [pc, #472]	; (8002f18 <HAL_DMA_IRQHandler+0x6b8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a74      	ldr	r2, [pc, #464]	; (8002f1c <HAL_DMA_IRQHandler+0x6bc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a73      	ldr	r2, [pc, #460]	; (8002f20 <HAL_DMA_IRQHandler+0x6c0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00e      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a71      	ldr	r2, [pc, #452]	; (8002f24 <HAL_DMA_IRQHandler+0x6c4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a70      	ldr	r2, [pc, #448]	; (8002f28 <HAL_DMA_IRQHandler+0x6c8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x516>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6e      	ldr	r2, [pc, #440]	; (8002f2c <HAL_DMA_IRQHandler+0x6cc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10a      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x52c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e009      	b.n	8002da0 <HAL_DMA_IRQHandler+0x540>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf14      	ite	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	2300      	moveq	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03e      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2210      	movs	r2, #16
 8002dae:	409a      	lsls	r2, r3
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d108      	bne.n	8002de2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d024      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
 8002de0:	e01f      	b.n	8002e22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01b      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
 8002df2:	e016      	b.n	8002e22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0208 	bic.w	r2, r2, #8
 8002e10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8110 	beq.w	8003058 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <HAL_DMA_IRQHandler+0x690>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <HAL_DMA_IRQHandler+0x694>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d045      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <HAL_DMA_IRQHandler+0x698>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <HAL_DMA_IRQHandler+0x69c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_DMA_IRQHandler+0x6a0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d036      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <HAL_DMA_IRQHandler+0x6a4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <HAL_DMA_IRQHandler+0x6a8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <HAL_DMA_IRQHandler+0x6ac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d027      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <HAL_DMA_IRQHandler+0x6b0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <HAL_DMA_IRQHandler+0x6b4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_DMA_IRQHandler+0x6b8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_DMA_IRQHandler+0x6bc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_DMA_IRQHandler+0x6c0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_DMA_IRQHandler+0x6c4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_DMA_IRQHandler+0x6c8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x678>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <HAL_DMA_IRQHandler+0x6cc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d12b      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x6d0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	e02a      	b.n	8002f44 <HAL_DMA_IRQHandler+0x6e4>
 8002eee:	bf00      	nop
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	40020040 	.word	0x40020040
 8002efc:	40020058 	.word	0x40020058
 8002f00:	40020070 	.word	0x40020070
 8002f04:	40020088 	.word	0x40020088
 8002f08:	400200a0 	.word	0x400200a0
 8002f0c:	400200b8 	.word	0x400200b8
 8002f10:	40020410 	.word	0x40020410
 8002f14:	40020428 	.word	0x40020428
 8002f18:	40020440 	.word	0x40020440
 8002f1c:	40020458 	.word	0x40020458
 8002f20:	40020470 	.word	0x40020470
 8002f24:	40020488 	.word	0x40020488
 8002f28:	400204a0 	.word	0x400204a0
 8002f2c:	400204b8 	.word	0x400204b8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8087 	beq.w	8003058 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2220      	movs	r2, #32
 8002f54:	409a      	lsls	r2, r3
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d139      	bne.n	8002fda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0216 	bic.w	r2, r2, #22
 8002f74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_DMA_IRQHandler+0x736>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0208 	bic.w	r2, r2, #8
 8002fa4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	223f      	movs	r2, #63	; 0x3f
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8382 	beq.w	80036d4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
          }
          return;
 8002fd8:	e37c      	b.n	80036d4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d018      	beq.n	800301a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
 8003006:	e027      	b.n	8003058 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d023      	beq.n	8003058 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
 8003018:	e01e      	b.n	8003058 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10f      	bne.n	8003048 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0210 	bic.w	r2, r2, #16
 8003036:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 833e 	beq.w	80036de <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8088 	beq.w	8003180 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2204      	movs	r2, #4
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a89      	ldr	r2, [pc, #548]	; (80032a4 <HAL_DMA_IRQHandler+0xa44>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d04a      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a88      	ldr	r2, [pc, #544]	; (80032a8 <HAL_DMA_IRQHandler+0xa48>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d045      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a86      	ldr	r2, [pc, #536]	; (80032ac <HAL_DMA_IRQHandler+0xa4c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d040      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a85      	ldr	r2, [pc, #532]	; (80032b0 <HAL_DMA_IRQHandler+0xa50>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d03b      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a83      	ldr	r2, [pc, #524]	; (80032b4 <HAL_DMA_IRQHandler+0xa54>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d036      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a82      	ldr	r2, [pc, #520]	; (80032b8 <HAL_DMA_IRQHandler+0xa58>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d031      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a80      	ldr	r2, [pc, #512]	; (80032bc <HAL_DMA_IRQHandler+0xa5c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02c      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7f      	ldr	r2, [pc, #508]	; (80032c0 <HAL_DMA_IRQHandler+0xa60>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d027      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a7d      	ldr	r2, [pc, #500]	; (80032c4 <HAL_DMA_IRQHandler+0xa64>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d022      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <HAL_DMA_IRQHandler+0xa68>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d01d      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7a      	ldr	r2, [pc, #488]	; (80032cc <HAL_DMA_IRQHandler+0xa6c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d018      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a79      	ldr	r2, [pc, #484]	; (80032d0 <HAL_DMA_IRQHandler+0xa70>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a77      	ldr	r2, [pc, #476]	; (80032d4 <HAL_DMA_IRQHandler+0xa74>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a76      	ldr	r2, [pc, #472]	; (80032d8 <HAL_DMA_IRQHandler+0xa78>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d009      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a74      	ldr	r2, [pc, #464]	; (80032dc <HAL_DMA_IRQHandler+0xa7c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_DMA_IRQHandler+0x8b8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_DMA_IRQHandler+0xa80>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <HAL_DMA_IRQHandler+0x8ca>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e007      	b.n	800313a <HAL_DMA_IRQHandler+0x8da>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	429a      	cmp	r2, r3
 8003144:	d307      	bcc.n	8003156 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f2      	bne.n	800313a <HAL_DMA_IRQHandler+0x8da>
 8003154:	e000      	b.n	8003158 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003156:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800316e:	e003      	b.n	8003178 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 82aa 	beq.w	80036de <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
 8003192:	e2a4      	b.n	80036de <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_DMA_IRQHandler+0xa84>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04a      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_DMA_IRQHandler+0xa88>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d045      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4f      	ldr	r2, [pc, #316]	; (80032ec <HAL_DMA_IRQHandler+0xa8c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d040      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4e      	ldr	r2, [pc, #312]	; (80032f0 <HAL_DMA_IRQHandler+0xa90>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d03b      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4c      	ldr	r2, [pc, #304]	; (80032f4 <HAL_DMA_IRQHandler+0xa94>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d036      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <HAL_DMA_IRQHandler+0xa98>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d031      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a49      	ldr	r2, [pc, #292]	; (80032fc <HAL_DMA_IRQHandler+0xa9c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02c      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a48      	ldr	r2, [pc, #288]	; (8003300 <HAL_DMA_IRQHandler+0xaa0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d027      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a46      	ldr	r2, [pc, #280]	; (8003304 <HAL_DMA_IRQHandler+0xaa4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_DMA_IRQHandler+0xaa8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d01d      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a43      	ldr	r2, [pc, #268]	; (800330c <HAL_DMA_IRQHandler+0xaac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a42      	ldr	r2, [pc, #264]	; (8003310 <HAL_DMA_IRQHandler+0xab0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a40      	ldr	r2, [pc, #256]	; (8003314 <HAL_DMA_IRQHandler+0xab4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <HAL_DMA_IRQHandler+0xab8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3d      	ldr	r2, [pc, #244]	; (800331c <HAL_DMA_IRQHandler+0xabc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_DMA_IRQHandler+0x9d4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <HAL_DMA_IRQHandler+0xac0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d101      	bne.n	8003238 <HAL_DMA_IRQHandler+0x9d8>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_DMA_IRQHandler+0x9da>
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 824f 	beq.w	80036de <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2204      	movs	r2, #4
 8003252:	409a      	lsls	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80dd 	beq.w	8003418 <HAL_DMA_IRQHandler+0xbb8>
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80d7 	beq.w	8003418 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2204      	movs	r2, #4
 8003274:	409a      	lsls	r2, r3
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d059      	beq.n	8003338 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d14a      	bne.n	8003324 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8220 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032a0:	e21a      	b.n	80036d8 <HAL_DMA_IRQHandler+0xe78>
 80032a2:	bf00      	nop
 80032a4:	40020010 	.word	0x40020010
 80032a8:	40020028 	.word	0x40020028
 80032ac:	40020040 	.word	0x40020040
 80032b0:	40020058 	.word	0x40020058
 80032b4:	40020070 	.word	0x40020070
 80032b8:	40020088 	.word	0x40020088
 80032bc:	400200a0 	.word	0x400200a0
 80032c0:	400200b8 	.word	0x400200b8
 80032c4:	40020410 	.word	0x40020410
 80032c8:	40020428 	.word	0x40020428
 80032cc:	40020440 	.word	0x40020440
 80032d0:	40020458 	.word	0x40020458
 80032d4:	40020470 	.word	0x40020470
 80032d8:	40020488 	.word	0x40020488
 80032dc:	400204a0 	.word	0x400204a0
 80032e0:	400204b8 	.word	0x400204b8
 80032e4:	48022c08 	.word	0x48022c08
 80032e8:	48022c1c 	.word	0x48022c1c
 80032ec:	48022c30 	.word	0x48022c30
 80032f0:	48022c44 	.word	0x48022c44
 80032f4:	48022c58 	.word	0x48022c58
 80032f8:	48022c6c 	.word	0x48022c6c
 80032fc:	48022c80 	.word	0x48022c80
 8003300:	48022c94 	.word	0x48022c94
 8003304:	58025408 	.word	0x58025408
 8003308:	5802541c 	.word	0x5802541c
 800330c:	58025430 	.word	0x58025430
 8003310:	58025444 	.word	0x58025444
 8003314:	58025458 	.word	0x58025458
 8003318:	5802546c 	.word	0x5802546c
 800331c:	58025480 	.word	0x58025480
 8003320:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 81d5 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003336:	e1cf      	b.n	80036d8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d160      	bne.n	8003404 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7f      	ldr	r2, [pc, #508]	; (8003544 <HAL_DMA_IRQHandler+0xce4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7d      	ldr	r2, [pc, #500]	; (8003548 <HAL_DMA_IRQHandler+0xce8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7c      	ldr	r2, [pc, #496]	; (800354c <HAL_DMA_IRQHandler+0xcec>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_DMA_IRQHandler+0xcf0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a79      	ldr	r2, [pc, #484]	; (8003554 <HAL_DMA_IRQHandler+0xcf4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a77      	ldr	r2, [pc, #476]	; (8003558 <HAL_DMA_IRQHandler+0xcf8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a76      	ldr	r2, [pc, #472]	; (800355c <HAL_DMA_IRQHandler+0xcfc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a74      	ldr	r2, [pc, #464]	; (8003560 <HAL_DMA_IRQHandler+0xd00>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	; (8003564 <HAL_DMA_IRQHandler+0xd04>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_DMA_IRQHandler+0xd08>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a70      	ldr	r2, [pc, #448]	; (800356c <HAL_DMA_IRQHandler+0xd0c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_DMA_IRQHandler+0xd10>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <HAL_DMA_IRQHandler+0xd14>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6b      	ldr	r2, [pc, #428]	; (8003578 <HAL_DMA_IRQHandler+0xd18>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_DMA_IRQHandler+0xd1c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_IRQHandler+0xb82>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <HAL_DMA_IRQHandler+0xd20>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <HAL_DMA_IRQHandler+0xb94>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0208 	bic.w	r2, r2, #8
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e007      	b.n	8003404 <HAL_DMA_IRQHandler+0xba4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0204 	bic.w	r2, r2, #4
 8003402:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8165 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003416:	e15f      	b.n	80036d8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2202      	movs	r2, #2
 8003422:	409a      	lsls	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80c5 	beq.w	80035b8 <HAL_DMA_IRQHandler+0xd58>
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80bf 	beq.w	80035b8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2202      	movs	r2, #2
 8003444:	409a      	lsls	r2, r3
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d018      	beq.n	8003486 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 813a 	beq.w	80036dc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003470:	e134      	b.n	80036dc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8130 	beq.w	80036dc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003484:	e12a      	b.n	80036dc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 8089 	bne.w	80035a4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <HAL_DMA_IRQHandler+0xce4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a29      	ldr	r2, [pc, #164]	; (8003548 <HAL_DMA_IRQHandler+0xce8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_DMA_IRQHandler+0xcec>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <HAL_DMA_IRQHandler+0xcf0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <HAL_DMA_IRQHandler+0xcf4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a23      	ldr	r2, [pc, #140]	; (8003558 <HAL_DMA_IRQHandler+0xcf8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <HAL_DMA_IRQHandler+0xcfc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <HAL_DMA_IRQHandler+0xd00>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_DMA_IRQHandler+0xd04>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_DMA_IRQHandler+0xd08>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1c      	ldr	r2, [pc, #112]	; (800356c <HAL_DMA_IRQHandler+0xd0c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1a      	ldr	r2, [pc, #104]	; (8003570 <HAL_DMA_IRQHandler+0xd10>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_DMA_IRQHandler+0xd14>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a17      	ldr	r2, [pc, #92]	; (8003578 <HAL_DMA_IRQHandler+0xd18>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a16      	ldr	r2, [pc, #88]	; (800357c <HAL_DMA_IRQHandler+0xd1c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_IRQHandler+0xcd2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <HAL_DMA_IRQHandler+0xd20>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d128      	bne.n	8003584 <HAL_DMA_IRQHandler+0xd24>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0214 	bic.w	r2, r2, #20
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e027      	b.n	8003594 <HAL_DMA_IRQHandler+0xd34>
 8003544:	40020010 	.word	0x40020010
 8003548:	40020028 	.word	0x40020028
 800354c:	40020040 	.word	0x40020040
 8003550:	40020058 	.word	0x40020058
 8003554:	40020070 	.word	0x40020070
 8003558:	40020088 	.word	0x40020088
 800355c:	400200a0 	.word	0x400200a0
 8003560:	400200b8 	.word	0x400200b8
 8003564:	40020410 	.word	0x40020410
 8003568:	40020428 	.word	0x40020428
 800356c:	40020440 	.word	0x40020440
 8003570:	40020458 	.word	0x40020458
 8003574:	40020470 	.word	0x40020470
 8003578:	40020488 	.word	0x40020488
 800357c:	400204a0 	.word	0x400204a0
 8003580:	400204b8 	.word	0x400204b8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 020a 	bic.w	r2, r2, #10
 8003592:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8097 	beq.w	80036dc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b6:	e091      	b.n	80036dc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2208      	movs	r2, #8
 80035c2:	409a      	lsls	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8088 	beq.w	80036de <HAL_DMA_IRQHandler+0xe7e>
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8082 	beq.w	80036de <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a41      	ldr	r2, [pc, #260]	; (80036e4 <HAL_DMA_IRQHandler+0xe84>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d04a      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a3f      	ldr	r2, [pc, #252]	; (80036e8 <HAL_DMA_IRQHandler+0xe88>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d045      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3e      	ldr	r2, [pc, #248]	; (80036ec <HAL_DMA_IRQHandler+0xe8c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d040      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3c      	ldr	r2, [pc, #240]	; (80036f0 <HAL_DMA_IRQHandler+0xe90>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d03b      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a3b      	ldr	r2, [pc, #236]	; (80036f4 <HAL_DMA_IRQHandler+0xe94>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d036      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a39      	ldr	r2, [pc, #228]	; (80036f8 <HAL_DMA_IRQHandler+0xe98>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d031      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a38      	ldr	r2, [pc, #224]	; (80036fc <HAL_DMA_IRQHandler+0xe9c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d02c      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a36      	ldr	r2, [pc, #216]	; (8003700 <HAL_DMA_IRQHandler+0xea0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d027      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a35      	ldr	r2, [pc, #212]	; (8003704 <HAL_DMA_IRQHandler+0xea4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d022      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a33      	ldr	r2, [pc, #204]	; (8003708 <HAL_DMA_IRQHandler+0xea8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01d      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a32      	ldr	r2, [pc, #200]	; (800370c <HAL_DMA_IRQHandler+0xeac>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d018      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a30      	ldr	r2, [pc, #192]	; (8003710 <HAL_DMA_IRQHandler+0xeb0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2f      	ldr	r2, [pc, #188]	; (8003714 <HAL_DMA_IRQHandler+0xeb4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00e      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2d      	ldr	r2, [pc, #180]	; (8003718 <HAL_DMA_IRQHandler+0xeb8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2c      	ldr	r2, [pc, #176]	; (800371c <HAL_DMA_IRQHandler+0xebc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_DMA_IRQHandler+0xe1a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <HAL_DMA_IRQHandler+0xec0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <HAL_DMA_IRQHandler+0xe2c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 021c 	bic.w	r2, r2, #28
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e007      	b.n	800369c <HAL_DMA_IRQHandler+0xe3c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 020e 	bic.w	r2, r2, #14
 800369a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
 80036d2:	e004      	b.n	80036de <HAL_DMA_IRQHandler+0xe7e>
          return;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40020010 	.word	0x40020010
 80036e8:	40020028 	.word	0x40020028
 80036ec:	40020040 	.word	0x40020040
 80036f0:	40020058 	.word	0x40020058
 80036f4:	40020070 	.word	0x40020070
 80036f8:	40020088 	.word	0x40020088
 80036fc:	400200a0 	.word	0x400200a0
 8003700:	400200b8 	.word	0x400200b8
 8003704:	40020410 	.word	0x40020410
 8003708:	40020428 	.word	0x40020428
 800370c:	40020440 	.word	0x40020440
 8003710:	40020458 	.word	0x40020458
 8003714:	40020470 	.word	0x40020470
 8003718:	40020488 	.word	0x40020488
 800371c:	400204a0 	.word	0x400204a0
 8003720:	400204b8 	.word	0x400204b8

08003724 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7f      	ldr	r2, [pc, #508]	; (8003940 <DMA_SetConfig+0x21c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d072      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a7d      	ldr	r2, [pc, #500]	; (8003944 <DMA_SetConfig+0x220>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d06d      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7c      	ldr	r2, [pc, #496]	; (8003948 <DMA_SetConfig+0x224>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d068      	beq.n	800382e <DMA_SetConfig+0x10a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7a      	ldr	r2, [pc, #488]	; (800394c <DMA_SetConfig+0x228>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d063      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a79      	ldr	r2, [pc, #484]	; (8003950 <DMA_SetConfig+0x22c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d05e      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a77      	ldr	r2, [pc, #476]	; (8003954 <DMA_SetConfig+0x230>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d059      	beq.n	800382e <DMA_SetConfig+0x10a>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a76      	ldr	r2, [pc, #472]	; (8003958 <DMA_SetConfig+0x234>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d054      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a74      	ldr	r2, [pc, #464]	; (800395c <DMA_SetConfig+0x238>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d04f      	beq.n	800382e <DMA_SetConfig+0x10a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a73      	ldr	r2, [pc, #460]	; (8003960 <DMA_SetConfig+0x23c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d04a      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a71      	ldr	r2, [pc, #452]	; (8003964 <DMA_SetConfig+0x240>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d045      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a70      	ldr	r2, [pc, #448]	; (8003968 <DMA_SetConfig+0x244>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d040      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a6e      	ldr	r2, [pc, #440]	; (800396c <DMA_SetConfig+0x248>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d03b      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6d      	ldr	r2, [pc, #436]	; (8003970 <DMA_SetConfig+0x24c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d036      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6b      	ldr	r2, [pc, #428]	; (8003974 <DMA_SetConfig+0x250>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d031      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6a      	ldr	r2, [pc, #424]	; (8003978 <DMA_SetConfig+0x254>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d02c      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a68      	ldr	r2, [pc, #416]	; (800397c <DMA_SetConfig+0x258>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d027      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a67      	ldr	r2, [pc, #412]	; (8003980 <DMA_SetConfig+0x25c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d022      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a65      	ldr	r2, [pc, #404]	; (8003984 <DMA_SetConfig+0x260>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01d      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a64      	ldr	r2, [pc, #400]	; (8003988 <DMA_SetConfig+0x264>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d018      	beq.n	800382e <DMA_SetConfig+0x10a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a62      	ldr	r2, [pc, #392]	; (800398c <DMA_SetConfig+0x268>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a61      	ldr	r2, [pc, #388]	; (8003990 <DMA_SetConfig+0x26c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00e      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a5f      	ldr	r2, [pc, #380]	; (8003994 <DMA_SetConfig+0x270>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d009      	beq.n	800382e <DMA_SetConfig+0x10a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5e      	ldr	r2, [pc, #376]	; (8003998 <DMA_SetConfig+0x274>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <DMA_SetConfig+0x10a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5c      	ldr	r2, [pc, #368]	; (800399c <DMA_SetConfig+0x278>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <DMA_SetConfig+0x10e>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <DMA_SetConfig+0x110>
 8003832:	2300      	movs	r3, #0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00d      	beq.n	8003854 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003840:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003852:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a39      	ldr	r2, [pc, #228]	; (8003940 <DMA_SetConfig+0x21c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d04a      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a38      	ldr	r2, [pc, #224]	; (8003944 <DMA_SetConfig+0x220>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d045      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a36      	ldr	r2, [pc, #216]	; (8003948 <DMA_SetConfig+0x224>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d040      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a35      	ldr	r2, [pc, #212]	; (800394c <DMA_SetConfig+0x228>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d03b      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a33      	ldr	r2, [pc, #204]	; (8003950 <DMA_SetConfig+0x22c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d036      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a32      	ldr	r2, [pc, #200]	; (8003954 <DMA_SetConfig+0x230>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d031      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a30      	ldr	r2, [pc, #192]	; (8003958 <DMA_SetConfig+0x234>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02c      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2f      	ldr	r2, [pc, #188]	; (800395c <DMA_SetConfig+0x238>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d027      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2d      	ldr	r2, [pc, #180]	; (8003960 <DMA_SetConfig+0x23c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <DMA_SetConfig+0x240>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <DMA_SetConfig+0x244>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a29      	ldr	r2, [pc, #164]	; (800396c <DMA_SetConfig+0x248>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <DMA_SetConfig+0x24c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a26      	ldr	r2, [pc, #152]	; (8003974 <DMA_SetConfig+0x250>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a24      	ldr	r2, [pc, #144]	; (8003978 <DMA_SetConfig+0x254>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <DMA_SetConfig+0x1d0>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a23      	ldr	r2, [pc, #140]	; (800397c <DMA_SetConfig+0x258>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <DMA_SetConfig+0x1d4>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <DMA_SetConfig+0x1d6>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d059      	beq.n	80039b2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	223f      	movs	r2, #63	; 0x3f
 8003908:	409a      	lsls	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800391c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d138      	bne.n	80039a0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800393e:	e0ae      	b.n	8003a9e <DMA_SetConfig+0x37a>
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
 8003980:	58025408 	.word	0x58025408
 8003984:	5802541c 	.word	0x5802541c
 8003988:	58025430 	.word	0x58025430
 800398c:	58025444 	.word	0x58025444
 8003990:	58025458 	.word	0x58025458
 8003994:	5802546c 	.word	0x5802546c
 8003998:	58025480 	.word	0x58025480
 800399c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]
}
 80039b0:	e075      	b.n	8003a9e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <DMA_SetConfig+0x388>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <DMA_SetConfig+0x38c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <DMA_SetConfig+0x390>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <DMA_SetConfig+0x394>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a37      	ldr	r2, [pc, #220]	; (8003abc <DMA_SetConfig+0x398>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a35      	ldr	r2, [pc, #212]	; (8003ac0 <DMA_SetConfig+0x39c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a34      	ldr	r2, [pc, #208]	; (8003ac4 <DMA_SetConfig+0x3a0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a32      	ldr	r2, [pc, #200]	; (8003ac8 <DMA_SetConfig+0x3a4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a31      	ldr	r2, [pc, #196]	; (8003acc <DMA_SetConfig+0x3a8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <DMA_SetConfig+0x3ac>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ad4 <DMA_SetConfig+0x3b0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <DMA_SetConfig+0x3b4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2b      	ldr	r2, [pc, #172]	; (8003adc <DMA_SetConfig+0x3b8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <DMA_SetConfig+0x3bc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a28      	ldr	r2, [pc, #160]	; (8003ae4 <DMA_SetConfig+0x3c0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <DMA_SetConfig+0x32e>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a26      	ldr	r2, [pc, #152]	; (8003ae8 <DMA_SetConfig+0x3c4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <DMA_SetConfig+0x332>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <DMA_SetConfig+0x334>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2201      	movs	r2, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d108      	bne.n	8003a8e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	60da      	str	r2, [r3, #12]
}
 8003a8c:	e007      	b.n	8003a9e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	48022c08 	.word	0x48022c08
 8003ab0:	48022c1c 	.word	0x48022c1c
 8003ab4:	48022c30 	.word	0x48022c30
 8003ab8:	48022c44 	.word	0x48022c44
 8003abc:	48022c58 	.word	0x48022c58
 8003ac0:	48022c6c 	.word	0x48022c6c
 8003ac4:	48022c80 	.word	0x48022c80
 8003ac8:	48022c94 	.word	0x48022c94
 8003acc:	58025408 	.word	0x58025408
 8003ad0:	5802541c 	.word	0x5802541c
 8003ad4:	58025430 	.word	0x58025430
 8003ad8:	58025444 	.word	0x58025444
 8003adc:	58025458 	.word	0x58025458
 8003ae0:	5802546c 	.word	0x5802546c
 8003ae4:	58025480 	.word	0x58025480
 8003ae8:	58025494 	.word	0x58025494

08003aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a42      	ldr	r2, [pc, #264]	; (8003c04 <DMA_CalcBaseAndBitshift+0x118>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d04a      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a41      	ldr	r2, [pc, #260]	; (8003c08 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d045      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3f      	ldr	r2, [pc, #252]	; (8003c0c <DMA_CalcBaseAndBitshift+0x120>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d040      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3e      	ldr	r2, [pc, #248]	; (8003c10 <DMA_CalcBaseAndBitshift+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d03b      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3c      	ldr	r2, [pc, #240]	; (8003c14 <DMA_CalcBaseAndBitshift+0x128>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d036      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d031      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <DMA_CalcBaseAndBitshift+0x130>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02c      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <DMA_CalcBaseAndBitshift+0x134>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d027      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a36      	ldr	r2, [pc, #216]	; (8003c24 <DMA_CalcBaseAndBitshift+0x138>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d022      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a35      	ldr	r2, [pc, #212]	; (8003c28 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01d      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <DMA_CalcBaseAndBitshift+0x140>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d018      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a32      	ldr	r2, [pc, #200]	; (8003c30 <DMA_CalcBaseAndBitshift+0x144>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a30      	ldr	r2, [pc, #192]	; (8003c34 <DMA_CalcBaseAndBitshift+0x148>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00e      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2f      	ldr	r2, [pc, #188]	; (8003c38 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d009      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2d      	ldr	r2, [pc, #180]	; (8003c3c <DMA_CalcBaseAndBitshift+0x150>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <DMA_CalcBaseAndBitshift+0xa8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <DMA_CalcBaseAndBitshift+0x154>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <DMA_CalcBaseAndBitshift+0xac>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <DMA_CalcBaseAndBitshift+0xae>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d024      	beq.n	8003be8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3b10      	subs	r3, #16
 8003ba6:	4a27      	ldr	r2, [pc, #156]	; (8003c44 <DMA_CalcBaseAndBitshift+0x158>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <DMA_CalcBaseAndBitshift+0x15c>)
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d908      	bls.n	8003bd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <DMA_CalcBaseAndBitshift+0x160>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	1d1a      	adds	r2, r3, #4
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	659a      	str	r2, [r3, #88]	; 0x58
 8003bd6:	e00d      	b.n	8003bf4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <DMA_CalcBaseAndBitshift+0x160>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6593      	str	r3, [r2, #88]	; 0x58
 8003be6:	e005      	b.n	8003bf4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
 8003c44:	aaaaaaab 	.word	0xaaaaaaab
 8003c48:	0800abb8 	.word	0x0800abb8
 8003c4c:	fffffc00 	.word	0xfffffc00

08003c50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d120      	bne.n	8003ca6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d858      	bhi.n	8003d1e <DMA_CheckFifoParam+0xce>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <DMA_CheckFifoParam+0x24>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003c85 	.word	0x08003c85
 8003c80:	08003d1f 	.word	0x08003d1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d048      	beq.n	8003d22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c94:	e045      	b.n	8003d22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c9e:	d142      	bne.n	8003d26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ca4:	e03f      	b.n	8003d26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cae:	d123      	bne.n	8003cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d838      	bhi.n	8003d2a <DMA_CheckFifoParam+0xda>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <DMA_CheckFifoParam+0x70>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003cd7 	.word	0x08003cd7
 8003cc8:	08003cd1 	.word	0x08003cd1
 8003ccc:	08003ce9 	.word	0x08003ce9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd4:	e030      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d025      	beq.n	8003d2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ce6:	e022      	b.n	8003d2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf0:	d11f      	bne.n	8003d32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cf6:	e01c      	b.n	8003d32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d902      	bls.n	8003d06 <DMA_CheckFifoParam+0xb6>
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d003      	beq.n	8003d0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d04:	e018      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
        break;
 8003d0a:	e015      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00e      	beq.n	8003d36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8003d1c:	e00b      	b.n	8003d36 <DMA_CheckFifoParam+0xe6>
        break;
 8003d1e:	bf00      	nop
 8003d20:	e00a      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
        break;
 8003d22:	bf00      	nop
 8003d24:	e008      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
        break;
 8003d26:	bf00      	nop
 8003d28:	e006      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e004      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
        break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <DMA_CheckFifoParam+0xe8>
    break;
 8003d36:	bf00      	nop
    }
  }

  return status;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop

08003d48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a36      	ldr	r2, [pc, #216]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01d      	beq.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a35      	ldr	r2, [pc, #212]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a33      	ldr	r2, [pc, #204]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a32      	ldr	r2, [pc, #200]	; (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a30      	ldr	r2, [pc, #192]	; (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01a      	beq.n	8003de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	3b08      	subs	r3, #8
 8003db8:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a24      	ldr	r2, [pc, #144]	; (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003dd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003de4:	e024      	b.n	8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3b10      	subs	r3, #16
 8003dee:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d806      	bhi.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d902      	bls.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4b18      	ldr	r3, [pc, #96]	; (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	461a      	mov	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2201      	movs	r2, #1
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	58025408 	.word	0x58025408
 8003e40:	5802541c 	.word	0x5802541c
 8003e44:	58025430 	.word	0x58025430
 8003e48:	58025444 	.word	0x58025444
 8003e4c:	58025458 	.word	0x58025458
 8003e50:	5802546c 	.word	0x5802546c
 8003e54:	58025480 	.word	0x58025480
 8003e58:	58025494 	.word	0x58025494
 8003e5c:	cccccccd 	.word	0xcccccccd
 8003e60:	16009600 	.word	0x16009600
 8003e64:	58025880 	.word	0x58025880
 8003e68:	aaaaaaab 	.word	0xaaaaaaab
 8003e6c:	400204b8 	.word	0x400204b8
 8003e70:	4002040f 	.word	0x4002040f
 8003e74:	10008200 	.word	0x10008200
 8003e78:	40020880 	.word	0x40020880

08003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04a      	beq.n	8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d847      	bhi.n	8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a25      	ldr	r2, [pc, #148]	; (8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	461a      	mov	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f04:	671a      	str	r2, [r3, #112]	; 0x70
 8003f06:	e009      	b.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	461a      	mov	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	2201      	movs	r2, #1
 8003f22:	409a      	lsls	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	58025408 	.word	0x58025408
 8003f38:	5802541c 	.word	0x5802541c
 8003f3c:	58025430 	.word	0x58025430
 8003f40:	58025444 	.word	0x58025444
 8003f44:	58025458 	.word	0x58025458
 8003f48:	5802546c 	.word	0x5802546c
 8003f4c:	58025480 	.word	0x58025480
 8003f50:	58025494 	.word	0x58025494
 8003f54:	1600963f 	.word	0x1600963f
 8003f58:	58025940 	.word	0x58025940
 8003f5c:	1000823f 	.word	0x1000823f
 8003f60:	40020940 	.word	0x40020940

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	; 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f72:	4b89      	ldr	r3, [pc, #548]	; (8004198 <HAL_GPIO_Init+0x234>)
 8003f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f76:	e194      	b.n	80042a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8186 	beq.w	800429c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d005      	beq.n	8003fa8 <HAL_GPIO_Init+0x44>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d130      	bne.n	800400a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fde:	2201      	movs	r2, #1
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 0201 	and.w	r2, r3, #1
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d017      	beq.n	8004046 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d123      	bne.n	800409a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	69b9      	ldr	r1, [r7, #24]
 8004096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80e0 	beq.w	800429c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040dc:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_GPIO_Init+0x238>)
 80040de:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80040e2:	4a2e      	ldr	r2, [pc, #184]	; (800419c <HAL_GPIO_Init+0x238>)
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_GPIO_Init+0x238>)
 80040ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040fa:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <HAL_GPIO_Init+0x23c>)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	3302      	adds	r3, #2
 8004102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	220f      	movs	r2, #15
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <HAL_GPIO_Init+0x240>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d052      	beq.n	80041cc <HAL_GPIO_Init+0x268>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_GPIO_Init+0x244>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d031      	beq.n	8004192 <HAL_GPIO_Init+0x22e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <HAL_GPIO_Init+0x248>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d02b      	beq.n	800418e <HAL_GPIO_Init+0x22a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <HAL_GPIO_Init+0x24c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d025      	beq.n	800418a <HAL_GPIO_Init+0x226>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <HAL_GPIO_Init+0x250>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <HAL_GPIO_Init+0x222>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_GPIO_Init+0x254>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d019      	beq.n	8004182 <HAL_GPIO_Init+0x21e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <HAL_GPIO_Init+0x258>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_GPIO_Init+0x21a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_GPIO_Init+0x25c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00d      	beq.n	800417a <HAL_GPIO_Init+0x216>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <HAL_GPIO_Init+0x260>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <HAL_GPIO_Init+0x212>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <HAL_GPIO_Init+0x264>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_GPIO_Init+0x20e>
 800416e:	2309      	movs	r3, #9
 8004170:	e02d      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 8004172:	230a      	movs	r3, #10
 8004174:	e02b      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 8004176:	2308      	movs	r3, #8
 8004178:	e029      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 800417a:	2307      	movs	r3, #7
 800417c:	e027      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 800417e:	2306      	movs	r3, #6
 8004180:	e025      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 8004182:	2305      	movs	r3, #5
 8004184:	e023      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 8004186:	2304      	movs	r3, #4
 8004188:	e021      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 800418a:	2303      	movs	r3, #3
 800418c:	e01f      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 800418e:	2302      	movs	r3, #2
 8004190:	e01d      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 8004192:	2301      	movs	r3, #1
 8004194:	e01b      	b.n	80041ce <HAL_GPIO_Init+0x26a>
 8004196:	bf00      	nop
 8004198:	58000080 	.word	0x58000080
 800419c:	58024400 	.word	0x58024400
 80041a0:	58000400 	.word	0x58000400
 80041a4:	58020000 	.word	0x58020000
 80041a8:	58020400 	.word	0x58020400
 80041ac:	58020800 	.word	0x58020800
 80041b0:	58020c00 	.word	0x58020c00
 80041b4:	58021000 	.word	0x58021000
 80041b8:	58021400 	.word	0x58021400
 80041bc:	58021800 	.word	0x58021800
 80041c0:	58021c00 	.word	0x58021c00
 80041c4:	58022000 	.word	0x58022000
 80041c8:	58022400 	.word	0x58022400
 80041cc:	2300      	movs	r3, #0
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	f002 0203 	and.w	r2, r2, #3
 80041d4:	0092      	lsls	r2, r2, #2
 80041d6:	4093      	lsls	r3, r2
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041de:	4938      	ldr	r1, [pc, #224]	; (80042c0 <HAL_GPIO_Init+0x35c>)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	3302      	adds	r3, #2
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f47f ae63 	bne.w	8003f78 <HAL_GPIO_Init+0x14>
  }
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	3724      	adds	r7, #36	; 0x24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	58000400 	.word	0x58000400

080042c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
 80042d0:	4613      	mov	r3, r2
 80042d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042d4:	787b      	ldrb	r3, [r7, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042e0:	e003      	b.n	80042ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	041a      	lsls	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	619a      	str	r2, [r3, #24]
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004308:	887a      	ldrh	r2, [r7, #2]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4013      	ands	r3, r2
 800430e:	041a      	lsls	r2, r3, #16
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43d9      	mvns	r1, r3
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	400b      	ands	r3, r1
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fc fd05 	bl	8000d60 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_PWREx_ConfigSupply+0xb0>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	2b06      	cmp	r3, #6
 8004372:	d00a      	beq.n	800438a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_PWREx_ConfigSupply+0xb0>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d001      	beq.n	8004386 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e040      	b.n	8004408 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e03e      	b.n	8004408 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800438a:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_PWREx_ConfigSupply+0xb0>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004392:	491f      	ldr	r1, [pc, #124]	; (8004410 <HAL_PWREx_ConfigSupply+0xb0>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4313      	orrs	r3, r2
 8004398:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800439a:	f7fd fb27 	bl	80019ec <HAL_GetTick>
 800439e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043a0:	e009      	b.n	80043b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043a2:	f7fd fb23 	bl	80019ec <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043b0:	d901      	bls.n	80043b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e028      	b.n	8004408 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <HAL_PWREx_ConfigSupply+0xb0>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c2:	d1ee      	bne.n	80043a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b1e      	cmp	r3, #30
 80043c8:	d008      	beq.n	80043dc <HAL_PWREx_ConfigSupply+0x7c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b2e      	cmp	r3, #46	; 0x2e
 80043ce:	d005      	beq.n	80043dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b1d      	cmp	r3, #29
 80043d4:	d002      	beq.n	80043dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b2d      	cmp	r3, #45	; 0x2d
 80043da:	d114      	bne.n	8004406 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80043dc:	f7fd fb06 	bl	80019ec <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043e2:	e009      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043e4:	f7fd fb02 	bl	80019ec <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f2:	d901      	bls.n	80043f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e007      	b.n	8004408 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_PWREx_ConfigSupply+0xb0>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004404:	d1ee      	bne.n	80043e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	58024800 	.word	0x58024800

08004414 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08c      	sub	sp, #48	; 0x30
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f000 bc1f 	b.w	8004c66 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80b3 	beq.w	800459c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004436:	4b95      	ldr	r3, [pc, #596]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004440:	4b92      	ldr	r3, [pc, #584]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	2b10      	cmp	r3, #16
 800444a:	d007      	beq.n	800445c <HAL_RCC_OscConfig+0x48>
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	2b18      	cmp	r3, #24
 8004450:	d112      	bne.n	8004478 <HAL_RCC_OscConfig+0x64>
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d10d      	bne.n	8004478 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	4b8b      	ldr	r3, [pc, #556]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8098 	beq.w	800459a <HAL_RCC_OscConfig+0x186>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 8093 	bne.w	800459a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e3f6      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x7c>
 8004482:	4b82      	ldr	r3, [pc, #520]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a81      	ldr	r2, [pc, #516]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e058      	b.n	8004542 <HAL_RCC_OscConfig+0x12e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d112      	bne.n	80044be <HAL_RCC_OscConfig+0xaa>
 8004498:	4b7c      	ldr	r3, [pc, #496]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7b      	ldr	r2, [pc, #492]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800449e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b79      	ldr	r3, [pc, #484]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a78      	ldr	r2, [pc, #480]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b76      	ldr	r3, [pc, #472]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a75      	ldr	r2, [pc, #468]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e041      	b.n	8004542 <HAL_RCC_OscConfig+0x12e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c6:	d112      	bne.n	80044ee <HAL_RCC_OscConfig+0xda>
 80044c8:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6f      	ldr	r2, [pc, #444]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a6c      	ldr	r2, [pc, #432]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a69      	ldr	r2, [pc, #420]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e029      	b.n	8004542 <HAL_RCC_OscConfig+0x12e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80044f6:	d112      	bne.n	800451e <HAL_RCC_OscConfig+0x10a>
 80044f8:	4b64      	ldr	r3, [pc, #400]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a63      	ldr	r2, [pc, #396]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80044fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b61      	ldr	r3, [pc, #388]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a60      	ldr	r2, [pc, #384]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b5e      	ldr	r3, [pc, #376]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a5d      	ldr	r2, [pc, #372]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e011      	b.n	8004542 <HAL_RCC_OscConfig+0x12e>
 800451e:	4b5b      	ldr	r3, [pc, #364]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5a      	ldr	r2, [pc, #360]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b58      	ldr	r3, [pc, #352]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a57      	ldr	r2, [pc, #348]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b55      	ldr	r3, [pc, #340]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a54      	ldr	r2, [pc, #336]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800453c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d013      	beq.n	8004572 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fd fa4f 	bl	80019ec <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004552:	f7fd fa4b 	bl	80019ec <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	; 0x64
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e380      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004564:	4b49      	ldr	r3, [pc, #292]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x13e>
 8004570:	e014      	b.n	800459c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fd fa3b 	bl	80019ec <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457a:	f7fd fa37 	bl	80019ec <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b64      	cmp	r3, #100	; 0x64
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e36c      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800458c:	4b3f      	ldr	r3, [pc, #252]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x166>
 8004598:	e000      	b.n	800459c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 808c 	beq.w	80046c2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	4b38      	ldr	r3, [pc, #224]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045b4:	4b35      	ldr	r3, [pc, #212]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1bc>
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	2b18      	cmp	r3, #24
 80045c4:	d137      	bne.n	8004636 <HAL_RCC_OscConfig+0x222>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d132      	bne.n	8004636 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d0:	4b2e      	ldr	r3, [pc, #184]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_OscConfig+0x1d4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e33e      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 0219 	bic.w	r2, r3, #25
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4925      	ldr	r1, [pc, #148]	; (800468c <HAL_RCC_OscConfig+0x278>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fd f9f7 	bl	80019ec <HAL_GetTick>
 80045fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004602:	f7fd f9f3 	bl	80019ec <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e328      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	4917      	ldr	r1, [pc, #92]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004634:	e045      	b.n	80046c2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d028      	beq.n	8004690 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 0219 	bic.w	r2, r3, #25
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4910      	ldr	r1, [pc, #64]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd f9cc 	bl	80019ec <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004658:	f7fd f9c8 	bl	80019ec <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e2fd      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <HAL_RCC_OscConfig+0x278>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	061b      	lsls	r3, r3, #24
 8004684:	4901      	ldr	r1, [pc, #4]	; (800468c <HAL_RCC_OscConfig+0x278>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
 800468a:	e01a      	b.n	80046c2 <HAL_RCC_OscConfig+0x2ae>
 800468c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004690:	4b97      	ldr	r3, [pc, #604]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a96      	ldr	r2, [pc, #600]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fd f9a6 	bl	80019ec <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a4:	f7fd f9a2 	bl	80019ec <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e2d7      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046b6:	4b8e      	ldr	r3, [pc, #568]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d06a      	beq.n	80047a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ce:	4b88      	ldr	r3, [pc, #544]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046d8:	4b85      	ldr	r3, [pc, #532]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d007      	beq.n	80046f4 <HAL_RCC_OscConfig+0x2e0>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b18      	cmp	r3, #24
 80046e8:	d11b      	bne.n	8004722 <HAL_RCC_OscConfig+0x30e>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d116      	bne.n	8004722 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046f4:	4b7e      	ldr	r3, [pc, #504]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_OscConfig+0x2f8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e2ac      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800470c:	4b78      	ldr	r3, [pc, #480]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	4975      	ldr	r1, [pc, #468]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004720:	e040      	b.n	80047a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d023      	beq.n	8004772 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800472a:	4b71      	ldr	r3, [pc, #452]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a70      	ldr	r2, [pc, #448]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd f959 	bl	80019ec <HAL_GetTick>
 800473a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800473e:	f7fd f955 	bl	80019ec <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e28a      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004750:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800475c:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	4961      	ldr	r1, [pc, #388]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800476c:	4313      	orrs	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
 8004770:	e018      	b.n	80047a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004772:	4b5f      	ldr	r3, [pc, #380]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a5e      	ldr	r2, [pc, #376]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800477c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fd f935 	bl	80019ec <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004786:	f7fd f931 	bl	80019ec <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e266      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004798:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d036      	beq.n	800481e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d019      	beq.n	80047ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b8:	4b4d      	ldr	r3, [pc, #308]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80047ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047bc:	4a4c      	ldr	r2, [pc, #304]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fd f912 	bl	80019ec <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fd f90e 	bl	80019ec <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e243      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047de:	4b44      	ldr	r3, [pc, #272]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x3b8>
 80047ea:	e018      	b.n	800481e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ec:	4b40      	ldr	r3, [pc, #256]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	4a3f      	ldr	r2, [pc, #252]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fd f8f8 	bl	80019ec <HAL_GetTick>
 80047fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004800:	f7fd f8f4 	bl	80019ec <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e229      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d036      	beq.n	8004898 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d019      	beq.n	8004866 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004832:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2e      	ldr	r2, [pc, #184]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800483c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800483e:	f7fd f8d5 	bl	80019ec <HAL_GetTick>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004846:	f7fd f8d1 	bl	80019ec <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e206      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x432>
 8004864:	e018      	b.n	8004898 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004866:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a21      	ldr	r2, [pc, #132]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800486c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004872:	f7fd f8bb 	bl	80019ec <HAL_GetTick>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800487a:	f7fd f8b7 	bl	80019ec <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e1ec      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800488c:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80af 	beq.w	8004a04 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_RCC_OscConfig+0x4e0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <HAL_RCC_OscConfig+0x4e0>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b2:	f7fd f89b 	bl	80019ec <HAL_GetTick>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fd f897 	bl	80019ec <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b64      	cmp	r3, #100	; 0x64
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e1cc      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_RCC_OscConfig+0x4e0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10b      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4e4>
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4a02      	ldr	r2, [pc, #8]	; (80048f0 <HAL_RCC_OscConfig+0x4dc>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	; 0x70
 80048ec:	e05b      	b.n	80049a6 <HAL_RCC_OscConfig+0x592>
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	58024800 	.word	0x58024800
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d112      	bne.n	8004926 <HAL_RCC_OscConfig+0x512>
 8004900:	4b9d      	ldr	r3, [pc, #628]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a9c      	ldr	r2, [pc, #624]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	4b9a      	ldr	r3, [pc, #616]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a99      	ldr	r2, [pc, #612]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	4b97      	ldr	r3, [pc, #604]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	4a96      	ldr	r2, [pc, #600]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800491e:	f023 0304 	bic.w	r3, r3, #4
 8004922:	6713      	str	r3, [r2, #112]	; 0x70
 8004924:	e03f      	b.n	80049a6 <HAL_RCC_OscConfig+0x592>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b05      	cmp	r3, #5
 800492c:	d112      	bne.n	8004954 <HAL_RCC_OscConfig+0x540>
 800492e:	4b92      	ldr	r3, [pc, #584]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a91      	ldr	r2, [pc, #580]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004934:	f043 0304 	orr.w	r3, r3, #4
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	4b8f      	ldr	r3, [pc, #572]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a8e      	ldr	r2, [pc, #568]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
 8004946:	4b8c      	ldr	r3, [pc, #560]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a8b      	ldr	r2, [pc, #556]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	e028      	b.n	80049a6 <HAL_RCC_OscConfig+0x592>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b85      	cmp	r3, #133	; 0x85
 800495a:	d112      	bne.n	8004982 <HAL_RCC_OscConfig+0x56e>
 800495c:	4b86      	ldr	r3, [pc, #536]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a85      	ldr	r2, [pc, #532]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	4b83      	ldr	r3, [pc, #524]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a82      	ldr	r2, [pc, #520]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800496e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	4b80      	ldr	r3, [pc, #512]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a7f      	ldr	r2, [pc, #508]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
 8004980:	e011      	b.n	80049a6 <HAL_RCC_OscConfig+0x592>
 8004982:	4b7d      	ldr	r3, [pc, #500]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a7c      	ldr	r2, [pc, #496]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a79      	ldr	r2, [pc, #484]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004994:	f023 0304 	bic.w	r3, r3, #4
 8004998:	6713      	str	r3, [r2, #112]	; 0x70
 800499a:	4b77      	ldr	r3, [pc, #476]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a76      	ldr	r2, [pc, #472]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 80049a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d015      	beq.n	80049da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd f81d 	bl	80019ec <HAL_GetTick>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fd f819 	bl	80019ec <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e14c      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049cc:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ee      	beq.n	80049b6 <HAL_RCC_OscConfig+0x5a2>
 80049d8:	e014      	b.n	8004a04 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7fd f807 	bl	80019ec <HAL_GetTick>
 80049de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f7fd f803 	bl	80019ec <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e136      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049f8:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1ee      	bne.n	80049e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 812b 	beq.w	8004c64 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a0e:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a16:	2b18      	cmp	r3, #24
 8004a18:	f000 80bb 	beq.w	8004b92 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f040 8095 	bne.w	8004b50 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b54      	ldr	r3, [pc, #336]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a53      	ldr	r2, [pc, #332]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fc ffdb 	bl	80019ec <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fc ffd7 	bl	80019ec <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e10c      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a4c:	4b4a      	ldr	r3, [pc, #296]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a58:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a5c:	4b47      	ldr	r3, [pc, #284]	; (8004b7c <HAL_RCC_OscConfig+0x768>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a68:	0112      	lsls	r2, r2, #4
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	4942      	ldr	r1, [pc, #264]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	628b      	str	r3, [r1, #40]	; 0x28
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	3b01      	subs	r3, #1
 8004a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	3b01      	subs	r3, #1
 8004a82:	025b      	lsls	r3, r3, #9
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aa2:	4935      	ldr	r1, [pc, #212]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004aa8:	4b33      	ldr	r3, [pc, #204]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	4a32      	ldr	r2, [pc, #200]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab8:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ac0:	00d2      	lsls	r2, r2, #3
 8004ac2:	492d      	ldr	r1, [pc, #180]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	f023 020c 	bic.w	r2, r3, #12
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4928      	ldr	r1, [pc, #160]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	f023 0202 	bic.w	r2, r3, #2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	4924      	ldr	r1, [pc, #144]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004aec:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af8:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b04:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fc ff60 	bl	80019ec <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fc ff5c 	bl	80019ec <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e091      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x71c>
 8004b4e:	e089      	b.n	8004c64 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <HAL_RCC_OscConfig+0x764>)
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fc ff46 	bl	80019ec <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b62:	e00f      	b.n	8004b84 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fc ff42 	bl	80019ec <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d908      	bls.n	8004b84 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e077      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
 8004b76:	bf00      	nop
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	fffffc0c 	.word	0xfffffc0c
 8004b80:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b84:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e9      	bne.n	8004b64 <HAL_RCC_OscConfig+0x750>
 8004b90:	e068      	b.n	8004c64 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b92:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b98:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d031      	beq.n	8004c0a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f003 0203 	and.w	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d12a      	bne.n	8004c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d122      	bne.n	8004c0a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d11a      	bne.n	8004c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	0a5b      	lsrs	r3, r3, #9
 8004bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d111      	bne.n	8004c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d108      	bne.n	8004c0a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	0e1b      	lsrs	r3, r3, #24
 8004bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e02b      	b.n	8004c66 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c0e:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	08db      	lsrs	r3, r3, #3
 8004c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c18:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d01f      	beq.n	8004c64 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	4a11      	ldr	r2, [pc, #68]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c30:	f7fc fedc 	bl	80019ec <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c36:	bf00      	nop
 8004c38:	f7fc fed8 	bl	80019ec <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d0f9      	beq.n	8004c38 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_RCC_OscConfig+0x860>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c50:	00d2      	lsls	r2, r2, #3
 8004c52:	4907      	ldr	r1, [pc, #28]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <HAL_RCC_OscConfig+0x85c>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3730      	adds	r7, #48	; 0x30
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
 8004c74:	ffff0007 	.word	0xffff0007

08004c78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e19c      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c8c:	4b8a      	ldr	r3, [pc, #552]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d910      	bls.n	8004cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9a:	4b87      	ldr	r3, [pc, #540]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 020f 	bic.w	r2, r3, #15
 8004ca2:	4985      	ldr	r1, [pc, #532]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004caa:	4b83      	ldr	r3, [pc, #524]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e184      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d010      	beq.n	8004cea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	4b7b      	ldr	r3, [pc, #492]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d908      	bls.n	8004cea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cd8:	4b78      	ldr	r3, [pc, #480]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	4975      	ldr	r1, [pc, #468]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	4b70      	ldr	r3, [pc, #448]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d908      	bls.n	8004d18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d06:	4b6d      	ldr	r3, [pc, #436]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	496a      	ldr	r1, [pc, #424]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d010      	beq.n	8004d46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	4b64      	ldr	r3, [pc, #400]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d908      	bls.n	8004d46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d34:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	495e      	ldr	r1, [pc, #376]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d908      	bls.n	8004d74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d62:	4b56      	ldr	r3, [pc, #344]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4953      	ldr	r1, [pc, #332]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	4b4d      	ldr	r3, [pc, #308]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d908      	bls.n	8004da2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d90:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f023 020f 	bic.w	r2, r3, #15
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4947      	ldr	r1, [pc, #284]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d055      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dae:	4b43      	ldr	r3, [pc, #268]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4940      	ldr	r1, [pc, #256]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dc8:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d121      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0f6      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d115      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0ea      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004df8:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0de      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e08:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0d6      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e18:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f023 0207 	bic.w	r2, r3, #7
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4925      	ldr	r1, [pc, #148]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fc fddf 	bl	80019ec <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e32:	f7fc fddb 	bl	80019ec <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e0be      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d1eb      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d208      	bcs.n	8004e88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e76:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f023 020f 	bic.w	r2, r3, #15
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	490e      	ldr	r1, [pc, #56]	; (8004ebc <HAL_RCC_ClockConfig+0x244>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d214      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 020f 	bic.w	r2, r3, #15
 8004e9e:	4906      	ldr	r1, [pc, #24]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <HAL_RCC_ClockConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e086      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x34e>
 8004eb8:	52002000 	.word	0x52002000
 8004ebc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d010      	beq.n	8004eee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d208      	bcs.n	8004eee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004edc:	4b3c      	ldr	r3, [pc, #240]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	4939      	ldr	r1, [pc, #228]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d010      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d208      	bcs.n	8004f1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f0a:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	492e      	ldr	r1, [pc, #184]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d010      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d208      	bcs.n	8004f4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	4922      	ldr	r1, [pc, #136]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d010      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69da      	ldr	r2, [r3, #28]
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d208      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4917      	ldr	r1, [pc, #92]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004f78:	f000 f834 	bl	8004fe4 <HAL_RCC_GetSysClockFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	4912      	ldr	r1, [pc, #72]	; (8004fd4 <HAL_RCC_ClockConfig+0x35c>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
 8004f94:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <HAL_RCC_ClockConfig+0x358>)
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <HAL_RCC_ClockConfig+0x35c>)
 8004fa0:	5cd3      	ldrb	r3, [r2, r3]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <HAL_RCC_ClockConfig+0x360>)
 8004fae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fb0:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <HAL_RCC_ClockConfig+0x364>)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_RCC_ClockConfig+0x368>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fc fccc 	bl	8001958 <HAL_InitTick>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	0800aba8 	.word	0x0800aba8
 8004fd8:	24000004 	.word	0x24000004
 8004fdc:	24000000 	.word	0x24000000
 8004fe0:	24000008 	.word	0x24000008

08004fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fea:	4bb3      	ldr	r3, [pc, #716]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ff2:	2b18      	cmp	r3, #24
 8004ff4:	f200 8155 	bhi.w	80052a2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005065 	.word	0x08005065
 8005004:	080052a3 	.word	0x080052a3
 8005008:	080052a3 	.word	0x080052a3
 800500c:	080052a3 	.word	0x080052a3
 8005010:	080052a3 	.word	0x080052a3
 8005014:	080052a3 	.word	0x080052a3
 8005018:	080052a3 	.word	0x080052a3
 800501c:	080052a3 	.word	0x080052a3
 8005020:	0800508b 	.word	0x0800508b
 8005024:	080052a3 	.word	0x080052a3
 8005028:	080052a3 	.word	0x080052a3
 800502c:	080052a3 	.word	0x080052a3
 8005030:	080052a3 	.word	0x080052a3
 8005034:	080052a3 	.word	0x080052a3
 8005038:	080052a3 	.word	0x080052a3
 800503c:	080052a3 	.word	0x080052a3
 8005040:	08005091 	.word	0x08005091
 8005044:	080052a3 	.word	0x080052a3
 8005048:	080052a3 	.word	0x080052a3
 800504c:	080052a3 	.word	0x080052a3
 8005050:	080052a3 	.word	0x080052a3
 8005054:	080052a3 	.word	0x080052a3
 8005058:	080052a3 	.word	0x080052a3
 800505c:	080052a3 	.word	0x080052a3
 8005060:	08005097 	.word	0x08005097
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005064:	4b94      	ldr	r3, [pc, #592]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005070:	4b91      	ldr	r3, [pc, #580]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	08db      	lsrs	r3, r3, #3
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	4a90      	ldr	r2, [pc, #576]	; (80052bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005082:	e111      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005084:	4b8d      	ldr	r3, [pc, #564]	; (80052bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005086:	61bb      	str	r3, [r7, #24]
      break;
 8005088:	e10e      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800508a:	4b8d      	ldr	r3, [pc, #564]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800508c:	61bb      	str	r3, [r7, #24]
      break;
 800508e:	e10b      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005090:	4b8c      	ldr	r3, [pc, #560]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005092:	61bb      	str	r3, [r7, #24]
      break;
 8005094:	e108      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005096:	4b88      	ldr	r3, [pc, #544]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050a0:	4b85      	ldr	r3, [pc, #532]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050ac:	4b82      	ldr	r3, [pc, #520]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050b6:	4b80      	ldr	r3, [pc, #512]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80e1 	beq.w	800529c <HAL_RCC_GetSysClockFreq+0x2b8>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	f000 8083 	beq.w	80051e8 <HAL_RCC_GetSysClockFreq+0x204>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	f200 80a1 	bhi.w	800522c <HAL_RCC_GetSysClockFreq+0x248>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0x114>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d056      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050f6:	e099      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050f8:	4b6f      	ldr	r3, [pc, #444]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02d      	beq.n	8005160 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005104:	4b6c      	ldr	r3, [pc, #432]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	4a6b      	ldr	r2, [pc, #428]	; (80052bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	ee07 3a90 	vmov	s15, r3
 800511c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b62      	ldr	r3, [pc, #392]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005142:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800515e:	e087      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a02 	vldr	s12, [r7, #8]
 8005186:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051a2:	e065      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b40      	ldr	r3, [pc, #256]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051e6:	e043      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a02 	vldr	s12, [r7, #8]
 800520e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800522a:	e021      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005252:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800526e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	0a5b      	lsrs	r3, r3, #9
 8005276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527a:	3301      	adds	r3, #1
 800527c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	ee07 3a90 	vmov	s15, r3
 8005284:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005288:	edd7 6a07 	vldr	s13, [r7, #28]
 800528c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005294:	ee17 3a90 	vmov	r3, s15
 8005298:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800529a:	e005      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	61bb      	str	r3, [r7, #24]
      break;
 80052a0:	e002      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052a4:	61bb      	str	r3, [r7, #24]
      break;
 80052a6:	bf00      	nop
  }

  return sysclockfreq;
 80052a8:	69bb      	ldr	r3, [r7, #24]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	03d09000 	.word	0x03d09000
 80052c0:	003d0900 	.word	0x003d0900
 80052c4:	007a1200 	.word	0x007a1200
 80052c8:	46000000 	.word	0x46000000
 80052cc:	4c742400 	.word	0x4c742400
 80052d0:	4a742400 	.word	0x4a742400
 80052d4:	4af42400 	.word	0x4af42400

080052d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80052de:	f7ff fe81 	bl	8004fe4 <HAL_RCC_GetSysClockFreq>
 80052e2:	4602      	mov	r2, r0
 80052e4:	4b10      	ldr	r3, [pc, #64]	; (8005328 <HAL_RCC_GetHCLKFreq+0x50>)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	0a1b      	lsrs	r3, r3, #8
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	490f      	ldr	r1, [pc, #60]	; (800532c <HAL_RCC_GetHCLKFreq+0x54>)
 80052f0:	5ccb      	ldrb	r3, [r1, r3]
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_RCC_GetHCLKFreq+0x50>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <HAL_RCC_GetHCLKFreq+0x54>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	f003 031f 	and.w	r3, r3, #31
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <HAL_RCC_GetHCLKFreq+0x58>)
 8005314:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005316:	4a07      	ldr	r2, [pc, #28]	; (8005334 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <HAL_RCC_GetHCLKFreq+0x58>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	58024400 	.word	0x58024400
 800532c:	0800aba8 	.word	0x0800aba8
 8005330:	24000004 	.word	0x24000004
 8005334:	24000000 	.word	0x24000000

08005338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800533c:	f7ff ffcc 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8005340:	4602      	mov	r2, r0
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	4904      	ldr	r1, [pc, #16]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800534e:	5ccb      	ldrb	r3, [r1, r3]
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	58024400 	.word	0x58024400
 8005360:	0800aba8 	.word	0x0800aba8

08005364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005368:	f7ff ffb6 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 800536c:	4602      	mov	r2, r0
 800536e:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4904      	ldr	r1, [pc, #16]	; (800538c <HAL_RCC_GetPCLK2Freq+0x28>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	58024400 	.word	0x58024400
 800538c:	0800aba8 	.word	0x0800aba8

08005390 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005394:	b0c8      	sub	sp, #288	; 0x120
 8005396:	af00      	add	r7, sp, #0
 8005398:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800539c:	2300      	movs	r3, #0
 800539e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80053b4:	2500      	movs	r5, #0
 80053b6:	ea54 0305 	orrs.w	r3, r4, r5
 80053ba:	d049      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053c6:	d02f      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053cc:	d828      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d2:	d01a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d8:	d822      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e2:	d007      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053e4:	e01c      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e6:	4ba7      	ldr	r3, [pc, #668]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	4aa6      	ldr	r2, [pc, #664]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053f2:	e01a      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f8:	3308      	adds	r3, #8
 80053fa:	2102      	movs	r1, #2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 fc43 	bl	8006c88 <RCCEx_PLL2_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005408:	e00f      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540e:	3328      	adds	r3, #40	; 0x28
 8005410:	2102      	movs	r1, #2
 8005412:	4618      	mov	r0, r3
 8005414:	f001 fcea 	bl	8006dec <RCCEx_PLL3_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800541e:	e004      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005426:	e000      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005432:	4b94      	ldr	r3, [pc, #592]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005440:	4a90      	ldr	r2, [pc, #576]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005442:	430b      	orrs	r3, r1
 8005444:	6513      	str	r3, [r2, #80]	; 0x50
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800544c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800545c:	f04f 0900 	mov.w	r9, #0
 8005460:	ea58 0309 	orrs.w	r3, r8, r9
 8005464:	d047      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	2b04      	cmp	r3, #4
 800546e:	d82a      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	0800548d 	.word	0x0800548d
 800547c:	0800549b 	.word	0x0800549b
 8005480:	080054b1 	.word	0x080054b1
 8005484:	080054cf 	.word	0x080054cf
 8005488:	080054cf 	.word	0x080054cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548c:	4b7d      	ldr	r3, [pc, #500]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	4a7c      	ldr	r2, [pc, #496]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005498:	e01a      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800549a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549e:	3308      	adds	r3, #8
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 fbf0 	bl	8006c88 <RCCEx_PLL2_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ae:	e00f      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b4:	3328      	adds	r3, #40	; 0x28
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 fc97 	bl	8006dec <RCCEx_PLL3_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054c4:	e004      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054d8:	4b6a      	ldr	r3, [pc, #424]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	f023 0107 	bic.w	r1, r3, #7
 80054e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	4a67      	ldr	r2, [pc, #412]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6513      	str	r3, [r2, #80]	; 0x50
 80054ec:	e003      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80054f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005502:	f04f 0b00 	mov.w	fp, #0
 8005506:	ea5a 030b 	orrs.w	r3, sl, fp
 800550a:	d054      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800550c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005516:	d036      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005518:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800551c:	d82f      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	d032      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005528:	d829      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800552a:	2bc0      	cmp	r3, #192	; 0xc0
 800552c:	d02f      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800552e:	2bc0      	cmp	r3, #192	; 0xc0
 8005530:	d825      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d018      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d821      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d007      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005542:	e01c      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005544:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	4a4e      	ldr	r2, [pc, #312]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800554a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005550:	e01e      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005556:	3308      	adds	r3, #8
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f001 fb94 	bl	8006c88 <RCCEx_PLL2_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005566:	e013      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556c:	3328      	adds	r3, #40	; 0x28
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fc3b 	bl	8006dec <RCCEx_PLL3_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005584:	e004      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005586:	bf00      	nop
 8005588:	e002      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800558e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005590:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005598:	4b3a      	ldr	r3, [pc, #232]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80055a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	4a37      	ldr	r2, [pc, #220]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6513      	str	r3, [r2, #80]	; 0x50
 80055ac:	e003      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80055b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80055c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80055d0:	460b      	mov	r3, r1
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d05c      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80055d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80055e0:	d03b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055e2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80055e6:	d834      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d037      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80055ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f2:	d82e      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80055f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055f8:	d033      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80055fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055fe:	d828      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	d01a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560a:	d822      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	d007      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005616:	e01c      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800561e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005624:	e01e      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562a:	3308      	adds	r3, #8
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fb2a 	bl	8006c88 <RCCEx_PLL2_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800563a:	e013      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800563c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005640:	3328      	adds	r3, #40	; 0x28
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f001 fbd1 	bl	8006dec <RCCEx_PLL3_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005650:	e008      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005658:	e004      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800565a:	bf00      	nop
 800565c:	e002      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800565e:	bf00      	nop
 8005660:	e000      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005664:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	4a02      	ldr	r2, [pc, #8]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800567c:	430b      	orrs	r3, r1
 800567e:	6513      	str	r3, [r2, #80]	; 0x50
 8005680:	e006      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800568c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800569c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056a0:	2300      	movs	r3, #0
 80056a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80056aa:	460b      	mov	r3, r1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	d03a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80056b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	2b30      	cmp	r3, #48	; 0x30
 80056b8:	d01f      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80056ba:	2b30      	cmp	r3, #48	; 0x30
 80056bc:	d819      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d00c      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d815      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d019      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80056ca:	2b10      	cmp	r3, #16
 80056cc:	d111      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ce:	4bae      	ldr	r3, [pc, #696]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	4aad      	ldr	r2, [pc, #692]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80056da:	e011      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e0:	3308      	adds	r3, #8
 80056e2:	2102      	movs	r1, #2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 facf 	bl	8006c88 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80056f0:	e006      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056f8:	e002      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80056fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005708:	4b9f      	ldr	r3, [pc, #636]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800570a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005716:	4a9c      	ldr	r2, [pc, #624]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005718:	430b      	orrs	r3, r1
 800571a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005722:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005732:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005736:	2300      	movs	r3, #0
 8005738:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800573c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d051      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800574c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005750:	d035      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005756:	d82e      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005758:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800575c:	d031      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800575e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005762:	d828      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005768:	d01a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d822      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005778:	d007      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800577a:	e01c      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800577c:	4b82      	ldr	r3, [pc, #520]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	4a81      	ldr	r2, [pc, #516]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005788:	e01c      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	3308      	adds	r3, #8
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fa78 	bl	8006c88 <RCCEx_PLL2_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800579e:	e011      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a4:	3328      	adds	r3, #40	; 0x28
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 fb1f 	bl	8006dec <RCCEx_PLL3_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057b4:	e006      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80057c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057cc:	4b6e      	ldr	r3, [pc, #440]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80057d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057da:	4a6b      	ldr	r2, [pc, #428]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	6513      	str	r3, [r2, #80]	; 0x50
 80057e0:	e003      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80057ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80057f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057fa:	2300      	movs	r3, #0
 80057fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005800:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d053      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800580a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005814:	d033      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800581a:	d82c      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800581c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005820:	d02f      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005826:	d826      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800582c:	d02b      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800582e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005832:	d820      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005838:	d012      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800583a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800583e:	d81a      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d022      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005848:	d115      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800584a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584e:	3308      	adds	r3, #8
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fa18 	bl	8006c88 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800585e:	e015      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005864:	3328      	adds	r3, #40	; 0x28
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fabf 	bl	8006dec <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005874:	e00a      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800587e:	bf00      	nop
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800588a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005894:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a2:	4a39      	ldr	r2, [pc, #228]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6513      	str	r3, [r2, #80]	; 0x50
 80058a8:	e003      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80058be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d060      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058da:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80058de:	d039      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80058e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80058e4:	d832      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80058e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058ea:	d035      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80058ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058f0:	d82c      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f6:	d031      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d826      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80058fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005902:	d02d      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005904:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005908:	d820      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590e:	d012      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005914:	d81a      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d024      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800591a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800591e:	d115      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005924:	3308      	adds	r3, #8
 8005926:	2101      	movs	r1, #1
 8005928:	4618      	mov	r0, r3
 800592a:	f001 f9ad 	bl	8006c88 <RCCEx_PLL2_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005934:	e017      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800593a:	3328      	adds	r3, #40	; 0x28
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fa54 	bl	8006dec <RCCEx_PLL3_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800594a:	e00c      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005954:	bf00      	nop
 8005956:	e006      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005958:	bf00      	nop
 800595a:	e004      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800595c:	bf00      	nop
 800595e:	e002      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005960:	bf00      	nop
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005966:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10e      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800597a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800597e:	4a02      	ldr	r2, [pc, #8]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005980:	430b      	orrs	r3, r1
 8005982:	6593      	str	r3, [r2, #88]	; 0x58
 8005984:	e006      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80059a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059a4:	2300      	movs	r3, #0
 80059a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059ae:	460b      	mov	r3, r1
 80059b0:	4313      	orrs	r3, r2
 80059b2:	d037      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059be:	d00e      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80059c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c4:	d816      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d018      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80059ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ce:	d111      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d0:	4bc4      	ldr	r3, [pc, #784]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	4ac3      	ldr	r2, [pc, #780]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059dc:	e00f      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e2:	3308      	adds	r3, #8
 80059e4:	2101      	movs	r1, #1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 f94e 	bl	8006c88 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059f2:	e004      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059fa:	e000      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80059fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a06:	4bb7      	ldr	r3, [pc, #732]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a14:	4ab3      	ldr	r2, [pc, #716]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a16:	430b      	orrs	r3, r1
 8005a18:	6513      	str	r3, [r2, #80]	; 0x50
 8005a1a:	e003      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a34:	2300      	movs	r3, #0
 8005a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	d039      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d81c      	bhi.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a91 	.word	0x08005a91
 8005a58:	08005a65 	.word	0x08005a65
 8005a5c:	08005a73 	.word	0x08005a73
 8005a60:	08005a91 	.word	0x08005a91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a64:	4b9f      	ldr	r3, [pc, #636]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	4a9e      	ldr	r2, [pc, #632]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a70:	e00f      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a76:	3308      	adds	r3, #8
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 f904 	bl	8006c88 <RCCEx_PLL2_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a86:	e004      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a8e:	e000      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a9a:	4b92      	ldr	r3, [pc, #584]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	f023 0103 	bic.w	r1, r3, #3
 8005aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa8:	4a8e      	ldr	r2, [pc, #568]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aae:	e003      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ab4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ace:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f000 8099 	beq.w	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ada:	4b83      	ldr	r3, [pc, #524]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a82      	ldr	r2, [pc, #520]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae6:	f7fb ff81 	bl	80019ec <HAL_GetTick>
 8005aea:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aee:	e00b      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af0:	f7fb ff7c 	bl	80019ec <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b64      	cmp	r3, #100	; 0x64
 8005afe:	d903      	bls.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b06:	e005      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b08:	4b77      	ldr	r3, [pc, #476]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0ed      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005b14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d173      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b1c:	4b71      	ldr	r3, [pc, #452]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b28:	4053      	eors	r3, r2
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d015      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b32:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b3e:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	4a68      	ldr	r2, [pc, #416]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4a:	4b66      	ldr	r3, [pc, #408]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a65      	ldr	r2, [pc, #404]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b56:	4a63      	ldr	r2, [pc, #396]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	d118      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7fb ff3e 	bl	80019ec <HAL_GetTick>
 8005b70:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b74:	e00d      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fb ff39 	bl	80019ec <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b80:	1ad2      	subs	r2, r2, r3
 8005b82:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d903      	bls.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005b90:	e005      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b92:	4b54      	ldr	r3, [pc, #336]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0eb      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d129      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bb6:	d10e      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005bb8:	4b4a      	ldr	r3, [pc, #296]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bc8:	091a      	lsrs	r2, r3, #4
 8005bca:	4b48      	ldr	r3, [pc, #288]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	4a45      	ldr	r2, [pc, #276]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6113      	str	r3, [r2, #16]
 8005bd4:	e005      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	4a42      	ldr	r2, [pc, #264]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005be0:	6113      	str	r3, [r2, #16]
 8005be2:	4b40      	ldr	r3, [pc, #256]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf2:	4a3c      	ldr	r2, [pc, #240]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf8:	e008      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005c02:	e003      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f002 0301 	and.w	r3, r2, #1
 8005c18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f000 8090 	beq.w	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c36:	2b28      	cmp	r3, #40	; 0x28
 8005c38:	d870      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005d25 	.word	0x08005d25
 8005c44:	08005d1d 	.word	0x08005d1d
 8005c48:	08005d1d 	.word	0x08005d1d
 8005c4c:	08005d1d 	.word	0x08005d1d
 8005c50:	08005d1d 	.word	0x08005d1d
 8005c54:	08005d1d 	.word	0x08005d1d
 8005c58:	08005d1d 	.word	0x08005d1d
 8005c5c:	08005d1d 	.word	0x08005d1d
 8005c60:	08005cf1 	.word	0x08005cf1
 8005c64:	08005d1d 	.word	0x08005d1d
 8005c68:	08005d1d 	.word	0x08005d1d
 8005c6c:	08005d1d 	.word	0x08005d1d
 8005c70:	08005d1d 	.word	0x08005d1d
 8005c74:	08005d1d 	.word	0x08005d1d
 8005c78:	08005d1d 	.word	0x08005d1d
 8005c7c:	08005d1d 	.word	0x08005d1d
 8005c80:	08005d07 	.word	0x08005d07
 8005c84:	08005d1d 	.word	0x08005d1d
 8005c88:	08005d1d 	.word	0x08005d1d
 8005c8c:	08005d1d 	.word	0x08005d1d
 8005c90:	08005d1d 	.word	0x08005d1d
 8005c94:	08005d1d 	.word	0x08005d1d
 8005c98:	08005d1d 	.word	0x08005d1d
 8005c9c:	08005d1d 	.word	0x08005d1d
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005d1d 	.word	0x08005d1d
 8005ca8:	08005d1d 	.word	0x08005d1d
 8005cac:	08005d1d 	.word	0x08005d1d
 8005cb0:	08005d1d 	.word	0x08005d1d
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005d1d 	.word	0x08005d1d
 8005cbc:	08005d1d 	.word	0x08005d1d
 8005cc0:	08005d25 	.word	0x08005d25
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005d1d 	.word	0x08005d1d
 8005cd0:	08005d1d 	.word	0x08005d1d
 8005cd4:	08005d1d 	.word	0x08005d1d
 8005cd8:	08005d1d 	.word	0x08005d1d
 8005cdc:	08005d1d 	.word	0x08005d1d
 8005ce0:	08005d25 	.word	0x08005d25
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	58024800 	.word	0x58024800
 8005cec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 ffc5 	bl	8006c88 <RCCEx_PLL2_Config>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d04:	e00f      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0a:	3328      	adds	r3, #40	; 0x28
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f86c 	bl	8006dec <RCCEx_PLL3_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d1a:	e004      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d2e:	4bc0      	ldr	r3, [pc, #768]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3e:	4abc      	ldr	r2, [pc, #752]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6553      	str	r3, [r2, #84]	; 0x54
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f002 0302 	and.w	r3, r2, #2
 8005d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	d043      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d824      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005dcd 	.word	0x08005dcd
 8005d84:	08005d99 	.word	0x08005d99
 8005d88:	08005daf 	.word	0x08005daf
 8005d8c:	08005dcd 	.word	0x08005dcd
 8005d90:	08005dcd 	.word	0x08005dcd
 8005d94:	08005dcd 	.word	0x08005dcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	2101      	movs	r1, #1
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 ff71 	bl	8006c88 <RCCEx_PLL2_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dac:	e00f      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db2:	3328      	adds	r3, #40	; 0x28
 8005db4:	2101      	movs	r1, #1
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 f818 	bl	8006dec <RCCEx_PLL3_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dc2:	e004      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005dca:	e000      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dd6:	4b96      	ldr	r3, [pc, #600]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	f023 0107 	bic.w	r1, r3, #7
 8005dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de6:	4a92      	ldr	r2, [pc, #584]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6553      	str	r3, [r2, #84]	; 0x54
 8005dec:	e003      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005df2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	f002 0304 	and.w	r3, r2, #4
 8005e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e06:	2300      	movs	r3, #0
 8005e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e0c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4313      	orrs	r3, r2
 8005e14:	d043      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d824      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e41 	.word	0x08005e41
 8005e30:	08005e57 	.word	0x08005e57
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e44:	3308      	adds	r3, #8
 8005e46:	2101      	movs	r1, #1
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 ff1d 	bl	8006c88 <RCCEx_PLL2_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e54:	e00f      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5a:	3328      	adds	r3, #40	; 0x28
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 ffc4 	bl	8006dec <RCCEx_PLL3_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e6a:	e004      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e7e:	4b6c      	ldr	r3, [pc, #432]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f023 0107 	bic.w	r1, r3, #7
 8005e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e8e:	4a68      	ldr	r2, [pc, #416]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6593      	str	r3, [r2, #88]	; 0x58
 8005e94:	e003      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f002 0320 	and.w	r3, r2, #32
 8005eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	d055      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eca:	d033      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed0:	d82c      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed6:	d02f      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005edc:	d826      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ee2:	d02b      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ee8:	d820      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eee:	d012      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef4:	d81a      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d022      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005efe:	d115      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f04:	3308      	adds	r3, #8
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 febd 	bl	8006c88 <RCCEx_PLL2_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f14:	e015      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1a:	3328      	adds	r3, #40	; 0x28
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 ff64 	bl	8006dec <RCCEx_PLL3_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f32:	e006      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f34:	bf00      	nop
 8005f36:	e004      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f38:	bf00      	nop
 8005f3a:	e002      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f4a:	4b39      	ldr	r3, [pc, #228]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f5a:	4a35      	ldr	r2, [pc, #212]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6553      	str	r3, [r2, #84]	; 0x54
 8005f60:	e003      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4313      	orrs	r3, r2
 8005f88:	d058      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f96:	d033      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f9c:	d82c      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d02f      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa8:	d826      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fae:	d02b      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fb4:	d820      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fba:	d012      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc0:	d81a      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d022      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fca:	d115      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fe57 	bl	8006c88 <RCCEx_PLL2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fe0:	e015      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe6:	3328      	adds	r3, #40	; 0x28
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fefe 	bl	8006dec <RCCEx_PLL3_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ff6:	e00a      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ffe:	e006      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006000:	bf00      	nop
 8006002:	e004      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006004:	bf00      	nop
 8006006:	e002      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006008:	bf00      	nop
 800600a:	e000      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800600c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10e      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800601e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006026:	4a02      	ldr	r2, [pc, #8]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6593      	str	r3, [r2, #88]	; 0x58
 800602c:	e006      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800602e:	bf00      	nop
 8006030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006038:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800603c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006052:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006056:	460b      	mov	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	d055      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800605c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006060:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006068:	d033      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800606a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800606e:	d82c      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	d02f      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607a:	d826      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800607c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006080:	d02b      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006082:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006086:	d820      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800608c:	d012      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800608e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006092:	d81a      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d022      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609c:	d115      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800609e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a2:	3308      	adds	r3, #8
 80060a4:	2100      	movs	r1, #0
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fdee 	bl	8006c88 <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060b2:	e015      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b8:	3328      	adds	r3, #40	; 0x28
 80060ba:	2102      	movs	r1, #2
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fe95 	bl	8006dec <RCCEx_PLL3_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060c8:	e00a      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060d0:	e006      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060d2:	bf00      	nop
 80060d4:	e004      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060d6:	bf00      	nop
 80060d8:	e002      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060da:	bf00      	nop
 80060dc:	e000      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060e8:	4ba1      	ldr	r3, [pc, #644]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80060f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060f8:	4a9d      	ldr	r2, [pc, #628]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6593      	str	r3, [r2, #88]	; 0x58
 80060fe:	e003      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006104:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f002 0308 	and.w	r3, r2, #8
 8006114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800611e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d01e      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006134:	d10c      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613a:	3328      	adds	r3, #40	; 0x28
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fe54 	bl	8006dec <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006150:	4b87      	ldr	r3, [pc, #540]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800615c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006160:	4a83      	ldr	r2, [pc, #524]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006162:	430b      	orrs	r3, r1
 8006164:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f002 0310 	and.w	r3, r2, #16
 8006172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800617c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d01e      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800618e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006192:	d10c      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006198:	3328      	adds	r3, #40	; 0x28
 800619a:	2102      	movs	r1, #2
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fe25 	bl	8006dec <RCCEx_PLL3_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061ae:	4b70      	ldr	r3, [pc, #448]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061be:	4a6c      	ldr	r2, [pc, #432]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80061d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80061de:	460b      	mov	r3, r1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	d03e      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f0:	d022      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80061f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f6:	d81b      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006200:	d00b      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006202:	e015      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006208:	3308      	adds	r3, #8
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fd3b 	bl	8006c88 <RCCEx_PLL2_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006218:	e00f      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800621a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621e:	3328      	adds	r3, #40	; 0x28
 8006220:	2102      	movs	r1, #2
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fde2 	bl	8006dec <RCCEx_PLL3_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800622e:	e004      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006236:	e000      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006242:	4b4b      	ldr	r3, [pc, #300]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006246:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800624a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800624e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006252:	4a47      	ldr	r2, [pc, #284]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006254:	430b      	orrs	r3, r1
 8006256:	6593      	str	r3, [r2, #88]	; 0x58
 8006258:	e003      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800625e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800626e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006270:	2300      	movs	r3, #0
 8006272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006274:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006278:	460b      	mov	r3, r1
 800627a:	4313      	orrs	r3, r2
 800627c:	d03b      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800627e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800628a:	d01f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800628c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006290:	d818      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006296:	d003      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800629c:	d007      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800629e:	e011      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a0:	4b33      	ldr	r3, [pc, #204]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	4a32      	ldr	r2, [pc, #200]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062ac:	e00f      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b2:	3328      	adds	r3, #40	; 0x28
 80062b4:	2101      	movs	r1, #1
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fd98 	bl	8006dec <RCCEx_PLL3_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80062c2:	e004      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80062ca:	e000      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80062cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10b      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062d6:	4b26      	ldr	r3, [pc, #152]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80062de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	4a22      	ldr	r2, [pc, #136]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6553      	str	r3, [r2, #84]	; 0x54
 80062ec:	e003      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006302:	673b      	str	r3, [r7, #112]	; 0x70
 8006304:	2300      	movs	r3, #0
 8006306:	677b      	str	r3, [r7, #116]	; 0x74
 8006308:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800630c:	460b      	mov	r3, r1
 800630e:	4313      	orrs	r3, r2
 8006310:	d034      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d007      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006322:	e011      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4a11      	ldr	r2, [pc, #68]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006330:	e00e      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006336:	3308      	adds	r3, #8
 8006338:	2102      	movs	r1, #2
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fca4 	bl	8006c88 <RCCEx_PLL2_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006346:	e003      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800634e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006350:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10d      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800635a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006366:	4a02      	ldr	r2, [pc, #8]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006368:	430b      	orrs	r3, r1
 800636a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800636c:	e006      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800636e:	bf00      	nop
 8006370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006378:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800637c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006388:	66bb      	str	r3, [r7, #104]	; 0x68
 800638a:	2300      	movs	r3, #0
 800638c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800638e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d00c      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800639c:	3328      	adds	r3, #40	; 0x28
 800639e:	2102      	movs	r1, #2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fd23 	bl	8006dec <RCCEx_PLL3_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80063be:	663b      	str	r3, [r7, #96]	; 0x60
 80063c0:	2300      	movs	r3, #0
 80063c2:	667b      	str	r3, [r7, #100]	; 0x64
 80063c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80063c8:	460b      	mov	r3, r1
 80063ca:	4313      	orrs	r3, r2
 80063cc:	d038      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063da:	d018      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80063dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e0:	d811      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80063e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e6:	d014      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ec:	d80b      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d011      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f6:	d106      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f8:	4bc3      	ldr	r3, [pc, #780]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4ac2      	ldr	r2, [pc, #776]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006404:	e008      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800640c:	e004      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006418:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006420:	4bb9      	ldr	r3, [pc, #740]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006424:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	4ab5      	ldr	r2, [pc, #724]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006432:	430b      	orrs	r3, r1
 8006434:	6553      	str	r3, [r2, #84]	; 0x54
 8006436:	e003      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800643c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800644c:	65bb      	str	r3, [r7, #88]	; 0x58
 800644e:	2300      	movs	r3, #0
 8006450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006452:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006456:	460b      	mov	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800645c:	4baa      	ldr	r3, [pc, #680]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800645e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	4aa7      	ldr	r2, [pc, #668]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800646c:	430b      	orrs	r3, r1
 800646e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800647c:	653b      	str	r3, [r7, #80]	; 0x50
 800647e:	2300      	movs	r3, #0
 8006480:	657b      	str	r3, [r7, #84]	; 0x54
 8006482:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800648c:	4b9e      	ldr	r3, [pc, #632]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800648e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006490:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	4a9b      	ldr	r2, [pc, #620]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80064a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80064ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ae:	2300      	movs	r3, #0
 80064b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80064bc:	4b92      	ldr	r3, [pc, #584]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80064c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ca:	4a8f      	ldr	r2, [pc, #572]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064cc:	430b      	orrs	r3, r1
 80064ce:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80064dc:	643b      	str	r3, [r7, #64]	; 0x40
 80064de:	2300      	movs	r3, #0
 80064e0:	647b      	str	r3, [r7, #68]	; 0x44
 80064e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064ec:	4b86      	ldr	r3, [pc, #536]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	4a85      	ldr	r2, [pc, #532]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064f6:	6113      	str	r3, [r2, #16]
 80064f8:	4b83      	ldr	r3, [pc, #524]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064fa:	6919      	ldr	r1, [r3, #16]
 80064fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006500:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006504:	4a80      	ldr	r2, [pc, #512]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006506:	430b      	orrs	r3, r1
 8006508:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800650a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006516:	63bb      	str	r3, [r7, #56]	; 0x38
 8006518:	2300      	movs	r3, #0
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800651c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d009      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006526:	4b78      	ldr	r3, [pc, #480]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800652e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	4a74      	ldr	r2, [pc, #464]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006536:	430b      	orrs	r3, r1
 8006538:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800653a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006546:	633b      	str	r3, [r7, #48]	; 0x30
 8006548:	2300      	movs	r3, #0
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
 800654c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006550:	460b      	mov	r3, r1
 8006552:	4313      	orrs	r3, r2
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006556:	4b6c      	ldr	r3, [pc, #432]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800655e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006566:	4a68      	ldr	r2, [pc, #416]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006568:	430b      	orrs	r3, r1
 800656a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800656c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	2100      	movs	r1, #0
 8006576:	62b9      	str	r1, [r7, #40]	; 0x28
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006582:	460b      	mov	r3, r1
 8006584:	4313      	orrs	r3, r2
 8006586:	d011      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800658c:	3308      	adds	r3, #8
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fb79 	bl	8006c88 <RCCEx_PLL2_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800659c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	2100      	movs	r1, #0
 80065b6:	6239      	str	r1, [r7, #32]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
 80065be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d011      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065cc:	3308      	adds	r3, #8
 80065ce:	2101      	movs	r1, #1
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fb59 	bl	8006c88 <RCCEx_PLL2_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80065dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	2100      	movs	r1, #0
 80065f6:	61b9      	str	r1, [r7, #24]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	61fb      	str	r3, [r7, #28]
 80065fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d011      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660c:	3308      	adds	r3, #8
 800660e:	2102      	movs	r1, #2
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fb39 	bl	8006c88 <RCCEx_PLL2_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800661c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006628:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800662c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	2100      	movs	r1, #0
 8006636:	6139      	str	r1, [r7, #16]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d011      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664c:	3328      	adds	r3, #40	; 0x28
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fbcb 	bl	8006dec <RCCEx_PLL3_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800665c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006664:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006668:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800666c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	2100      	movs	r1, #0
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006682:	460b      	mov	r3, r1
 8006684:	4313      	orrs	r3, r2
 8006686:	d011      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668c:	3328      	adds	r3, #40	; 0x28
 800668e:	2101      	movs	r1, #1
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fbab 	bl	8006dec <RCCEx_PLL3_Config>
 8006696:	4603      	mov	r3, r0
 8006698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800669c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	2100      	movs	r1, #0
 80066b6:	6039      	str	r1, [r7, #0]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066c2:	460b      	mov	r3, r1
 80066c4:	4313      	orrs	r3, r2
 80066c6:	d011      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066cc:	3328      	adds	r3, #40	; 0x28
 80066ce:	2102      	movs	r1, #2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fb8b 	bl	8006dec <RCCEx_PLL3_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80066dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80066ec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006700:	46bd      	mov	sp, r7
 8006702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006706:	bf00      	nop
 8006708:	58024400 	.word	0x58024400

0800670c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006710:	f7fe fde2 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4904      	ldr	r1, [pc, #16]	; (8006734 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	58024400 	.word	0x58024400
 8006734:	0800aba8 	.word	0x0800aba8

08006738 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006740:	4ba1      	ldr	r3, [pc, #644]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800674a:	4b9f      	ldr	r3, [pc, #636]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	0b1b      	lsrs	r3, r3, #12
 8006750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006754:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006756:	4b9c      	ldr	r3, [pc, #624]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	091b      	lsrs	r3, r3, #4
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006762:	4b99      	ldr	r3, [pc, #612]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006766:	08db      	lsrs	r3, r3, #3
 8006768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8111 	beq.w	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b02      	cmp	r3, #2
 800678a:	f000 8083 	beq.w	8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b02      	cmp	r3, #2
 8006792:	f200 80a1 	bhi.w	80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d056      	beq.n	8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067a2:	e099      	b.n	80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a4:	4b88      	ldr	r3, [pc, #544]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d02d      	beq.n	800680c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b0:	4b85      	ldr	r3, [pc, #532]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	08db      	lsrs	r3, r3, #3
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	4a84      	ldr	r2, [pc, #528]	; (80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
 80067c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067da:	4b7b      	ldr	r3, [pc, #492]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800680a:	e087      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b6a      	ldr	r3, [pc, #424]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006832:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684e:	e065      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800685e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006862:	4b59      	ldr	r3, [pc, #356]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006872:	ed97 6a03 	vldr	s12, [r7, #12]
 8006876:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800687a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006892:	e043      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a6:	4b48      	ldr	r3, [pc, #288]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068d6:	e021      	b.n	800691c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ea:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80068fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800691a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800691c:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	0a5b      	lsrs	r3, r3, #9
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006936:	edd7 6a07 	vldr	s13, [r7, #28]
 800693a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006942:	ee17 2a90 	vmov	r2, s15
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800694a:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	0c1b      	lsrs	r3, r3, #16
 8006950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006964:	edd7 6a07 	vldr	s13, [r7, #28]
 8006968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006970:	ee17 2a90 	vmov	r2, s15
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006978:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	0e1b      	lsrs	r3, r3, #24
 800697e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800698e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006992:	edd7 6a07 	vldr	s13, [r7, #28]
 8006996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800699e:	ee17 2a90 	vmov	r2, s15
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069a6:	e008      	b.n	80069ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	609a      	str	r2, [r3, #8]
}
 80069ba:	bf00      	nop
 80069bc:	3724      	adds	r7, #36	; 0x24
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	58024400 	.word	0x58024400
 80069cc:	03d09000 	.word	0x03d09000
 80069d0:	46000000 	.word	0x46000000
 80069d4:	4c742400 	.word	0x4c742400
 80069d8:	4a742400 	.word	0x4a742400
 80069dc:	4af42400 	.word	0x4af42400

080069e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	; 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069e8:	4ba1      	ldr	r3, [pc, #644]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80069f2:	4b9f      	ldr	r3, [pc, #636]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	0d1b      	lsrs	r3, r3, #20
 80069f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069fe:	4b9c      	ldr	r3, [pc, #624]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a0a:	4b99      	ldr	r3, [pc, #612]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	08db      	lsrs	r3, r3, #3
 8006a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8111 	beq.w	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	f000 8083 	beq.w	8006b3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f200 80a1 	bhi.w	8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d056      	beq.n	8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a4a:	e099      	b.n	8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a4c:	4b88      	ldr	r3, [pc, #544]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02d      	beq.n	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a58:	4b85      	ldr	r3, [pc, #532]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	08db      	lsrs	r3, r3, #3
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	4a84      	ldr	r2, [pc, #528]	; (8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
 8006a68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b7b      	ldr	r3, [pc, #492]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ab2:	e087      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b6a      	ldr	r3, [pc, #424]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ada:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af6:	e065      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0a:	4b59      	ldr	r3, [pc, #356]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b3a:	e043      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4e:	4b48      	ldr	r3, [pc, #288]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b7e:	e021      	b.n	8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006bc4:	4b2a      	ldr	r3, [pc, #168]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bea:	ee17 2a90 	vmov	r2, s15
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006bf2:	4b1f      	ldr	r3, [pc, #124]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfc:	ee07 3a90 	vmov	s15, r3
 8006c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c18:	ee17 2a90 	vmov	r2, s15
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c20:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c46:	ee17 2a90 	vmov	r2, s15
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c4e:	e008      	b.n	8006c62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	609a      	str	r2, [r3, #8]
}
 8006c62:	bf00      	nop
 8006c64:	3724      	adds	r7, #36	; 0x24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	58024400 	.word	0x58024400
 8006c74:	03d09000 	.word	0x03d09000
 8006c78:	46000000 	.word	0x46000000
 8006c7c:	4c742400 	.word	0x4c742400
 8006c80:	4a742400 	.word	0x4a742400
 8006c84:	4af42400 	.word	0x4af42400

08006c88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c96:	4b53      	ldr	r3, [pc, #332]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d101      	bne.n	8006ca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e099      	b.n	8006dda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ca6:	4b4f      	ldr	r3, [pc, #316]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a4e      	ldr	r2, [pc, #312]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb2:	f7fa fe9b 	bl	80019ec <HAL_GetTick>
 8006cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cb8:	e008      	b.n	8006ccc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cba:	f7fa fe97 	bl	80019ec <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e086      	b.n	8006dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ccc:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f0      	bne.n	8006cba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cd8:	4b42      	ldr	r3, [pc, #264]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	031b      	lsls	r3, r3, #12
 8006ce6:	493f      	ldr	r1, [pc, #252]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	628b      	str	r3, [r1, #40]	; 0x28
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	025b      	lsls	r3, r3, #9
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	061b      	lsls	r3, r3, #24
 8006d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d1c:	4931      	ldr	r1, [pc, #196]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d22:	4b30      	ldr	r3, [pc, #192]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	492d      	ldr	r1, [pc, #180]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d34:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	f023 0220 	bic.w	r2, r3, #32
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	4928      	ldr	r1, [pc, #160]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d46:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	f023 0310 	bic.w	r3, r3, #16
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d56:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <RCCEx_PLL2_Config+0x160>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	69d2      	ldr	r2, [r2, #28]
 8006d5e:	00d2      	lsls	r2, r2, #3
 8006d60:	4920      	ldr	r1, [pc, #128]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d66:	4b1f      	ldr	r3, [pc, #124]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	f043 0310 	orr.w	r3, r3, #16
 8006d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d84:	e00f      	b.n	8006da6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d106      	bne.n	8006d9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d8c:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d98:	e005      	b.n	8006da6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006da6:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db2:	f7fa fe1b 	bl	80019ec <HAL_GetTick>
 8006db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006db8:	e008      	b.n	8006dcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dba:	f7fa fe17 	bl	80019ec <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e006      	b.n	8006dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400
 8006de8:	ffff0007 	.word	0xffff0007

08006dec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dfa:	4b53      	ldr	r3, [pc, #332]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d101      	bne.n	8006e0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e099      	b.n	8006f3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e0a:	4b4f      	ldr	r3, [pc, #316]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a4e      	ldr	r2, [pc, #312]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e16:	f7fa fde9 	bl	80019ec <HAL_GetTick>
 8006e1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e1c:	e008      	b.n	8006e30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e1e:	f7fa fde5 	bl	80019ec <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e086      	b.n	8006f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e30:	4b45      	ldr	r3, [pc, #276]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f0      	bne.n	8006e1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e3c:	4b42      	ldr	r3, [pc, #264]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	051b      	lsls	r3, r3, #20
 8006e4a:	493f      	ldr	r1, [pc, #252]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	025b      	lsls	r3, r3, #9
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	041b      	lsls	r3, r3, #16
 8006e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e80:	4931      	ldr	r1, [pc, #196]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e86:	4b30      	ldr	r3, [pc, #192]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	492d      	ldr	r1, [pc, #180]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e98:	4b2b      	ldr	r3, [pc, #172]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	4928      	ldr	r1, [pc, #160]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eaa:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a26      	ldr	r2, [pc, #152]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eb6:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eba:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <RCCEx_PLL3_Config+0x160>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	69d2      	ldr	r2, [r2, #28]
 8006ec2:	00d2      	lsls	r2, r2, #3
 8006ec4:	4920      	ldr	r1, [pc, #128]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006eca:	4b1f      	ldr	r3, [pc, #124]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006edc:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ee8:	e00f      	b.n	8006f0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d106      	bne.n	8006efe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ef0:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006efc:	e005      	b.n	8006f0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	4a11      	ldr	r2, [pc, #68]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a0e      	ldr	r2, [pc, #56]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f16:	f7fa fd69 	bl	80019ec <HAL_GetTick>
 8006f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f1c:	e008      	b.n	8006f30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f1e:	f7fa fd65 	bl	80019ec <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	ffff0007 	.word	0xffff0007

08006f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e049      	b.n	8006ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fa f968 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f000 feb4 	bl	8007cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d001      	beq.n	8007018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e054      	b.n	80070c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a26      	ldr	r2, [pc, #152]	; (80070d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d022      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007042:	d01d      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d018      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <HAL_TIM_Base_Start_IT+0xdc>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00e      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d009      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1b      	ldr	r2, [pc, #108]	; (80070e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d115      	bne.n	80070ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	4b19      	ldr	r3, [pc, #100]	; (80070ec <HAL_TIM_Base_Start_IT+0xec>)
 8007088:	4013      	ands	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b06      	cmp	r3, #6
 8007090:	d015      	beq.n	80070be <HAL_TIM_Base_Start_IT+0xbe>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007098:	d011      	beq.n	80070be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0201 	orr.w	r2, r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070aa:	e008      	b.n	80070be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0201 	orr.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e000      	b.n	80070c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40010000 	.word	0x40010000
 80070d4:	40000400 	.word	0x40000400
 80070d8:	40000800 	.word	0x40000800
 80070dc:	40000c00 	.word	0x40000c00
 80070e0:	40010400 	.word	0x40010400
 80070e4:	40001800 	.word	0x40001800
 80070e8:	40014000 	.word	0x40014000
 80070ec:	00010007 	.word	0x00010007

080070f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e049      	b.n	8007196 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f841 	bl	800719e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f000 fde4 	bl	8007cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <HAL_TIM_PWM_Start+0x24>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	bf14      	ite	ne
 80071d0:	2301      	movne	r3, #1
 80071d2:	2300      	moveq	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	e03c      	b.n	8007252 <HAL_TIM_PWM_Start+0x9e>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d109      	bne.n	80071f2 <HAL_TIM_PWM_Start+0x3e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	bf14      	ite	ne
 80071ea:	2301      	movne	r3, #1
 80071ec:	2300      	moveq	r3, #0
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	e02f      	b.n	8007252 <HAL_TIM_PWM_Start+0x9e>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d109      	bne.n	800720c <HAL_TIM_PWM_Start+0x58>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	e022      	b.n	8007252 <HAL_TIM_PWM_Start+0x9e>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b0c      	cmp	r3, #12
 8007210:	d109      	bne.n	8007226 <HAL_TIM_PWM_Start+0x72>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b01      	cmp	r3, #1
 800721c:	bf14      	ite	ne
 800721e:	2301      	movne	r3, #1
 8007220:	2300      	moveq	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	e015      	b.n	8007252 <HAL_TIM_PWM_Start+0x9e>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b10      	cmp	r3, #16
 800722a:	d109      	bne.n	8007240 <HAL_TIM_PWM_Start+0x8c>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b01      	cmp	r3, #1
 8007236:	bf14      	ite	ne
 8007238:	2301      	movne	r3, #1
 800723a:	2300      	moveq	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	e008      	b.n	8007252 <HAL_TIM_PWM_Start+0x9e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e0a1      	b.n	800739e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d104      	bne.n	800726a <HAL_TIM_PWM_Start+0xb6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007268:	e023      	b.n	80072b2 <HAL_TIM_PWM_Start+0xfe>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b04      	cmp	r3, #4
 800726e:	d104      	bne.n	800727a <HAL_TIM_PWM_Start+0xc6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007278:	e01b      	b.n	80072b2 <HAL_TIM_PWM_Start+0xfe>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d104      	bne.n	800728a <HAL_TIM_PWM_Start+0xd6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007288:	e013      	b.n	80072b2 <HAL_TIM_PWM_Start+0xfe>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b0c      	cmp	r3, #12
 800728e:	d104      	bne.n	800729a <HAL_TIM_PWM_Start+0xe6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007298:	e00b      	b.n	80072b2 <HAL_TIM_PWM_Start+0xfe>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b10      	cmp	r3, #16
 800729e:	d104      	bne.n	80072aa <HAL_TIM_PWM_Start+0xf6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072a8:	e003      	b.n	80072b2 <HAL_TIM_PWM_Start+0xfe>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2201      	movs	r2, #1
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 f938 	bl	8008530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a38      	ldr	r2, [pc, #224]	; (80073a8 <HAL_TIM_PWM_Start+0x1f4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x13e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a37      	ldr	r2, [pc, #220]	; (80073ac <HAL_TIM_PWM_Start+0x1f8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x13e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a35      	ldr	r2, [pc, #212]	; (80073b0 <HAL_TIM_PWM_Start+0x1fc>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x13e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a34      	ldr	r2, [pc, #208]	; (80073b4 <HAL_TIM_PWM_Start+0x200>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x13e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a32      	ldr	r2, [pc, #200]	; (80073b8 <HAL_TIM_PWM_Start+0x204>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d101      	bne.n	80072f6 <HAL_TIM_PWM_Start+0x142>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <HAL_TIM_PWM_Start+0x144>
 80072f6:	2300      	movs	r3, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800730a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a25      	ldr	r2, [pc, #148]	; (80073a8 <HAL_TIM_PWM_Start+0x1f4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d022      	beq.n	800735c <HAL_TIM_PWM_Start+0x1a8>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731e:	d01d      	beq.n	800735c <HAL_TIM_PWM_Start+0x1a8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a25      	ldr	r2, [pc, #148]	; (80073bc <HAL_TIM_PWM_Start+0x208>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d018      	beq.n	800735c <HAL_TIM_PWM_Start+0x1a8>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <HAL_TIM_PWM_Start+0x20c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d013      	beq.n	800735c <HAL_TIM_PWM_Start+0x1a8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <HAL_TIM_PWM_Start+0x210>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00e      	beq.n	800735c <HAL_TIM_PWM_Start+0x1a8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1a      	ldr	r2, [pc, #104]	; (80073ac <HAL_TIM_PWM_Start+0x1f8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d009      	beq.n	800735c <HAL_TIM_PWM_Start+0x1a8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1e      	ldr	r2, [pc, #120]	; (80073c8 <HAL_TIM_PWM_Start+0x214>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIM_PWM_Start+0x1a8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a16      	ldr	r2, [pc, #88]	; (80073b0 <HAL_TIM_PWM_Start+0x1fc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d115      	bne.n	8007388 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <HAL_TIM_PWM_Start+0x218>)
 8007364:	4013      	ands	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b06      	cmp	r3, #6
 800736c:	d015      	beq.n	800739a <HAL_TIM_PWM_Start+0x1e6>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007374:	d011      	beq.n	800739a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0201 	orr.w	r2, r2, #1
 8007384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007386:	e008      	b.n	800739a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0201 	orr.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e000      	b.n	800739c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40010000 	.word	0x40010000
 80073ac:	40010400 	.word	0x40010400
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40014400 	.word	0x40014400
 80073b8:	40014800 	.word	0x40014800
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800
 80073c4:	40000c00 	.word	0x40000c00
 80073c8:	40001800 	.word	0x40001800
 80073cc:	00010007 	.word	0x00010007

080073d0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <HAL_TIM_PWM_Start_IT+0x28>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e03c      	b.n	8007472 <HAL_TIM_PWM_Start_IT+0xa2>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d109      	bne.n	8007412 <HAL_TIM_PWM_Start_IT+0x42>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b01      	cmp	r3, #1
 8007408:	bf14      	ite	ne
 800740a:	2301      	movne	r3, #1
 800740c:	2300      	moveq	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	e02f      	b.n	8007472 <HAL_TIM_PWM_Start_IT+0xa2>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d109      	bne.n	800742c <HAL_TIM_PWM_Start_IT+0x5c>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e022      	b.n	8007472 <HAL_TIM_PWM_Start_IT+0xa2>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b0c      	cmp	r3, #12
 8007430:	d109      	bne.n	8007446 <HAL_TIM_PWM_Start_IT+0x76>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b01      	cmp	r3, #1
 800743c:	bf14      	ite	ne
 800743e:	2301      	movne	r3, #1
 8007440:	2300      	moveq	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	e015      	b.n	8007472 <HAL_TIM_PWM_Start_IT+0xa2>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b10      	cmp	r3, #16
 800744a:	d109      	bne.n	8007460 <HAL_TIM_PWM_Start_IT+0x90>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b01      	cmp	r3, #1
 8007456:	bf14      	ite	ne
 8007458:	2301      	movne	r3, #1
 800745a:	2300      	moveq	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	e008      	b.n	8007472 <HAL_TIM_PWM_Start_IT+0xa2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	bf14      	ite	ne
 800746c:	2301      	movne	r3, #1
 800746e:	2300      	moveq	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0ec      	b.n	8007654 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <HAL_TIM_PWM_Start_IT+0xba>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007488:	e023      	b.n	80074d2 <HAL_TIM_PWM_Start_IT+0x102>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b04      	cmp	r3, #4
 800748e:	d104      	bne.n	800749a <HAL_TIM_PWM_Start_IT+0xca>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007498:	e01b      	b.n	80074d2 <HAL_TIM_PWM_Start_IT+0x102>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d104      	bne.n	80074aa <HAL_TIM_PWM_Start_IT+0xda>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a8:	e013      	b.n	80074d2 <HAL_TIM_PWM_Start_IT+0x102>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b0c      	cmp	r3, #12
 80074ae:	d104      	bne.n	80074ba <HAL_TIM_PWM_Start_IT+0xea>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074b8:	e00b      	b.n	80074d2 <HAL_TIM_PWM_Start_IT+0x102>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d104      	bne.n	80074ca <HAL_TIM_PWM_Start_IT+0xfa>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c8:	e003      	b.n	80074d2 <HAL_TIM_PWM_Start_IT+0x102>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	d841      	bhi.n	800755c <HAL_TIM_PWM_Start_IT+0x18c>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <HAL_TIM_PWM_Start_IT+0x110>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007515 	.word	0x08007515
 80074e4:	0800755d 	.word	0x0800755d
 80074e8:	0800755d 	.word	0x0800755d
 80074ec:	0800755d 	.word	0x0800755d
 80074f0:	08007527 	.word	0x08007527
 80074f4:	0800755d 	.word	0x0800755d
 80074f8:	0800755d 	.word	0x0800755d
 80074fc:	0800755d 	.word	0x0800755d
 8007500:	08007539 	.word	0x08007539
 8007504:	0800755d 	.word	0x0800755d
 8007508:	0800755d 	.word	0x0800755d
 800750c:	0800755d 	.word	0x0800755d
 8007510:	0800754b 	.word	0x0800754b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0202 	orr.w	r2, r2, #2
 8007522:	60da      	str	r2, [r3, #12]
      break;
 8007524:	e01d      	b.n	8007562 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0204 	orr.w	r2, r2, #4
 8007534:	60da      	str	r2, [r3, #12]
      break;
 8007536:	e014      	b.n	8007562 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0208 	orr.w	r2, r2, #8
 8007546:	60da      	str	r2, [r3, #12]
      break;
 8007548:	e00b      	b.n	8007562 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0210 	orr.w	r2, r2, #16
 8007558:	60da      	str	r2, [r3, #12]
      break;
 800755a:	e002      	b.n	8007562 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
      break;
 8007560:	bf00      	nop
  }

  if (status == HAL_OK)
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d174      	bne.n	8007652 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2201      	movs	r2, #1
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 ffdd 	bl	8008530 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a38      	ldr	r2, [pc, #224]	; (800765c <HAL_TIM_PWM_Start_IT+0x28c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d013      	beq.n	80075a8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a36      	ldr	r2, [pc, #216]	; (8007660 <HAL_TIM_PWM_Start_IT+0x290>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00e      	beq.n	80075a8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a35      	ldr	r2, [pc, #212]	; (8007664 <HAL_TIM_PWM_Start_IT+0x294>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d009      	beq.n	80075a8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a33      	ldr	r2, [pc, #204]	; (8007668 <HAL_TIM_PWM_Start_IT+0x298>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a32      	ldr	r2, [pc, #200]	; (800766c <HAL_TIM_PWM_Start_IT+0x29c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d101      	bne.n	80075ac <HAL_TIM_PWM_Start_IT+0x1dc>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e000      	b.n	80075ae <HAL_TIM_PWM_Start_IT+0x1de>
 80075ac:	2300      	movs	r3, #0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a25      	ldr	r2, [pc, #148]	; (800765c <HAL_TIM_PWM_Start_IT+0x28c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d022      	beq.n	8007612 <HAL_TIM_PWM_Start_IT+0x242>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d4:	d01d      	beq.n	8007612 <HAL_TIM_PWM_Start_IT+0x242>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a25      	ldr	r2, [pc, #148]	; (8007670 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d018      	beq.n	8007612 <HAL_TIM_PWM_Start_IT+0x242>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a23      	ldr	r2, [pc, #140]	; (8007674 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <HAL_TIM_PWM_Start_IT+0x242>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a22      	ldr	r2, [pc, #136]	; (8007678 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00e      	beq.n	8007612 <HAL_TIM_PWM_Start_IT+0x242>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a19      	ldr	r2, [pc, #100]	; (8007660 <HAL_TIM_PWM_Start_IT+0x290>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d009      	beq.n	8007612 <HAL_TIM_PWM_Start_IT+0x242>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1e      	ldr	r2, [pc, #120]	; (800767c <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d004      	beq.n	8007612 <HAL_TIM_PWM_Start_IT+0x242>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <HAL_TIM_PWM_Start_IT+0x294>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d115      	bne.n	800763e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	4b19      	ldr	r3, [pc, #100]	; (8007680 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800761a:	4013      	ands	r3, r2
 800761c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b06      	cmp	r3, #6
 8007622:	d015      	beq.n	8007650 <HAL_TIM_PWM_Start_IT+0x280>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762a:	d011      	beq.n	8007650 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763c:	e008      	b.n	8007650 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0201 	orr.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e000      	b.n	8007652 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007650:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40010000 	.word	0x40010000
 8007660:	40010400 	.word	0x40010400
 8007664:	40014000 	.word	0x40014000
 8007668:	40014400 	.word	0x40014400
 800766c:	40014800 	.word	0x40014800
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40001800 	.word	0x40001800
 8007680:	00010007 	.word	0x00010007

08007684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d020      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01b      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0202 	mvn.w	r2, #2
 80076b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 faf6 	bl	8007cc0 <HAL_TIM_IC_CaptureCallback>
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fae8 	bl	8007cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 faf9 	bl	8007cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d020      	beq.n	8007734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01b      	beq.n	8007734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0204 	mvn.w	r2, #4
 8007704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fad0 	bl	8007cc0 <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fac2 	bl	8007cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fad3 	bl	8007cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d020      	beq.n	8007780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01b      	beq.n	8007780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0208 	mvn.w	r2, #8
 8007750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2204      	movs	r2, #4
 8007756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 faaa 	bl	8007cc0 <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa9c 	bl	8007cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 faad 	bl	8007cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b00      	cmp	r3, #0
 8007788:	d020      	beq.n	80077cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01b      	beq.n	80077cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0210 	mvn.w	r2, #16
 800779c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2208      	movs	r2, #8
 80077a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa84 	bl	8007cc0 <HAL_TIM_IC_CaptureCallback>
 80077b8:	e005      	b.n	80077c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa76 	bl	8007cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa87 	bl	8007cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00c      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0201 	mvn.w	r2, #1
 80077e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7f9 fa7c 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00c      	beq.n	800781e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 ff47 	bl	80086ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00c      	beq.n	8007842 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800783a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 ff3f 	bl	80086c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00c      	beq.n	8007866 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800785e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa41 	bl	8007ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00c      	beq.n	800788a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f06f 0220 	mvn.w	r2, #32
 8007882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 ff07 	bl	8008698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d101      	bne.n	80078b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e0ff      	b.n	8007ab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b14      	cmp	r3, #20
 80078be:	f200 80f0 	bhi.w	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	0800791d 	.word	0x0800791d
 80078cc:	08007aa3 	.word	0x08007aa3
 80078d0:	08007aa3 	.word	0x08007aa3
 80078d4:	08007aa3 	.word	0x08007aa3
 80078d8:	0800795d 	.word	0x0800795d
 80078dc:	08007aa3 	.word	0x08007aa3
 80078e0:	08007aa3 	.word	0x08007aa3
 80078e4:	08007aa3 	.word	0x08007aa3
 80078e8:	0800799f 	.word	0x0800799f
 80078ec:	08007aa3 	.word	0x08007aa3
 80078f0:	08007aa3 	.word	0x08007aa3
 80078f4:	08007aa3 	.word	0x08007aa3
 80078f8:	080079df 	.word	0x080079df
 80078fc:	08007aa3 	.word	0x08007aa3
 8007900:	08007aa3 	.word	0x08007aa3
 8007904:	08007aa3 	.word	0x08007aa3
 8007908:	08007a21 	.word	0x08007a21
 800790c:	08007aa3 	.word	0x08007aa3
 8007910:	08007aa3 	.word	0x08007aa3
 8007914:	08007aa3 	.word	0x08007aa3
 8007918:	08007a61 	.word	0x08007a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fa90 	bl	8007e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0208 	orr.w	r2, r2, #8
 8007936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699a      	ldr	r2, [r3, #24]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0204 	bic.w	r2, r2, #4
 8007946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6999      	ldr	r1, [r3, #24]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	619a      	str	r2, [r3, #24]
      break;
 800795a:	e0a5      	b.n	8007aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fb00 	bl	8007f68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699a      	ldr	r2, [r3, #24]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699a      	ldr	r2, [r3, #24]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6999      	ldr	r1, [r3, #24]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	021a      	lsls	r2, r3, #8
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	619a      	str	r2, [r3, #24]
      break;
 800799c:	e084      	b.n	8007aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 fb69 	bl	800807c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69da      	ldr	r2, [r3, #28]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0208 	orr.w	r2, r2, #8
 80079b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69da      	ldr	r2, [r3, #28]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0204 	bic.w	r2, r2, #4
 80079c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69d9      	ldr	r1, [r3, #28]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	61da      	str	r2, [r3, #28]
      break;
 80079dc:	e064      	b.n	8007aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68b9      	ldr	r1, [r7, #8]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fbd1 	bl	800818c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69da      	ldr	r2, [r3, #28]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69d9      	ldr	r1, [r3, #28]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	021a      	lsls	r2, r3, #8
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	61da      	str	r2, [r3, #28]
      break;
 8007a1e:	e043      	b.n	8007aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fc1a 	bl	8008260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0208 	orr.w	r2, r2, #8
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0204 	bic.w	r2, r2, #4
 8007a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a5e:	e023      	b.n	8007aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fc5e 	bl	8008328 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	021a      	lsls	r2, r3, #8
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007aa0:	e002      	b.n	8007aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop

08007abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e0dc      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x1d6>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4b6a      	ldr	r3, [pc, #424]	; (8007c9c <HAL_TIM_ConfigClockSource+0x1e0>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a64      	ldr	r2, [pc, #400]	; (8007ca0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	f000 80a9 	beq.w	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b14:	4a62      	ldr	r2, [pc, #392]	; (8007ca0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	f200 80ae 	bhi.w	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b1c:	4a61      	ldr	r2, [pc, #388]	; (8007ca4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	f000 80a1 	beq.w	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b24:	4a5f      	ldr	r2, [pc, #380]	; (8007ca4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	f200 80a6 	bhi.w	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b2c:	4a5e      	ldr	r2, [pc, #376]	; (8007ca8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	f000 8099 	beq.w	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b34:	4a5c      	ldr	r2, [pc, #368]	; (8007ca8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f200 809e 	bhi.w	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b40:	f000 8091 	beq.w	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b48:	f200 8096 	bhi.w	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b50:	f000 8089 	beq.w	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b58:	f200 808e 	bhi.w	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b60:	d03e      	beq.n	8007be0 <HAL_TIM_ConfigClockSource+0x124>
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b66:	f200 8087 	bhi.w	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6e:	f000 8086 	beq.w	8007c7e <HAL_TIM_ConfigClockSource+0x1c2>
 8007b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b76:	d87f      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b78:	2b70      	cmp	r3, #112	; 0x70
 8007b7a:	d01a      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0xf6>
 8007b7c:	2b70      	cmp	r3, #112	; 0x70
 8007b7e:	d87b      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b80:	2b60      	cmp	r3, #96	; 0x60
 8007b82:	d050      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0x16a>
 8007b84:	2b60      	cmp	r3, #96	; 0x60
 8007b86:	d877      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b88:	2b50      	cmp	r3, #80	; 0x50
 8007b8a:	d03c      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x14a>
 8007b8c:	2b50      	cmp	r3, #80	; 0x50
 8007b8e:	d873      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	d058      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0x18a>
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d86f      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b98:	2b30      	cmp	r3, #48	; 0x30
 8007b9a:	d064      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d86b      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d060      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d867      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d05c      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d05a      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bb0:	e062      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f000 fc95 	bl	80084f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	609a      	str	r2, [r3, #8]
      break;
 8007bde:	e04f      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	6899      	ldr	r1, [r3, #8]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f000 fc7e 	bl	80084f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c02:	609a      	str	r2, [r3, #8]
      break;
 8007c04:	e03c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6859      	ldr	r1, [r3, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f000 fbee 	bl	80083f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2150      	movs	r1, #80	; 0x50
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fc48 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c24:	e02c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6859      	ldr	r1, [r3, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	461a      	mov	r2, r3
 8007c34:	f000 fc0d 	bl	8008452 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2160      	movs	r1, #96	; 0x60
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fc38 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c44:	e01c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6859      	ldr	r1, [r3, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f000 fbce 	bl	80083f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2140      	movs	r1, #64	; 0x40
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fc28 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c64:	e00c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f000 fc1f 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c76:	e003      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7c:	e000      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	ffceff88 	.word	0xffceff88
 8007ca0:	00100040 	.word	0x00100040
 8007ca4:	00100030 	.word	0x00100030
 8007ca8:	00100020 	.word	0x00100020

08007cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a46      	ldr	r2, [pc, #280]	; (8007e28 <TIM_Base_SetConfig+0x12c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d013      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1a:	d00f      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a43      	ldr	r2, [pc, #268]	; (8007e2c <TIM_Base_SetConfig+0x130>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00b      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a42      	ldr	r2, [pc, #264]	; (8007e30 <TIM_Base_SetConfig+0x134>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d007      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a41      	ldr	r2, [pc, #260]	; (8007e34 <TIM_Base_SetConfig+0x138>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a40      	ldr	r2, [pc, #256]	; (8007e38 <TIM_Base_SetConfig+0x13c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d108      	bne.n	8007d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a35      	ldr	r2, [pc, #212]	; (8007e28 <TIM_Base_SetConfig+0x12c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d01f      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5c:	d01b      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a32      	ldr	r2, [pc, #200]	; (8007e2c <TIM_Base_SetConfig+0x130>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d017      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a31      	ldr	r2, [pc, #196]	; (8007e30 <TIM_Base_SetConfig+0x134>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d013      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a30      	ldr	r2, [pc, #192]	; (8007e34 <TIM_Base_SetConfig+0x138>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00f      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a2f      	ldr	r2, [pc, #188]	; (8007e38 <TIM_Base_SetConfig+0x13c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2e      	ldr	r2, [pc, #184]	; (8007e3c <TIM_Base_SetConfig+0x140>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2d      	ldr	r2, [pc, #180]	; (8007e40 <TIM_Base_SetConfig+0x144>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2c      	ldr	r2, [pc, #176]	; (8007e44 <TIM_Base_SetConfig+0x148>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d108      	bne.n	8007da8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a16      	ldr	r2, [pc, #88]	; (8007e28 <TIM_Base_SetConfig+0x12c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00f      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a18      	ldr	r2, [pc, #96]	; (8007e38 <TIM_Base_SetConfig+0x13c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00b      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <TIM_Base_SetConfig+0x140>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d007      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <TIM_Base_SetConfig+0x144>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d003      	beq.n	8007df4 <TIM_Base_SetConfig+0xf8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a15      	ldr	r2, [pc, #84]	; (8007e44 <TIM_Base_SetConfig+0x148>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d103      	bne.n	8007dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d105      	bne.n	8007e1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f023 0201 	bic.w	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40010000 	.word	0x40010000
 8007e2c:	40000400 	.word	0x40000400
 8007e30:	40000800 	.word	0x40000800
 8007e34:	40000c00 	.word	0x40000c00
 8007e38:	40010400 	.word	0x40010400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40014800 	.word	0x40014800

08007e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	f023 0201 	bic.w	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4b37      	ldr	r3, [pc, #220]	; (8007f50 <TIM_OC1_SetConfig+0x108>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 0302 	bic.w	r3, r3, #2
 8007e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a2d      	ldr	r2, [pc, #180]	; (8007f54 <TIM_OC1_SetConfig+0x10c>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00f      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a2c      	ldr	r2, [pc, #176]	; (8007f58 <TIM_OC1_SetConfig+0x110>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00b      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a2b      	ldr	r2, [pc, #172]	; (8007f5c <TIM_OC1_SetConfig+0x114>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d007      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a2a      	ldr	r2, [pc, #168]	; (8007f60 <TIM_OC1_SetConfig+0x118>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <TIM_OC1_SetConfig+0x11c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d10c      	bne.n	8007ede <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f023 0308 	bic.w	r3, r3, #8
 8007eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f023 0304 	bic.w	r3, r3, #4
 8007edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a1c      	ldr	r2, [pc, #112]	; (8007f54 <TIM_OC1_SetConfig+0x10c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00f      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1b      	ldr	r2, [pc, #108]	; (8007f58 <TIM_OC1_SetConfig+0x110>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00b      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1a      	ldr	r2, [pc, #104]	; (8007f5c <TIM_OC1_SetConfig+0x114>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <TIM_OC1_SetConfig+0x118>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <TIM_OC1_SetConfig+0x11c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d111      	bne.n	8007f2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	621a      	str	r2, [r3, #32]
}
 8007f44:	bf00      	nop
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	fffeff8f 	.word	0xfffeff8f
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800

08007f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	f023 0210 	bic.w	r2, r3, #16
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4b34      	ldr	r3, [pc, #208]	; (8008064 <TIM_OC2_SetConfig+0xfc>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 0320 	bic.w	r3, r3, #32
 8007fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a29      	ldr	r2, [pc, #164]	; (8008068 <TIM_OC2_SetConfig+0x100>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_OC2_SetConfig+0x68>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a28      	ldr	r2, [pc, #160]	; (800806c <TIM_OC2_SetConfig+0x104>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10d      	bne.n	8007fec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a1e      	ldr	r2, [pc, #120]	; (8008068 <TIM_OC2_SetConfig+0x100>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00f      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1d      	ldr	r2, [pc, #116]	; (800806c <TIM_OC2_SetConfig+0x104>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00b      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a1c      	ldr	r2, [pc, #112]	; (8008070 <TIM_OC2_SetConfig+0x108>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d007      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <TIM_OC2_SetConfig+0x10c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <TIM_OC2_SetConfig+0x110>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d113      	bne.n	800803c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800801a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	feff8fff 	.word	0xfeff8fff
 8008068:	40010000 	.word	0x40010000
 800806c:	40010400 	.word	0x40010400
 8008070:	40014000 	.word	0x40014000
 8008074:	40014400 	.word	0x40014400
 8008078:	40014800 	.word	0x40014800

0800807c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4b33      	ldr	r3, [pc, #204]	; (8008174 <TIM_OC3_SetConfig+0xf8>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0303 	bic.w	r3, r3, #3
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a28      	ldr	r2, [pc, #160]	; (8008178 <TIM_OC3_SetConfig+0xfc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_OC3_SetConfig+0x66>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a27      	ldr	r2, [pc, #156]	; (800817c <TIM_OC3_SetConfig+0x100>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d10d      	bne.n	80080fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <TIM_OC3_SetConfig+0xfc>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00f      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a1c      	ldr	r2, [pc, #112]	; (800817c <TIM_OC3_SetConfig+0x100>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00b      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <TIM_OC3_SetConfig+0x104>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <TIM_OC3_SetConfig+0x108>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a19      	ldr	r2, [pc, #100]	; (8008188 <TIM_OC3_SetConfig+0x10c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d113      	bne.n	800814e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	621a      	str	r2, [r3, #32]
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	fffeff8f 	.word	0xfffeff8f
 8008178:	40010000 	.word	0x40010000
 800817c:	40010400 	.word	0x40010400
 8008180:	40014000 	.word	0x40014000
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800

0800818c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4b24      	ldr	r3, [pc, #144]	; (8008248 <TIM_OC4_SetConfig+0xbc>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	031b      	lsls	r3, r3, #12
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a19      	ldr	r2, [pc, #100]	; (800824c <TIM_OC4_SetConfig+0xc0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00f      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a18      	ldr	r2, [pc, #96]	; (8008250 <TIM_OC4_SetConfig+0xc4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00b      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a17      	ldr	r2, [pc, #92]	; (8008254 <TIM_OC4_SetConfig+0xc8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d007      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a16      	ldr	r2, [pc, #88]	; (8008258 <TIM_OC4_SetConfig+0xcc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a15      	ldr	r2, [pc, #84]	; (800825c <TIM_OC4_SetConfig+0xd0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d109      	bne.n	8008220 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	019b      	lsls	r3, r3, #6
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	feff8fff 	.word	0xfeff8fff
 800824c:	40010000 	.word	0x40010000
 8008250:	40010400 	.word	0x40010400
 8008254:	40014000 	.word	0x40014000
 8008258:	40014400 	.word	0x40014400
 800825c:	40014800 	.word	0x40014800

08008260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4b21      	ldr	r3, [pc, #132]	; (8008310 <TIM_OC5_SetConfig+0xb0>)
 800828c:	4013      	ands	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a18      	ldr	r2, [pc, #96]	; (8008314 <TIM_OC5_SetConfig+0xb4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00f      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <TIM_OC5_SetConfig+0xb8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00b      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <TIM_OC5_SetConfig+0xbc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a15      	ldr	r2, [pc, #84]	; (8008320 <TIM_OC5_SetConfig+0xc0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a14      	ldr	r2, [pc, #80]	; (8008324 <TIM_OC5_SetConfig+0xc4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d109      	bne.n	80082ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	621a      	str	r2, [r3, #32]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	fffeff8f 	.word	0xfffeff8f
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400
 800831c:	40014000 	.word	0x40014000
 8008320:	40014400 	.word	0x40014400
 8008324:	40014800 	.word	0x40014800

08008328 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4b22      	ldr	r3, [pc, #136]	; (80083dc <TIM_OC6_SetConfig+0xb4>)
 8008354:	4013      	ands	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800836a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	051b      	lsls	r3, r3, #20
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a19      	ldr	r2, [pc, #100]	; (80083e0 <TIM_OC6_SetConfig+0xb8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00f      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a18      	ldr	r2, [pc, #96]	; (80083e4 <TIM_OC6_SetConfig+0xbc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00b      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a17      	ldr	r2, [pc, #92]	; (80083e8 <TIM_OC6_SetConfig+0xc0>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a16      	ldr	r2, [pc, #88]	; (80083ec <TIM_OC6_SetConfig+0xc4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a15      	ldr	r2, [pc, #84]	; (80083f0 <TIM_OC6_SetConfig+0xc8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d109      	bne.n	80083b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	029b      	lsls	r3, r3, #10
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	feff8fff 	.word	0xfeff8fff
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40010400 	.word	0x40010400
 80083e8:	40014000 	.word	0x40014000
 80083ec:	40014400 	.word	0x40014400
 80083f0:	40014800 	.word	0x40014800

080083f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800841e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f023 030a 	bic.w	r3, r3, #10
 8008430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	f023 0210 	bic.w	r2, r3, #16
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800847c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	031b      	lsls	r3, r3, #12
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800848e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <TIM_ITRx_SetConfig+0x38>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f043 0307 	orr.w	r3, r3, #7
 80084d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	609a      	str	r2, [r3, #8]
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	ffcfff8f 	.word	0xffcfff8f

080084f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800850a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	021a      	lsls	r2, r3, #8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	431a      	orrs	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4313      	orrs	r3, r2
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	609a      	str	r2, [r3, #8]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	2201      	movs	r2, #1
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	43db      	mvns	r3, r3
 8008552:	401a      	ands	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	fa01 f303 	lsl.w	r3, r1, r3
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008590:	2302      	movs	r3, #2
 8008592:	e06d      	b.n	8008670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a30      	ldr	r2, [pc, #192]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2f      	ldr	r2, [pc, #188]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d108      	bne.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a20      	ldr	r2, [pc, #128]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d022      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008606:	d01d      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d018      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a1c      	ldr	r2, [pc, #112]	; (8008688 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d013      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1a      	ldr	r2, [pc, #104]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00e      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a15      	ldr	r2, [pc, #84]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d009      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a16      	ldr	r2, [pc, #88]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d004      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a15      	ldr	r2, [pc, #84]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d10c      	bne.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800864a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	4313      	orrs	r3, r2
 8008654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	40010000 	.word	0x40010000
 8008680:	40010400 	.word	0x40010400
 8008684:	40000400 	.word	0x40000400
 8008688:	40000800 	.word	0x40000800
 800868c:	40000c00 	.word	0x40000c00
 8008690:	40001800 	.word	0x40001800
 8008694:	40014000 	.word	0x40014000

08008698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e042      	b.n	800876c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7f8 ff19 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2224      	movs	r2, #36	; 0x24
 8008702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0201 	bic.w	r2, r2, #1
 8008714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 ff82 	bl	8009628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f913 	bl	8008950 <UART_SetConfig>
 800872a:	4603      	mov	r3, r0
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e01b      	b.n	800876c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 f801 	bl	800976c <UART_CheckIdleState>
 800876a:	4603      	mov	r3, r0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af02      	add	r7, sp, #8
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	2b20      	cmp	r3, #32
 800878c:	d17b      	bne.n	8008886 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <HAL_UART_Transmit+0x26>
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e074      	b.n	8008888 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2221      	movs	r2, #33	; 0x21
 80087aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ae:	f7f9 f91d 	bl	80019ec <HAL_GetTick>
 80087b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	88fa      	ldrh	r2, [r7, #6]
 80087b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087cc:	d108      	bne.n	80087e0 <HAL_UART_Transmit+0x6c>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	e003      	b.n	80087e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087e8:	e030      	b.n	800884c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2200      	movs	r2, #0
 80087f2:	2180      	movs	r1, #128	; 0x80
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f001 f863 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e03d      	b.n	8008888 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008820:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	3302      	adds	r3, #2
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	e007      	b.n	800883a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	3301      	adds	r3, #1
 8008838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008852:	b29b      	uxth	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1c8      	bne.n	80087ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2200      	movs	r2, #0
 8008860:	2140      	movs	r1, #64	; 0x40
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f001 f82c 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e006      	b.n	8008888 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2220      	movs	r2, #32
 800887e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	e000      	b.n	8008888 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008886:	2302      	movs	r3, #2
  }
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	; 0x28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d137      	bne.n	8008918 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <HAL_UART_Receive_DMA+0x24>
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e030      	b.n	800891a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a18      	ldr	r2, [pc, #96]	; (8008924 <HAL_UART_Receive_DMA+0x94>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d01f      	beq.n	8008908 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d018      	beq.n	8008908 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	613b      	str	r3, [r7, #16]
   return(result);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	623b      	str	r3, [r7, #32]
 80088f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	69f9      	ldr	r1, [r7, #28]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	61bb      	str	r3, [r7, #24]
   return(result);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e6      	bne.n	80088d6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	461a      	mov	r2, r3
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f001 f844 	bl	800999c <UART_Start_Receive_DMA>
 8008914:	4603      	mov	r3, r0
 8008916:	e000      	b.n	800891a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008918:	2302      	movs	r3, #2
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	3728      	adds	r7, #40	; 0x28
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	58000c00 	.word	0x58000c00

08008928 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008954:	b092      	sub	sp, #72	; 0x48
 8008956:	af00      	add	r7, sp, #0
 8008958:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	431a      	orrs	r2, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	431a      	orrs	r2, r3
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	4313      	orrs	r3, r2
 8008976:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4bbe      	ldr	r3, [pc, #760]	; (8008c78 <UART_SetConfig+0x328>)
 8008980:	4013      	ands	r3, r2
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008988:	430b      	orrs	r3, r1
 800898a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4ab3      	ldr	r2, [pc, #716]	; (8008c7c <UART_SetConfig+0x32c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089b8:	4313      	orrs	r3, r2
 80089ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	4baf      	ldr	r3, [pc, #700]	; (8008c80 <UART_SetConfig+0x330>)
 80089c4:	4013      	ands	r3, r2
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	f023 010f 	bic.w	r1, r3, #15
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4aa6      	ldr	r2, [pc, #664]	; (8008c84 <UART_SetConfig+0x334>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d177      	bne.n	8008ae0 <UART_SetConfig+0x190>
 80089f0:	4ba5      	ldr	r3, [pc, #660]	; (8008c88 <UART_SetConfig+0x338>)
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089f8:	2b28      	cmp	r3, #40	; 0x28
 80089fa:	d86d      	bhi.n	8008ad8 <UART_SetConfig+0x188>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0xb4>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008aa9 	.word	0x08008aa9
 8008a08:	08008ad9 	.word	0x08008ad9
 8008a0c:	08008ad9 	.word	0x08008ad9
 8008a10:	08008ad9 	.word	0x08008ad9
 8008a14:	08008ad9 	.word	0x08008ad9
 8008a18:	08008ad9 	.word	0x08008ad9
 8008a1c:	08008ad9 	.word	0x08008ad9
 8008a20:	08008ad9 	.word	0x08008ad9
 8008a24:	08008ab1 	.word	0x08008ab1
 8008a28:	08008ad9 	.word	0x08008ad9
 8008a2c:	08008ad9 	.word	0x08008ad9
 8008a30:	08008ad9 	.word	0x08008ad9
 8008a34:	08008ad9 	.word	0x08008ad9
 8008a38:	08008ad9 	.word	0x08008ad9
 8008a3c:	08008ad9 	.word	0x08008ad9
 8008a40:	08008ad9 	.word	0x08008ad9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008ad9 	.word	0x08008ad9
 8008a4c:	08008ad9 	.word	0x08008ad9
 8008a50:	08008ad9 	.word	0x08008ad9
 8008a54:	08008ad9 	.word	0x08008ad9
 8008a58:	08008ad9 	.word	0x08008ad9
 8008a5c:	08008ad9 	.word	0x08008ad9
 8008a60:	08008ad9 	.word	0x08008ad9
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008ad9 	.word	0x08008ad9
 8008a6c:	08008ad9 	.word	0x08008ad9
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008ad9 	.word	0x08008ad9
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008ad9 	.word	0x08008ad9
 8008a80:	08008ad9 	.word	0x08008ad9
 8008a84:	08008ac9 	.word	0x08008ac9
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008ad9 	.word	0x08008ad9
 8008a94:	08008ad9 	.word	0x08008ad9
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008ad9 	.word	0x08008ad9
 8008aa0:	08008ad9 	.word	0x08008ad9
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e326      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e322      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e31e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e31a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ac8:	2320      	movs	r3, #32
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e316      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e312      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e30e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a69      	ldr	r2, [pc, #420]	; (8008c8c <UART_SetConfig+0x33c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d130      	bne.n	8008b4c <UART_SetConfig+0x1fc>
 8008aea:	4b67      	ldr	r3, [pc, #412]	; (8008c88 <UART_SetConfig+0x338>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d826      	bhi.n	8008b44 <UART_SetConfig+0x1f4>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <UART_SetConfig+0x1ac>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b15 	.word	0x08008b15
 8008b00:	08008b1d 	.word	0x08008b1d
 8008b04:	08008b25 	.word	0x08008b25
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b3d 	.word	0x08008b3d
 8008b14:	2300      	movs	r3, #0
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e2f0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e2ec      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b24:	2308      	movs	r3, #8
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e2e8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e2e4      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b34:	2320      	movs	r3, #32
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e2e0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b3c:	2340      	movs	r3, #64	; 0x40
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e2dc      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e2d8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a4f      	ldr	r2, [pc, #316]	; (8008c90 <UART_SetConfig+0x340>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d130      	bne.n	8008bb8 <UART_SetConfig+0x268>
 8008b56:	4b4c      	ldr	r3, [pc, #304]	; (8008c88 <UART_SetConfig+0x338>)
 8008b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d826      	bhi.n	8008bb0 <UART_SetConfig+0x260>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0x218>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	2300      	movs	r3, #0
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e2ba      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e2b6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e2b2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e2ae      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e2aa      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e2a6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bb0:	2380      	movs	r3, #128	; 0x80
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e2a2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a35      	ldr	r2, [pc, #212]	; (8008c94 <UART_SetConfig+0x344>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d130      	bne.n	8008c24 <UART_SetConfig+0x2d4>
 8008bc2:	4b31      	ldr	r3, [pc, #196]	; (8008c88 <UART_SetConfig+0x338>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d826      	bhi.n	8008c1c <UART_SetConfig+0x2cc>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <UART_SetConfig+0x284>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e284      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e280      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e27c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e278      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c12:	e274      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e270      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e26c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a1b      	ldr	r2, [pc, #108]	; (8008c98 <UART_SetConfig+0x348>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d142      	bne.n	8008cb4 <UART_SetConfig+0x364>
 8008c2e:	4b16      	ldr	r3, [pc, #88]	; (8008c88 <UART_SetConfig+0x338>)
 8008c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d838      	bhi.n	8008cac <UART_SetConfig+0x35c>
 8008c3a:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <UART_SetConfig+0x2f0>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c61 	.word	0x08008c61
 8008c48:	08008c69 	.word	0x08008c69
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c9d 	.word	0x08008c9d
 8008c54:	08008ca5 	.word	0x08008ca5
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5e:	e24e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c60:	2304      	movs	r3, #4
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c66:	e24a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c68:	2308      	movs	r3, #8
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6e:	e246      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c76:	e242      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c78:	cfff69f3 	.word	0xcfff69f3
 8008c7c:	58000c00 	.word	0x58000c00
 8008c80:	11fff4ff 	.word	0x11fff4ff
 8008c84:	40011000 	.word	0x40011000
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	40004400 	.word	0x40004400
 8008c90:	40004800 	.word	0x40004800
 8008c94:	40004c00 	.word	0x40004c00
 8008c98:	40005000 	.word	0x40005000
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e22c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ca4:	2340      	movs	r3, #64	; 0x40
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e228      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008cac:	2380      	movs	r3, #128	; 0x80
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e224      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4ab1      	ldr	r2, [pc, #708]	; (8008f80 <UART_SetConfig+0x630>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d176      	bne.n	8008dac <UART_SetConfig+0x45c>
 8008cbe:	4bb1      	ldr	r3, [pc, #708]	; (8008f84 <UART_SetConfig+0x634>)
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cc6:	2b28      	cmp	r3, #40	; 0x28
 8008cc8:	d86c      	bhi.n	8008da4 <UART_SetConfig+0x454>
 8008cca:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <UART_SetConfig+0x380>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008d75 	.word	0x08008d75
 8008cd4:	08008da5 	.word	0x08008da5
 8008cd8:	08008da5 	.word	0x08008da5
 8008cdc:	08008da5 	.word	0x08008da5
 8008ce0:	08008da5 	.word	0x08008da5
 8008ce4:	08008da5 	.word	0x08008da5
 8008ce8:	08008da5 	.word	0x08008da5
 8008cec:	08008da5 	.word	0x08008da5
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008da5 	.word	0x08008da5
 8008cf8:	08008da5 	.word	0x08008da5
 8008cfc:	08008da5 	.word	0x08008da5
 8008d00:	08008da5 	.word	0x08008da5
 8008d04:	08008da5 	.word	0x08008da5
 8008d08:	08008da5 	.word	0x08008da5
 8008d0c:	08008da5 	.word	0x08008da5
 8008d10:	08008d85 	.word	0x08008d85
 8008d14:	08008da5 	.word	0x08008da5
 8008d18:	08008da5 	.word	0x08008da5
 8008d1c:	08008da5 	.word	0x08008da5
 8008d20:	08008da5 	.word	0x08008da5
 8008d24:	08008da5 	.word	0x08008da5
 8008d28:	08008da5 	.word	0x08008da5
 8008d2c:	08008da5 	.word	0x08008da5
 8008d30:	08008d8d 	.word	0x08008d8d
 8008d34:	08008da5 	.word	0x08008da5
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008da5 	.word	0x08008da5
 8008d40:	08008da5 	.word	0x08008da5
 8008d44:	08008da5 	.word	0x08008da5
 8008d48:	08008da5 	.word	0x08008da5
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008d95 	.word	0x08008d95
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008da5 	.word	0x08008da5
 8008d5c:	08008da5 	.word	0x08008da5
 8008d60:	08008da5 	.word	0x08008da5
 8008d64:	08008da5 	.word	0x08008da5
 8008d68:	08008da5 	.word	0x08008da5
 8008d6c:	08008da5 	.word	0x08008da5
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d7a:	e1c0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d82:	e1bc      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8a:	e1b8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d92:	e1b4      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d94:	2320      	movs	r3, #32
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9a:	e1b0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d9c:	2340      	movs	r3, #64	; 0x40
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e1ac      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008da4:	2380      	movs	r3, #128	; 0x80
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e1a8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a75      	ldr	r2, [pc, #468]	; (8008f88 <UART_SetConfig+0x638>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d130      	bne.n	8008e18 <UART_SetConfig+0x4c8>
 8008db6:	4b73      	ldr	r3, [pc, #460]	; (8008f84 <UART_SetConfig+0x634>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	2b05      	cmp	r3, #5
 8008dc0:	d826      	bhi.n	8008e10 <UART_SetConfig+0x4c0>
 8008dc2:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0x478>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008de6:	e18a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008de8:	2304      	movs	r3, #4
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e186      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008df0:	2308      	movs	r3, #8
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e182      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e17e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e06:	e17a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e08:	2340      	movs	r3, #64	; 0x40
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e176      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e172      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a5b      	ldr	r2, [pc, #364]	; (8008f8c <UART_SetConfig+0x63c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d130      	bne.n	8008e84 <UART_SetConfig+0x534>
 8008e22:	4b58      	ldr	r3, [pc, #352]	; (8008f84 <UART_SetConfig+0x634>)
 8008e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d826      	bhi.n	8008e7c <UART_SetConfig+0x52c>
 8008e2e:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <UART_SetConfig+0x4e4>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e4d 	.word	0x08008e4d
 8008e38:	08008e55 	.word	0x08008e55
 8008e3c:	08008e5d 	.word	0x08008e5d
 8008e40:	08008e65 	.word	0x08008e65
 8008e44:	08008e6d 	.word	0x08008e6d
 8008e48:	08008e75 	.word	0x08008e75
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e52:	e154      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e54:	2304      	movs	r3, #4
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5a:	e150      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e62:	e14c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6a:	e148      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e72:	e144      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e140      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e13c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a41      	ldr	r2, [pc, #260]	; (8008f90 <UART_SetConfig+0x640>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	f040 8082 	bne.w	8008f94 <UART_SetConfig+0x644>
 8008e90:	4b3c      	ldr	r3, [pc, #240]	; (8008f84 <UART_SetConfig+0x634>)
 8008e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e98:	2b28      	cmp	r3, #40	; 0x28
 8008e9a:	d86d      	bhi.n	8008f78 <UART_SetConfig+0x628>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <UART_SetConfig+0x554>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f79 	.word	0x08008f79
 8008eac:	08008f79 	.word	0x08008f79
 8008eb0:	08008f79 	.word	0x08008f79
 8008eb4:	08008f79 	.word	0x08008f79
 8008eb8:	08008f79 	.word	0x08008f79
 8008ebc:	08008f79 	.word	0x08008f79
 8008ec0:	08008f79 	.word	0x08008f79
 8008ec4:	08008f51 	.word	0x08008f51
 8008ec8:	08008f79 	.word	0x08008f79
 8008ecc:	08008f79 	.word	0x08008f79
 8008ed0:	08008f79 	.word	0x08008f79
 8008ed4:	08008f79 	.word	0x08008f79
 8008ed8:	08008f79 	.word	0x08008f79
 8008edc:	08008f79 	.word	0x08008f79
 8008ee0:	08008f79 	.word	0x08008f79
 8008ee4:	08008f59 	.word	0x08008f59
 8008ee8:	08008f79 	.word	0x08008f79
 8008eec:	08008f79 	.word	0x08008f79
 8008ef0:	08008f79 	.word	0x08008f79
 8008ef4:	08008f79 	.word	0x08008f79
 8008ef8:	08008f79 	.word	0x08008f79
 8008efc:	08008f79 	.word	0x08008f79
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008f79 	.word	0x08008f79
 8008f18:	08008f79 	.word	0x08008f79
 8008f1c:	08008f79 	.word	0x08008f79
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	08008f69 	.word	0x08008f69
 8008f28:	08008f79 	.word	0x08008f79
 8008f2c:	08008f79 	.word	0x08008f79
 8008f30:	08008f79 	.word	0x08008f79
 8008f34:	08008f79 	.word	0x08008f79
 8008f38:	08008f79 	.word	0x08008f79
 8008f3c:	08008f79 	.word	0x08008f79
 8008f40:	08008f79 	.word	0x08008f79
 8008f44:	08008f71 	.word	0x08008f71
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4e:	e0d6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f50:	2304      	movs	r3, #4
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e0d2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e0ce      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f60:	2310      	movs	r3, #16
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e0ca      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f68:	2320      	movs	r3, #32
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6e:	e0c6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f70:	2340      	movs	r3, #64	; 0x40
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f76:	e0c2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f78:	2380      	movs	r3, #128	; 0x80
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7e:	e0be      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f80:	40011400 	.word	0x40011400
 8008f84:	58024400 	.word	0x58024400
 8008f88:	40007800 	.word	0x40007800
 8008f8c:	40007c00 	.word	0x40007c00
 8008f90:	40011800 	.word	0x40011800
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4aad      	ldr	r2, [pc, #692]	; (8009250 <UART_SetConfig+0x900>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d176      	bne.n	800908c <UART_SetConfig+0x73c>
 8008f9e:	4bad      	ldr	r3, [pc, #692]	; (8009254 <UART_SetConfig+0x904>)
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fa6:	2b28      	cmp	r3, #40	; 0x28
 8008fa8:	d86c      	bhi.n	8009084 <UART_SetConfig+0x734>
 8008faa:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <UART_SetConfig+0x660>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08009055 	.word	0x08009055
 8008fb4:	08009085 	.word	0x08009085
 8008fb8:	08009085 	.word	0x08009085
 8008fbc:	08009085 	.word	0x08009085
 8008fc0:	08009085 	.word	0x08009085
 8008fc4:	08009085 	.word	0x08009085
 8008fc8:	08009085 	.word	0x08009085
 8008fcc:	08009085 	.word	0x08009085
 8008fd0:	0800905d 	.word	0x0800905d
 8008fd4:	08009085 	.word	0x08009085
 8008fd8:	08009085 	.word	0x08009085
 8008fdc:	08009085 	.word	0x08009085
 8008fe0:	08009085 	.word	0x08009085
 8008fe4:	08009085 	.word	0x08009085
 8008fe8:	08009085 	.word	0x08009085
 8008fec:	08009085 	.word	0x08009085
 8008ff0:	08009065 	.word	0x08009065
 8008ff4:	08009085 	.word	0x08009085
 8008ff8:	08009085 	.word	0x08009085
 8008ffc:	08009085 	.word	0x08009085
 8009000:	08009085 	.word	0x08009085
 8009004:	08009085 	.word	0x08009085
 8009008:	08009085 	.word	0x08009085
 800900c:	08009085 	.word	0x08009085
 8009010:	0800906d 	.word	0x0800906d
 8009014:	08009085 	.word	0x08009085
 8009018:	08009085 	.word	0x08009085
 800901c:	08009085 	.word	0x08009085
 8009020:	08009085 	.word	0x08009085
 8009024:	08009085 	.word	0x08009085
 8009028:	08009085 	.word	0x08009085
 800902c:	08009085 	.word	0x08009085
 8009030:	08009075 	.word	0x08009075
 8009034:	08009085 	.word	0x08009085
 8009038:	08009085 	.word	0x08009085
 800903c:	08009085 	.word	0x08009085
 8009040:	08009085 	.word	0x08009085
 8009044:	08009085 	.word	0x08009085
 8009048:	08009085 	.word	0x08009085
 800904c:	08009085 	.word	0x08009085
 8009050:	0800907d 	.word	0x0800907d
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e050      	b.n	80090fe <UART_SetConfig+0x7ae>
 800905c:	2304      	movs	r3, #4
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e04c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8009064:	2308      	movs	r3, #8
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e048      	b.n	80090fe <UART_SetConfig+0x7ae>
 800906c:	2310      	movs	r3, #16
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e044      	b.n	80090fe <UART_SetConfig+0x7ae>
 8009074:	2320      	movs	r3, #32
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e040      	b.n	80090fe <UART_SetConfig+0x7ae>
 800907c:	2340      	movs	r3, #64	; 0x40
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e03c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8009084:	2380      	movs	r3, #128	; 0x80
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e038      	b.n	80090fe <UART_SetConfig+0x7ae>
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a71      	ldr	r2, [pc, #452]	; (8009258 <UART_SetConfig+0x908>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d130      	bne.n	80090f8 <UART_SetConfig+0x7a8>
 8009096:	4b6f      	ldr	r3, [pc, #444]	; (8009254 <UART_SetConfig+0x904>)
 8009098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b05      	cmp	r3, #5
 80090a0:	d826      	bhi.n	80090f0 <UART_SetConfig+0x7a0>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <UART_SetConfig+0x758>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090c9 	.word	0x080090c9
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	080090e1 	.word	0x080090e1
 80090bc:	080090e9 	.word	0x080090e9
 80090c0:	2302      	movs	r3, #2
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e01a      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e016      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e012      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e00e      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090e0:	2320      	movs	r3, #32
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e00a      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090e8:	2340      	movs	r3, #64	; 0x40
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e006      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090f0:	2380      	movs	r3, #128	; 0x80
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f6:	e002      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a55      	ldr	r2, [pc, #340]	; (8009258 <UART_SetConfig+0x908>)
 8009104:	4293      	cmp	r3, r2
 8009106:	f040 80f8 	bne.w	80092fa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800910a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800910e:	2b20      	cmp	r3, #32
 8009110:	dc46      	bgt.n	80091a0 <UART_SetConfig+0x850>
 8009112:	2b02      	cmp	r3, #2
 8009114:	db75      	blt.n	8009202 <UART_SetConfig+0x8b2>
 8009116:	3b02      	subs	r3, #2
 8009118:	2b1e      	cmp	r3, #30
 800911a:	d872      	bhi.n	8009202 <UART_SetConfig+0x8b2>
 800911c:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <UART_SetConfig+0x7d4>)
 800911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009122:	bf00      	nop
 8009124:	080091a7 	.word	0x080091a7
 8009128:	08009203 	.word	0x08009203
 800912c:	080091af 	.word	0x080091af
 8009130:	08009203 	.word	0x08009203
 8009134:	08009203 	.word	0x08009203
 8009138:	08009203 	.word	0x08009203
 800913c:	080091bf 	.word	0x080091bf
 8009140:	08009203 	.word	0x08009203
 8009144:	08009203 	.word	0x08009203
 8009148:	08009203 	.word	0x08009203
 800914c:	08009203 	.word	0x08009203
 8009150:	08009203 	.word	0x08009203
 8009154:	08009203 	.word	0x08009203
 8009158:	08009203 	.word	0x08009203
 800915c:	080091cf 	.word	0x080091cf
 8009160:	08009203 	.word	0x08009203
 8009164:	08009203 	.word	0x08009203
 8009168:	08009203 	.word	0x08009203
 800916c:	08009203 	.word	0x08009203
 8009170:	08009203 	.word	0x08009203
 8009174:	08009203 	.word	0x08009203
 8009178:	08009203 	.word	0x08009203
 800917c:	08009203 	.word	0x08009203
 8009180:	08009203 	.word	0x08009203
 8009184:	08009203 	.word	0x08009203
 8009188:	08009203 	.word	0x08009203
 800918c:	08009203 	.word	0x08009203
 8009190:	08009203 	.word	0x08009203
 8009194:	08009203 	.word	0x08009203
 8009198:	08009203 	.word	0x08009203
 800919c:	080091f5 	.word	0x080091f5
 80091a0:	2b40      	cmp	r3, #64	; 0x40
 80091a2:	d02a      	beq.n	80091fa <UART_SetConfig+0x8aa>
 80091a4:	e02d      	b.n	8009202 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091a6:	f7fd fab1 	bl	800670c <HAL_RCCEx_GetD3PCLK1Freq>
 80091aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091ac:	e02f      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fd fac0 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091bc:	e027      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 0318 	add.w	r3, r7, #24
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fd fc0c 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091cc:	e01f      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ce:	4b21      	ldr	r3, [pc, #132]	; (8009254 <UART_SetConfig+0x904>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d009      	beq.n	80091ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091da:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <UART_SetConfig+0x904>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	08db      	lsrs	r3, r3, #3
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	4a1d      	ldr	r2, [pc, #116]	; (800925c <UART_SetConfig+0x90c>)
 80091e6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091ec:	e00f      	b.n	800920e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80091ee:	4b1b      	ldr	r3, [pc, #108]	; (800925c <UART_SetConfig+0x90c>)
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f2:	e00c      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091f4:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <UART_SetConfig+0x910>)
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f8:	e009      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009200:	e005      	b.n	800920e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800920c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800920e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 81ee 	beq.w	80095f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	4a12      	ldr	r2, [pc, #72]	; (8009264 <UART_SetConfig+0x914>)
 800921c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009220:	461a      	mov	r2, r3
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	fbb3 f3f2 	udiv	r3, r3, r2
 8009228:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4413      	add	r3, r2
 8009234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009236:	429a      	cmp	r2, r3
 8009238:	d305      	bcc.n	8009246 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009242:	429a      	cmp	r2, r3
 8009244:	d910      	bls.n	8009268 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800924c:	e1d1      	b.n	80095f2 <UART_SetConfig+0xca2>
 800924e:	bf00      	nop
 8009250:	40011c00 	.word	0x40011c00
 8009254:	58024400 	.word	0x58024400
 8009258:	58000c00 	.word	0x58000c00
 800925c:	03d09000 	.word	0x03d09000
 8009260:	003d0900 	.word	0x003d0900
 8009264:	0800abc0 	.word	0x0800abc0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	2200      	movs	r2, #0
 800926c:	60bb      	str	r3, [r7, #8]
 800926e:	60fa      	str	r2, [r7, #12]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009274:	4ac0      	ldr	r2, [pc, #768]	; (8009578 <UART_SetConfig+0xc28>)
 8009276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927a:	b29b      	uxth	r3, r3
 800927c:	2200      	movs	r2, #0
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800928a:	f7f7 f889 	bl	80003a0 <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4610      	mov	r0, r2
 8009294:	4619      	mov	r1, r3
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	020b      	lsls	r3, r1, #8
 80092a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092a4:	0202      	lsls	r2, r0, #8
 80092a6:	6979      	ldr	r1, [r7, #20]
 80092a8:	6849      	ldr	r1, [r1, #4]
 80092aa:	0849      	lsrs	r1, r1, #1
 80092ac:	2000      	movs	r0, #0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4605      	mov	r5, r0
 80092b2:	eb12 0804 	adds.w	r8, r2, r4
 80092b6:	eb43 0905 	adc.w	r9, r3, r5
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	469a      	mov	sl, r3
 80092c2:	4693      	mov	fp, r2
 80092c4:	4652      	mov	r2, sl
 80092c6:	465b      	mov	r3, fp
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 f868 	bl	80003a0 <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4613      	mov	r3, r2
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092de:	d308      	bcc.n	80092f2 <UART_SetConfig+0x9a2>
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e6:	d204      	bcs.n	80092f2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ee:	60da      	str	r2, [r3, #12]
 80092f0:	e17f      	b.n	80095f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092f8:	e17b      	b.n	80095f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009302:	f040 80bd 	bne.w	8009480 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009306:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800930a:	2b20      	cmp	r3, #32
 800930c:	dc48      	bgt.n	80093a0 <UART_SetConfig+0xa50>
 800930e:	2b00      	cmp	r3, #0
 8009310:	db7b      	blt.n	800940a <UART_SetConfig+0xaba>
 8009312:	2b20      	cmp	r3, #32
 8009314:	d879      	bhi.n	800940a <UART_SetConfig+0xaba>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <UART_SetConfig+0x9cc>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	080093a7 	.word	0x080093a7
 8009320:	080093af 	.word	0x080093af
 8009324:	0800940b 	.word	0x0800940b
 8009328:	0800940b 	.word	0x0800940b
 800932c:	080093b7 	.word	0x080093b7
 8009330:	0800940b 	.word	0x0800940b
 8009334:	0800940b 	.word	0x0800940b
 8009338:	0800940b 	.word	0x0800940b
 800933c:	080093c7 	.word	0x080093c7
 8009340:	0800940b 	.word	0x0800940b
 8009344:	0800940b 	.word	0x0800940b
 8009348:	0800940b 	.word	0x0800940b
 800934c:	0800940b 	.word	0x0800940b
 8009350:	0800940b 	.word	0x0800940b
 8009354:	0800940b 	.word	0x0800940b
 8009358:	0800940b 	.word	0x0800940b
 800935c:	080093d7 	.word	0x080093d7
 8009360:	0800940b 	.word	0x0800940b
 8009364:	0800940b 	.word	0x0800940b
 8009368:	0800940b 	.word	0x0800940b
 800936c:	0800940b 	.word	0x0800940b
 8009370:	0800940b 	.word	0x0800940b
 8009374:	0800940b 	.word	0x0800940b
 8009378:	0800940b 	.word	0x0800940b
 800937c:	0800940b 	.word	0x0800940b
 8009380:	0800940b 	.word	0x0800940b
 8009384:	0800940b 	.word	0x0800940b
 8009388:	0800940b 	.word	0x0800940b
 800938c:	0800940b 	.word	0x0800940b
 8009390:	0800940b 	.word	0x0800940b
 8009394:	0800940b 	.word	0x0800940b
 8009398:	0800940b 	.word	0x0800940b
 800939c:	080093fd 	.word	0x080093fd
 80093a0:	2b40      	cmp	r3, #64	; 0x40
 80093a2:	d02e      	beq.n	8009402 <UART_SetConfig+0xab2>
 80093a4:	e031      	b.n	800940a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a6:	f7fb ffc7 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 80093aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093ac:	e033      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093ae:	f7fb ffd9 	bl	8005364 <HAL_RCC_GetPCLK2Freq>
 80093b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093b4:	e02f      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fd f9bc 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093c4:	e027      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c6:	f107 0318 	add.w	r3, r7, #24
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fd fb08 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d4:	e01f      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d6:	4b69      	ldr	r3, [pc, #420]	; (800957c <UART_SetConfig+0xc2c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093e2:	4b66      	ldr	r3, [pc, #408]	; (800957c <UART_SetConfig+0xc2c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	08db      	lsrs	r3, r3, #3
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	4a64      	ldr	r2, [pc, #400]	; (8009580 <UART_SetConfig+0xc30>)
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093f4:	e00f      	b.n	8009416 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80093f6:	4b62      	ldr	r3, [pc, #392]	; (8009580 <UART_SetConfig+0xc30>)
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093fa:	e00c      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093fc:	4b61      	ldr	r3, [pc, #388]	; (8009584 <UART_SetConfig+0xc34>)
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009400:	e009      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009408:	e005      	b.n	8009416 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 80ea 	beq.w	80095f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	4a55      	ldr	r2, [pc, #340]	; (8009578 <UART_SetConfig+0xc28>)
 8009424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009428:	461a      	mov	r2, r3
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009430:	005a      	lsls	r2, r3, #1
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	441a      	add	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009442:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	2b0f      	cmp	r3, #15
 8009448:	d916      	bls.n	8009478 <UART_SetConfig+0xb28>
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009450:	d212      	bcs.n	8009478 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	b29b      	uxth	r3, r3
 8009456:	f023 030f 	bic.w	r3, r3, #15
 800945a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	b29b      	uxth	r3, r3
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	b29a      	uxth	r2, r3
 8009468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800946a:	4313      	orrs	r3, r2
 800946c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	e0bc      	b.n	80095f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800947e:	e0b8      	b.n	80095f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009480:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009484:	2b20      	cmp	r3, #32
 8009486:	dc4b      	bgt.n	8009520 <UART_SetConfig+0xbd0>
 8009488:	2b00      	cmp	r3, #0
 800948a:	f2c0 8087 	blt.w	800959c <UART_SetConfig+0xc4c>
 800948e:	2b20      	cmp	r3, #32
 8009490:	f200 8084 	bhi.w	800959c <UART_SetConfig+0xc4c>
 8009494:	a201      	add	r2, pc, #4	; (adr r2, 800949c <UART_SetConfig+0xb4c>)
 8009496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949a:	bf00      	nop
 800949c:	08009527 	.word	0x08009527
 80094a0:	0800952f 	.word	0x0800952f
 80094a4:	0800959d 	.word	0x0800959d
 80094a8:	0800959d 	.word	0x0800959d
 80094ac:	08009537 	.word	0x08009537
 80094b0:	0800959d 	.word	0x0800959d
 80094b4:	0800959d 	.word	0x0800959d
 80094b8:	0800959d 	.word	0x0800959d
 80094bc:	08009547 	.word	0x08009547
 80094c0:	0800959d 	.word	0x0800959d
 80094c4:	0800959d 	.word	0x0800959d
 80094c8:	0800959d 	.word	0x0800959d
 80094cc:	0800959d 	.word	0x0800959d
 80094d0:	0800959d 	.word	0x0800959d
 80094d4:	0800959d 	.word	0x0800959d
 80094d8:	0800959d 	.word	0x0800959d
 80094dc:	08009557 	.word	0x08009557
 80094e0:	0800959d 	.word	0x0800959d
 80094e4:	0800959d 	.word	0x0800959d
 80094e8:	0800959d 	.word	0x0800959d
 80094ec:	0800959d 	.word	0x0800959d
 80094f0:	0800959d 	.word	0x0800959d
 80094f4:	0800959d 	.word	0x0800959d
 80094f8:	0800959d 	.word	0x0800959d
 80094fc:	0800959d 	.word	0x0800959d
 8009500:	0800959d 	.word	0x0800959d
 8009504:	0800959d 	.word	0x0800959d
 8009508:	0800959d 	.word	0x0800959d
 800950c:	0800959d 	.word	0x0800959d
 8009510:	0800959d 	.word	0x0800959d
 8009514:	0800959d 	.word	0x0800959d
 8009518:	0800959d 	.word	0x0800959d
 800951c:	0800958f 	.word	0x0800958f
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	d037      	beq.n	8009594 <UART_SetConfig+0xc44>
 8009524:	e03a      	b.n	800959c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009526:	f7fb ff07 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 800952a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800952c:	e03c      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800952e:	f7fb ff19 	bl	8005364 <HAL_RCC_GetPCLK2Freq>
 8009532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009534:	e038      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800953a:	4618      	mov	r0, r3
 800953c:	f7fd f8fc 	bl	8006738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009544:	e030      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009546:	f107 0318 	add.w	r3, r7, #24
 800954a:	4618      	mov	r0, r3
 800954c:	f7fd fa48 	bl	80069e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009554:	e028      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009556:	4b09      	ldr	r3, [pc, #36]	; (800957c <UART_SetConfig+0xc2c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	2b00      	cmp	r3, #0
 8009560:	d012      	beq.n	8009588 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009562:	4b06      	ldr	r3, [pc, #24]	; (800957c <UART_SetConfig+0xc2c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	4a04      	ldr	r2, [pc, #16]	; (8009580 <UART_SetConfig+0xc30>)
 800956e:	fa22 f303 	lsr.w	r3, r2, r3
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009574:	e018      	b.n	80095a8 <UART_SetConfig+0xc58>
 8009576:	bf00      	nop
 8009578:	0800abc0 	.word	0x0800abc0
 800957c:	58024400 	.word	0x58024400
 8009580:	03d09000 	.word	0x03d09000
 8009584:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009588:	4b24      	ldr	r3, [pc, #144]	; (800961c <UART_SetConfig+0xccc>)
 800958a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800958c:	e00c      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800958e:	4b24      	ldr	r3, [pc, #144]	; (8009620 <UART_SetConfig+0xcd0>)
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009592:	e009      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800959a:	e005      	b.n	80095a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80095a6:	bf00      	nop
    }

    if (pclk != 0U)
 80095a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d021      	beq.n	80095f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	4a1c      	ldr	r2, [pc, #112]	; (8009624 <UART_SetConfig+0xcd4>)
 80095b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	085b      	lsrs	r3, r3, #1
 80095c6:	441a      	add	r2, r3
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d4:	2b0f      	cmp	r3, #15
 80095d6:	d909      	bls.n	80095ec <UART_SetConfig+0xc9c>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095de:	d205      	bcs.n	80095ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e002      	b.n	80095f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2200      	movs	r2, #0
 8009606:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2200      	movs	r2, #0
 800960c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800960e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009612:	4618      	mov	r0, r3
 8009614:	3748      	adds	r7, #72	; 0x48
 8009616:	46bd      	mov	sp, r7
 8009618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800961c:	03d09000 	.word	0x03d09000
 8009620:	003d0900 	.word	0x003d0900
 8009624:	0800abc0 	.word	0x0800abc0

08009628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	f003 0310 	and.w	r3, r3, #16
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01a      	beq.n	800973e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009726:	d10a      	bne.n	800973e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b098      	sub	sp, #96	; 0x60
 8009770:	af02      	add	r7, sp, #8
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800977c:	f7f8 f936 	bl	80019ec <HAL_GetTick>
 8009780:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b08      	cmp	r3, #8
 800978e:	d12f      	bne.n	80097f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009798:	2200      	movs	r2, #0
 800979a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f88e 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d022      	beq.n	80097f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097be:	653b      	str	r3, [r7, #80]	; 0x50
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097c8:	647b      	str	r3, [r7, #68]	; 0x44
 80097ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e063      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d149      	bne.n	8009892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009806:	2200      	movs	r2, #0
 8009808:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f857 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d03c      	beq.n	8009892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	623b      	str	r3, [r7, #32]
   return(result);
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800982c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009836:	633b      	str	r3, [r7, #48]	; 0x30
 8009838:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800983c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e6      	bne.n	8009818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	60fb      	str	r3, [r7, #12]
   return(result);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	64bb      	str	r3, [r7, #72]	; 0x48
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3308      	adds	r3, #8
 8009868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800986a:	61fa      	str	r2, [r7, #28]
 800986c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	69b9      	ldr	r1, [r7, #24]
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	617b      	str	r3, [r7, #20]
   return(result);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e012      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3758      	adds	r7, #88	; 0x58
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	4613      	mov	r3, r2
 80098ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d0:	e04f      	b.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d8:	d04b      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098da:	f7f8 f887 	bl	80019ec <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d302      	bcc.n	80098f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e04e      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d037      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b80      	cmp	r3, #128	; 0x80
 8009906:	d034      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b40      	cmp	r3, #64	; 0x40
 800990c:	d031      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b08      	cmp	r3, #8
 800991a:	d110      	bne.n	800993e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2208      	movs	r2, #8
 8009922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f921 	bl	8009b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2208      	movs	r2, #8
 800992e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e029      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800994c:	d111      	bne.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f907 	bl	8009b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e00f      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69da      	ldr	r2, [r3, #28]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4013      	ands	r3, r2
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	429a      	cmp	r2, r3
 8009980:	bf0c      	ite	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	2300      	movne	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d0a0      	beq.n	80098d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b096      	sub	sp, #88	; 0x58
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2222      	movs	r2, #34	; 0x22
 80099c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d02d      	beq.n	8009a2e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099d8:	4a40      	ldr	r2, [pc, #256]	; (8009adc <UART_Start_Receive_DMA+0x140>)
 80099da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099e2:	4a3f      	ldr	r2, [pc, #252]	; (8009ae0 <UART_Start_Receive_DMA+0x144>)
 80099e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ec:	4a3d      	ldr	r2, [pc, #244]	; (8009ae4 <UART_Start_Receive_DMA+0x148>)
 80099ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099f6:	2200      	movs	r2, #0
 80099f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3324      	adds	r3, #36	; 0x24
 8009a06:	4619      	mov	r1, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	f7f8 fcbc 	bl	800238c <HAL_DMA_Start_IT>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2210      	movs	r2, #16
 8009a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e051      	b.n	8009ad2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d018      	beq.n	8009a68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a56:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e6      	bne.n	8009a36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3308      	adds	r3, #8
 8009a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3308      	adds	r3, #8
 8009a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a88:	637a      	str	r2, [r7, #52]	; 0x34
 8009a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e5      	bne.n	8009a68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009abc:	623a      	str	r2, [r7, #32]
 8009abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	69f9      	ldr	r1, [r7, #28]
 8009ac2:	6a3a      	ldr	r2, [r7, #32]
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e5      	bne.n	8009a9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3758      	adds	r7, #88	; 0x58
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	08009c39 	.word	0x08009c39
 8009ae0:	08009d61 	.word	0x08009d61
 8009ae4:	08009d9f 	.word	0x08009d9f

08009ae8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b08f      	sub	sp, #60	; 0x3c
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b04:	637b      	str	r3, [r7, #52]	; 0x34
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b10:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e6      	bne.n	8009af0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3308      	adds	r3, #8
 8009b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	e853 3f00 	ldrex	r3, [r3]
 8009b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009b38:	633b      	str	r3, [r7, #48]	; 0x30
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3308      	adds	r3, #8
 8009b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b42:	61ba      	str	r2, [r7, #24]
 8009b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6979      	ldr	r1, [r7, #20]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e5      	bne.n	8009b22 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009b5e:	bf00      	nop
 8009b60:	373c      	adds	r7, #60	; 0x3c
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
	...

08009b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b095      	sub	sp, #84	; 0x54
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	e853 3f00 	ldrex	r3, [r3]
 8009b80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b92:	643b      	str	r3, [r7, #64]	; 0x40
 8009b94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e6      	bne.n	8009b74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3308      	adds	r3, #8
 8009bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bb6:	69fa      	ldr	r2, [r7, #28]
 8009bb8:	4b1e      	ldr	r3, [pc, #120]	; (8009c34 <UART_EndRxTransfer+0xc8>)
 8009bba:	4013      	ands	r3, r2
 8009bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bce:	e841 2300 	strex	r3, r2, [r1]
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1e5      	bne.n	8009ba6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d118      	bne.n	8009c14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f023 0310 	bic.w	r3, r3, #16
 8009bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	6979      	ldr	r1, [r7, #20]
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e6      	bne.n	8009be2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2220      	movs	r2, #32
 8009c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009c28:	bf00      	nop
 8009c2a:	3754      	adds	r7, #84	; 0x54
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	effffffe 	.word	0xeffffffe

08009c38 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b09c      	sub	sp, #112	; 0x70
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c44:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c4e:	d071      	beq.n	8009d34 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c7e:	e841 2300 	strex	r3, r2, [r1]
 8009c82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e6      	bne.n	8009c58 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c94:	e853 3f00 	ldrex	r3, [r3]
 8009c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	f023 0301 	bic.w	r3, r3, #1
 8009ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8009ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009caa:	647a      	str	r2, [r7, #68]	; 0x44
 8009cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cb2:	e841 2300 	strex	r3, r2, [r1]
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1e5      	bne.n	8009c8a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8009cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cde:	633a      	str	r2, [r7, #48]	; 0x30
 8009ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e5      	bne.n	8009cbe <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d118      	bne.n	8009d34 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0310 	bic.w	r3, r3, #16
 8009d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d20:	61fb      	str	r3, [r7, #28]
 8009d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	69b9      	ldr	r1, [r7, #24]
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e6      	bne.n	8009d02 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d36:	2200      	movs	r2, #0
 8009d38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d107      	bne.n	8009d52 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d4c:	f7f7 f820 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d50:	e002      	b.n	8009d58 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009d52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d54:	f7f7 f836 	bl	8000dc4 <HAL_UART_RxCpltCallback>
}
 8009d58:	bf00      	nop
 8009d5a:	3770      	adds	r7, #112	; 0x70
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d109      	bne.n	8009d90 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d82:	085b      	lsrs	r3, r3, #1
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4619      	mov	r1, r3
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f7f7 f801 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d8e:	e002      	b.n	8009d96 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f7fe fdc9 	bl	8008928 <HAL_UART_RxHalfCpltCallback>
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b086      	sub	sp, #24
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc6:	2b80      	cmp	r3, #128	; 0x80
 8009dc8:	d109      	bne.n	8009dde <UART_DMAError+0x40>
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2b21      	cmp	r3, #33	; 0x21
 8009dce:	d106      	bne.n	8009dde <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009dd8:	6978      	ldr	r0, [r7, #20]
 8009dda:	f7ff fe85 	bl	8009ae8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de8:	2b40      	cmp	r3, #64	; 0x40
 8009dea:	d109      	bne.n	8009e00 <UART_DMAError+0x62>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b22      	cmp	r3, #34	; 0x22
 8009df0:	d106      	bne.n	8009e00 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009dfa:	6978      	ldr	r0, [r7, #20]
 8009dfc:	f7ff feb6 	bl	8009b6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e06:	f043 0210 	orr.w	r2, r3, #16
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e10:	6978      	ldr	r0, [r7, #20]
 8009e12:	f7fe fd93 	bl	800893c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e16:	bf00      	nop
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b085      	sub	sp, #20
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e027      	b.n	8009e84 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2224      	movs	r2, #36	; 0x24
 8009e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0201 	bic.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d101      	bne.n	8009ea8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	e02d      	b.n	8009f04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2224      	movs	r2, #36	; 0x24
 8009eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0201 	bic.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f84f 	bl	8009f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e02d      	b.n	8009f80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2224      	movs	r2, #36	; 0x24
 8009f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0201 	bic.w	r2, r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f811 	bl	8009f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d108      	bne.n	8009faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fa8:	e031      	b.n	800a00e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009faa:	2310      	movs	r3, #16
 8009fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fae:	2310      	movs	r3, #16
 8009fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	0e5b      	lsrs	r3, r3, #25
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	0f5b      	lsrs	r3, r3, #29
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 0307 	and.w	r3, r3, #7
 8009fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	7b3a      	ldrb	r2, [r7, #12]
 8009fd6:	4911      	ldr	r1, [pc, #68]	; (800a01c <UARTEx_SetNbDataToProcess+0x94>)
 8009fd8:	5c8a      	ldrb	r2, [r1, r2]
 8009fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fde:	7b3a      	ldrb	r2, [r7, #12]
 8009fe0:	490f      	ldr	r1, [pc, #60]	; (800a020 <UARTEx_SetNbDataToProcess+0x98>)
 8009fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	7b7a      	ldrb	r2, [r7, #13]
 8009ff4:	4909      	ldr	r1, [pc, #36]	; (800a01c <UARTEx_SetNbDataToProcess+0x94>)
 8009ff6:	5c8a      	ldrb	r2, [r1, r2]
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ffc:	7b7a      	ldrb	r2, [r7, #13]
 8009ffe:	4908      	ldr	r1, [pc, #32]	; (800a020 <UARTEx_SetNbDataToProcess+0x98>)
 800a000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a002:	fb93 f3f2 	sdiv	r3, r3, r2
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	0800abd8 	.word	0x0800abd8
 800a020:	0800abe0 	.word	0x0800abe0

0800a024 <__errno>:
 800a024:	4b01      	ldr	r3, [pc, #4]	; (800a02c <__errno+0x8>)
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	24000010 	.word	0x24000010

0800a030 <__libc_init_array>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	4d0d      	ldr	r5, [pc, #52]	; (800a068 <__libc_init_array+0x38>)
 800a034:	4c0d      	ldr	r4, [pc, #52]	; (800a06c <__libc_init_array+0x3c>)
 800a036:	1b64      	subs	r4, r4, r5
 800a038:	10a4      	asrs	r4, r4, #2
 800a03a:	2600      	movs	r6, #0
 800a03c:	42a6      	cmp	r6, r4
 800a03e:	d109      	bne.n	800a054 <__libc_init_array+0x24>
 800a040:	4d0b      	ldr	r5, [pc, #44]	; (800a070 <__libc_init_array+0x40>)
 800a042:	4c0c      	ldr	r4, [pc, #48]	; (800a074 <__libc_init_array+0x44>)
 800a044:	f000 fca2 	bl	800a98c <_init>
 800a048:	1b64      	subs	r4, r4, r5
 800a04a:	10a4      	asrs	r4, r4, #2
 800a04c:	2600      	movs	r6, #0
 800a04e:	42a6      	cmp	r6, r4
 800a050:	d105      	bne.n	800a05e <__libc_init_array+0x2e>
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	f855 3b04 	ldr.w	r3, [r5], #4
 800a058:	4798      	blx	r3
 800a05a:	3601      	adds	r6, #1
 800a05c:	e7ee      	b.n	800a03c <__libc_init_array+0xc>
 800a05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a062:	4798      	blx	r3
 800a064:	3601      	adds	r6, #1
 800a066:	e7f2      	b.n	800a04e <__libc_init_array+0x1e>
 800a068:	0800ac24 	.word	0x0800ac24
 800a06c:	0800ac24 	.word	0x0800ac24
 800a070:	0800ac24 	.word	0x0800ac24
 800a074:	0800ac28 	.word	0x0800ac28

0800a078 <memset>:
 800a078:	4402      	add	r2, r0
 800a07a:	4603      	mov	r3, r0
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d100      	bne.n	800a082 <memset+0xa>
 800a080:	4770      	bx	lr
 800a082:	f803 1b01 	strb.w	r1, [r3], #1
 800a086:	e7f9      	b.n	800a07c <memset+0x4>

0800a088 <siprintf>:
 800a088:	b40e      	push	{r1, r2, r3}
 800a08a:	b500      	push	{lr}
 800a08c:	b09c      	sub	sp, #112	; 0x70
 800a08e:	ab1d      	add	r3, sp, #116	; 0x74
 800a090:	9002      	str	r0, [sp, #8]
 800a092:	9006      	str	r0, [sp, #24]
 800a094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a098:	4809      	ldr	r0, [pc, #36]	; (800a0c0 <siprintf+0x38>)
 800a09a:	9107      	str	r1, [sp, #28]
 800a09c:	9104      	str	r1, [sp, #16]
 800a09e:	4909      	ldr	r1, [pc, #36]	; (800a0c4 <siprintf+0x3c>)
 800a0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a4:	9105      	str	r1, [sp, #20]
 800a0a6:	6800      	ldr	r0, [r0, #0]
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	a902      	add	r1, sp, #8
 800a0ac:	f000 f87c 	bl	800a1a8 <_svfiprintf_r>
 800a0b0:	9b02      	ldr	r3, [sp, #8]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	b01c      	add	sp, #112	; 0x70
 800a0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0bc:	b003      	add	sp, #12
 800a0be:	4770      	bx	lr
 800a0c0:	24000010 	.word	0x24000010
 800a0c4:	ffff0208 	.word	0xffff0208

0800a0c8 <strncmp>:
 800a0c8:	b510      	push	{r4, lr}
 800a0ca:	b17a      	cbz	r2, 800a0ec <strncmp+0x24>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	3901      	subs	r1, #1
 800a0d0:	1884      	adds	r4, r0, r2
 800a0d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0da:	4290      	cmp	r0, r2
 800a0dc:	d101      	bne.n	800a0e2 <strncmp+0x1a>
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	d101      	bne.n	800a0e6 <strncmp+0x1e>
 800a0e2:	1a80      	subs	r0, r0, r2
 800a0e4:	bd10      	pop	{r4, pc}
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d1f3      	bne.n	800a0d2 <strncmp+0xa>
 800a0ea:	e7fa      	b.n	800a0e2 <strncmp+0x1a>
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	e7f9      	b.n	800a0e4 <strncmp+0x1c>

0800a0f0 <__ssputs_r>:
 800a0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f4:	688e      	ldr	r6, [r1, #8]
 800a0f6:	429e      	cmp	r6, r3
 800a0f8:	4682      	mov	sl, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	4690      	mov	r8, r2
 800a0fe:	461f      	mov	r7, r3
 800a100:	d838      	bhi.n	800a174 <__ssputs_r+0x84>
 800a102:	898a      	ldrh	r2, [r1, #12]
 800a104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a108:	d032      	beq.n	800a170 <__ssputs_r+0x80>
 800a10a:	6825      	ldr	r5, [r4, #0]
 800a10c:	6909      	ldr	r1, [r1, #16]
 800a10e:	eba5 0901 	sub.w	r9, r5, r1
 800a112:	6965      	ldr	r5, [r4, #20]
 800a114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a11c:	3301      	adds	r3, #1
 800a11e:	444b      	add	r3, r9
 800a120:	106d      	asrs	r5, r5, #1
 800a122:	429d      	cmp	r5, r3
 800a124:	bf38      	it	cc
 800a126:	461d      	movcc	r5, r3
 800a128:	0553      	lsls	r3, r2, #21
 800a12a:	d531      	bpl.n	800a190 <__ssputs_r+0xa0>
 800a12c:	4629      	mov	r1, r5
 800a12e:	f000 fb63 	bl	800a7f8 <_malloc_r>
 800a132:	4606      	mov	r6, r0
 800a134:	b950      	cbnz	r0, 800a14c <__ssputs_r+0x5c>
 800a136:	230c      	movs	r3, #12
 800a138:	f8ca 3000 	str.w	r3, [sl]
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14c:	6921      	ldr	r1, [r4, #16]
 800a14e:	464a      	mov	r2, r9
 800a150:	f000 fabe 	bl	800a6d0 <memcpy>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	6126      	str	r6, [r4, #16]
 800a162:	6165      	str	r5, [r4, #20]
 800a164:	444e      	add	r6, r9
 800a166:	eba5 0509 	sub.w	r5, r5, r9
 800a16a:	6026      	str	r6, [r4, #0]
 800a16c:	60a5      	str	r5, [r4, #8]
 800a16e:	463e      	mov	r6, r7
 800a170:	42be      	cmp	r6, r7
 800a172:	d900      	bls.n	800a176 <__ssputs_r+0x86>
 800a174:	463e      	mov	r6, r7
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	4632      	mov	r2, r6
 800a17a:	4641      	mov	r1, r8
 800a17c:	f000 fab6 	bl	800a6ec <memmove>
 800a180:	68a3      	ldr	r3, [r4, #8]
 800a182:	1b9b      	subs	r3, r3, r6
 800a184:	60a3      	str	r3, [r4, #8]
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	4433      	add	r3, r6
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	2000      	movs	r0, #0
 800a18e:	e7db      	b.n	800a148 <__ssputs_r+0x58>
 800a190:	462a      	mov	r2, r5
 800a192:	f000 fba5 	bl	800a8e0 <_realloc_r>
 800a196:	4606      	mov	r6, r0
 800a198:	2800      	cmp	r0, #0
 800a19a:	d1e1      	bne.n	800a160 <__ssputs_r+0x70>
 800a19c:	6921      	ldr	r1, [r4, #16]
 800a19e:	4650      	mov	r0, sl
 800a1a0:	f000 fabe 	bl	800a720 <_free_r>
 800a1a4:	e7c7      	b.n	800a136 <__ssputs_r+0x46>
	...

0800a1a8 <_svfiprintf_r>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	4698      	mov	r8, r3
 800a1ae:	898b      	ldrh	r3, [r1, #12]
 800a1b0:	061b      	lsls	r3, r3, #24
 800a1b2:	b09d      	sub	sp, #116	; 0x74
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	d50e      	bpl.n	800a1da <_svfiprintf_r+0x32>
 800a1bc:	690b      	ldr	r3, [r1, #16]
 800a1be:	b963      	cbnz	r3, 800a1da <_svfiprintf_r+0x32>
 800a1c0:	2140      	movs	r1, #64	; 0x40
 800a1c2:	f000 fb19 	bl	800a7f8 <_malloc_r>
 800a1c6:	6028      	str	r0, [r5, #0]
 800a1c8:	6128      	str	r0, [r5, #16]
 800a1ca:	b920      	cbnz	r0, 800a1d6 <_svfiprintf_r+0x2e>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	e0d1      	b.n	800a37a <_svfiprintf_r+0x1d2>
 800a1d6:	2340      	movs	r3, #64	; 0x40
 800a1d8:	616b      	str	r3, [r5, #20]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1de:	2320      	movs	r3, #32
 800a1e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e8:	2330      	movs	r3, #48	; 0x30
 800a1ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a394 <_svfiprintf_r+0x1ec>
 800a1ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1f2:	f04f 0901 	mov.w	r9, #1
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	469a      	mov	sl, r3
 800a1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fe:	b10a      	cbz	r2, 800a204 <_svfiprintf_r+0x5c>
 800a200:	2a25      	cmp	r2, #37	; 0x25
 800a202:	d1f9      	bne.n	800a1f8 <_svfiprintf_r+0x50>
 800a204:	ebba 0b04 	subs.w	fp, sl, r4
 800a208:	d00b      	beq.n	800a222 <_svfiprintf_r+0x7a>
 800a20a:	465b      	mov	r3, fp
 800a20c:	4622      	mov	r2, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff ff6d 	bl	800a0f0 <__ssputs_r>
 800a216:	3001      	adds	r0, #1
 800a218:	f000 80aa 	beq.w	800a370 <_svfiprintf_r+0x1c8>
 800a21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a21e:	445a      	add	r2, fp
 800a220:	9209      	str	r2, [sp, #36]	; 0x24
 800a222:	f89a 3000 	ldrb.w	r3, [sl]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80a2 	beq.w	800a370 <_svfiprintf_r+0x1c8>
 800a22c:	2300      	movs	r3, #0
 800a22e:	f04f 32ff 	mov.w	r2, #4294967295
 800a232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a236:	f10a 0a01 	add.w	sl, sl, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	9307      	str	r3, [sp, #28]
 800a23e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a242:	931a      	str	r3, [sp, #104]	; 0x68
 800a244:	4654      	mov	r4, sl
 800a246:	2205      	movs	r2, #5
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	4851      	ldr	r0, [pc, #324]	; (800a394 <_svfiprintf_r+0x1ec>)
 800a24e:	f7f6 f857 	bl	8000300 <memchr>
 800a252:	9a04      	ldr	r2, [sp, #16]
 800a254:	b9d8      	cbnz	r0, 800a28e <_svfiprintf_r+0xe6>
 800a256:	06d0      	lsls	r0, r2, #27
 800a258:	bf44      	itt	mi
 800a25a:	2320      	movmi	r3, #32
 800a25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a260:	0711      	lsls	r1, r2, #28
 800a262:	bf44      	itt	mi
 800a264:	232b      	movmi	r3, #43	; 0x2b
 800a266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26a:	f89a 3000 	ldrb.w	r3, [sl]
 800a26e:	2b2a      	cmp	r3, #42	; 0x2a
 800a270:	d015      	beq.n	800a29e <_svfiprintf_r+0xf6>
 800a272:	9a07      	ldr	r2, [sp, #28]
 800a274:	4654      	mov	r4, sl
 800a276:	2000      	movs	r0, #0
 800a278:	f04f 0c0a 	mov.w	ip, #10
 800a27c:	4621      	mov	r1, r4
 800a27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a282:	3b30      	subs	r3, #48	; 0x30
 800a284:	2b09      	cmp	r3, #9
 800a286:	d94e      	bls.n	800a326 <_svfiprintf_r+0x17e>
 800a288:	b1b0      	cbz	r0, 800a2b8 <_svfiprintf_r+0x110>
 800a28a:	9207      	str	r2, [sp, #28]
 800a28c:	e014      	b.n	800a2b8 <_svfiprintf_r+0x110>
 800a28e:	eba0 0308 	sub.w	r3, r0, r8
 800a292:	fa09 f303 	lsl.w	r3, r9, r3
 800a296:	4313      	orrs	r3, r2
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	46a2      	mov	sl, r4
 800a29c:	e7d2      	b.n	800a244 <_svfiprintf_r+0x9c>
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	1d19      	adds	r1, r3, #4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	9103      	str	r1, [sp, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bfbb      	ittet	lt
 800a2aa:	425b      	neglt	r3, r3
 800a2ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b0:	9307      	strge	r3, [sp, #28]
 800a2b2:	9307      	strlt	r3, [sp, #28]
 800a2b4:	bfb8      	it	lt
 800a2b6:	9204      	strlt	r2, [sp, #16]
 800a2b8:	7823      	ldrb	r3, [r4, #0]
 800a2ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a2bc:	d10c      	bne.n	800a2d8 <_svfiprintf_r+0x130>
 800a2be:	7863      	ldrb	r3, [r4, #1]
 800a2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c2:	d135      	bne.n	800a330 <_svfiprintf_r+0x188>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	9203      	str	r2, [sp, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfb8      	it	lt
 800a2d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2d4:	3402      	adds	r4, #2
 800a2d6:	9305      	str	r3, [sp, #20]
 800a2d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3a4 <_svfiprintf_r+0x1fc>
 800a2dc:	7821      	ldrb	r1, [r4, #0]
 800a2de:	2203      	movs	r2, #3
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	f7f6 f80d 	bl	8000300 <memchr>
 800a2e6:	b140      	cbz	r0, 800a2fa <_svfiprintf_r+0x152>
 800a2e8:	2340      	movs	r3, #64	; 0x40
 800a2ea:	eba0 000a 	sub.w	r0, r0, sl
 800a2ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a2f2:	9b04      	ldr	r3, [sp, #16]
 800a2f4:	4303      	orrs	r3, r0
 800a2f6:	3401      	adds	r4, #1
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fe:	4826      	ldr	r0, [pc, #152]	; (800a398 <_svfiprintf_r+0x1f0>)
 800a300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a304:	2206      	movs	r2, #6
 800a306:	f7f5 fffb 	bl	8000300 <memchr>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d038      	beq.n	800a380 <_svfiprintf_r+0x1d8>
 800a30e:	4b23      	ldr	r3, [pc, #140]	; (800a39c <_svfiprintf_r+0x1f4>)
 800a310:	bb1b      	cbnz	r3, 800a35a <_svfiprintf_r+0x1b2>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	3307      	adds	r3, #7
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	3308      	adds	r3, #8
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a320:	4433      	add	r3, r6
 800a322:	9309      	str	r3, [sp, #36]	; 0x24
 800a324:	e767      	b.n	800a1f6 <_svfiprintf_r+0x4e>
 800a326:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32a:	460c      	mov	r4, r1
 800a32c:	2001      	movs	r0, #1
 800a32e:	e7a5      	b.n	800a27c <_svfiprintf_r+0xd4>
 800a330:	2300      	movs	r3, #0
 800a332:	3401      	adds	r4, #1
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	4619      	mov	r1, r3
 800a338:	f04f 0c0a 	mov.w	ip, #10
 800a33c:	4620      	mov	r0, r4
 800a33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a342:	3a30      	subs	r2, #48	; 0x30
 800a344:	2a09      	cmp	r2, #9
 800a346:	d903      	bls.n	800a350 <_svfiprintf_r+0x1a8>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0c5      	beq.n	800a2d8 <_svfiprintf_r+0x130>
 800a34c:	9105      	str	r1, [sp, #20]
 800a34e:	e7c3      	b.n	800a2d8 <_svfiprintf_r+0x130>
 800a350:	fb0c 2101 	mla	r1, ip, r1, r2
 800a354:	4604      	mov	r4, r0
 800a356:	2301      	movs	r3, #1
 800a358:	e7f0      	b.n	800a33c <_svfiprintf_r+0x194>
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	462a      	mov	r2, r5
 800a360:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <_svfiprintf_r+0x1f8>)
 800a362:	a904      	add	r1, sp, #16
 800a364:	4638      	mov	r0, r7
 800a366:	f3af 8000 	nop.w
 800a36a:	1c42      	adds	r2, r0, #1
 800a36c:	4606      	mov	r6, r0
 800a36e:	d1d6      	bne.n	800a31e <_svfiprintf_r+0x176>
 800a370:	89ab      	ldrh	r3, [r5, #12]
 800a372:	065b      	lsls	r3, r3, #25
 800a374:	f53f af2c 	bmi.w	800a1d0 <_svfiprintf_r+0x28>
 800a378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37a:	b01d      	add	sp, #116	; 0x74
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a380:	ab03      	add	r3, sp, #12
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	462a      	mov	r2, r5
 800a386:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <_svfiprintf_r+0x1f8>)
 800a388:	a904      	add	r1, sp, #16
 800a38a:	4638      	mov	r0, r7
 800a38c:	f000 f87a 	bl	800a484 <_printf_i>
 800a390:	e7eb      	b.n	800a36a <_svfiprintf_r+0x1c2>
 800a392:	bf00      	nop
 800a394:	0800abe8 	.word	0x0800abe8
 800a398:	0800abf2 	.word	0x0800abf2
 800a39c:	00000000 	.word	0x00000000
 800a3a0:	0800a0f1 	.word	0x0800a0f1
 800a3a4:	0800abee 	.word	0x0800abee

0800a3a8 <_printf_common>:
 800a3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ac:	4616      	mov	r6, r2
 800a3ae:	4699      	mov	r9, r3
 800a3b0:	688a      	ldr	r2, [r1, #8]
 800a3b2:	690b      	ldr	r3, [r1, #16]
 800a3b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	bfb8      	it	lt
 800a3bc:	4613      	movlt	r3, r2
 800a3be:	6033      	str	r3, [r6, #0]
 800a3c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	b10a      	cbz	r2, 800a3ce <_printf_common+0x26>
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	0699      	lsls	r1, r3, #26
 800a3d2:	bf42      	ittt	mi
 800a3d4:	6833      	ldrmi	r3, [r6, #0]
 800a3d6:	3302      	addmi	r3, #2
 800a3d8:	6033      	strmi	r3, [r6, #0]
 800a3da:	6825      	ldr	r5, [r4, #0]
 800a3dc:	f015 0506 	ands.w	r5, r5, #6
 800a3e0:	d106      	bne.n	800a3f0 <_printf_common+0x48>
 800a3e2:	f104 0a19 	add.w	sl, r4, #25
 800a3e6:	68e3      	ldr	r3, [r4, #12]
 800a3e8:	6832      	ldr	r2, [r6, #0]
 800a3ea:	1a9b      	subs	r3, r3, r2
 800a3ec:	42ab      	cmp	r3, r5
 800a3ee:	dc26      	bgt.n	800a43e <_printf_common+0x96>
 800a3f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3f4:	1e13      	subs	r3, r2, #0
 800a3f6:	6822      	ldr	r2, [r4, #0]
 800a3f8:	bf18      	it	ne
 800a3fa:	2301      	movne	r3, #1
 800a3fc:	0692      	lsls	r2, r2, #26
 800a3fe:	d42b      	bmi.n	800a458 <_printf_common+0xb0>
 800a400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a404:	4649      	mov	r1, r9
 800a406:	4638      	mov	r0, r7
 800a408:	47c0      	blx	r8
 800a40a:	3001      	adds	r0, #1
 800a40c:	d01e      	beq.n	800a44c <_printf_common+0xa4>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	68e5      	ldr	r5, [r4, #12]
 800a412:	6832      	ldr	r2, [r6, #0]
 800a414:	f003 0306 	and.w	r3, r3, #6
 800a418:	2b04      	cmp	r3, #4
 800a41a:	bf08      	it	eq
 800a41c:	1aad      	subeq	r5, r5, r2
 800a41e:	68a3      	ldr	r3, [r4, #8]
 800a420:	6922      	ldr	r2, [r4, #16]
 800a422:	bf0c      	ite	eq
 800a424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a428:	2500      	movne	r5, #0
 800a42a:	4293      	cmp	r3, r2
 800a42c:	bfc4      	itt	gt
 800a42e:	1a9b      	subgt	r3, r3, r2
 800a430:	18ed      	addgt	r5, r5, r3
 800a432:	2600      	movs	r6, #0
 800a434:	341a      	adds	r4, #26
 800a436:	42b5      	cmp	r5, r6
 800a438:	d11a      	bne.n	800a470 <_printf_common+0xc8>
 800a43a:	2000      	movs	r0, #0
 800a43c:	e008      	b.n	800a450 <_printf_common+0xa8>
 800a43e:	2301      	movs	r3, #1
 800a440:	4652      	mov	r2, sl
 800a442:	4649      	mov	r1, r9
 800a444:	4638      	mov	r0, r7
 800a446:	47c0      	blx	r8
 800a448:	3001      	adds	r0, #1
 800a44a:	d103      	bne.n	800a454 <_printf_common+0xac>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a454:	3501      	adds	r5, #1
 800a456:	e7c6      	b.n	800a3e6 <_printf_common+0x3e>
 800a458:	18e1      	adds	r1, r4, r3
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	2030      	movs	r0, #48	; 0x30
 800a45e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a462:	4422      	add	r2, r4
 800a464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a46c:	3302      	adds	r3, #2
 800a46e:	e7c7      	b.n	800a400 <_printf_common+0x58>
 800a470:	2301      	movs	r3, #1
 800a472:	4622      	mov	r2, r4
 800a474:	4649      	mov	r1, r9
 800a476:	4638      	mov	r0, r7
 800a478:	47c0      	blx	r8
 800a47a:	3001      	adds	r0, #1
 800a47c:	d0e6      	beq.n	800a44c <_printf_common+0xa4>
 800a47e:	3601      	adds	r6, #1
 800a480:	e7d9      	b.n	800a436 <_printf_common+0x8e>
	...

0800a484 <_printf_i>:
 800a484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a488:	7e0f      	ldrb	r7, [r1, #24]
 800a48a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a48c:	2f78      	cmp	r7, #120	; 0x78
 800a48e:	4691      	mov	r9, r2
 800a490:	4680      	mov	r8, r0
 800a492:	460c      	mov	r4, r1
 800a494:	469a      	mov	sl, r3
 800a496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a49a:	d807      	bhi.n	800a4ac <_printf_i+0x28>
 800a49c:	2f62      	cmp	r7, #98	; 0x62
 800a49e:	d80a      	bhi.n	800a4b6 <_printf_i+0x32>
 800a4a0:	2f00      	cmp	r7, #0
 800a4a2:	f000 80d8 	beq.w	800a656 <_printf_i+0x1d2>
 800a4a6:	2f58      	cmp	r7, #88	; 0x58
 800a4a8:	f000 80a3 	beq.w	800a5f2 <_printf_i+0x16e>
 800a4ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4b4:	e03a      	b.n	800a52c <_printf_i+0xa8>
 800a4b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4ba:	2b15      	cmp	r3, #21
 800a4bc:	d8f6      	bhi.n	800a4ac <_printf_i+0x28>
 800a4be:	a101      	add	r1, pc, #4	; (adr r1, 800a4c4 <_printf_i+0x40>)
 800a4c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4c4:	0800a51d 	.word	0x0800a51d
 800a4c8:	0800a531 	.word	0x0800a531
 800a4cc:	0800a4ad 	.word	0x0800a4ad
 800a4d0:	0800a4ad 	.word	0x0800a4ad
 800a4d4:	0800a4ad 	.word	0x0800a4ad
 800a4d8:	0800a4ad 	.word	0x0800a4ad
 800a4dc:	0800a531 	.word	0x0800a531
 800a4e0:	0800a4ad 	.word	0x0800a4ad
 800a4e4:	0800a4ad 	.word	0x0800a4ad
 800a4e8:	0800a4ad 	.word	0x0800a4ad
 800a4ec:	0800a4ad 	.word	0x0800a4ad
 800a4f0:	0800a63d 	.word	0x0800a63d
 800a4f4:	0800a561 	.word	0x0800a561
 800a4f8:	0800a61f 	.word	0x0800a61f
 800a4fc:	0800a4ad 	.word	0x0800a4ad
 800a500:	0800a4ad 	.word	0x0800a4ad
 800a504:	0800a65f 	.word	0x0800a65f
 800a508:	0800a4ad 	.word	0x0800a4ad
 800a50c:	0800a561 	.word	0x0800a561
 800a510:	0800a4ad 	.word	0x0800a4ad
 800a514:	0800a4ad 	.word	0x0800a4ad
 800a518:	0800a627 	.word	0x0800a627
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	1d1a      	adds	r2, r3, #4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	602a      	str	r2, [r5, #0]
 800a524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a52c:	2301      	movs	r3, #1
 800a52e:	e0a3      	b.n	800a678 <_printf_i+0x1f4>
 800a530:	6820      	ldr	r0, [r4, #0]
 800a532:	6829      	ldr	r1, [r5, #0]
 800a534:	0606      	lsls	r6, r0, #24
 800a536:	f101 0304 	add.w	r3, r1, #4
 800a53a:	d50a      	bpl.n	800a552 <_printf_i+0xce>
 800a53c:	680e      	ldr	r6, [r1, #0]
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	2e00      	cmp	r6, #0
 800a542:	da03      	bge.n	800a54c <_printf_i+0xc8>
 800a544:	232d      	movs	r3, #45	; 0x2d
 800a546:	4276      	negs	r6, r6
 800a548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a54c:	485e      	ldr	r0, [pc, #376]	; (800a6c8 <_printf_i+0x244>)
 800a54e:	230a      	movs	r3, #10
 800a550:	e019      	b.n	800a586 <_printf_i+0x102>
 800a552:	680e      	ldr	r6, [r1, #0]
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a55a:	bf18      	it	ne
 800a55c:	b236      	sxthne	r6, r6
 800a55e:	e7ef      	b.n	800a540 <_printf_i+0xbc>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	6820      	ldr	r0, [r4, #0]
 800a564:	1d19      	adds	r1, r3, #4
 800a566:	6029      	str	r1, [r5, #0]
 800a568:	0601      	lsls	r1, r0, #24
 800a56a:	d501      	bpl.n	800a570 <_printf_i+0xec>
 800a56c:	681e      	ldr	r6, [r3, #0]
 800a56e:	e002      	b.n	800a576 <_printf_i+0xf2>
 800a570:	0646      	lsls	r6, r0, #25
 800a572:	d5fb      	bpl.n	800a56c <_printf_i+0xe8>
 800a574:	881e      	ldrh	r6, [r3, #0]
 800a576:	4854      	ldr	r0, [pc, #336]	; (800a6c8 <_printf_i+0x244>)
 800a578:	2f6f      	cmp	r7, #111	; 0x6f
 800a57a:	bf0c      	ite	eq
 800a57c:	2308      	moveq	r3, #8
 800a57e:	230a      	movne	r3, #10
 800a580:	2100      	movs	r1, #0
 800a582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a586:	6865      	ldr	r5, [r4, #4]
 800a588:	60a5      	str	r5, [r4, #8]
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	bfa2      	ittt	ge
 800a58e:	6821      	ldrge	r1, [r4, #0]
 800a590:	f021 0104 	bicge.w	r1, r1, #4
 800a594:	6021      	strge	r1, [r4, #0]
 800a596:	b90e      	cbnz	r6, 800a59c <_printf_i+0x118>
 800a598:	2d00      	cmp	r5, #0
 800a59a:	d04d      	beq.n	800a638 <_printf_i+0x1b4>
 800a59c:	4615      	mov	r5, r2
 800a59e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a5a6:	5dc7      	ldrb	r7, [r0, r7]
 800a5a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5ac:	4637      	mov	r7, r6
 800a5ae:	42bb      	cmp	r3, r7
 800a5b0:	460e      	mov	r6, r1
 800a5b2:	d9f4      	bls.n	800a59e <_printf_i+0x11a>
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d10b      	bne.n	800a5d0 <_printf_i+0x14c>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	07de      	lsls	r6, r3, #31
 800a5bc:	d508      	bpl.n	800a5d0 <_printf_i+0x14c>
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	6861      	ldr	r1, [r4, #4]
 800a5c2:	4299      	cmp	r1, r3
 800a5c4:	bfde      	ittt	le
 800a5c6:	2330      	movle	r3, #48	; 0x30
 800a5c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5d0:	1b52      	subs	r2, r2, r5
 800a5d2:	6122      	str	r2, [r4, #16]
 800a5d4:	f8cd a000 	str.w	sl, [sp]
 800a5d8:	464b      	mov	r3, r9
 800a5da:	aa03      	add	r2, sp, #12
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4640      	mov	r0, r8
 800a5e0:	f7ff fee2 	bl	800a3a8 <_printf_common>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d14c      	bne.n	800a682 <_printf_i+0x1fe>
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	b004      	add	sp, #16
 800a5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f2:	4835      	ldr	r0, [pc, #212]	; (800a6c8 <_printf_i+0x244>)
 800a5f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5f8:	6829      	ldr	r1, [r5, #0]
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a600:	6029      	str	r1, [r5, #0]
 800a602:	061d      	lsls	r5, r3, #24
 800a604:	d514      	bpl.n	800a630 <_printf_i+0x1ac>
 800a606:	07df      	lsls	r7, r3, #31
 800a608:	bf44      	itt	mi
 800a60a:	f043 0320 	orrmi.w	r3, r3, #32
 800a60e:	6023      	strmi	r3, [r4, #0]
 800a610:	b91e      	cbnz	r6, 800a61a <_printf_i+0x196>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	f023 0320 	bic.w	r3, r3, #32
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	2310      	movs	r3, #16
 800a61c:	e7b0      	b.n	800a580 <_printf_i+0xfc>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	f043 0320 	orr.w	r3, r3, #32
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	2378      	movs	r3, #120	; 0x78
 800a628:	4828      	ldr	r0, [pc, #160]	; (800a6cc <_printf_i+0x248>)
 800a62a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a62e:	e7e3      	b.n	800a5f8 <_printf_i+0x174>
 800a630:	0659      	lsls	r1, r3, #25
 800a632:	bf48      	it	mi
 800a634:	b2b6      	uxthmi	r6, r6
 800a636:	e7e6      	b.n	800a606 <_printf_i+0x182>
 800a638:	4615      	mov	r5, r2
 800a63a:	e7bb      	b.n	800a5b4 <_printf_i+0x130>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	6826      	ldr	r6, [r4, #0]
 800a640:	6961      	ldr	r1, [r4, #20]
 800a642:	1d18      	adds	r0, r3, #4
 800a644:	6028      	str	r0, [r5, #0]
 800a646:	0635      	lsls	r5, r6, #24
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	d501      	bpl.n	800a650 <_printf_i+0x1cc>
 800a64c:	6019      	str	r1, [r3, #0]
 800a64e:	e002      	b.n	800a656 <_printf_i+0x1d2>
 800a650:	0670      	lsls	r0, r6, #25
 800a652:	d5fb      	bpl.n	800a64c <_printf_i+0x1c8>
 800a654:	8019      	strh	r1, [r3, #0]
 800a656:	2300      	movs	r3, #0
 800a658:	6123      	str	r3, [r4, #16]
 800a65a:	4615      	mov	r5, r2
 800a65c:	e7ba      	b.n	800a5d4 <_printf_i+0x150>
 800a65e:	682b      	ldr	r3, [r5, #0]
 800a660:	1d1a      	adds	r2, r3, #4
 800a662:	602a      	str	r2, [r5, #0]
 800a664:	681d      	ldr	r5, [r3, #0]
 800a666:	6862      	ldr	r2, [r4, #4]
 800a668:	2100      	movs	r1, #0
 800a66a:	4628      	mov	r0, r5
 800a66c:	f7f5 fe48 	bl	8000300 <memchr>
 800a670:	b108      	cbz	r0, 800a676 <_printf_i+0x1f2>
 800a672:	1b40      	subs	r0, r0, r5
 800a674:	6060      	str	r0, [r4, #4]
 800a676:	6863      	ldr	r3, [r4, #4]
 800a678:	6123      	str	r3, [r4, #16]
 800a67a:	2300      	movs	r3, #0
 800a67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a680:	e7a8      	b.n	800a5d4 <_printf_i+0x150>
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	462a      	mov	r2, r5
 800a686:	4649      	mov	r1, r9
 800a688:	4640      	mov	r0, r8
 800a68a:	47d0      	blx	sl
 800a68c:	3001      	adds	r0, #1
 800a68e:	d0ab      	beq.n	800a5e8 <_printf_i+0x164>
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	079b      	lsls	r3, r3, #30
 800a694:	d413      	bmi.n	800a6be <_printf_i+0x23a>
 800a696:	68e0      	ldr	r0, [r4, #12]
 800a698:	9b03      	ldr	r3, [sp, #12]
 800a69a:	4298      	cmp	r0, r3
 800a69c:	bfb8      	it	lt
 800a69e:	4618      	movlt	r0, r3
 800a6a0:	e7a4      	b.n	800a5ec <_printf_i+0x168>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	47d0      	blx	sl
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	d09b      	beq.n	800a5e8 <_printf_i+0x164>
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	68e3      	ldr	r3, [r4, #12]
 800a6b4:	9903      	ldr	r1, [sp, #12]
 800a6b6:	1a5b      	subs	r3, r3, r1
 800a6b8:	42ab      	cmp	r3, r5
 800a6ba:	dcf2      	bgt.n	800a6a2 <_printf_i+0x21e>
 800a6bc:	e7eb      	b.n	800a696 <_printf_i+0x212>
 800a6be:	2500      	movs	r5, #0
 800a6c0:	f104 0619 	add.w	r6, r4, #25
 800a6c4:	e7f5      	b.n	800a6b2 <_printf_i+0x22e>
 800a6c6:	bf00      	nop
 800a6c8:	0800abf9 	.word	0x0800abf9
 800a6cc:	0800ac0a 	.word	0x0800ac0a

0800a6d0 <memcpy>:
 800a6d0:	440a      	add	r2, r1
 800a6d2:	4291      	cmp	r1, r2
 800a6d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6d8:	d100      	bne.n	800a6dc <memcpy+0xc>
 800a6da:	4770      	bx	lr
 800a6dc:	b510      	push	{r4, lr}
 800a6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6e6:	4291      	cmp	r1, r2
 800a6e8:	d1f9      	bne.n	800a6de <memcpy+0xe>
 800a6ea:	bd10      	pop	{r4, pc}

0800a6ec <memmove>:
 800a6ec:	4288      	cmp	r0, r1
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	eb01 0402 	add.w	r4, r1, r2
 800a6f4:	d902      	bls.n	800a6fc <memmove+0x10>
 800a6f6:	4284      	cmp	r4, r0
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	d807      	bhi.n	800a70c <memmove+0x20>
 800a6fc:	1e43      	subs	r3, r0, #1
 800a6fe:	42a1      	cmp	r1, r4
 800a700:	d008      	beq.n	800a714 <memmove+0x28>
 800a702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a70a:	e7f8      	b.n	800a6fe <memmove+0x12>
 800a70c:	4402      	add	r2, r0
 800a70e:	4601      	mov	r1, r0
 800a710:	428a      	cmp	r2, r1
 800a712:	d100      	bne.n	800a716 <memmove+0x2a>
 800a714:	bd10      	pop	{r4, pc}
 800a716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a71e:	e7f7      	b.n	800a710 <memmove+0x24>

0800a720 <_free_r>:
 800a720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a722:	2900      	cmp	r1, #0
 800a724:	d044      	beq.n	800a7b0 <_free_r+0x90>
 800a726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a72a:	9001      	str	r0, [sp, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f1a1 0404 	sub.w	r4, r1, #4
 800a732:	bfb8      	it	lt
 800a734:	18e4      	addlt	r4, r4, r3
 800a736:	f000 f913 	bl	800a960 <__malloc_lock>
 800a73a:	4a1e      	ldr	r2, [pc, #120]	; (800a7b4 <_free_r+0x94>)
 800a73c:	9801      	ldr	r0, [sp, #4]
 800a73e:	6813      	ldr	r3, [r2, #0]
 800a740:	b933      	cbnz	r3, 800a750 <_free_r+0x30>
 800a742:	6063      	str	r3, [r4, #4]
 800a744:	6014      	str	r4, [r2, #0]
 800a746:	b003      	add	sp, #12
 800a748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a74c:	f000 b90e 	b.w	800a96c <__malloc_unlock>
 800a750:	42a3      	cmp	r3, r4
 800a752:	d908      	bls.n	800a766 <_free_r+0x46>
 800a754:	6825      	ldr	r5, [r4, #0]
 800a756:	1961      	adds	r1, r4, r5
 800a758:	428b      	cmp	r3, r1
 800a75a:	bf01      	itttt	eq
 800a75c:	6819      	ldreq	r1, [r3, #0]
 800a75e:	685b      	ldreq	r3, [r3, #4]
 800a760:	1949      	addeq	r1, r1, r5
 800a762:	6021      	streq	r1, [r4, #0]
 800a764:	e7ed      	b.n	800a742 <_free_r+0x22>
 800a766:	461a      	mov	r2, r3
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	b10b      	cbz	r3, 800a770 <_free_r+0x50>
 800a76c:	42a3      	cmp	r3, r4
 800a76e:	d9fa      	bls.n	800a766 <_free_r+0x46>
 800a770:	6811      	ldr	r1, [r2, #0]
 800a772:	1855      	adds	r5, r2, r1
 800a774:	42a5      	cmp	r5, r4
 800a776:	d10b      	bne.n	800a790 <_free_r+0x70>
 800a778:	6824      	ldr	r4, [r4, #0]
 800a77a:	4421      	add	r1, r4
 800a77c:	1854      	adds	r4, r2, r1
 800a77e:	42a3      	cmp	r3, r4
 800a780:	6011      	str	r1, [r2, #0]
 800a782:	d1e0      	bne.n	800a746 <_free_r+0x26>
 800a784:	681c      	ldr	r4, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	6053      	str	r3, [r2, #4]
 800a78a:	4421      	add	r1, r4
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	e7da      	b.n	800a746 <_free_r+0x26>
 800a790:	d902      	bls.n	800a798 <_free_r+0x78>
 800a792:	230c      	movs	r3, #12
 800a794:	6003      	str	r3, [r0, #0]
 800a796:	e7d6      	b.n	800a746 <_free_r+0x26>
 800a798:	6825      	ldr	r5, [r4, #0]
 800a79a:	1961      	adds	r1, r4, r5
 800a79c:	428b      	cmp	r3, r1
 800a79e:	bf04      	itt	eq
 800a7a0:	6819      	ldreq	r1, [r3, #0]
 800a7a2:	685b      	ldreq	r3, [r3, #4]
 800a7a4:	6063      	str	r3, [r4, #4]
 800a7a6:	bf04      	itt	eq
 800a7a8:	1949      	addeq	r1, r1, r5
 800a7aa:	6021      	streq	r1, [r4, #0]
 800a7ac:	6054      	str	r4, [r2, #4]
 800a7ae:	e7ca      	b.n	800a746 <_free_r+0x26>
 800a7b0:	b003      	add	sp, #12
 800a7b2:	bd30      	pop	{r4, r5, pc}
 800a7b4:	24000aec 	.word	0x24000aec

0800a7b8 <sbrk_aligned>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	4e0e      	ldr	r6, [pc, #56]	; (800a7f4 <sbrk_aligned+0x3c>)
 800a7bc:	460c      	mov	r4, r1
 800a7be:	6831      	ldr	r1, [r6, #0]
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	b911      	cbnz	r1, 800a7ca <sbrk_aligned+0x12>
 800a7c4:	f000 f8bc 	bl	800a940 <_sbrk_r>
 800a7c8:	6030      	str	r0, [r6, #0]
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 f8b7 	bl	800a940 <_sbrk_r>
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d00a      	beq.n	800a7ec <sbrk_aligned+0x34>
 800a7d6:	1cc4      	adds	r4, r0, #3
 800a7d8:	f024 0403 	bic.w	r4, r4, #3
 800a7dc:	42a0      	cmp	r0, r4
 800a7de:	d007      	beq.n	800a7f0 <sbrk_aligned+0x38>
 800a7e0:	1a21      	subs	r1, r4, r0
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 f8ac 	bl	800a940 <_sbrk_r>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d101      	bne.n	800a7f0 <sbrk_aligned+0x38>
 800a7ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	24000af0 	.word	0x24000af0

0800a7f8 <_malloc_r>:
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	1ccd      	adds	r5, r1, #3
 800a7fe:	f025 0503 	bic.w	r5, r5, #3
 800a802:	3508      	adds	r5, #8
 800a804:	2d0c      	cmp	r5, #12
 800a806:	bf38      	it	cc
 800a808:	250c      	movcc	r5, #12
 800a80a:	2d00      	cmp	r5, #0
 800a80c:	4607      	mov	r7, r0
 800a80e:	db01      	blt.n	800a814 <_malloc_r+0x1c>
 800a810:	42a9      	cmp	r1, r5
 800a812:	d905      	bls.n	800a820 <_malloc_r+0x28>
 800a814:	230c      	movs	r3, #12
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	2600      	movs	r6, #0
 800a81a:	4630      	mov	r0, r6
 800a81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a820:	4e2e      	ldr	r6, [pc, #184]	; (800a8dc <_malloc_r+0xe4>)
 800a822:	f000 f89d 	bl	800a960 <__malloc_lock>
 800a826:	6833      	ldr	r3, [r6, #0]
 800a828:	461c      	mov	r4, r3
 800a82a:	bb34      	cbnz	r4, 800a87a <_malloc_r+0x82>
 800a82c:	4629      	mov	r1, r5
 800a82e:	4638      	mov	r0, r7
 800a830:	f7ff ffc2 	bl	800a7b8 <sbrk_aligned>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	4604      	mov	r4, r0
 800a838:	d14d      	bne.n	800a8d6 <_malloc_r+0xde>
 800a83a:	6834      	ldr	r4, [r6, #0]
 800a83c:	4626      	mov	r6, r4
 800a83e:	2e00      	cmp	r6, #0
 800a840:	d140      	bne.n	800a8c4 <_malloc_r+0xcc>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	4631      	mov	r1, r6
 800a846:	4638      	mov	r0, r7
 800a848:	eb04 0803 	add.w	r8, r4, r3
 800a84c:	f000 f878 	bl	800a940 <_sbrk_r>
 800a850:	4580      	cmp	r8, r0
 800a852:	d13a      	bne.n	800a8ca <_malloc_r+0xd2>
 800a854:	6821      	ldr	r1, [r4, #0]
 800a856:	3503      	adds	r5, #3
 800a858:	1a6d      	subs	r5, r5, r1
 800a85a:	f025 0503 	bic.w	r5, r5, #3
 800a85e:	3508      	adds	r5, #8
 800a860:	2d0c      	cmp	r5, #12
 800a862:	bf38      	it	cc
 800a864:	250c      	movcc	r5, #12
 800a866:	4629      	mov	r1, r5
 800a868:	4638      	mov	r0, r7
 800a86a:	f7ff ffa5 	bl	800a7b8 <sbrk_aligned>
 800a86e:	3001      	adds	r0, #1
 800a870:	d02b      	beq.n	800a8ca <_malloc_r+0xd2>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	442b      	add	r3, r5
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	e00e      	b.n	800a898 <_malloc_r+0xa0>
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	1b52      	subs	r2, r2, r5
 800a87e:	d41e      	bmi.n	800a8be <_malloc_r+0xc6>
 800a880:	2a0b      	cmp	r2, #11
 800a882:	d916      	bls.n	800a8b2 <_malloc_r+0xba>
 800a884:	1961      	adds	r1, r4, r5
 800a886:	42a3      	cmp	r3, r4
 800a888:	6025      	str	r5, [r4, #0]
 800a88a:	bf18      	it	ne
 800a88c:	6059      	strne	r1, [r3, #4]
 800a88e:	6863      	ldr	r3, [r4, #4]
 800a890:	bf08      	it	eq
 800a892:	6031      	streq	r1, [r6, #0]
 800a894:	5162      	str	r2, [r4, r5]
 800a896:	604b      	str	r3, [r1, #4]
 800a898:	4638      	mov	r0, r7
 800a89a:	f104 060b 	add.w	r6, r4, #11
 800a89e:	f000 f865 	bl	800a96c <__malloc_unlock>
 800a8a2:	f026 0607 	bic.w	r6, r6, #7
 800a8a6:	1d23      	adds	r3, r4, #4
 800a8a8:	1af2      	subs	r2, r6, r3
 800a8aa:	d0b6      	beq.n	800a81a <_malloc_r+0x22>
 800a8ac:	1b9b      	subs	r3, r3, r6
 800a8ae:	50a3      	str	r3, [r4, r2]
 800a8b0:	e7b3      	b.n	800a81a <_malloc_r+0x22>
 800a8b2:	6862      	ldr	r2, [r4, #4]
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	bf0c      	ite	eq
 800a8b8:	6032      	streq	r2, [r6, #0]
 800a8ba:	605a      	strne	r2, [r3, #4]
 800a8bc:	e7ec      	b.n	800a898 <_malloc_r+0xa0>
 800a8be:	4623      	mov	r3, r4
 800a8c0:	6864      	ldr	r4, [r4, #4]
 800a8c2:	e7b2      	b.n	800a82a <_malloc_r+0x32>
 800a8c4:	4634      	mov	r4, r6
 800a8c6:	6876      	ldr	r6, [r6, #4]
 800a8c8:	e7b9      	b.n	800a83e <_malloc_r+0x46>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	603b      	str	r3, [r7, #0]
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	f000 f84c 	bl	800a96c <__malloc_unlock>
 800a8d4:	e7a1      	b.n	800a81a <_malloc_r+0x22>
 800a8d6:	6025      	str	r5, [r4, #0]
 800a8d8:	e7de      	b.n	800a898 <_malloc_r+0xa0>
 800a8da:	bf00      	nop
 800a8dc:	24000aec 	.word	0x24000aec

0800a8e0 <_realloc_r>:
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	460e      	mov	r6, r1
 800a8ea:	b921      	cbnz	r1, 800a8f6 <_realloc_r+0x16>
 800a8ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	f7ff bf81 	b.w	800a7f8 <_malloc_r>
 800a8f6:	b92a      	cbnz	r2, 800a904 <_realloc_r+0x24>
 800a8f8:	f7ff ff12 	bl	800a720 <_free_r>
 800a8fc:	4625      	mov	r5, r4
 800a8fe:	4628      	mov	r0, r5
 800a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a904:	f000 f838 	bl	800a978 <_malloc_usable_size_r>
 800a908:	4284      	cmp	r4, r0
 800a90a:	4607      	mov	r7, r0
 800a90c:	d802      	bhi.n	800a914 <_realloc_r+0x34>
 800a90e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a912:	d812      	bhi.n	800a93a <_realloc_r+0x5a>
 800a914:	4621      	mov	r1, r4
 800a916:	4640      	mov	r0, r8
 800a918:	f7ff ff6e 	bl	800a7f8 <_malloc_r>
 800a91c:	4605      	mov	r5, r0
 800a91e:	2800      	cmp	r0, #0
 800a920:	d0ed      	beq.n	800a8fe <_realloc_r+0x1e>
 800a922:	42bc      	cmp	r4, r7
 800a924:	4622      	mov	r2, r4
 800a926:	4631      	mov	r1, r6
 800a928:	bf28      	it	cs
 800a92a:	463a      	movcs	r2, r7
 800a92c:	f7ff fed0 	bl	800a6d0 <memcpy>
 800a930:	4631      	mov	r1, r6
 800a932:	4640      	mov	r0, r8
 800a934:	f7ff fef4 	bl	800a720 <_free_r>
 800a938:	e7e1      	b.n	800a8fe <_realloc_r+0x1e>
 800a93a:	4635      	mov	r5, r6
 800a93c:	e7df      	b.n	800a8fe <_realloc_r+0x1e>
	...

0800a940 <_sbrk_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d06      	ldr	r5, [pc, #24]	; (800a95c <_sbrk_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f6 fa60 	bl	8000e10 <_sbrk>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_sbrk_r+0x1a>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_sbrk_r+0x1a>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	24000af4 	.word	0x24000af4

0800a960 <__malloc_lock>:
 800a960:	4801      	ldr	r0, [pc, #4]	; (800a968 <__malloc_lock+0x8>)
 800a962:	f000 b811 	b.w	800a988 <__retarget_lock_acquire_recursive>
 800a966:	bf00      	nop
 800a968:	24000af8 	.word	0x24000af8

0800a96c <__malloc_unlock>:
 800a96c:	4801      	ldr	r0, [pc, #4]	; (800a974 <__malloc_unlock+0x8>)
 800a96e:	f000 b80c 	b.w	800a98a <__retarget_lock_release_recursive>
 800a972:	bf00      	nop
 800a974:	24000af8 	.word	0x24000af8

0800a978 <_malloc_usable_size_r>:
 800a978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a97c:	1f18      	subs	r0, r3, #4
 800a97e:	2b00      	cmp	r3, #0
 800a980:	bfbc      	itt	lt
 800a982:	580b      	ldrlt	r3, [r1, r0]
 800a984:	18c0      	addlt	r0, r0, r3
 800a986:	4770      	bx	lr

0800a988 <__retarget_lock_acquire_recursive>:
 800a988:	4770      	bx	lr

0800a98a <__retarget_lock_release_recursive>:
 800a98a:	4770      	bx	lr

0800a98c <_init>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	bf00      	nop
 800a990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a992:	bc08      	pop	{r3}
 800a994:	469e      	mov	lr, r3
 800a996:	4770      	bx	lr

0800a998 <_fini>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	bf00      	nop
 800a99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99e:	bc08      	pop	{r3}
 800a9a0:	469e      	mov	lr, r3
 800a9a2:	4770      	bx	lr
