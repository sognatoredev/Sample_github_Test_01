
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d28  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800722c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005bc  24000074  080072a0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000630  080072a0  00020630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017929  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b92  00000000  00000000  000379cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f8  00000000  00000000  0003a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fc0  00000000  00000000  0003b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031dd5  00000000  00000000  0003c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017f4b  00000000  00000000  0006e3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140031  00000000  00000000  00086338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c6369  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000049d0  00000000  00000000  001c63bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006fc0 	.word	0x08006fc0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08006fc0 	.word	0x08006fc0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <Button_Process>:
        HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
    }
}
#else
void Button_Process (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  if (userButton_state == 0x01)
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <Button_Process+0x3c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d114      	bne.n	80006da <Button_Process+0x36>
  {
    userButton_state = 0x00;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <Button_Process+0x3c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
    sprintf(uart3_tx_buf, " Button Interrupt callback. Input Count : %d\r\n", userButton_cnt);
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <Button_Process+0x40>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	490a      	ldr	r1, [pc, #40]	; (80006e8 <Button_Process+0x44>)
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <Button_Process+0x48>)
 80006c0:	f006 f810 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <Button_Process+0x48>)
 80006c6:	f7ff fe13 	bl	80002f0 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	4906      	ldr	r1, [pc, #24]	; (80006ec <Button_Process+0x48>)
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <Button_Process+0x4c>)
 80006d6:	f004 fdb5 	bl	8005244 <HAL_UART_Transmit>
  }
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2400061a 	.word	0x2400061a
 80006e4:	24000618 	.word	0x24000618
 80006e8:	08006fd8 	.word	0x08006fd8
 80006ec:	24000218 	.word	0x24000218
 80006f0:	24000178 	.word	0x24000178

080006f4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	; 0x38
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b84      	ldr	r3, [pc, #528]	; (800091c <MX_GPIO_Init+0x228>)
 800070c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000710:	4a82      	ldr	r2, [pc, #520]	; (800091c <MX_GPIO_Init+0x228>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800071a:	4b80      	ldr	r3, [pc, #512]	; (800091c <MX_GPIO_Init+0x228>)
 800071c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000728:	4b7c      	ldr	r3, [pc, #496]	; (800091c <MX_GPIO_Init+0x228>)
 800072a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072e:	4a7b      	ldr	r2, [pc, #492]	; (800091c <MX_GPIO_Init+0x228>)
 8000730:	f043 0320 	orr.w	r3, r3, #32
 8000734:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000738:	4b78      	ldr	r3, [pc, #480]	; (800091c <MX_GPIO_Init+0x228>)
 800073a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800073e:	f003 0320 	and.w	r3, r3, #32
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b75      	ldr	r3, [pc, #468]	; (800091c <MX_GPIO_Init+0x228>)
 8000748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074c:	4a73      	ldr	r2, [pc, #460]	; (800091c <MX_GPIO_Init+0x228>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000756:	4b71      	ldr	r3, [pc, #452]	; (800091c <MX_GPIO_Init+0x228>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b6d      	ldr	r3, [pc, #436]	; (800091c <MX_GPIO_Init+0x228>)
 8000766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076a:	4a6c      	ldr	r2, [pc, #432]	; (800091c <MX_GPIO_Init+0x228>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000774:	4b69      	ldr	r3, [pc, #420]	; (800091c <MX_GPIO_Init+0x228>)
 8000776:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b66      	ldr	r3, [pc, #408]	; (800091c <MX_GPIO_Init+0x228>)
 8000784:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000788:	4a64      	ldr	r2, [pc, #400]	; (800091c <MX_GPIO_Init+0x228>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000792:	4b62      	ldr	r3, [pc, #392]	; (800091c <MX_GPIO_Init+0x228>)
 8000794:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a0:	4b5e      	ldr	r3, [pc, #376]	; (800091c <MX_GPIO_Init+0x228>)
 80007a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a6:	4a5d      	ldr	r2, [pc, #372]	; (800091c <MX_GPIO_Init+0x228>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007b0:	4b5a      	ldr	r3, [pc, #360]	; (800091c <MX_GPIO_Init+0x228>)
 80007b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b57      	ldr	r3, [pc, #348]	; (800091c <MX_GPIO_Init+0x228>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c4:	4a55      	ldr	r2, [pc, #340]	; (800091c <MX_GPIO_Init+0x228>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ce:	4b53      	ldr	r3, [pc, #332]	; (800091c <MX_GPIO_Init+0x228>)
 80007d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007dc:	4b4f      	ldr	r3, [pc, #316]	; (800091c <MX_GPIO_Init+0x228>)
 80007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e2:	4a4e      	ldr	r2, [pc, #312]	; (800091c <MX_GPIO_Init+0x228>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ec:	4b4b      	ldr	r3, [pc, #300]	; (800091c <MX_GPIO_Init+0x228>)
 80007ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000800:	4847      	ldr	r0, [pc, #284]	; (8000920 <MX_GPIO_Init+0x22c>)
 8000802:	f001 f9a1 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f244 0101 	movw	r1, #16385	; 0x4001
 800080c:	4845      	ldr	r0, [pc, #276]	; (8000924 <MX_GPIO_Init+0x230>)
 800080e:	f001 f99b 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	4844      	ldr	r0, [pc, #272]	; (8000928 <MX_GPIO_Init+0x234>)
 8000818:	f001 f996 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	483e      	ldr	r0, [pc, #248]	; (800092c <MX_GPIO_Init+0x238>)
 8000834:	f000 ffd8 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	4833      	ldr	r0, [pc, #204]	; (8000920 <MX_GPIO_Init+0x22c>)
 8000852:	f000 ffc9 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000856:	f244 0301 	movw	r3, #16385	; 0x4001
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	482d      	ldr	r0, [pc, #180]	; (8000924 <MX_GPIO_Init+0x230>)
 8000870:	f000 ffba 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000878:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4829      	ldr	r0, [pc, #164]	; (8000930 <MX_GPIO_Init+0x23c>)
 800088a:	f000 ffad 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800088e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a0:	4619      	mov	r1, r3
 80008a2:	4824      	ldr	r0, [pc, #144]	; (8000934 <MX_GPIO_Init+0x240>)
 80008a4:	f000 ffa0 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008ba:	230a      	movs	r3, #10
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	481b      	ldr	r0, [pc, #108]	; (8000934 <MX_GPIO_Init+0x240>)
 80008c6:	f000 ff8f 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80008ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <MX_GPIO_Init+0x240>)
 80008e4:	f000 ff80 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e8:	2302      	movs	r3, #2
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <MX_GPIO_Init+0x234>)
 8000900:	f000 ff72 	bl	80017e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2028      	movs	r0, #40	; 0x28
 800090a:	f000 ff38 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800090e:	2028      	movs	r0, #40	; 0x28
 8000910:	f000 ff4f 	bl	80017b2 <HAL_NVIC_EnableIRQ>

}
 8000914:	bf00      	nop
 8000916:	3738      	adds	r7, #56	; 0x38
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	58024400 	.word	0x58024400
 8000920:	58021400 	.word	0x58021400
 8000924:	58020400 	.word	0x58020400
 8000928:	58021000 	.word	0x58021000
 800092c:	58020800 	.word	0x58020800
 8000930:	58021800 	.word	0x58021800
 8000934:	58020000 	.word	0x58020000

08000938 <LED_Process>:
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
#else
void LED_Process (void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  if (TIM1_CNT > 499) // 1ms period Timer2 Counter.
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <LED_Process+0x54>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000944:	d307      	bcc.n	8000956 <LED_Process+0x1e>
  {
    TIM1_CNT = 0;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <LED_Process+0x54>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]

    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800094c:	2101      	movs	r1, #1
 800094e:	4810      	ldr	r0, [pc, #64]	; (8000990 <LED_Process+0x58>)
 8000950:	f001 f913 	bl	8001b7a <HAL_GPIO_TogglePin>
  else if (TIM8_CNT > 99999) // 10us * 99999 period Timer8 Counter.
  {
    TIM8_CNT = 0;
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
  }
}
 8000954:	e018      	b.n	8000988 <LED_Process+0x50>
  else if (TIM2_CNT > 9) // 100ms * 9 period Timer2 Counter.
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <LED_Process+0x5c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b09      	cmp	r3, #9
 800095c:	d907      	bls.n	800096e <LED_Process+0x36>
    TIM2_CNT = 0;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <LED_Process+0x5c>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000964:	2102      	movs	r1, #2
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <LED_Process+0x60>)
 8000968:	f001 f907 	bl	8001b7a <HAL_GPIO_TogglePin>
}
 800096c:	e00c      	b.n	8000988 <LED_Process+0x50>
  else if (TIM8_CNT > 99999) // 10us * 99999 period Timer8 Counter.
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <LED_Process+0x64>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LED_Process+0x68>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d907      	bls.n	8000988 <LED_Process+0x50>
    TIM8_CNT = 0;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <LED_Process+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <LED_Process+0x58>)
 8000984:	f001 f8f9 	bl	8001b7a <HAL_GPIO_TogglePin>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2400020c 	.word	0x2400020c
 8000990:	58020400 	.word	0x58020400
 8000994:	24000210 	.word	0x24000210
 8000998:	58021000 	.word	0x58021000
 800099c:	24000214 	.word	0x24000214
 80009a0:	0001869f 	.word	0x0001869f

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f000 fd58 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f824 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f7ff fea0 	bl	80006f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009b4:	f000 fb60 	bl	8001078 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009b8:	f000 fc14 	bl	80011e4 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 80009bc:	f000 fa00 	bl	8000dc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009c0:	f000 fa52 	bl	8000e68 <MX_TIM2_Init>
  MX_TIM8_Init();
 80009c4:	f000 faa0 	bl	8000f08 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <main+0x48>)
 80009ca:	f003 ff5b 	bl	8004884 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <main+0x4c>)
 80009d0:	f003 ff58 	bl	8004884 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <main+0x50>)
 80009d6:	f003 ff55 	bl	8004884 <HAL_TIM_Base_Start_IT>

  BootMessagePrint();
 80009da:	f000 fc0b 	bl	80011f4 <BootMessagePrint>
  GetClockSourcePrint();
 80009de:	f000 fc85 	bl	80012ec <GetClockSourcePrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Process();
 80009e2:	f7ff ffa9 	bl	8000938 <LED_Process>
    Button_Process();
 80009e6:	f7ff fe5d 	bl	80006a4 <Button_Process>
    LED_Process();
 80009ea:	e7fa      	b.n	80009e2 <main+0x3e>
 80009ec:	24000094 	.word	0x24000094
 80009f0:	240000e0 	.word	0x240000e0
 80009f4:	2400012c 	.word	0x2400012c

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09c      	sub	sp, #112	; 0x70
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	224c      	movs	r2, #76	; 0x4c
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f005 fe64 	bl	80066d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2220      	movs	r2, #32
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fe5e 	bl	80066d4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <SystemClock_Config+0xe4>)
 8000a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a22:	2004      	movs	r0, #4
 8000a24:	f001 f8de 	bl	8001be4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <SystemClock_Config+0xe8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <SystemClock_Config+0xe8>)
 8000a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <SystemClock_Config+0xe8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a44:	bf00      	nop
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <SystemClock_Config+0xe8>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a52:	d1f8      	bne.n	8000a46 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a54:	2321      	movs	r3, #33	; 0x21
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a66:	2302      	movs	r3, #2
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a6e:	2346      	movs	r3, #70	; 0x46
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f902 	bl	8001c98 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a9a:	f000 f823 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	233f      	movs	r3, #63	; 0x3f
 8000aa0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab2:	2340      	movs	r3, #64	; 0x40
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2107      	movs	r1, #7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fd19 	bl	80024fc <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ad0:	f000 f808 	bl	8000ae4 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3770      	adds	r7, #112	; 0x70
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	58024800 	.word	0x58024800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_MspInit+0x30>)
 8000af8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000afc:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x30>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x30>)
 8000b08:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	58024400 	.word	0x58024400

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b32:	f000 fd25 	bl	8001580 <HAL_Delay>
 8000b36:	e7fa      	b.n	8000b2e <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 fce2 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM1_UP_IRQHandler+0x10>)
 8000b86:	f003 fef5 	bl	8004974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000094 	.word	0x24000094

08000b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM2_IRQHandler+0x10>)
 8000b9a:	f003 feeb 	bl	8004974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240000e0 	.word	0x240000e0

08000ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bb0:	f000 fffd 	bl	8001bae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000bbe:	f003 fed9 	bl	8004974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2400012c 	.word	0x2400012c

08000bcc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d105      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    TIM1_CNT++;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000be6:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
  {
    TIM8_CNT++;
  }
}
 8000be8:	e014      	b.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf2:	d105      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x34>
    TIM2_CNT++;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bfc:	6013      	str	r3, [r2, #0]
}
 8000bfe:	e009      	b.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d104      	bne.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x48>
    TIM8_CNT++;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40010000 	.word	0x40010000
 8000c24:	2400020c 	.word	0x2400020c
 8000c28:	24000210 	.word	0x24000210
 8000c2c:	40010400 	.word	0x40010400
 8000c30:	24000214 	.word	0x24000214

08000c34 <HAL_GPIO_EXTI_Callback>:
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
  userButton_state = 0x01;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x28>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
  userButton_cnt++;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c4e:	801a      	strh	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	2400061a 	.word	0x2400061a
 8000c60:	24000618 	.word	0x24000618

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f005 fcf4 	bl	8006680 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	24100000 	.word	0x24100000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	24000090 	.word	0x24000090
 8000ccc:	24000630 	.word	0x24000630

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <SystemInit+0xd0>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <SystemInit+0xd0>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <SystemInit+0xd4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d807      	bhi.n	8000d00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <SystemInit+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 030f 	bic.w	r3, r3, #15
 8000cf8:	4a2a      	ldr	r2, [pc, #168]	; (8000da4 <SystemInit+0xd4>)
 8000cfa:	f043 0303 	orr.w	r3, r3, #3
 8000cfe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <SystemInit+0xd8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <SystemInit+0xd8>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <SystemInit+0xd8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <SystemInit+0xd8>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4924      	ldr	r1, [pc, #144]	; (8000da8 <SystemInit+0xd8>)
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <SystemInit+0xdc>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <SystemInit+0xd4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d007      	beq.n	8000d3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <SystemInit+0xd4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 030f 	bic.w	r3, r3, #15
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <SystemInit+0xd4>)
 8000d34:	f043 0303 	orr.w	r3, r3, #3
 8000d38:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <SystemInit+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <SystemInit+0xd8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <SystemInit+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <SystemInit+0xd8>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <SystemInit+0xe0>)
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <SystemInit+0xd8>)
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <SystemInit+0xe4>)
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <SystemInit+0xd8>)
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <SystemInit+0xe8>)
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <SystemInit+0xd8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <SystemInit+0xd8>)
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <SystemInit+0xe8>)
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <SystemInit+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <SystemInit+0xd8>)
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <SystemInit+0xe8>)
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <SystemInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <SystemInit+0xd8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <SystemInit+0xd8>)
 8000d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <SystemInit+0xd8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <SystemInit+0xec>)
 8000d90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00
 8000da4:	52002000 	.word	0x52002000
 8000da8:	58024400 	.word	0x58024400
 8000dac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000db0:	02020200 	.word	0x02020200
 8000db4:	01ff0000 	.word	0x01ff0000
 8000db8:	01010280 	.word	0x01010280
 8000dbc:	52004000 	.word	0x52004000

08000dc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <MX_TIM1_Init+0xa4>)
 8000de2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000de6:	f240 1217 	movw	r2, #279	; 0x117
 8000dea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0c:	4814      	ldr	r0, [pc, #80]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e0e:	f003 fce1 	bl	80047d4 <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f7ff fe64 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e2a:	f003 feab 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e34:	f7ff fe56 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_TIM1_Init+0xa0>)
 8000e4a:	f004 f8ff 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e54:	f7ff fe46 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	24000094 	.word	0x24000094
 8000e64:	40010000 	.word	0x40010000

08000e68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e90:	f240 1217 	movw	r2, #279	; 0x117
 8000e94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <MX_TIM2_Init+0x9c>)
 8000ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eae:	4814      	ldr	r0, [pc, #80]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000eb0:	f003 fc90 	bl	80047d4 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eba:	f7ff fe13 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000ecc:	f003 fe5a 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ed6:	f7ff fe05 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000ee8:	f004 f8b0 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ef2:	f7ff fdf7 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240000e0 	.word	0x240000e0
 8000f04:	0001869f 	.word	0x0001869f

08000f08 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f28:	4a20      	ldr	r2, [pc, #128]	; (8000fac <MX_TIM8_Init+0xa4>)
 8000f2a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f2e:	f240 1217 	movw	r2, #279	; 0x117
 8000f32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f3c:	2209      	movs	r2, #9
 8000f3e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f52:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f54:	f003 fc3e 	bl	80047d4 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000f5e:	f7ff fdc1 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f70:	f003 fe08 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000f7a:	f7ff fdb3 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_TIM8_Init+0xa0>)
 8000f90:	f004 f85c 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f9a:	f7ff fda3 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2400012c 	.word	0x2400012c
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a2b      	ldr	r2, [pc, #172]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d117      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000fc4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2019      	movs	r0, #25
 8000fe6:	f000 fbca 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fea:	2019      	movs	r0, #25
 8000fec:	f000 fbe1 	bl	80017b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000ff0:	e038      	b.n	8001064 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ffa:	d117      	bne.n	800102c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000ffe:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001002:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 800100e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	201c      	movs	r0, #28
 8001020:	f000 fbad 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001024:	201c      	movs	r0, #28
 8001026:	f000 fbc4 	bl	80017b2 <HAL_NVIC_EnableIRQ>
}
 800102a:	e01b      	b.n	8001064 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM8)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_TIM_Base_MspInit+0xc4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d116      	bne.n	8001064 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8001038:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8001048:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	202c      	movs	r0, #44	; 0x2c
 800105a:	f000 fb90 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800105e:	202c      	movs	r0, #44	; 0x2c
 8001060:	f000 fba7 	bl	80017b2 <HAL_NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010000 	.word	0x40010000
 8001070:	58024400 	.word	0x58024400
 8001074:	40010400 	.word	0x40010400

08001078 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_USART3_UART_Init+0x90>)
 800107e:	4a23      	ldr	r2, [pc, #140]	; (800110c <MX_USART3_UART_Init+0x94>)
 8001080:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_USART3_UART_Init+0x90>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_USART3_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_USART3_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_USART3_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_USART3_UART_Init+0x90>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010c2:	f004 f86f 	bl	80051a4 <HAL_UART_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010cc:	f7ff fd0a 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010d4:	f005 fa09 	bl	80064ea <HAL_UARTEx_SetTxFifoThreshold>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010de:	f7ff fd01 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010e6:	f005 fa3e 	bl	8006566 <HAL_UARTEx_SetRxFifoThreshold>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f7ff fcf8 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_USART3_UART_Init+0x90>)
 80010f6:	f005 f9bf 	bl	8006478 <HAL_UARTEx_DisableFifoMode>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001100:	f7ff fcf0 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	24000178 	.word	0x24000178
 800110c:	40004800 	.word	0x40004800

08001110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0ba      	sub	sp, #232	; 0xe8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	22c0      	movs	r2, #192	; 0xc0
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f005 facf 	bl	80066d4 <memset>
  if(uartHandle->Instance==USART3)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_UART_MspInit+0xc8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d146      	bne.n	80011ce <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001140:	f04f 0202 	mov.w	r2, #2
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fd5c 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001162:	f7ff fcbf 	bl	8000ae4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_UART_MspInit+0xcc>)
 8001168:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_UART_MspInit+0xcc>)
 800116e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001172:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_MspInit+0xcc>)
 8001178:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800117c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_UART_MspInit+0xcc>)
 8001186:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_UART_MspInit+0xcc>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_UART_MspInit+0xcc>)
 8001196:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011bc:	2307      	movs	r3, #7
 80011be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_UART_MspInit+0xd0>)
 80011ca:	f000 fb0d 	bl	80017e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	37e8      	adds	r7, #232	; 0xe8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40004800 	.word	0x40004800
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58020c00 	.word	0x58020c00

080011e4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80011f8:	4930      	ldr	r1, [pc, #192]	; (80012bc <BootMessagePrint+0xc8>)
 80011fa:	4831      	ldr	r0, [pc, #196]	; (80012c0 <BootMessagePrint+0xcc>)
 80011fc:	f005 fa72 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001200:	482f      	ldr	r0, [pc, #188]	; (80012c0 <BootMessagePrint+0xcc>)
 8001202:	f7ff f875 	bl	80002f0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	492c      	ldr	r1, [pc, #176]	; (80012c0 <BootMessagePrint+0xcc>)
 8001210:	482c      	ldr	r0, [pc, #176]	; (80012c4 <BootMessagePrint+0xd0>)
 8001212:	f004 f817 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 8001216:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <BootMessagePrint+0xd4>)
 8001218:	492c      	ldr	r1, [pc, #176]	; (80012cc <BootMessagePrint+0xd8>)
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <BootMessagePrint+0xcc>)
 800121c:	f005 fa62 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001220:	4827      	ldr	r0, [pc, #156]	; (80012c0 <BootMessagePrint+0xcc>)
 8001222:	f7ff f865 	bl	80002f0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	4924      	ldr	r1, [pc, #144]	; (80012c0 <BootMessagePrint+0xcc>)
 8001230:	4824      	ldr	r0, [pc, #144]	; (80012c4 <BootMessagePrint+0xd0>)
 8001232:	f004 f807 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <BootMessagePrint+0xdc>)
 8001238:	4926      	ldr	r1, [pc, #152]	; (80012d4 <BootMessagePrint+0xe0>)
 800123a:	4821      	ldr	r0, [pc, #132]	; (80012c0 <BootMessagePrint+0xcc>)
 800123c:	f005 fa52 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001240:	481f      	ldr	r0, [pc, #124]	; (80012c0 <BootMessagePrint+0xcc>)
 8001242:	f7ff f855 	bl	80002f0 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	491c      	ldr	r1, [pc, #112]	; (80012c0 <BootMessagePrint+0xcc>)
 8001250:	481c      	ldr	r0, [pc, #112]	; (80012c4 <BootMessagePrint+0xd0>)
 8001252:	f003 fff7 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 8001256:	4a20      	ldr	r2, [pc, #128]	; (80012d8 <BootMessagePrint+0xe4>)
 8001258:	4920      	ldr	r1, [pc, #128]	; (80012dc <BootMessagePrint+0xe8>)
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <BootMessagePrint+0xcc>)
 800125c:	f005 fa42 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001260:	4817      	ldr	r0, [pc, #92]	; (80012c0 <BootMessagePrint+0xcc>)
 8001262:	f7ff f845 	bl	80002f0 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	4914      	ldr	r1, [pc, #80]	; (80012c0 <BootMessagePrint+0xcc>)
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <BootMessagePrint+0xd0>)
 8001272:	f003 ffe7 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <BootMessagePrint+0xec>)
 8001278:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <BootMessagePrint+0xf0>)
 800127a:	491b      	ldr	r1, [pc, #108]	; (80012e8 <BootMessagePrint+0xf4>)
 800127c:	4810      	ldr	r0, [pc, #64]	; (80012c0 <BootMessagePrint+0xcc>)
 800127e:	f005 fa31 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <BootMessagePrint+0xcc>)
 8001284:	f7ff f834 	bl	80002f0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	490b      	ldr	r1, [pc, #44]	; (80012c0 <BootMessagePrint+0xcc>)
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <BootMessagePrint+0xd0>)
 8001294:	f003 ffd6 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 8001298:	4908      	ldr	r1, [pc, #32]	; (80012bc <BootMessagePrint+0xc8>)
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <BootMessagePrint+0xcc>)
 800129c:	f005 fa22 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <BootMessagePrint+0xcc>)
 80012a2:	f7ff f825 	bl	80002f0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	4904      	ldr	r1, [pc, #16]	; (80012c0 <BootMessagePrint+0xcc>)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <BootMessagePrint+0xd0>)
 80012b2:	f003 ffc7 	bl	8005244 <HAL_UART_Transmit>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	08007008 	.word	0x08007008
 80012c0:	24000218 	.word	0x24000218
 80012c4:	24000178 	.word	0x24000178
 80012c8:	08007038 	.word	0x08007038
 80012cc:	08007048 	.word	0x08007048
 80012d0:	08007064 	.word	0x08007064
 80012d4:	0800706c 	.word	0x0800706c
 80012d8:	08007088 	.word	0x08007088
 80012dc:	0800709c 	.word	0x0800709c
 80012e0:	080070b8 	.word	0x080070b8
 80012e4:	080070c4 	.word	0x080070c4
 80012e8:	080070d0 	.word	0x080070d0

080012ec <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 80012f0:	493d      	ldr	r1, [pc, #244]	; (80013e8 <GetClockSourcePrint+0xfc>)
 80012f2:	483e      	ldr	r0, [pc, #248]	; (80013ec <GetClockSourcePrint+0x100>)
 80012f4:	f005 f9f6 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80012f8:	483c      	ldr	r0, [pc, #240]	; (80013ec <GetClockSourcePrint+0x100>)
 80012fa:	f7fe fff9 	bl	80002f0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	4939      	ldr	r1, [pc, #228]	; (80013ec <GetClockSourcePrint+0x100>)
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <GetClockSourcePrint+0x104>)
 800130a:	f003 ff9b 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800130e:	f001 faab 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8001312:	4603      	mov	r3, r0
 8001314:	4a37      	ldr	r2, [pc, #220]	; (80013f4 <GetClockSourcePrint+0x108>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0c9b      	lsrs	r3, r3, #18
 800131c:	461a      	mov	r2, r3
 800131e:	4936      	ldr	r1, [pc, #216]	; (80013f8 <GetClockSourcePrint+0x10c>)
 8001320:	4832      	ldr	r0, [pc, #200]	; (80013ec <GetClockSourcePrint+0x100>)
 8001322:	f005 f9df 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001326:	4831      	ldr	r0, [pc, #196]	; (80013ec <GetClockSourcePrint+0x100>)
 8001328:	f7fe ffe2 	bl	80002f0 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	492d      	ldr	r1, [pc, #180]	; (80013ec <GetClockSourcePrint+0x100>)
 8001336:	482e      	ldr	r0, [pc, #184]	; (80013f0 <GetClockSourcePrint+0x104>)
 8001338:	f003 ff84 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 800133c:	f001 fc0e 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8001340:	4603      	mov	r3, r0
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <GetClockSourcePrint+0x108>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9b      	lsrs	r3, r3, #18
 800134a:	461a      	mov	r2, r3
 800134c:	492b      	ldr	r1, [pc, #172]	; (80013fc <GetClockSourcePrint+0x110>)
 800134e:	4827      	ldr	r0, [pc, #156]	; (80013ec <GetClockSourcePrint+0x100>)
 8001350:	f005 f9c8 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001354:	4825      	ldr	r0, [pc, #148]	; (80013ec <GetClockSourcePrint+0x100>)
 8001356:	f7fe ffcb 	bl	80002f0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	4922      	ldr	r1, [pc, #136]	; (80013ec <GetClockSourcePrint+0x100>)
 8001364:	4822      	ldr	r0, [pc, #136]	; (80013f0 <GetClockSourcePrint+0x104>)
 8001366:	f003 ff6d 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 800136a:	f001 fc27 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 800136e:	4603      	mov	r3, r0
 8001370:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <GetClockSourcePrint+0x108>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0c9b      	lsrs	r3, r3, #18
 8001378:	461a      	mov	r2, r3
 800137a:	4921      	ldr	r1, [pc, #132]	; (8001400 <GetClockSourcePrint+0x114>)
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <GetClockSourcePrint+0x100>)
 800137e:	f005 f9b1 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <GetClockSourcePrint+0x100>)
 8001384:	f7fe ffb4 	bl	80002f0 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	4916      	ldr	r1, [pc, #88]	; (80013ec <GetClockSourcePrint+0x100>)
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <GetClockSourcePrint+0x104>)
 8001394:	f003 ff56 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001398:	f001 fc26 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 800139c:	4603      	mov	r3, r0
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <GetClockSourcePrint+0x108>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	461a      	mov	r2, r3
 80013a8:	4916      	ldr	r1, [pc, #88]	; (8001404 <GetClockSourcePrint+0x118>)
 80013aa:	4810      	ldr	r0, [pc, #64]	; (80013ec <GetClockSourcePrint+0x100>)
 80013ac:	f005 f99a 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <GetClockSourcePrint+0x100>)
 80013b2:	f7fe ff9d 	bl	80002f0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	490b      	ldr	r1, [pc, #44]	; (80013ec <GetClockSourcePrint+0x100>)
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <GetClockSourcePrint+0x104>)
 80013c2:	f003 ff3f 	bl	8005244 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <GetClockSourcePrint+0xfc>)
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <GetClockSourcePrint+0x100>)
 80013ca:	f005 f98b 	bl	80066e4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <GetClockSourcePrint+0x100>)
 80013d0:	f7fe ff8e 	bl	80002f0 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <GetClockSourcePrint+0x100>)
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <GetClockSourcePrint+0x104>)
 80013e0:	f003 ff30 	bl	8005244 <HAL_UART_Transmit>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	08007008 	.word	0x08007008
 80013ec:	24000218 	.word	0x24000218
 80013f0:	24000178 	.word	0x24000178
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	080070f0 	.word	0x080070f0
 80013fc:	08007120 	.word	0x08007120
 8001400:	08007150 	.word	0x08007150
 8001404:	08007180 	.word	0x08007180

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800140c:	f7ff fc60 	bl	8000cd0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001412:	490d      	ldr	r1, [pc, #52]	; (8001448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001428:	4c0a      	ldr	r4, [pc, #40]	; (8001454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001436:	f005 f929 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff fab3 	bl	80009a4 <main>
  bx  lr
 800143e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001444:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001448:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800144c:	0800722c 	.word	0x0800722c
  ldr r2, =_sbss
 8001450:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001454:	24000630 	.word	0x24000630

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001462:	2003      	movs	r0, #3
 8001464:	f000 f980 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001468:	f001 f9fe 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800146c:	4602      	mov	r2, r0
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_Init+0x68>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	4913      	ldr	r1, [pc, #76]	; (80014c8 <HAL_Init+0x6c>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_Init+0x68>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_Init+0x6c>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_Init+0x70>)
 800149e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_Init+0x74>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f814 	bl	80014d4 <HAL_InitTick>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e002      	b.n	80014bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014b6:	f7ff fb1b 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	58024400 	.word	0x58024400
 80014c8:	080071b0 	.word	0x080071b0
 80014cc:	24000004 	.word	0x24000004
 80014d0:	24000000 	.word	0x24000000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_InitTick+0x60>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e021      	b.n	800152c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_InitTick+0x64>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_InitTick+0x60>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f965 	bl	80017ce <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f000 f92f 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_InitTick+0x68>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2400000c 	.word	0x2400000c
 8001538:	24000000 	.word	0x24000000
 800153c:	24000008 	.word	0x24000008

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	2400000c 	.word	0x2400000c
 8001564:	2400061c 	.word	0x2400061c

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2400061c 	.word	0x2400061c

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2400000c 	.word	0x2400000c

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <__NVIC_SetPriorityGrouping+0x40>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x40>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00
 800160c:	05fa0000 	.word	0x05fa0000

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff29 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff40 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff33 	bl	800162c <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa4 	bl	8001724 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017f6:	4b89      	ldr	r3, [pc, #548]	; (8001a1c <HAL_GPIO_Init+0x234>)
 80017f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017fa:	e194      	b.n	8001b26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2101      	movs	r1, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8186 	beq.w	8001b20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d005      	beq.n	800182c <HAL_GPIO_Init+0x44>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d130      	bne.n	800188e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001862:	2201      	movs	r2, #1
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 0201 	and.w	r2, r3, #1
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b03      	cmp	r3, #3
 8001898:	d017      	beq.n	80018ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d123      	bne.n	800191e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	08da      	lsrs	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3208      	adds	r2, #8
 8001918:	69b9      	ldr	r1, [r7, #24]
 800191a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0203 	and.w	r2, r3, #3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80e0 	beq.w	8001b20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x238>)
 8001962:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001966:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <HAL_GPIO_Init+0x238>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_GPIO_Init+0x238>)
 8001972:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197e:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <HAL_GPIO_Init+0x23c>)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_GPIO_Init+0x240>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d052      	beq.n	8001a50 <HAL_GPIO_Init+0x268>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_GPIO_Init+0x244>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d031      	beq.n	8001a16 <HAL_GPIO_Init+0x22e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HAL_GPIO_Init+0x248>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d02b      	beq.n	8001a12 <HAL_GPIO_Init+0x22a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_GPIO_Init+0x24c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d025      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_GPIO_Init+0x250>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01f      	beq.n	8001a0a <HAL_GPIO_Init+0x222>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <HAL_GPIO_Init+0x254>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0x21e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_GPIO_Init+0x258>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x21a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_GPIO_Init+0x25c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x216>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_GPIO_Init+0x260>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x212>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_GPIO_Init+0x264>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x20e>
 80019f2:	2309      	movs	r3, #9
 80019f4:	e02d      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 80019f6:	230a      	movs	r3, #10
 80019f8:	e02b      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 80019fa:	2308      	movs	r3, #8
 80019fc:	e029      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e027      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 8001a02:	2306      	movs	r3, #6
 8001a04:	e025      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 8001a06:	2305      	movs	r3, #5
 8001a08:	e023      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	e021      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e01f      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e01d      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e01b      	b.n	8001a52 <HAL_GPIO_Init+0x26a>
 8001a1a:	bf00      	nop
 8001a1c:	58000080 	.word	0x58000080
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58000400 	.word	0x58000400
 8001a28:	58020000 	.word	0x58020000
 8001a2c:	58020400 	.word	0x58020400
 8001a30:	58020800 	.word	0x58020800
 8001a34:	58020c00 	.word	0x58020c00
 8001a38:	58021000 	.word	0x58021000
 8001a3c:	58021400 	.word	0x58021400
 8001a40:	58021800 	.word	0x58021800
 8001a44:	58021c00 	.word	0x58021c00
 8001a48:	58022000 	.word	0x58022000
 8001a4c:	58022400 	.word	0x58022400
 8001a50:	2300      	movs	r3, #0
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	f002 0203 	and.w	r2, r2, #3
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4093      	lsls	r3, r2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a62:	4938      	ldr	r1, [pc, #224]	; (8001b44 <HAL_GPIO_Init+0x35c>)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3301      	adds	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f ae63 	bne.w	80017fc <HAL_GPIO_Init+0x14>
  }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	3724      	adds	r7, #36	; 0x24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	58000400 	.word	0x58000400

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b64:	e003      	b.n	8001b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	041a      	lsls	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	619a      	str	r2, [r3, #24]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f82d 	bl	8000c34 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d00a      	beq.n	8001c0e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e040      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e03e      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001c16:	491f      	ldr	r1, [pc, #124]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c1e:	f7ff fca3 	bl	8001568 <HAL_GetTick>
 8001c22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c24:	e009      	b.n	8001c3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c26:	f7ff fc9f 	bl	8001568 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c34:	d901      	bls.n	8001c3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e028      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d1ee      	bne.n	8001c26 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b1e      	cmp	r3, #30
 8001c4c:	d008      	beq.n	8001c60 <HAL_PWREx_ConfigSupply+0x7c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b2e      	cmp	r3, #46	; 0x2e
 8001c52:	d005      	beq.n	8001c60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b1d      	cmp	r3, #29
 8001c58:	d002      	beq.n	8001c60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b2d      	cmp	r3, #45	; 0x2d
 8001c5e:	d114      	bne.n	8001c8a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c60:	f7ff fc82 	bl	8001568 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c66:	e009      	b.n	8001c7c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c68:	f7ff fc7e 	bl	8001568 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c76:	d901      	bls.n	8001c7c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e007      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d1ee      	bne.n	8001c68 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58024800 	.word	0x58024800

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f000 bc1f 	b.w	80024ea <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80b3 	beq.w	8001e20 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cba:	4b95      	ldr	r3, [pc, #596]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d007      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x48>
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	2b18      	cmp	r3, #24
 8001cd4:	d112      	bne.n	8001cfc <HAL_RCC_OscConfig+0x64>
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d10d      	bne.n	8001cfc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8098 	beq.w	8001e1e <HAL_RCC_OscConfig+0x186>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 8093 	bne.w	8001e1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e3f6      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d106      	bne.n	8001d14 <HAL_RCC_OscConfig+0x7c>
 8001d06:	4b82      	ldr	r3, [pc, #520]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a81      	ldr	r2, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e058      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d112      	bne.n	8001d42 <HAL_RCC_OscConfig+0xaa>
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a78      	ldr	r2, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a75      	ldr	r2, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e041      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4a:	d112      	bne.n	8001d72 <HAL_RCC_OscConfig+0xda>
 8001d4c:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6f      	ldr	r2, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6c      	ldr	r2, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e029      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001d7a:	d112      	bne.n	8001da2 <HAL_RCC_OscConfig+0x10a>
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a63      	ldr	r2, [pc, #396]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a60      	ldr	r2, [pc, #384]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e011      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a57      	ldr	r2, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001dc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d013      	beq.n	8001df6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fbcb 	bl	8001568 <HAL_GetTick>
 8001dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fbc7 	bl	8001568 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b64      	cmp	r3, #100	; 0x64
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e380      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de8:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13e>
 8001df4:	e014      	b.n	8001e20 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff fbb7 	bl	8001568 <HAL_GetTick>
 8001dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fbb3 	bl	8001568 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b64      	cmp	r3, #100	; 0x64
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e36c      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e10:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x166>
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 808c 	beq.w	8001f46 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e36:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1bc>
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	2b18      	cmp	r3, #24
 8001e48:	d137      	bne.n	8001eba <HAL_RCC_OscConfig+0x222>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d132      	bne.n	8001eba <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e54:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_OscConfig+0x1d4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e33e      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 0219 	bic.w	r2, r3, #25
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4925      	ldr	r1, [pc, #148]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fb73 	bl	8001568 <HAL_GetTick>
 8001e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fb6f 	bl	8001568 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e328      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	4917      	ldr	r1, [pc, #92]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	e045      	b.n	8001f46 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d028      	beq.n	8001f14 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0219 	bic.w	r2, r3, #25
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	4910      	ldr	r1, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fb48 	bl	8001568 <HAL_GetTick>
 8001ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff fb44 	bl	8001568 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e2fd      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	061b      	lsls	r3, r3, #24
 8001f08:	4901      	ldr	r1, [pc, #4]	; (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e01a      	b.n	8001f46 <HAL_RCC_OscConfig+0x2ae>
 8001f10:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f14:	4b97      	ldr	r3, [pc, #604]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a96      	ldr	r2, [pc, #600]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff fb22 	bl	8001568 <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff fb1e 	bl	8001568 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e2d7      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f3a:	4b8e      	ldr	r3, [pc, #568]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d06a      	beq.n	8002028 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f5c:	4b85      	ldr	r3, [pc, #532]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d007      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2e0>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b18      	cmp	r3, #24
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x30e>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d116      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f78:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2f8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e2ac      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f90:	4b78      	ldr	r3, [pc, #480]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	4975      	ldr	r1, [pc, #468]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fa4:	e040      	b.n	8002028 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d023      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fae:	4b71      	ldr	r3, [pc, #452]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a70      	ldr	r2, [pc, #448]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff fad5 	bl	8001568 <HAL_GetTick>
 8001fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fad1 	bl	8001568 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e28a      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fd4:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fe0:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	4961      	ldr	r1, [pc, #388]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
 8001ff4:	e018      	b.n	8002028 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5e      	ldr	r2, [pc, #376]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8001ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fab1 	bl	8001568 <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800200a:	f7ff faad 	bl	8001568 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e266      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800201c:	4b55      	ldr	r3, [pc, #340]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d036      	beq.n	80020a2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d019      	beq.n	8002070 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203c:	4b4d      	ldr	r3, [pc, #308]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff fa8e 	bl	8001568 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fa8a 	bl	8001568 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e243      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x3b8>
 800206e:	e018      	b.n	80020a2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b40      	ldr	r3, [pc, #256]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fa74 	bl	8001568 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fa70 	bl	8001568 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e229      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d036      	beq.n	800211c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d019      	beq.n	80020ea <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b6:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 80020bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fa51 	bl	8001568 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ca:	f7ff fa4d 	bl	8001568 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e206      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x432>
 80020e8:	e018      	b.n	800211c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 80020f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fa37 	bl	8001568 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020fe:	f7ff fa33 	bl	8001568 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e1ec      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80af 	beq.w	8002288 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_RCC_OscConfig+0x4e0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_RCC_OscConfig+0x4e0>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002136:	f7ff fa17 	bl	8001568 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7ff fa13 	bl	8001568 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1cc      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_OscConfig+0x4e0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10b      	bne.n	800217c <HAL_RCC_OscConfig+0x4e4>
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a02      	ldr	r2, [pc, #8]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	e05b      	b.n	800222a <HAL_RCC_OscConfig+0x592>
 8002172:	bf00      	nop
 8002174:	58024400 	.word	0x58024400
 8002178:	58024800 	.word	0x58024800
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d112      	bne.n	80021aa <HAL_RCC_OscConfig+0x512>
 8002184:	4b9d      	ldr	r3, [pc, #628]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a9c      	ldr	r2, [pc, #624]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	4b9a      	ldr	r3, [pc, #616]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a99      	ldr	r2, [pc, #612]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
 800219c:	4b97      	ldr	r3, [pc, #604]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a96      	ldr	r2, [pc, #600]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021a2:	f023 0304 	bic.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e03f      	b.n	800222a <HAL_RCC_OscConfig+0x592>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x540>
 80021b2:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a91      	ldr	r2, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	4b8f      	ldr	r3, [pc, #572]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a8e      	ldr	r2, [pc, #568]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	4b8c      	ldr	r3, [pc, #560]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a8b      	ldr	r2, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	e028      	b.n	800222a <HAL_RCC_OscConfig+0x592>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b85      	cmp	r3, #133	; 0x85
 80021de:	d112      	bne.n	8002206 <HAL_RCC_OscConfig+0x56e>
 80021e0:	4b86      	ldr	r3, [pc, #536]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a85      	ldr	r2, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	4b83      	ldr	r3, [pc, #524]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a82      	ldr	r2, [pc, #520]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	4b80      	ldr	r3, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a7f      	ldr	r2, [pc, #508]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e011      	b.n	800222a <HAL_RCC_OscConfig+0x592>
 8002206:	4b7d      	ldr	r3, [pc, #500]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a7c      	ldr	r2, [pc, #496]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
 8002212:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a79      	ldr	r2, [pc, #484]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b77      	ldr	r3, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a76      	ldr	r2, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7ff f999 	bl	8001568 <HAL_GetTick>
 8002236:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff f995 	bl	8001568 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e14c      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x5a2>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff f983 	bl	8001568 <HAL_GetTick>
 8002262:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7ff f97f 	bl	8001568 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e136      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800227c:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 812b 	beq.w	80024e8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002292:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229a:	2b18      	cmp	r3, #24
 800229c:	f000 80bb 	beq.w	8002416 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	f040 8095 	bne.w	80023d4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a53      	ldr	r2, [pc, #332]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80022b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7ff f957 	bl	8001568 <HAL_GetTick>
 80022ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff f953 	bl	8001568 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e10c      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022d0:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80022de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e0:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_OscConfig+0x768>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	430a      	orrs	r2, r1
 80022f0:	4942      	ldr	r1, [pc, #264]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	628b      	str	r3, [r1, #40]	; 0x28
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	3b01      	subs	r3, #1
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	b29b      	uxth	r3, r3
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	3b01      	subs	r3, #1
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	3b01      	subs	r3, #1
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002326:	4935      	ldr	r1, [pc, #212]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002328:	4313      	orrs	r3, r2
 800232a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800232c:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800233a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCC_OscConfig+0x76c>)
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	492d      	ldr	r1, [pc, #180]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002348:	4313      	orrs	r3, r2
 800234a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f023 020c 	bic.w	r2, r3, #12
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4928      	ldr	r1, [pc, #160]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800235a:	4313      	orrs	r3, r2
 800235c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800235e:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f023 0202 	bic.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4924      	ldr	r1, [pc, #144]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800236c:	4313      	orrs	r3, r2
 800236e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	4a1e      	ldr	r2, [pc, #120]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002388:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800238e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80023a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f8dc 	bl	8001568 <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff f8d8 	bl	8001568 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e091      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x71c>
 80023d2:	e089      	b.n	80024e8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a08      	ldr	r2, [pc, #32]	; (80023fc <HAL_RCC_OscConfig+0x764>)
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff f8c2 	bl	8001568 <HAL_GetTick>
 80023e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023e6:	e00f      	b.n	8002408 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff f8be 	bl	8001568 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d908      	bls.n	8002408 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e077      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
 80023fa:	bf00      	nop
 80023fc:	58024400 	.word	0x58024400
 8002400:	fffffc0c 	.word	0xfffffc0c
 8002404:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e9      	bne.n	80023e8 <HAL_RCC_OscConfig+0x750>
 8002414:	e068      	b.n	80024e8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002416:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800241c:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	2b01      	cmp	r3, #1
 8002428:	d031      	beq.n	800248e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0203 	and.w	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d12a      	bne.n	800248e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d122      	bne.n	800248e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d11a      	bne.n	800248e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d111      	bne.n	800248e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d108      	bne.n	800248e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	0e1b      	lsrs	r3, r3, #24
 8002480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e02b      	b.n	80024ea <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	08db      	lsrs	r3, r3, #3
 8002498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800249c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d01f      	beq.n	80024e8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024b4:	f7ff f858 	bl	8001568 <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80024ba:	bf00      	nop
 80024bc:	f7ff f854 	bl	8001568 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d0f9      	beq.n	80024bc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 80024ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_RCC_OscConfig+0x860>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024d4:	00d2      	lsls	r2, r2, #3
 80024d6:	4907      	ldr	r1, [pc, #28]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_RCC_OscConfig+0x85c>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3730      	adds	r7, #48	; 0x30
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	58024400 	.word	0x58024400
 80024f8:	ffff0007 	.word	0xffff0007

080024fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e19c      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 020f 	bic.w	r2, r3, #15
 8002526:	4985      	ldr	r1, [pc, #532]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b83      	ldr	r3, [pc, #524]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e184      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002558:	429a      	cmp	r2, r3
 800255a:	d908      	bls.n	800256e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800255c:	4b78      	ldr	r3, [pc, #480]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	4975      	ldr	r1, [pc, #468]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800256a:	4313      	orrs	r3, r2
 800256c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002586:	429a      	cmp	r2, r3
 8002588:	d908      	bls.n	800259c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	496a      	ldr	r1, [pc, #424]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002598:	4313      	orrs	r3, r2
 800259a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d010      	beq.n	80025ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	4b64      	ldr	r3, [pc, #400]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d908      	bls.n	80025ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	495e      	ldr	r1, [pc, #376]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d908      	bls.n	80025f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025e6:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4953      	ldr	r1, [pc, #332]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d010      	beq.n	8002626 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	429a      	cmp	r2, r3
 8002612:	d908      	bls.n	8002626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f023 020f 	bic.w	r2, r3, #15
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4947      	ldr	r1, [pc, #284]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002622:	4313      	orrs	r3, r2
 8002624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d055      	beq.n	80026de <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4940      	ldr	r1, [pc, #256]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002640:	4313      	orrs	r3, r2
 8002642:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264c:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d121      	bne.n	800269c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0f6      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d107      	bne.n	8002674 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d115      	bne.n	800269c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ea      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0de      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d6      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800269c:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f023 0207 	bic.w	r2, r3, #7
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4925      	ldr	r1, [pc, #148]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ae:	f7fe ff5b 	bl	8001568 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b6:	f7fe ff57 	bl	8001568 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0be      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	429a      	cmp	r2, r3
 80026dc:	d1eb      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d208      	bcs.n	800270c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f023 020f 	bic.w	r2, r3, #15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	490e      	ldr	r1, [pc, #56]	; (8002740 <HAL_RCC_ClockConfig+0x244>)
 8002708:	4313      	orrs	r3, r2
 800270a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d214      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 020f 	bic.w	r2, r3, #15
 8002722:	4906      	ldr	r1, [pc, #24]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_RCC_ClockConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e086      	b.n	800284a <HAL_RCC_ClockConfig+0x34e>
 800273c:	52002000 	.word	0x52002000
 8002740:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800275c:	429a      	cmp	r2, r3
 800275e:	d208      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002760:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4939      	ldr	r1, [pc, #228]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 800276e:	4313      	orrs	r3, r2
 8002770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800278a:	429a      	cmp	r2, r3
 800278c:	d208      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	492e      	ldr	r1, [pc, #184]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 800279c:	4313      	orrs	r3, r2
 800279e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d208      	bcs.n	80027ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4922      	ldr	r1, [pc, #136]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d208      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4917      	ldr	r1, [pc, #92]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80027fc:	f000 f834 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <HAL_RCC_ClockConfig+0x35c>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_RCC_ClockConfig+0x358>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_RCC_ClockConfig+0x35c>)
 8002824:	5cd3      	ldrb	r3, [r2, r3]
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_RCC_ClockConfig+0x360>)
 8002832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_RCC_ClockConfig+0x364>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_ClockConfig+0x368>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fe48 	bl	80014d4 <HAL_InitTick>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	58024400 	.word	0x58024400
 8002858:	080071b0 	.word	0x080071b0
 800285c:	24000004 	.word	0x24000004
 8002860:	24000000 	.word	0x24000000
 8002864:	24000008 	.word	0x24000008

08002868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286e:	4bb3      	ldr	r3, [pc, #716]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002876:	2b18      	cmp	r3, #24
 8002878:	f200 8155 	bhi.w	8002b26 <HAL_RCC_GetSysClockFreq+0x2be>
 800287c:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	080028e9 	.word	0x080028e9
 8002888:	08002b27 	.word	0x08002b27
 800288c:	08002b27 	.word	0x08002b27
 8002890:	08002b27 	.word	0x08002b27
 8002894:	08002b27 	.word	0x08002b27
 8002898:	08002b27 	.word	0x08002b27
 800289c:	08002b27 	.word	0x08002b27
 80028a0:	08002b27 	.word	0x08002b27
 80028a4:	0800290f 	.word	0x0800290f
 80028a8:	08002b27 	.word	0x08002b27
 80028ac:	08002b27 	.word	0x08002b27
 80028b0:	08002b27 	.word	0x08002b27
 80028b4:	08002b27 	.word	0x08002b27
 80028b8:	08002b27 	.word	0x08002b27
 80028bc:	08002b27 	.word	0x08002b27
 80028c0:	08002b27 	.word	0x08002b27
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002b27 	.word	0x08002b27
 80028cc:	08002b27 	.word	0x08002b27
 80028d0:	08002b27 	.word	0x08002b27
 80028d4:	08002b27 	.word	0x08002b27
 80028d8:	08002b27 	.word	0x08002b27
 80028dc:	08002b27 	.word	0x08002b27
 80028e0:	08002b27 	.word	0x08002b27
 80028e4:	0800291b 	.word	0x0800291b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028e8:	4b94      	ldr	r3, [pc, #592]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028f4:	4b91      	ldr	r3, [pc, #580]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	4a90      	ldr	r2, [pc, #576]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002906:	e111      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002908:	4b8d      	ldr	r3, [pc, #564]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800290a:	61bb      	str	r3, [r7, #24]
      break;
 800290c:	e10e      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800290e:	4b8d      	ldr	r3, [pc, #564]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002910:	61bb      	str	r3, [r7, #24]
      break;
 8002912:	e10b      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002914:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002916:	61bb      	str	r3, [r7, #24]
      break;
 8002918:	e108      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800291a:	4b88      	ldr	r3, [pc, #544]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002924:	4b85      	ldr	r3, [pc, #532]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800292e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002930:	4b82      	ldr	r3, [pc, #520]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800293a:	4b80      	ldr	r3, [pc, #512]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002952:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80e1 	beq.w	8002b20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b02      	cmp	r3, #2
 8002962:	f000 8083 	beq.w	8002a6c <HAL_RCC_GetSysClockFreq+0x204>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b02      	cmp	r3, #2
 800296a:	f200 80a1 	bhi.w	8002ab0 <HAL_RCC_GetSysClockFreq+0x248>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x114>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d056      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x1c0>
 800297a:	e099      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800297c:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02d      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002988:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	08db      	lsrs	r3, r3, #3
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b2:	4b62      	ldr	r3, [pc, #392]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80029e2:	e087      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80029f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f6:	4b51      	ldr	r3, [pc, #324]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a26:	e065      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a3a:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a6a:	e043      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aae:	e021      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ad6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002af2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	0a5b      	lsrs	r3, r3, #9
 8002afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002afe:	3301      	adds	r3, #1
 8002b00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b18:	ee17 3a90 	vmov	r3, s15
 8002b1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b1e:	e005      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
      break;
 8002b24:	e002      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b28:	61bb      	str	r3, [r7, #24]
      break;
 8002b2a:	bf00      	nop
  }

  return sysclockfreq;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	03d09000 	.word	0x03d09000
 8002b44:	003d0900 	.word	0x003d0900
 8002b48:	007a1200 	.word	0x007a1200
 8002b4c:	46000000 	.word	0x46000000
 8002b50:	4c742400 	.word	0x4c742400
 8002b54:	4a742400 	.word	0x4a742400
 8002b58:	4af42400 	.word	0x4af42400

08002b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002b62:	f7ff fe81 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_GetHCLKFreq+0x50>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490f      	ldr	r1, [pc, #60]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_GetHCLKFreq+0x50>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b9a:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	080071b0 	.word	0x080071b0
 8002bb4:	24000004 	.word	0x24000004
 8002bb8:	24000000 	.word	0x24000000

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002bc0:	f7ff ffcc 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4904      	ldr	r1, [pc, #16]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	58024400 	.word	0x58024400
 8002be4:	080071b0 	.word	0x080071b0

08002be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002bec:	f7ff ffb6 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	080071b0 	.word	0x080071b0

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c18:	b0c8      	sub	sp, #288	; 0x120
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002c38:	2500      	movs	r5, #0
 8002c3a:	ea54 0305 	orrs.w	r3, r4, r5
 8002c3e:	d049      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c4a:	d02f      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c50:	d828      	bhi.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c56:	d01a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5c:	d822      	bhi.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c66:	d007      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c68:	e01c      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6a:	4ba7      	ldr	r3, [pc, #668]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4aa6      	ldr	r2, [pc, #664]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c76:	e01a      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	2102      	movs	r1, #2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 fc43 	bl	800450c <RCCEx_PLL2_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c8c:	e00f      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c92:	3328      	adds	r3, #40	; 0x28
 8002c94:	2102      	movs	r1, #2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 fcea 	bl	8004670 <RCCEx_PLL3_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ca2:	e004      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002caa:	e000      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002cb6:	4b94      	ldr	r3, [pc, #592]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc4:	4a90      	ldr	r2, [pc, #576]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6513      	str	r3, [r2, #80]	; 0x50
 8002cca:	e003      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002ce0:	f04f 0900 	mov.w	r9, #0
 8002ce4:	ea58 0309 	orrs.w	r3, r8, r9
 8002ce8:	d047      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d82a      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d11 	.word	0x08002d11
 8002d00:	08002d1f 	.word	0x08002d1f
 8002d04:	08002d35 	.word	0x08002d35
 8002d08:	08002d53 	.word	0x08002d53
 8002d0c:	08002d53 	.word	0x08002d53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d10:	4b7d      	ldr	r3, [pc, #500]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d1c:	e01a      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d22:	3308      	adds	r3, #8
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 fbf0 	bl	800450c <RCCEx_PLL2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d32:	e00f      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d38:	3328      	adds	r3, #40	; 0x28
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 fc97 	bl	8004670 <RCCEx_PLL3_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d48:	e004      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d50:	e000      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	f023 0107 	bic.w	r1, r3, #7
 8002d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	4a67      	ldr	r2, [pc, #412]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d70:	e003      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002d86:	f04f 0b00 	mov.w	fp, #0
 8002d8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d8e:	d054      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d9a:	d036      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002d9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002da0:	d82f      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da6:	d032      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	d829      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dae:	2bc0      	cmp	r3, #192	; 0xc0
 8002db0:	d02f      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002db2:	2bc0      	cmp	r3, #192	; 0xc0
 8002db4:	d825      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d018      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d821      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d007      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002dc6:	e01c      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	4a4e      	ldr	r2, [pc, #312]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002dd4:	e01e      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dda:	3308      	adds	r3, #8
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 fb94 	bl	800450c <RCCEx_PLL2_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002dea:	e013      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df0:	3328      	adds	r3, #40	; 0x28
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fc3b 	bl	8004670 <RCCEx_PLL3_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002e00:	e008      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e08:	e004      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	4a37      	ldr	r2, [pc, #220]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6513      	str	r3, [r2, #80]	; 0x50
 8002e30:	e003      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002e54:	460b      	mov	r3, r1
 8002e56:	4313      	orrs	r3, r2
 8002e58:	d05c      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e64:	d03b      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e66:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e6a:	d834      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e70:	d037      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e76:	d82e      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e7c:	d033      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e82:	d828      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d01a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d822      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e98:	d007      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002e9a:	e01c      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002ea8:	e01e      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eae:	3308      	adds	r3, #8
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 fb2a 	bl	800450c <RCCEx_PLL2_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002ebe:	e013      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec4:	3328      	adds	r3, #40	; 0x28
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fbd1 	bl	8004670 <RCCEx_PLL3_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002edc:	e004      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efe:	4a02      	ldr	r2, [pc, #8]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6513      	str	r3, [r2, #80]	; 0x50
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002f06:	bf00      	nop
 8002f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002f2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4313      	orrs	r3, r2
 8002f32:	d03a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	2b30      	cmp	r3, #48	; 0x30
 8002f3c:	d01f      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002f3e:	2b30      	cmp	r3, #48	; 0x30
 8002f40:	d819      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d00c      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d815      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d019      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d111      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f52:	4bae      	ldr	r3, [pc, #696]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	4aad      	ldr	r2, [pc, #692]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f5e:	e011      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f64:	3308      	adds	r3, #8
 8002f66:	2102      	movs	r1, #2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 facf 	bl	800450c <RCCEx_PLL2_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f74:	e006      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f7c:	e002      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f8c:	4b9f      	ldr	r3, [pc, #636]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	4a9c      	ldr	r2, [pc, #624]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002fc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	d051      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd4:	d035      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fda:	d82e      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fe0:	d031      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002fe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fe6:	d828      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fec:	d01a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff2:	d822      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffc:	d007      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002ffe:	e01c      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003000:	4b82      	ldr	r3, [pc, #520]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a81      	ldr	r2, [pc, #516]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800300c:	e01c      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800300e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003012:	3308      	adds	r3, #8
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f001 fa78 	bl	800450c <RCCEx_PLL2_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003022:	e011      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003028:	3328      	adds	r3, #40	; 0x28
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fb1f 	bl	8004670 <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003038:	e006      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003040:	e002      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003048:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003050:	4b6e      	ldr	r3, [pc, #440]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003054:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305e:	4a6b      	ldr	r2, [pc, #428]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003060:	430b      	orrs	r3, r1
 8003062:	6513      	str	r3, [r2, #80]	; 0x50
 8003064:	e003      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003066:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800306a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800307a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003084:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003088:	460b      	mov	r3, r1
 800308a:	4313      	orrs	r3, r2
 800308c:	d053      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800308e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003098:	d033      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800309a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309e:	d82c      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030a4:	d02f      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80030a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030aa:	d826      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030b0:	d02b      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80030b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030b6:	d820      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030bc:	d012      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80030be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030c2:	d81a      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d022      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d115      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d2:	3308      	adds	r3, #8
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 fa18 	bl	800450c <RCCEx_PLL2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030e2:	e015      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e8:	3328      	adds	r3, #40	; 0x28
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 fabf 	bl	8004670 <RCCEx_PLL3_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030f8:	e00a      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003100:	e006      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003102:	bf00      	nop
 8003104:	e004      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003106:	bf00      	nop
 8003108:	e002      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800310e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003110:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003118:	4b3c      	ldr	r3, [pc, #240]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003126:	4a39      	ldr	r2, [pc, #228]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003128:	430b      	orrs	r3, r1
 800312a:	6513      	str	r3, [r2, #80]	; 0x50
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003132:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003142:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800314c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003150:	460b      	mov	r3, r1
 8003152:	4313      	orrs	r3, r2
 8003154:	d060      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800315e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003162:	d039      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003164:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003168:	d832      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800316a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800316e:	d035      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003174:	d82c      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317a:	d031      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d826      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003186:	d02d      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003188:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800318c:	d820      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800318e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003192:	d012      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003198:	d81a      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d024      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800319e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031a2:	d115      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a8:	3308      	adds	r3, #8
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f9ad 	bl	800450c <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031b8:	e017      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031be:	3328      	adds	r3, #40	; 0x28
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 fa54 	bl	8004670 <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031ce:	e00c      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031d8:	bf00      	nop
 80031da:	e006      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003202:	4a02      	ldr	r2, [pc, #8]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6593      	str	r3, [r2, #88]	; 0x58
 8003208:	e006      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800320a:	bf00      	nop
 800320c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003214:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800322e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003232:	460b      	mov	r3, r1
 8003234:	4313      	orrs	r3, r2
 8003236:	d037      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003242:	d00e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003248:	d816      	bhi.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d018      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800324e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003252:	d111      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003254:	4bc4      	ldr	r3, [pc, #784]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	4ac3      	ldr	r2, [pc, #780]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800325a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003260:	e00f      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003266:	3308      	adds	r3, #8
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f001 f94e 	bl	800450c <RCCEx_PLL2_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003276:	e004      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003282:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800328a:	4bb7      	ldr	r3, [pc, #732]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800328c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003298:	4ab3      	ldr	r2, [pc, #716]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800329a:	430b      	orrs	r3, r1
 800329c:	6513      	str	r3, [r2, #80]	; 0x50
 800329e:	e003      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80032b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80032be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	d039      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d81c      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	08003315 	.word	0x08003315
 80032dc:	080032e9 	.word	0x080032e9
 80032e0:	080032f7 	.word	0x080032f7
 80032e4:	08003315 	.word	0x08003315
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e8:	4b9f      	ldr	r3, [pc, #636]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4a9e      	ldr	r2, [pc, #632]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032f4:	e00f      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fa:	3308      	adds	r3, #8
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f904 	bl	800450c <RCCEx_PLL2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800330a:	e004      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800331e:	4b92      	ldr	r3, [pc, #584]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	f023 0103 	bic.w	r1, r3, #3
 8003326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800332e:	430b      	orrs	r3, r1
 8003330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003332:	e003      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003334:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003338:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800333c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003352:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003356:	460b      	mov	r3, r1
 8003358:	4313      	orrs	r3, r2
 800335a:	f000 8099 	beq.w	8003490 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800335e:	4b83      	ldr	r3, [pc, #524]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a82      	ldr	r2, [pc, #520]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800336a:	f7fe f8fd 	bl	8001568 <HAL_GetTick>
 800336e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003372:	e00b      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003374:	f7fe f8f8 	bl	8001568 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d903      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800338a:	e005      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800338c:	4b77      	ldr	r3, [pc, #476]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ed      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003398:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800339c:	2b00      	cmp	r3, #0
 800339e:	d173      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033a0:	4b71      	ldr	r3, [pc, #452]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033ac:	4053      	eors	r3, r2
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033b6:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033c2:	4b69      	ldr	r3, [pc, #420]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a68      	ldr	r2, [pc, #416]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a65      	ldr	r2, [pc, #404]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033da:	4a63      	ldr	r2, [pc, #396]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ee:	d118      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe f8ba 	bl	8001568 <HAL_GetTick>
 80033f4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f8:	e00d      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe f8b5 	bl	8001568 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003404:	1ad2      	subs	r2, r2, r3
 8003406:	f241 3388 	movw	r3, #5000	; 0x1388
 800340a:	429a      	cmp	r2, r3
 800340c:	d903      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003414:	e005      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0eb      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003422:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003426:	2b00      	cmp	r3, #0
 8003428:	d129      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343a:	d10e      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800343c:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800344c:	091a      	lsrs	r2, r3, #4
 800344e:	4b48      	ldr	r3, [pc, #288]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003450:	4013      	ands	r3, r2
 8003452:	4a45      	ldr	r2, [pc, #276]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003454:	430b      	orrs	r3, r1
 8003456:	6113      	str	r3, [r2, #16]
 8003458:	e005      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800345a:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	4a42      	ldr	r2, [pc, #264]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003460:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003464:	6113      	str	r3, [r2, #16]
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003468:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800346a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	4a3c      	ldr	r2, [pc, #240]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
 800347c:	e008      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800347e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003482:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800348c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f002 0301 	and.w	r3, r2, #1
 800349c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f000 8090 	beq.w	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ba:	2b28      	cmp	r3, #40	; 0x28
 80034bc:	d870      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080035a9 	.word	0x080035a9
 80034c8:	080035a1 	.word	0x080035a1
 80034cc:	080035a1 	.word	0x080035a1
 80034d0:	080035a1 	.word	0x080035a1
 80034d4:	080035a1 	.word	0x080035a1
 80034d8:	080035a1 	.word	0x080035a1
 80034dc:	080035a1 	.word	0x080035a1
 80034e0:	080035a1 	.word	0x080035a1
 80034e4:	08003575 	.word	0x08003575
 80034e8:	080035a1 	.word	0x080035a1
 80034ec:	080035a1 	.word	0x080035a1
 80034f0:	080035a1 	.word	0x080035a1
 80034f4:	080035a1 	.word	0x080035a1
 80034f8:	080035a1 	.word	0x080035a1
 80034fc:	080035a1 	.word	0x080035a1
 8003500:	080035a1 	.word	0x080035a1
 8003504:	0800358b 	.word	0x0800358b
 8003508:	080035a1 	.word	0x080035a1
 800350c:	080035a1 	.word	0x080035a1
 8003510:	080035a1 	.word	0x080035a1
 8003514:	080035a1 	.word	0x080035a1
 8003518:	080035a1 	.word	0x080035a1
 800351c:	080035a1 	.word	0x080035a1
 8003520:	080035a1 	.word	0x080035a1
 8003524:	080035a9 	.word	0x080035a9
 8003528:	080035a1 	.word	0x080035a1
 800352c:	080035a1 	.word	0x080035a1
 8003530:	080035a1 	.word	0x080035a1
 8003534:	080035a1 	.word	0x080035a1
 8003538:	080035a1 	.word	0x080035a1
 800353c:	080035a1 	.word	0x080035a1
 8003540:	080035a1 	.word	0x080035a1
 8003544:	080035a9 	.word	0x080035a9
 8003548:	080035a1 	.word	0x080035a1
 800354c:	080035a1 	.word	0x080035a1
 8003550:	080035a1 	.word	0x080035a1
 8003554:	080035a1 	.word	0x080035a1
 8003558:	080035a1 	.word	0x080035a1
 800355c:	080035a1 	.word	0x080035a1
 8003560:	080035a1 	.word	0x080035a1
 8003564:	080035a9 	.word	0x080035a9
 8003568:	58024400 	.word	0x58024400
 800356c:	58024800 	.word	0x58024800
 8003570:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003578:	3308      	adds	r3, #8
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f000 ffc5 	bl	800450c <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003588:	e00f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800358a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358e:	3328      	adds	r3, #40	; 0x28
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f86c 	bl	8004670 <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035b2:	4bc0      	ldr	r3, [pc, #768]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c2:	4abc      	ldr	r2, [pc, #752]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6553      	str	r3, [r2, #84]	; 0x54
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f002 0302 	and.w	r3, r2, #2
 80035de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80035ec:	460b      	mov	r3, r1
 80035ee:	4313      	orrs	r3, r2
 80035f0:	d043      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d824      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003651 	.word	0x08003651
 8003608:	0800361d 	.word	0x0800361d
 800360c:	08003633 	.word	0x08003633
 8003610:	08003651 	.word	0x08003651
 8003614:	08003651 	.word	0x08003651
 8003618:	08003651 	.word	0x08003651
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800361c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003620:	3308      	adds	r3, #8
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 ff71 	bl	800450c <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003630:	e00f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003636:	3328      	adds	r3, #40	; 0x28
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f001 f818 	bl	8004670 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800365a:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f023 0107 	bic.w	r1, r3, #7
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366a:	4a92      	ldr	r2, [pc, #584]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6553      	str	r3, [r2, #84]	; 0x54
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003676:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800367a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f002 0304 	and.w	r3, r2, #4
 8003686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003690:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d043      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800369a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d824      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036f9 	.word	0x080036f9
 80036b0:	080036c5 	.word	0x080036c5
 80036b4:	080036db 	.word	0x080036db
 80036b8:	080036f9 	.word	0x080036f9
 80036bc:	080036f9 	.word	0x080036f9
 80036c0:	080036f9 	.word	0x080036f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c8:	3308      	adds	r3, #8
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 ff1d 	bl	800450c <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036de:	3328      	adds	r3, #40	; 0x28
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 ffc4 	bl	8004670 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003702:	4b6c      	ldr	r3, [pc, #432]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	f023 0107 	bic.w	r1, r3, #7
 800370a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003712:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6593      	str	r3, [r2, #88]	; 0x58
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800371e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f002 0320 	and.w	r3, r2, #32
 800372e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800373c:	460b      	mov	r3, r1
 800373e:	4313      	orrs	r3, r2
 8003740:	d055      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374e:	d033      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003754:	d82c      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375a:	d02f      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d826      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003766:	d02b      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800376c:	d820      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800376e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003772:	d012      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003778:	d81a      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d022      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800377e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003782:	d115      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003788:	3308      	adds	r3, #8
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f000 febd 	bl	800450c <RCCEx_PLL2_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003798:	e015      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800379a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379e:	3328      	adds	r3, #40	; 0x28
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 ff64 	bl	8004670 <RCCEx_PLL3_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037ae:	e00a      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037b6:	e006      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037b8:	bf00      	nop
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037bc:	bf00      	nop
 80037be:	e002      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ce:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	4a35      	ldr	r2, [pc, #212]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6553      	str	r3, [r2, #84]	; 0x54
 80037e4:	e003      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80037fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003808:	460b      	mov	r3, r1
 800380a:	4313      	orrs	r3, r2
 800380c:	d058      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800380e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003812:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800381a:	d033      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800381c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003820:	d82c      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	d02f      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d826      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800382e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003832:	d02b      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003838:	d820      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383e:	d012      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003844:	d81a      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d022      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384e:	d115      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003854:	3308      	adds	r3, #8
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fe57 	bl	800450c <RCCEx_PLL2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003864:	e015      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386a:	3328      	adds	r3, #40	; 0x28
 800386c:	2102      	movs	r1, #2
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fefe 	bl	8004670 <RCCEx_PLL3_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800387a:	e00a      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003882:	e006      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003884:	bf00      	nop
 8003886:	e004      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003888:	bf00      	nop
 800388a:	e002      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003892:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10e      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80038a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038aa:	4a02      	ldr	r2, [pc, #8]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6593      	str	r3, [r2, #88]	; 0x58
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80038cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d055      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038ec:	d033      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80038ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038f2:	d82c      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f8:	d02f      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80038fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fe:	d826      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003900:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003904:	d02b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800390a:	d820      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d012      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003916:	d81a      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d022      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800391c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003920:	d115      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003926:	3308      	adds	r3, #8
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fdee 	bl	800450c <RCCEx_PLL2_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003936:	e015      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393c:	3328      	adds	r3, #40	; 0x28
 800393e:	2102      	movs	r1, #2
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fe95 	bl	8004670 <RCCEx_PLL3_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003956:	bf00      	nop
 8003958:	e004      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003964:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800396c:	4ba1      	ldr	r3, [pc, #644]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003978:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800397c:	4a9d      	ldr	r2, [pc, #628]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003988:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f002 0308 	and.w	r3, r2, #8
 8003998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d01e      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039be:	3328      	adds	r3, #40	; 0x28
 80039c0:	2102      	movs	r1, #2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fe54 	bl	8004670 <RCCEx_PLL3_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039d4:	4b87      	ldr	r3, [pc, #540]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e4:	4a83      	ldr	r2, [pc, #524]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039e6:	430b      	orrs	r3, r1
 80039e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f002 0310 	and.w	r3, r2, #16
 80039f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d01e      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a1c:	3328      	adds	r3, #40	; 0x28
 8003a1e:	2102      	movs	r1, #2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fe25 	bl	8004670 <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a32:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a42:	4a6c      	ldr	r2, [pc, #432]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d03e      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a74:	d022      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a7a:	d81b      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003a86:	e015      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fd3b 	bl	800450c <RCCEx_PLL2_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a9c:	e00f      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa2:	3328      	adds	r3, #40	; 0x28
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fde2 	bl	8004670 <RCCEx_PLL3_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ab2:	e004      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003aba:	e000      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003abe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac6:	4b4b      	ldr	r3, [pc, #300]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ad6:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6593      	str	r3, [r2, #88]	; 0x58
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ae2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003af2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003af4:	2300      	movs	r3, #0
 8003af6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003af8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003afc:	460b      	mov	r3, r1
 8003afe:	4313      	orrs	r3, r2
 8003b00:	d03b      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b0e:	d01f      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003b10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b14:	d818      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1a:	d003      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b20:	d007      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b30:	e00f      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b36:	3328      	adds	r3, #40	; 0x28
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fd98 	bl	8004670 <RCCEx_PLL3_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003b86:	673b      	str	r3, [r7, #112]	; 0x70
 8003b88:	2300      	movs	r3, #0
 8003b8a:	677b      	str	r3, [r7, #116]	; 0x74
 8003b8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003b90:	460b      	mov	r3, r1
 8003b92:	4313      	orrs	r3, r2
 8003b94:	d034      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d007      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003ba6:	e011      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bb4:	e00e      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fca4 	bl	800450c <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bca:	e003      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	4a02      	ldr	r2, [pc, #8]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf0:	e006      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003bf2:	bf00      	nop
 8003bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c0e:	2300      	movs	r3, #0
 8003c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d00c      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	3328      	adds	r3, #40	; 0x28
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fd23 	bl	8004670 <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003c42:	663b      	str	r3, [r7, #96]	; 0x60
 8003c44:	2300      	movs	r3, #0
 8003c46:	667b      	str	r3, [r7, #100]	; 0x64
 8003c48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d038      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5e:	d018      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c64:	d811      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6a:	d014      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c70:	d80b      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d011      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7c:	4bc3      	ldr	r3, [pc, #780]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4ac2      	ldr	r2, [pc, #776]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c88:	e008      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c90:	e004      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ca4:	4bb9      	ldr	r3, [pc, #740]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	4ab5      	ldr	r2, [pc, #724]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6553      	str	r3, [r2, #84]	; 0x54
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ce0:	4baa      	ldr	r3, [pc, #680]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cee:	4aa7      	ldr	r2, [pc, #668]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003d00:	653b      	str	r3, [r7, #80]	; 0x50
 8003d02:	2300      	movs	r3, #0
 8003d04:	657b      	str	r3, [r7, #84]	; 0x54
 8003d06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d10:	4b9e      	ldr	r3, [pc, #632]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d14:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a9b      	ldr	r2, [pc, #620]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d32:	2300      	movs	r3, #0
 8003d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003d40:	4b92      	ldr	r3, [pc, #584]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	4a8f      	ldr	r2, [pc, #572]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003d60:	643b      	str	r3, [r7, #64]	; 0x40
 8003d62:	2300      	movs	r3, #0
 8003d64:	647b      	str	r3, [r7, #68]	; 0x44
 8003d66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d70:	4b86      	ldr	r3, [pc, #536]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	4a85      	ldr	r2, [pc, #532]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d7a:	6113      	str	r3, [r2, #16]
 8003d7c:	4b83      	ldr	r3, [pc, #524]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d7e:	6919      	ldr	r1, [r3, #16]
 8003d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d88:	4a80      	ldr	r2, [pc, #512]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003da4:	460b      	mov	r3, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003daa:	4b78      	ldr	r3, [pc, #480]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	4a74      	ldr	r2, [pc, #464]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
 8003dcc:	2300      	movs	r3, #0
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dda:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dea:	4a68      	ldr	r2, [pc, #416]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	2100      	movs	r1, #0
 8003dfa:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d011      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e10:	3308      	adds	r3, #8
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fb79 	bl	800450c <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	2100      	movs	r1, #0
 8003e3a:	6239      	str	r1, [r7, #32]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e46:	460b      	mov	r3, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	d011      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e50:	3308      	adds	r3, #8
 8003e52:	2101      	movs	r1, #1
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fb59 	bl	800450c <RCCEx_PLL2_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	61b9      	str	r1, [r7, #24]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d011      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e90:	3308      	adds	r3, #8
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fb39 	bl	800450c <RCCEx_PLL2_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	2100      	movs	r1, #0
 8003eba:	6139      	str	r1, [r7, #16]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	d011      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed0:	3328      	adds	r3, #40	; 0x28
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fbcb 	bl	8004670 <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	2100      	movs	r1, #0
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f06:	460b      	mov	r3, r1
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	d011      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f10:	3328      	adds	r3, #40	; 0x28
 8003f12:	2101      	movs	r1, #1
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fbab 	bl	8004670 <RCCEx_PLL3_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	2100      	movs	r1, #0
 8003f3a:	6039      	str	r1, [r7, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f46:	460b      	mov	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	d011      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f50:	3328      	adds	r3, #40	; 0x28
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fb8b 	bl	8004670 <RCCEx_PLL3_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003f70:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003f84:	46bd      	mov	sp, r7
 8003f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8a:	bf00      	nop
 8003f8c:	58024400 	.word	0x58024400

08003f90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003f94:	f7fe fde2 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4904      	ldr	r1, [pc, #16]	; (8003fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	080071b0 	.word	0x080071b0

08003fbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fc4:	4ba1      	ldr	r3, [pc, #644]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003fce:	4b9f      	ldr	r3, [pc, #636]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	0b1b      	lsrs	r3, r3, #12
 8003fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fda:	4b9c      	ldr	r3, [pc, #624]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003fe6:	4b99      	ldr	r3, [pc, #612]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8111 	beq.w	800422c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b02      	cmp	r3, #2
 800400e:	f000 8083 	beq.w	8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b02      	cmp	r3, #2
 8004016:	f200 80a1 	bhi.w	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d056      	beq.n	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004026:	e099      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004028:	4b88      	ldr	r3, [pc, #544]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02d      	beq.n	8004090 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004034:	4b85      	ldr	r3, [pc, #532]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	4a84      	ldr	r2, [pc, #528]	; (8004250 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b7b      	ldr	r3, [pc, #492]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800408e:	e087      	b.n	80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004258 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b6a      	ldr	r3, [pc, #424]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d2:	e065      	b.n	80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800425c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004116:	e043      	b.n	80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412a:	4b48      	ldr	r3, [pc, #288]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413a:	ed97 6a03 	vldr	s12, [r7, #12]
 800413e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800415a:	e021      	b.n	80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800425c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800416a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004182:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800418a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800419e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041a0:	4b2a      	ldr	r3, [pc, #168]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	0a5b      	lsrs	r3, r3, #9
 80041a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80041be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c6:	ee17 2a90 	vmov	r2, s15
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80041ce:	4b1f      	ldr	r3, [pc, #124]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f4:	ee17 2a90 	vmov	r2, s15
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004216:	edd7 6a07 	vldr	s13, [r7, #28]
 800421a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004222:	ee17 2a90 	vmov	r2, s15
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800422a:	e008      	b.n	800423e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
}
 800423e:	bf00      	nop
 8004240:	3724      	adds	r7, #36	; 0x24
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
 8004250:	03d09000 	.word	0x03d09000
 8004254:	46000000 	.word	0x46000000
 8004258:	4c742400 	.word	0x4c742400
 800425c:	4a742400 	.word	0x4a742400
 8004260:	4af42400 	.word	0x4af42400

08004264 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800426c:	4ba1      	ldr	r3, [pc, #644]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004276:	4b9f      	ldr	r3, [pc, #636]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	0d1b      	lsrs	r3, r3, #20
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004282:	4b9c      	ldr	r3, [pc, #624]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800428e:	4b99      	ldr	r3, [pc, #612]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	08db      	lsrs	r3, r3, #3
 8004294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8111 	beq.w	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	f000 8083 	beq.w	80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	f200 80a1 	bhi.w	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d056      	beq.n	800437c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042ce:	e099      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d0:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02d      	beq.n	8004338 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042dc:	4b85      	ldr	r3, [pc, #532]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	08db      	lsrs	r3, r3, #3
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	4a84      	ldr	r2, [pc, #528]	; (80044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b7b      	ldr	r3, [pc, #492]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004316:	ed97 6a03 	vldr	s12, [r7, #12]
 800431a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004336:	e087      	b.n	8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004500 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435a:	ed97 6a03 	vldr	s12, [r7, #12]
 800435e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800437a:	e065      	b.n	8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438e:	4b59      	ldr	r3, [pc, #356]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439e:	ed97 6a03 	vldr	s12, [r7, #12]
 80043a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043be:	e043      	b.n	8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d2:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004402:	e021      	b.n	8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004416:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004426:	ed97 6a03 	vldr	s12, [r7, #12]
 800442a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800442e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004446:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004448:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	0a5b      	lsrs	r3, r3, #9
 800444e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800445e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004462:	edd7 6a07 	vldr	s13, [r7, #28]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446e:	ee17 2a90 	vmov	r2, s15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004476:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800448c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004490:	edd7 6a07 	vldr	s13, [r7, #28]
 8004494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449c:	ee17 2a90 	vmov	r2, s15
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044a4:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	0e1b      	lsrs	r3, r3, #24
 80044aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044be:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ca:	ee17 2a90 	vmov	r2, s15
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044d2:	e008      	b.n	80044e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
}
 80044e6:	bf00      	nop
 80044e8:	3724      	adds	r7, #36	; 0x24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	03d09000 	.word	0x03d09000
 80044fc:	46000000 	.word	0x46000000
 8004500:	4c742400 	.word	0x4c742400
 8004504:	4a742400 	.word	0x4a742400
 8004508:	4af42400 	.word	0x4af42400

0800450c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800451a:	4b53      	ldr	r3, [pc, #332]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d101      	bne.n	800452a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e099      	b.n	800465e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800452a:	4b4f      	ldr	r3, [pc, #316]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a4e      	ldr	r2, [pc, #312]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004530:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004536:	f7fd f817 	bl	8001568 <HAL_GetTick>
 800453a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800453c:	e008      	b.n	8004550 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800453e:	f7fd f813 	bl	8001568 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e086      	b.n	800465e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004550:	4b45      	ldr	r3, [pc, #276]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800455c:	4b42      	ldr	r3, [pc, #264]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	031b      	lsls	r3, r3, #12
 800456a:	493f      	ldr	r1, [pc, #252]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 800456c:	4313      	orrs	r3, r2
 800456e:	628b      	str	r3, [r1, #40]	; 0x28
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	3b01      	subs	r3, #1
 8004576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	025b      	lsls	r3, r3, #9
 8004582:	b29b      	uxth	r3, r3
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	3b01      	subs	r3, #1
 800459a:	061b      	lsls	r3, r3, #24
 800459c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045a0:	4931      	ldr	r1, [pc, #196]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045a6:	4b30      	ldr	r3, [pc, #192]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	492d      	ldr	r1, [pc, #180]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045b8:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	f023 0220 	bic.w	r2, r3, #32
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4928      	ldr	r1, [pc, #160]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045ca:	4b27      	ldr	r3, [pc, #156]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	4a26      	ldr	r2, [pc, #152]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045d0:	f023 0310 	bic.w	r3, r3, #16
 80045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <RCCEx_PLL2_Config+0x160>)
 80045dc:	4013      	ands	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	69d2      	ldr	r2, [r2, #28]
 80045e2:	00d2      	lsls	r2, r2, #3
 80045e4:	4920      	ldr	r1, [pc, #128]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045ea:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045f0:	f043 0310 	orr.w	r3, r3, #16
 80045f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045fc:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	4a19      	ldr	r2, [pc, #100]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004608:	e00f      	b.n	800462a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d106      	bne.n	800461e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004610:	4b15      	ldr	r3, [pc, #84]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800461c:	e005      	b.n	800462a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	4a11      	ldr	r2, [pc, #68]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004636:	f7fc ff97 	bl	8001568 <HAL_GetTick>
 800463a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800463c:	e008      	b.n	8004650 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800463e:	f7fc ff93 	bl	8001568 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <RCCEx_PLL2_Config+0x15c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
 800466c:	ffff0007 	.word	0xffff0007

08004670 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800467e:	4b53      	ldr	r3, [pc, #332]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d101      	bne.n	800468e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e099      	b.n	80047c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800468e:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a4e      	ldr	r2, [pc, #312]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469a:	f7fc ff65 	bl	8001568 <HAL_GetTick>
 800469e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046a0:	e008      	b.n	80046b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046a2:	f7fc ff61 	bl	8001568 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e086      	b.n	80047c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046c0:	4b42      	ldr	r3, [pc, #264]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	051b      	lsls	r3, r3, #20
 80046ce:	493f      	ldr	r1, [pc, #252]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	628b      	str	r3, [r1, #40]	; 0x28
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	3b01      	subs	r3, #1
 80046da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	025b      	lsls	r3, r3, #9
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004704:	4931      	ldr	r1, [pc, #196]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800470a:	4b30      	ldr	r3, [pc, #192]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	492d      	ldr	r1, [pc, #180]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800471c:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	4928      	ldr	r1, [pc, #160]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800472e:	4b27      	ldr	r3, [pc, #156]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	4a26      	ldr	r2, [pc, #152]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 800473c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <RCCEx_PLL3_Config+0x160>)
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	69d2      	ldr	r2, [r2, #28]
 8004746:	00d2      	lsls	r2, r2, #3
 8004748:	4920      	ldr	r1, [pc, #128]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 800474a:	4313      	orrs	r3, r2
 800474c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800474e:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004760:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	4a19      	ldr	r2, [pc, #100]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800476a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800476c:	e00f      	b.n	800478e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d106      	bne.n	8004782 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004774:	4b15      	ldr	r3, [pc, #84]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 800477a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800477e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004780:	e005      	b.n	800478e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	4a11      	ldr	r2, [pc, #68]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479a:	f7fc fee5 	bl	8001568 <HAL_GetTick>
 800479e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047a0:	e008      	b.n	80047b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047a2:	f7fc fee1 	bl	8001568 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e006      	b.n	80047c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <RCCEx_PLL3_Config+0x15c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	58024400 	.word	0x58024400
 80047d0:	ffff0007 	.word	0xffff0007

080047d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e049      	b.n	800487a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fbd8 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 fad6 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d001      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e054      	b.n	8004946 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d022      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x80>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d01d      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a22      	ldr	r2, [pc, #136]	; (8004958 <HAL_TIM_Base_Start_IT+0xd4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x80>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <HAL_TIM_Base_Start_IT+0xd8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x80>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_TIM_Base_Start_IT+0xdc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x80>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_TIM_Base_Start_IT+0xe0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x80>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <HAL_TIM_Base_Start_IT+0xe4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x80>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_TIM_Base_Start_IT+0xe8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d115      	bne.n	8004930 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_TIM_Base_Start_IT+0xec>)
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d015      	beq.n	8004942 <HAL_TIM_Base_Start_IT+0xbe>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491c:	d011      	beq.n	8004942 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492e:	e008      	b.n	8004942 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e000      	b.n	8004944 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40001800 	.word	0x40001800
 800496c:	40014000 	.word	0x40014000
 8004970:	00010007 	.word	0x00010007

08004974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0202 	mvn.w	r2, #2
 80049a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9e2 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9d4 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f9e5 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d020      	beq.n	8004a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01b      	beq.n	8004a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0204 	mvn.w	r2, #4
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9bc 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9ae 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9bf 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d020      	beq.n	8004a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01b      	beq.n	8004a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0208 	mvn.w	r2, #8
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2204      	movs	r2, #4
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f996 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f988 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f999 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d020      	beq.n	8004abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0210 	mvn.w	r2, #16
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2208      	movs	r2, #8
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f970 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f962 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f973 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0201 	mvn.w	r2, #1
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc f876 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fb37 	bl	800517c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00c      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fb2f 	bl	8005190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00c      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f92d 	bl	8004db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0220 	mvn.w	r2, #32
 8004b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 faf7 	bl	8005168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e0dc      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x1d6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a64      	ldr	r2, [pc, #400]	; (8004d68 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	f000 80a9 	beq.w	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004bdc:	4a62      	ldr	r2, [pc, #392]	; (8004d68 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	f200 80ae 	bhi.w	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004be4:	4a61      	ldr	r2, [pc, #388]	; (8004d6c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	f000 80a1 	beq.w	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004bec:	4a5f      	ldr	r2, [pc, #380]	; (8004d6c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f200 80a6 	bhi.w	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bf4:	4a5e      	ldr	r2, [pc, #376]	; (8004d70 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	f000 8099 	beq.w	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004bfc:	4a5c      	ldr	r2, [pc, #368]	; (8004d70 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	f200 809e 	bhi.w	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c08:	f000 8091 	beq.w	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c10:	f200 8096 	bhi.w	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c18:	f000 8089 	beq.w	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c20:	f200 808e 	bhi.w	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c28:	d03e      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x124>
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2e:	f200 8087 	bhi.w	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	f000 8086 	beq.w	8004d46 <HAL_TIM_ConfigClockSource+0x1c2>
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3e:	d87f      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c40:	2b70      	cmp	r3, #112	; 0x70
 8004c42:	d01a      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0xf6>
 8004c44:	2b70      	cmp	r3, #112	; 0x70
 8004c46:	d87b      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c48:	2b60      	cmp	r3, #96	; 0x60
 8004c4a:	d050      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x16a>
 8004c4c:	2b60      	cmp	r3, #96	; 0x60
 8004c4e:	d877      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c50:	2b50      	cmp	r3, #80	; 0x50
 8004c52:	d03c      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x14a>
 8004c54:	2b50      	cmp	r3, #80	; 0x50
 8004c56:	d873      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d058      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x18a>
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d86f      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c60:	2b30      	cmp	r3, #48	; 0x30
 8004c62:	d064      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c64:	2b30      	cmp	r3, #48	; 0x30
 8004c66:	d86b      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d060      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d867      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d05c      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d05a      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c78:	e062      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6899      	ldr	r1, [r3, #8]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f000 f9bf 	bl	800500c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	609a      	str	r2, [r3, #8]
      break;
 8004ca6:	e04f      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6899      	ldr	r1, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f000 f9a8 	bl	800500c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cca:	609a      	str	r2, [r3, #8]
      break;
 8004ccc:	e03c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6859      	ldr	r1, [r3, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f000 f918 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2150      	movs	r1, #80	; 0x50
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f972 	bl	8004fd0 <TIM_ITRx_SetConfig>
      break;
 8004cec:	e02c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 f937 	bl	8004f6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2160      	movs	r1, #96	; 0x60
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f962 	bl	8004fd0 <TIM_ITRx_SetConfig>
      break;
 8004d0c:	e01c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 f8f8 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2140      	movs	r1, #64	; 0x40
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f952 	bl	8004fd0 <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e00c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f000 f949 	bl	8004fd0 <TIM_ITRx_SetConfig>
      break;
 8004d3e:	e003      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e000      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	ffceff88 	.word	0xffceff88
 8004d68:	00100040 	.word	0x00100040
 8004d6c:	00100030 	.word	0x00100030
 8004d70:	00100020 	.word	0x00100020

08004d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a46      	ldr	r2, [pc, #280]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a43      	ldr	r2, [pc, #268]	; (8004ef4 <TIM_Base_SetConfig+0x130>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a42      	ldr	r2, [pc, #264]	; (8004ef8 <TIM_Base_SetConfig+0x134>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a41      	ldr	r2, [pc, #260]	; (8004efc <TIM_Base_SetConfig+0x138>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <TIM_Base_SetConfig+0x13c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a35      	ldr	r2, [pc, #212]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a32      	ldr	r2, [pc, #200]	; (8004ef4 <TIM_Base_SetConfig+0x130>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a31      	ldr	r2, [pc, #196]	; (8004ef8 <TIM_Base_SetConfig+0x134>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a30      	ldr	r2, [pc, #192]	; (8004efc <TIM_Base_SetConfig+0x138>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2f      	ldr	r2, [pc, #188]	; (8004f00 <TIM_Base_SetConfig+0x13c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2e      	ldr	r2, [pc, #184]	; (8004f04 <TIM_Base_SetConfig+0x140>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2d      	ldr	r2, [pc, #180]	; (8004f08 <TIM_Base_SetConfig+0x144>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <TIM_Base_SetConfig+0x148>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <TIM_Base_SetConfig+0x13c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <TIM_Base_SetConfig+0x140>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <TIM_Base_SetConfig+0x144>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <TIM_Base_SetConfig+0x148>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d103      	bne.n	8004ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d105      	bne.n	8004ee2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f023 0201 	bic.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	611a      	str	r2, [r3, #16]
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40010400 	.word	0x40010400
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 030a 	bic.w	r3, r3, #10
 8004f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f023 0210 	bic.w	r2, r3, #16
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	031b      	lsls	r3, r3, #12
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <TIM_ITRx_SetConfig+0x38>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f043 0307 	orr.w	r3, r3, #7
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	609a      	str	r2, [r3, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	ffcfff8f 	.word	0xffcfff8f

0800500c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	021a      	lsls	r2, r3, #8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	431a      	orrs	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005060:	2302      	movs	r3, #2
 8005062:	e06d      	b.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a30      	ldr	r2, [pc, #192]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2f      	ldr	r2, [pc, #188]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d108      	bne.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800509e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a20      	ldr	r2, [pc, #128]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d01d      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1a      	ldr	r2, [pc, #104]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a15      	ldr	r2, [pc, #84]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a16      	ldr	r2, [pc, #88]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10c      	bne.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40001800 	.word	0x40001800
 8005164:	40014000 	.word	0x40014000

08005168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e042      	b.n	800523c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fb ffa1 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2224      	movs	r2, #36	; 0x24
 80051d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 ff22 	bl	8006038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8b3 	bl	8005360 <UART_SetConfig>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e01b      	b.n	800523c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 ffa1 	bl	800617c <UART_CheckIdleState>
 800523a:	4603      	mov	r3, r0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	2b20      	cmp	r3, #32
 800525c:	d17b      	bne.n	8005356 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_UART_Transmit+0x26>
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e074      	b.n	8005358 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2221      	movs	r2, #33	; 0x21
 800527a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800527e:	f7fc f973 	bl	8001568 <HAL_GetTick>
 8005282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d108      	bne.n	80052b0 <HAL_UART_Transmit+0x6c>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e003      	b.n	80052b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052b8:	e030      	b.n	800531c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	2180      	movs	r1, #128	; 0x80
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f001 f803 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e03d      	b.n	8005358 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3302      	adds	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e007      	b.n	800530a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1c8      	bne.n	80052ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	2140      	movs	r1, #64	; 0x40
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 ffcc 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e006      	b.n	8005358 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	e000      	b.n	8005358 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005356:	2302      	movs	r3, #2
  }
}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005364:	b092      	sub	sp, #72	; 0x48
 8005366:	af00      	add	r7, sp, #0
 8005368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	431a      	orrs	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	431a      	orrs	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	4313      	orrs	r3, r2
 8005386:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4bbe      	ldr	r3, [pc, #760]	; (8005688 <UART_SetConfig+0x328>)
 8005390:	4013      	ands	r3, r2
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005398:	430b      	orrs	r3, r1
 800539a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4ab3      	ldr	r2, [pc, #716]	; (800568c <UART_SetConfig+0x32c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c8:	4313      	orrs	r3, r2
 80053ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	4baf      	ldr	r3, [pc, #700]	; (8005690 <UART_SetConfig+0x330>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053dc:	430b      	orrs	r3, r1
 80053de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	f023 010f 	bic.w	r1, r3, #15
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4aa6      	ldr	r2, [pc, #664]	; (8005694 <UART_SetConfig+0x334>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d177      	bne.n	80054f0 <UART_SetConfig+0x190>
 8005400:	4ba5      	ldr	r3, [pc, #660]	; (8005698 <UART_SetConfig+0x338>)
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005408:	2b28      	cmp	r3, #40	; 0x28
 800540a:	d86d      	bhi.n	80054e8 <UART_SetConfig+0x188>
 800540c:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0xb4>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	080054b9 	.word	0x080054b9
 8005418:	080054e9 	.word	0x080054e9
 800541c:	080054e9 	.word	0x080054e9
 8005420:	080054e9 	.word	0x080054e9
 8005424:	080054e9 	.word	0x080054e9
 8005428:	080054e9 	.word	0x080054e9
 800542c:	080054e9 	.word	0x080054e9
 8005430:	080054e9 	.word	0x080054e9
 8005434:	080054c1 	.word	0x080054c1
 8005438:	080054e9 	.word	0x080054e9
 800543c:	080054e9 	.word	0x080054e9
 8005440:	080054e9 	.word	0x080054e9
 8005444:	080054e9 	.word	0x080054e9
 8005448:	080054e9 	.word	0x080054e9
 800544c:	080054e9 	.word	0x080054e9
 8005450:	080054e9 	.word	0x080054e9
 8005454:	080054c9 	.word	0x080054c9
 8005458:	080054e9 	.word	0x080054e9
 800545c:	080054e9 	.word	0x080054e9
 8005460:	080054e9 	.word	0x080054e9
 8005464:	080054e9 	.word	0x080054e9
 8005468:	080054e9 	.word	0x080054e9
 800546c:	080054e9 	.word	0x080054e9
 8005470:	080054e9 	.word	0x080054e9
 8005474:	080054d1 	.word	0x080054d1
 8005478:	080054e9 	.word	0x080054e9
 800547c:	080054e9 	.word	0x080054e9
 8005480:	080054e9 	.word	0x080054e9
 8005484:	080054e9 	.word	0x080054e9
 8005488:	080054e9 	.word	0x080054e9
 800548c:	080054e9 	.word	0x080054e9
 8005490:	080054e9 	.word	0x080054e9
 8005494:	080054d9 	.word	0x080054d9
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	080054e9 	.word	0x080054e9
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	080054e9 	.word	0x080054e9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e326      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e322      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e31e      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e31a      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80054d8:	2320      	movs	r3, #32
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e316      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e312      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ee:	e30e      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a69      	ldr	r2, [pc, #420]	; (800569c <UART_SetConfig+0x33c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d130      	bne.n	800555c <UART_SetConfig+0x1fc>
 80054fa:	4b67      	ldr	r3, [pc, #412]	; (8005698 <UART_SetConfig+0x338>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	2b05      	cmp	r3, #5
 8005504:	d826      	bhi.n	8005554 <UART_SetConfig+0x1f4>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x1ac>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005525 	.word	0x08005525
 8005510:	0800552d 	.word	0x0800552d
 8005514:	08005535 	.word	0x08005535
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005545 	.word	0x08005545
 8005520:	0800554d 	.word	0x0800554d
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e2f0      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e2ec      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e2e8      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e2e4      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005544:	2320      	movs	r3, #32
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e2e0      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e2dc      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e2d8      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a4f      	ldr	r2, [pc, #316]	; (80056a0 <UART_SetConfig+0x340>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d130      	bne.n	80055c8 <UART_SetConfig+0x268>
 8005566:	4b4c      	ldr	r3, [pc, #304]	; (8005698 <UART_SetConfig+0x338>)
 8005568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	2b05      	cmp	r3, #5
 8005570:	d826      	bhi.n	80055c0 <UART_SetConfig+0x260>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0x218>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005591 	.word	0x08005591
 800557c:	08005599 	.word	0x08005599
 8005580:	080055a1 	.word	0x080055a1
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e2ba      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e2b6      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e2b2      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e2ae      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e2aa      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e2a6      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e2a2      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a35      	ldr	r2, [pc, #212]	; (80056a4 <UART_SetConfig+0x344>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d130      	bne.n	8005634 <UART_SetConfig+0x2d4>
 80055d2:	4b31      	ldr	r3, [pc, #196]	; (8005698 <UART_SetConfig+0x338>)
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d826      	bhi.n	800562c <UART_SetConfig+0x2cc>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0x284>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	08005605 	.word	0x08005605
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e284      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e280      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e27c      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e278      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800561c:	2320      	movs	r3, #32
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e274      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e270      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e26c      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <UART_SetConfig+0x348>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d142      	bne.n	80056c4 <UART_SetConfig+0x364>
 800563e:	4b16      	ldr	r3, [pc, #88]	; (8005698 <UART_SetConfig+0x338>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	2b05      	cmp	r3, #5
 8005648:	d838      	bhi.n	80056bc <UART_SetConfig+0x35c>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x2f0>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005669 	.word	0x08005669
 8005654:	08005671 	.word	0x08005671
 8005658:	08005679 	.word	0x08005679
 800565c:	08005681 	.word	0x08005681
 8005660:	080056ad 	.word	0x080056ad
 8005664:	080056b5 	.word	0x080056b5
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e24e      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e24a      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e246      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e242      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005688:	cfff69f3 	.word	0xcfff69f3
 800568c:	58000c00 	.word	0x58000c00
 8005690:	11fff4ff 	.word	0x11fff4ff
 8005694:	40011000 	.word	0x40011000
 8005698:	58024400 	.word	0x58024400
 800569c:	40004400 	.word	0x40004400
 80056a0:	40004800 	.word	0x40004800
 80056a4:	40004c00 	.word	0x40004c00
 80056a8:	40005000 	.word	0x40005000
 80056ac:	2320      	movs	r3, #32
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e22c      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e228      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e224      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4ab1      	ldr	r2, [pc, #708]	; (8005990 <UART_SetConfig+0x630>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d176      	bne.n	80057bc <UART_SetConfig+0x45c>
 80056ce:	4bb1      	ldr	r3, [pc, #708]	; (8005994 <UART_SetConfig+0x634>)
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056d6:	2b28      	cmp	r3, #40	; 0x28
 80056d8:	d86c      	bhi.n	80057b4 <UART_SetConfig+0x454>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x380>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005785 	.word	0x08005785
 80056e4:	080057b5 	.word	0x080057b5
 80056e8:	080057b5 	.word	0x080057b5
 80056ec:	080057b5 	.word	0x080057b5
 80056f0:	080057b5 	.word	0x080057b5
 80056f4:	080057b5 	.word	0x080057b5
 80056f8:	080057b5 	.word	0x080057b5
 80056fc:	080057b5 	.word	0x080057b5
 8005700:	0800578d 	.word	0x0800578d
 8005704:	080057b5 	.word	0x080057b5
 8005708:	080057b5 	.word	0x080057b5
 800570c:	080057b5 	.word	0x080057b5
 8005710:	080057b5 	.word	0x080057b5
 8005714:	080057b5 	.word	0x080057b5
 8005718:	080057b5 	.word	0x080057b5
 800571c:	080057b5 	.word	0x080057b5
 8005720:	08005795 	.word	0x08005795
 8005724:	080057b5 	.word	0x080057b5
 8005728:	080057b5 	.word	0x080057b5
 800572c:	080057b5 	.word	0x080057b5
 8005730:	080057b5 	.word	0x080057b5
 8005734:	080057b5 	.word	0x080057b5
 8005738:	080057b5 	.word	0x080057b5
 800573c:	080057b5 	.word	0x080057b5
 8005740:	0800579d 	.word	0x0800579d
 8005744:	080057b5 	.word	0x080057b5
 8005748:	080057b5 	.word	0x080057b5
 800574c:	080057b5 	.word	0x080057b5
 8005750:	080057b5 	.word	0x080057b5
 8005754:	080057b5 	.word	0x080057b5
 8005758:	080057b5 	.word	0x080057b5
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057a5 	.word	0x080057a5
 8005764:	080057b5 	.word	0x080057b5
 8005768:	080057b5 	.word	0x080057b5
 800576c:	080057b5 	.word	0x080057b5
 8005770:	080057b5 	.word	0x080057b5
 8005774:	080057b5 	.word	0x080057b5
 8005778:	080057b5 	.word	0x080057b5
 800577c:	080057b5 	.word	0x080057b5
 8005780:	080057ad 	.word	0x080057ad
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e1c0      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e1bc      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e1b8      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e1b4      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80057a4:	2320      	movs	r3, #32
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e1b0      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b2:	e1ac      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ba:	e1a8      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a75      	ldr	r2, [pc, #468]	; (8005998 <UART_SetConfig+0x638>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d130      	bne.n	8005828 <UART_SetConfig+0x4c8>
 80057c6:	4b73      	ldr	r3, [pc, #460]	; (8005994 <UART_SetConfig+0x634>)
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d826      	bhi.n	8005820 <UART_SetConfig+0x4c0>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x478>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057f1 	.word	0x080057f1
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	08005801 	.word	0x08005801
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e18a      	b.n	8005b0e <UART_SetConfig+0x7ae>
 80057f8:	2304      	movs	r3, #4
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e186      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005800:	2308      	movs	r3, #8
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e182      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005808:	2310      	movs	r3, #16
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e17e      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005810:	2320      	movs	r3, #32
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e17a      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005818:	2340      	movs	r3, #64	; 0x40
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e176      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005826:	e172      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a5b      	ldr	r2, [pc, #364]	; (800599c <UART_SetConfig+0x63c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d130      	bne.n	8005894 <UART_SetConfig+0x534>
 8005832:	4b58      	ldr	r3, [pc, #352]	; (8005994 <UART_SetConfig+0x634>)
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	2b05      	cmp	r3, #5
 800583c:	d826      	bhi.n	800588c <UART_SetConfig+0x52c>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <UART_SetConfig+0x4e4>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	0800585d 	.word	0x0800585d
 8005848:	08005865 	.word	0x08005865
 800584c:	0800586d 	.word	0x0800586d
 8005850:	08005875 	.word	0x08005875
 8005854:	0800587d 	.word	0x0800587d
 8005858:	08005885 	.word	0x08005885
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e154      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e150      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e14c      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e148      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800587c:	2320      	movs	r3, #32
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e144      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005884:	2340      	movs	r3, #64	; 0x40
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e140      	b.n	8005b0e <UART_SetConfig+0x7ae>
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e13c      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a41      	ldr	r2, [pc, #260]	; (80059a0 <UART_SetConfig+0x640>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f040 8082 	bne.w	80059a4 <UART_SetConfig+0x644>
 80058a0:	4b3c      	ldr	r3, [pc, #240]	; (8005994 <UART_SetConfig+0x634>)
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a8:	2b28      	cmp	r3, #40	; 0x28
 80058aa:	d86d      	bhi.n	8005988 <UART_SetConfig+0x628>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x554>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	08005959 	.word	0x08005959
 80058b8:	08005989 	.word	0x08005989
 80058bc:	08005989 	.word	0x08005989
 80058c0:	08005989 	.word	0x08005989
 80058c4:	08005989 	.word	0x08005989
 80058c8:	08005989 	.word	0x08005989
 80058cc:	08005989 	.word	0x08005989
 80058d0:	08005989 	.word	0x08005989
 80058d4:	08005961 	.word	0x08005961
 80058d8:	08005989 	.word	0x08005989
 80058dc:	08005989 	.word	0x08005989
 80058e0:	08005989 	.word	0x08005989
 80058e4:	08005989 	.word	0x08005989
 80058e8:	08005989 	.word	0x08005989
 80058ec:	08005989 	.word	0x08005989
 80058f0:	08005989 	.word	0x08005989
 80058f4:	08005969 	.word	0x08005969
 80058f8:	08005989 	.word	0x08005989
 80058fc:	08005989 	.word	0x08005989
 8005900:	08005989 	.word	0x08005989
 8005904:	08005989 	.word	0x08005989
 8005908:	08005989 	.word	0x08005989
 800590c:	08005989 	.word	0x08005989
 8005910:	08005989 	.word	0x08005989
 8005914:	08005971 	.word	0x08005971
 8005918:	08005989 	.word	0x08005989
 800591c:	08005989 	.word	0x08005989
 8005920:	08005989 	.word	0x08005989
 8005924:	08005989 	.word	0x08005989
 8005928:	08005989 	.word	0x08005989
 800592c:	08005989 	.word	0x08005989
 8005930:	08005989 	.word	0x08005989
 8005934:	08005979 	.word	0x08005979
 8005938:	08005989 	.word	0x08005989
 800593c:	08005989 	.word	0x08005989
 8005940:	08005989 	.word	0x08005989
 8005944:	08005989 	.word	0x08005989
 8005948:	08005989 	.word	0x08005989
 800594c:	08005989 	.word	0x08005989
 8005950:	08005989 	.word	0x08005989
 8005954:	08005981 	.word	0x08005981
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595e:	e0d6      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005966:	e0d2      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596e:	e0ce      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005976:	e0ca      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005978:	2320      	movs	r3, #32
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597e:	e0c6      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005986:	e0c2      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e0be      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005990:	40011400 	.word	0x40011400
 8005994:	58024400 	.word	0x58024400
 8005998:	40007800 	.word	0x40007800
 800599c:	40007c00 	.word	0x40007c00
 80059a0:	40011800 	.word	0x40011800
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4aad      	ldr	r2, [pc, #692]	; (8005c60 <UART_SetConfig+0x900>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d176      	bne.n	8005a9c <UART_SetConfig+0x73c>
 80059ae:	4bad      	ldr	r3, [pc, #692]	; (8005c64 <UART_SetConfig+0x904>)
 80059b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059b6:	2b28      	cmp	r3, #40	; 0x28
 80059b8:	d86c      	bhi.n	8005a94 <UART_SetConfig+0x734>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0x660>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	08005a65 	.word	0x08005a65
 80059c4:	08005a95 	.word	0x08005a95
 80059c8:	08005a95 	.word	0x08005a95
 80059cc:	08005a95 	.word	0x08005a95
 80059d0:	08005a95 	.word	0x08005a95
 80059d4:	08005a95 	.word	0x08005a95
 80059d8:	08005a95 	.word	0x08005a95
 80059dc:	08005a95 	.word	0x08005a95
 80059e0:	08005a6d 	.word	0x08005a6d
 80059e4:	08005a95 	.word	0x08005a95
 80059e8:	08005a95 	.word	0x08005a95
 80059ec:	08005a95 	.word	0x08005a95
 80059f0:	08005a95 	.word	0x08005a95
 80059f4:	08005a95 	.word	0x08005a95
 80059f8:	08005a95 	.word	0x08005a95
 80059fc:	08005a95 	.word	0x08005a95
 8005a00:	08005a75 	.word	0x08005a75
 8005a04:	08005a95 	.word	0x08005a95
 8005a08:	08005a95 	.word	0x08005a95
 8005a0c:	08005a95 	.word	0x08005a95
 8005a10:	08005a95 	.word	0x08005a95
 8005a14:	08005a95 	.word	0x08005a95
 8005a18:	08005a95 	.word	0x08005a95
 8005a1c:	08005a95 	.word	0x08005a95
 8005a20:	08005a7d 	.word	0x08005a7d
 8005a24:	08005a95 	.word	0x08005a95
 8005a28:	08005a95 	.word	0x08005a95
 8005a2c:	08005a95 	.word	0x08005a95
 8005a30:	08005a95 	.word	0x08005a95
 8005a34:	08005a95 	.word	0x08005a95
 8005a38:	08005a95 	.word	0x08005a95
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005a85 	.word	0x08005a85
 8005a44:	08005a95 	.word	0x08005a95
 8005a48:	08005a95 	.word	0x08005a95
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005a95 	.word	0x08005a95
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a95 	.word	0x08005a95
 8005a5c:	08005a95 	.word	0x08005a95
 8005a60:	08005a8d 	.word	0x08005a8d
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e050      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e04c      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005a74:	2308      	movs	r3, #8
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7a:	e048      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a82:	e044      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005a84:	2320      	movs	r3, #32
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8a:	e040      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005a8c:	2340      	movs	r3, #64	; 0x40
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a92:	e03c      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9a:	e038      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a71      	ldr	r2, [pc, #452]	; (8005c68 <UART_SetConfig+0x908>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d130      	bne.n	8005b08 <UART_SetConfig+0x7a8>
 8005aa6:	4b6f      	ldr	r3, [pc, #444]	; (8005c64 <UART_SetConfig+0x904>)
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d826      	bhi.n	8005b00 <UART_SetConfig+0x7a0>
 8005ab2:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <UART_SetConfig+0x758>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ad1 	.word	0x08005ad1
 8005abc:	08005ad9 	.word	0x08005ad9
 8005ac0:	08005ae1 	.word	0x08005ae1
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af9 	.word	0x08005af9
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e01a      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e016      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae6:	e012      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e00e      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005af0:	2320      	movs	r3, #32
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e00a      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005af8:	2340      	movs	r3, #64	; 0x40
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e006      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b06:	e002      	b.n	8005b0e <UART_SetConfig+0x7ae>
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a55      	ldr	r2, [pc, #340]	; (8005c68 <UART_SetConfig+0x908>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	f040 80f8 	bne.w	8005d0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	dc46      	bgt.n	8005bb0 <UART_SetConfig+0x850>
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	db75      	blt.n	8005c12 <UART_SetConfig+0x8b2>
 8005b26:	3b02      	subs	r3, #2
 8005b28:	2b1e      	cmp	r3, #30
 8005b2a:	d872      	bhi.n	8005c12 <UART_SetConfig+0x8b2>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0x7d4>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005bb7 	.word	0x08005bb7
 8005b38:	08005c13 	.word	0x08005c13
 8005b3c:	08005bbf 	.word	0x08005bbf
 8005b40:	08005c13 	.word	0x08005c13
 8005b44:	08005c13 	.word	0x08005c13
 8005b48:	08005c13 	.word	0x08005c13
 8005b4c:	08005bcf 	.word	0x08005bcf
 8005b50:	08005c13 	.word	0x08005c13
 8005b54:	08005c13 	.word	0x08005c13
 8005b58:	08005c13 	.word	0x08005c13
 8005b5c:	08005c13 	.word	0x08005c13
 8005b60:	08005c13 	.word	0x08005c13
 8005b64:	08005c13 	.word	0x08005c13
 8005b68:	08005c13 	.word	0x08005c13
 8005b6c:	08005bdf 	.word	0x08005bdf
 8005b70:	08005c13 	.word	0x08005c13
 8005b74:	08005c13 	.word	0x08005c13
 8005b78:	08005c13 	.word	0x08005c13
 8005b7c:	08005c13 	.word	0x08005c13
 8005b80:	08005c13 	.word	0x08005c13
 8005b84:	08005c13 	.word	0x08005c13
 8005b88:	08005c13 	.word	0x08005c13
 8005b8c:	08005c13 	.word	0x08005c13
 8005b90:	08005c13 	.word	0x08005c13
 8005b94:	08005c13 	.word	0x08005c13
 8005b98:	08005c13 	.word	0x08005c13
 8005b9c:	08005c13 	.word	0x08005c13
 8005ba0:	08005c13 	.word	0x08005c13
 8005ba4:	08005c13 	.word	0x08005c13
 8005ba8:	08005c13 	.word	0x08005c13
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d02a      	beq.n	8005c0a <UART_SetConfig+0x8aa>
 8005bb4:	e02d      	b.n	8005c12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005bb6:	f7fe f9eb 	bl	8003f90 <HAL_RCCEx_GetD3PCLK1Freq>
 8005bba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005bbc:	e02f      	b.n	8005c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe f9fa 	bl	8003fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bcc:	e027      	b.n	8005c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bce:	f107 0318 	add.w	r3, r7, #24
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fb46 	bl	8004264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bdc:	e01f      	b.n	8005c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bde:	4b21      	ldr	r3, [pc, #132]	; (8005c64 <UART_SetConfig+0x904>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bea:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <UART_SetConfig+0x904>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	08db      	lsrs	r3, r3, #3
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <UART_SetConfig+0x90c>)
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bfc:	e00f      	b.n	8005c1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <UART_SetConfig+0x90c>)
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c02:	e00c      	b.n	8005c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <UART_SetConfig+0x910>)
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c08:	e009      	b.n	8005c1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c10:	e005      	b.n	8005c1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 81ee 	beq.w	8006002 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <UART_SetConfig+0x914>)
 8005c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c30:	461a      	mov	r2, r3
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d305      	bcc.n	8005c56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d910      	bls.n	8005c78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c5c:	e1d1      	b.n	8006002 <UART_SetConfig+0xca2>
 8005c5e:	bf00      	nop
 8005c60:	40011c00 	.word	0x40011c00
 8005c64:	58024400 	.word	0x58024400
 8005c68:	58000c00 	.word	0x58000c00
 8005c6c:	03d09000 	.word	0x03d09000
 8005c70:	003d0900 	.word	0x003d0900
 8005c74:	080071c0 	.word	0x080071c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	60fa      	str	r2, [r7, #12]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	4ac0      	ldr	r2, [pc, #768]	; (8005f88 <UART_SetConfig+0xc28>)
 8005c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c9a:	f7fa fb81 	bl	80003a0 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	020b      	lsls	r3, r1, #8
 8005cb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cb4:	0202      	lsls	r2, r0, #8
 8005cb6:	6979      	ldr	r1, [r7, #20]
 8005cb8:	6849      	ldr	r1, [r1, #4]
 8005cba:	0849      	lsrs	r1, r1, #1
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	eb12 0804 	adds.w	r8, r2, r4
 8005cc6:	eb43 0905 	adc.w	r9, r3, r5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	469a      	mov	sl, r3
 8005cd2:	4693      	mov	fp, r2
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	465b      	mov	r3, fp
 8005cd8:	4640      	mov	r0, r8
 8005cda:	4649      	mov	r1, r9
 8005cdc:	f7fa fb60 	bl	80003a0 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cee:	d308      	bcc.n	8005d02 <UART_SetConfig+0x9a2>
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf6:	d204      	bcs.n	8005d02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cfe:	60da      	str	r2, [r3, #12]
 8005d00:	e17f      	b.n	8006002 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d08:	e17b      	b.n	8006002 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d12:	f040 80bd 	bne.w	8005e90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005d16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	dc48      	bgt.n	8005db0 <UART_SetConfig+0xa50>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	db7b      	blt.n	8005e1a <UART_SetConfig+0xaba>
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d879      	bhi.n	8005e1a <UART_SetConfig+0xaba>
 8005d26:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0x9cc>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005db7 	.word	0x08005db7
 8005d30:	08005dbf 	.word	0x08005dbf
 8005d34:	08005e1b 	.word	0x08005e1b
 8005d38:	08005e1b 	.word	0x08005e1b
 8005d3c:	08005dc7 	.word	0x08005dc7
 8005d40:	08005e1b 	.word	0x08005e1b
 8005d44:	08005e1b 	.word	0x08005e1b
 8005d48:	08005e1b 	.word	0x08005e1b
 8005d4c:	08005dd7 	.word	0x08005dd7
 8005d50:	08005e1b 	.word	0x08005e1b
 8005d54:	08005e1b 	.word	0x08005e1b
 8005d58:	08005e1b 	.word	0x08005e1b
 8005d5c:	08005e1b 	.word	0x08005e1b
 8005d60:	08005e1b 	.word	0x08005e1b
 8005d64:	08005e1b 	.word	0x08005e1b
 8005d68:	08005e1b 	.word	0x08005e1b
 8005d6c:	08005de7 	.word	0x08005de7
 8005d70:	08005e1b 	.word	0x08005e1b
 8005d74:	08005e1b 	.word	0x08005e1b
 8005d78:	08005e1b 	.word	0x08005e1b
 8005d7c:	08005e1b 	.word	0x08005e1b
 8005d80:	08005e1b 	.word	0x08005e1b
 8005d84:	08005e1b 	.word	0x08005e1b
 8005d88:	08005e1b 	.word	0x08005e1b
 8005d8c:	08005e1b 	.word	0x08005e1b
 8005d90:	08005e1b 	.word	0x08005e1b
 8005d94:	08005e1b 	.word	0x08005e1b
 8005d98:	08005e1b 	.word	0x08005e1b
 8005d9c:	08005e1b 	.word	0x08005e1b
 8005da0:	08005e1b 	.word	0x08005e1b
 8005da4:	08005e1b 	.word	0x08005e1b
 8005da8:	08005e1b 	.word	0x08005e1b
 8005dac:	08005e0d 	.word	0x08005e0d
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d02e      	beq.n	8005e12 <UART_SetConfig+0xab2>
 8005db4:	e031      	b.n	8005e1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db6:	f7fc ff01 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8005dba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dbc:	e033      	b.n	8005e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dbe:	f7fc ff13 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8005dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dc4:	e02f      	b.n	8005e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe f8f6 	bl	8003fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dd4:	e027      	b.n	8005e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dd6:	f107 0318 	add.w	r3, r7, #24
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fa42 	bl	8004264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005de4:	e01f      	b.n	8005e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005de6:	4b69      	ldr	r3, [pc, #420]	; (8005f8c <UART_SetConfig+0xc2c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005df2:	4b66      	ldr	r3, [pc, #408]	; (8005f8c <UART_SetConfig+0xc2c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	08db      	lsrs	r3, r3, #3
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	4a64      	ldr	r2, [pc, #400]	; (8005f90 <UART_SetConfig+0xc30>)
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e04:	e00f      	b.n	8005e26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005e06:	4b62      	ldr	r3, [pc, #392]	; (8005f90 <UART_SetConfig+0xc30>)
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e0a:	e00c      	b.n	8005e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e0c:	4b61      	ldr	r3, [pc, #388]	; (8005f94 <UART_SetConfig+0xc34>)
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e10:	e009      	b.n	8005e26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e18:	e005      	b.n	8005e26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80ea 	beq.w	8006002 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	4a55      	ldr	r2, [pc, #340]	; (8005f88 <UART_SetConfig+0xc28>)
 8005e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e40:	005a      	lsls	r2, r3, #1
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	441a      	add	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d916      	bls.n	8005e88 <UART_SetConfig+0xb28>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e60:	d212      	bcs.n	8005e88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f023 030f 	bic.w	r3, r3, #15
 8005e6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	085b      	lsrs	r3, r3, #1
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	e0bc      	b.n	8006002 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e8e:	e0b8      	b.n	8006002 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	dc4b      	bgt.n	8005f30 <UART_SetConfig+0xbd0>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f2c0 8087 	blt.w	8005fac <UART_SetConfig+0xc4c>
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	f200 8084 	bhi.w	8005fac <UART_SetConfig+0xc4c>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0xb4c>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005f37 	.word	0x08005f37
 8005eb0:	08005f3f 	.word	0x08005f3f
 8005eb4:	08005fad 	.word	0x08005fad
 8005eb8:	08005fad 	.word	0x08005fad
 8005ebc:	08005f47 	.word	0x08005f47
 8005ec0:	08005fad 	.word	0x08005fad
 8005ec4:	08005fad 	.word	0x08005fad
 8005ec8:	08005fad 	.word	0x08005fad
 8005ecc:	08005f57 	.word	0x08005f57
 8005ed0:	08005fad 	.word	0x08005fad
 8005ed4:	08005fad 	.word	0x08005fad
 8005ed8:	08005fad 	.word	0x08005fad
 8005edc:	08005fad 	.word	0x08005fad
 8005ee0:	08005fad 	.word	0x08005fad
 8005ee4:	08005fad 	.word	0x08005fad
 8005ee8:	08005fad 	.word	0x08005fad
 8005eec:	08005f67 	.word	0x08005f67
 8005ef0:	08005fad 	.word	0x08005fad
 8005ef4:	08005fad 	.word	0x08005fad
 8005ef8:	08005fad 	.word	0x08005fad
 8005efc:	08005fad 	.word	0x08005fad
 8005f00:	08005fad 	.word	0x08005fad
 8005f04:	08005fad 	.word	0x08005fad
 8005f08:	08005fad 	.word	0x08005fad
 8005f0c:	08005fad 	.word	0x08005fad
 8005f10:	08005fad 	.word	0x08005fad
 8005f14:	08005fad 	.word	0x08005fad
 8005f18:	08005fad 	.word	0x08005fad
 8005f1c:	08005fad 	.word	0x08005fad
 8005f20:	08005fad 	.word	0x08005fad
 8005f24:	08005fad 	.word	0x08005fad
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	08005f9f 	.word	0x08005f9f
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d037      	beq.n	8005fa4 <UART_SetConfig+0xc44>
 8005f34:	e03a      	b.n	8005fac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f36:	f7fc fe41 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8005f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f3c:	e03c      	b.n	8005fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f3e:	f7fc fe53 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8005f42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f44:	e038      	b.n	8005fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe f836 	bl	8003fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f54:	e030      	b.n	8005fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f56:	f107 0318 	add.w	r3, r7, #24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe f982 	bl	8004264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f64:	e028      	b.n	8005fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <UART_SetConfig+0xc2c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d012      	beq.n	8005f98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f72:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <UART_SetConfig+0xc2c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <UART_SetConfig+0xc30>)
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f84:	e018      	b.n	8005fb8 <UART_SetConfig+0xc58>
 8005f86:	bf00      	nop
 8005f88:	080071c0 	.word	0x080071c0
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	03d09000 	.word	0x03d09000
 8005f94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005f98:	4b24      	ldr	r3, [pc, #144]	; (800602c <UART_SetConfig+0xccc>)
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f9c:	e00c      	b.n	8005fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <UART_SetConfig+0xcd0>)
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fa2:	e009      	b.n	8005fb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005faa:	e005      	b.n	8005fb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005fb6:	bf00      	nop
    }

    if (pclk != 0U)
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d021      	beq.n	8006002 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <UART_SetConfig+0xcd4>)
 8005fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	441a      	add	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b0f      	cmp	r3, #15
 8005fe6:	d909      	bls.n	8005ffc <UART_SetConfig+0xc9c>
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fee:	d205      	bcs.n	8005ffc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60da      	str	r2, [r3, #12]
 8005ffa:	e002      	b.n	8006002 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2201      	movs	r2, #1
 8006006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2201      	movs	r2, #1
 800600e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800601e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006022:	4618      	mov	r0, r3
 8006024:	3748      	adds	r7, #72	; 0x48
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602c:	03d09000 	.word	0x03d09000
 8006030:	003d0900 	.word	0x003d0900
 8006034:	080071c0 	.word	0x080071c0

08006038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01a      	beq.n	800614e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d10a      	bne.n	800614e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b098      	sub	sp, #96	; 0x60
 8006180:	af02      	add	r7, sp, #8
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800618c:	f7fb f9ec 	bl	8001568 <HAL_GetTick>
 8006190:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b08      	cmp	r3, #8
 800619e:	d12f      	bne.n	8006200 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f88e 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d022      	beq.n	8006200 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ce:	653b      	str	r3, [r7, #80]	; 0x50
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
 80061da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e6      	bne.n	80061ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e063      	b.n	80062c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b04      	cmp	r3, #4
 800620c:	d149      	bne.n	80062a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006216:	2200      	movs	r2, #0
 8006218:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f857 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d03c      	beq.n	80062a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	623b      	str	r3, [r7, #32]
   return(result);
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800623c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006246:	633b      	str	r3, [r7, #48]	; 0x30
 8006248:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800624c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e6      	bne.n	8006228 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	60fb      	str	r3, [r7, #12]
   return(result);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	64bb      	str	r3, [r7, #72]	; 0x48
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800627a:	61fa      	str	r2, [r7, #28]
 800627c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	617b      	str	r3, [r7, #20]
   return(result);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e012      	b.n	80062c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3758      	adds	r7, #88	; 0x58
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e0:	e04f      	b.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d04b      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7fb f93d 	bl	8001568 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e04e      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d037      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b80      	cmp	r3, #128	; 0x80
 8006316:	d034      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d031      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d110      	bne.n	800634e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2208      	movs	r2, #8
 8006332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f839 	bl	80063ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2208      	movs	r2, #8
 800633e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e029      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635c:	d111      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f81f 	bl	80063ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e00f      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4013      	ands	r3, r2
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	bf0c      	ite	eq
 8006392:	2301      	moveq	r3, #1
 8006394:	2300      	movne	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	429a      	cmp	r2, r3
 800639e:	d0a0      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b095      	sub	sp, #84	; 0x54
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d2:	643b      	str	r3, [r7, #64]	; 0x40
 80063d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e6      	bne.n	80063b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <UART_EndRxTransfer+0xc8>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800640c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e5      	bne.n	80063e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800641e:	2b01      	cmp	r3, #1
 8006420:	d118      	bne.n	8006454 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 0310 	bic.w	r3, r3, #16
 8006436:	647b      	str	r3, [r7, #68]	; 0x44
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	613b      	str	r3, [r7, #16]
   return(result);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006468:	bf00      	nop
 800646a:	3754      	adds	r7, #84	; 0x54
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	effffffe 	.word	0xeffffffe

08006478 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_UARTEx_DisableFifoMode+0x16>
 800648a:	2302      	movs	r3, #2
 800648c:	e027      	b.n	80064de <HAL_UARTEx_DisableFifoMode+0x66>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2224      	movs	r2, #36	; 0x24
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064fe:	2302      	movs	r3, #2
 8006500:	e02d      	b.n	800655e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2224      	movs	r2, #36	; 0x24
 800650e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f850 	bl	80065e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800657a:	2302      	movs	r3, #2
 800657c:	e02d      	b.n	80065da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2224      	movs	r2, #36	; 0x24
 800658a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0201 	bic.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f812 	bl	80065e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006604:	e031      	b.n	800666a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006606:	2310      	movs	r3, #16
 8006608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800660a:	2310      	movs	r3, #16
 800660c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	0e5b      	lsrs	r3, r3, #25
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	0f5b      	lsrs	r3, r3, #29
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	7b3a      	ldrb	r2, [r7, #12]
 8006632:	4911      	ldr	r1, [pc, #68]	; (8006678 <UARTEx_SetNbDataToProcess+0x94>)
 8006634:	5c8a      	ldrb	r2, [r1, r2]
 8006636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800663a:	7b3a      	ldrb	r2, [r7, #12]
 800663c:	490f      	ldr	r1, [pc, #60]	; (800667c <UARTEx_SetNbDataToProcess+0x98>)
 800663e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006640:	fb93 f3f2 	sdiv	r3, r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	7b7a      	ldrb	r2, [r7, #13]
 8006650:	4909      	ldr	r1, [pc, #36]	; (8006678 <UARTEx_SetNbDataToProcess+0x94>)
 8006652:	5c8a      	ldrb	r2, [r1, r2]
 8006654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006658:	7b7a      	ldrb	r2, [r7, #13]
 800665a:	4908      	ldr	r1, [pc, #32]	; (800667c <UARTEx_SetNbDataToProcess+0x98>)
 800665c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800665e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	080071d8 	.word	0x080071d8
 800667c:	080071e0 	.word	0x080071e0

08006680 <__errno>:
 8006680:	4b01      	ldr	r3, [pc, #4]	; (8006688 <__errno+0x8>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	24000010 	.word	0x24000010

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4d0d      	ldr	r5, [pc, #52]	; (80066c4 <__libc_init_array+0x38>)
 8006690:	4c0d      	ldr	r4, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006692:	1b64      	subs	r4, r4, r5
 8006694:	10a4      	asrs	r4, r4, #2
 8006696:	2600      	movs	r6, #0
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	4d0b      	ldr	r5, [pc, #44]	; (80066cc <__libc_init_array+0x40>)
 800669e:	4c0c      	ldr	r4, [pc, #48]	; (80066d0 <__libc_init_array+0x44>)
 80066a0:	f000 fc8e 	bl	8006fc0 <_init>
 80066a4:	1b64      	subs	r4, r4, r5
 80066a6:	10a4      	asrs	r4, r4, #2
 80066a8:	2600      	movs	r6, #0
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	08007224 	.word	0x08007224
 80066c8:	08007224 	.word	0x08007224
 80066cc:	08007224 	.word	0x08007224
 80066d0:	08007228 	.word	0x08007228

080066d4 <memset>:
 80066d4:	4402      	add	r2, r0
 80066d6:	4603      	mov	r3, r0
 80066d8:	4293      	cmp	r3, r2
 80066da:	d100      	bne.n	80066de <memset+0xa>
 80066dc:	4770      	bx	lr
 80066de:	f803 1b01 	strb.w	r1, [r3], #1
 80066e2:	e7f9      	b.n	80066d8 <memset+0x4>

080066e4 <siprintf>:
 80066e4:	b40e      	push	{r1, r2, r3}
 80066e6:	b500      	push	{lr}
 80066e8:	b09c      	sub	sp, #112	; 0x70
 80066ea:	ab1d      	add	r3, sp, #116	; 0x74
 80066ec:	9002      	str	r0, [sp, #8]
 80066ee:	9006      	str	r0, [sp, #24]
 80066f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066f4:	4809      	ldr	r0, [pc, #36]	; (800671c <siprintf+0x38>)
 80066f6:	9107      	str	r1, [sp, #28]
 80066f8:	9104      	str	r1, [sp, #16]
 80066fa:	4909      	ldr	r1, [pc, #36]	; (8006720 <siprintf+0x3c>)
 80066fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006700:	9105      	str	r1, [sp, #20]
 8006702:	6800      	ldr	r0, [r0, #0]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	a902      	add	r1, sp, #8
 8006708:	f000 f868 	bl	80067dc <_svfiprintf_r>
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	b01c      	add	sp, #112	; 0x70
 8006714:	f85d eb04 	ldr.w	lr, [sp], #4
 8006718:	b003      	add	sp, #12
 800671a:	4770      	bx	lr
 800671c:	24000010 	.word	0x24000010
 8006720:	ffff0208 	.word	0xffff0208

08006724 <__ssputs_r>:
 8006724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006728:	688e      	ldr	r6, [r1, #8]
 800672a:	429e      	cmp	r6, r3
 800672c:	4682      	mov	sl, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4690      	mov	r8, r2
 8006732:	461f      	mov	r7, r3
 8006734:	d838      	bhi.n	80067a8 <__ssputs_r+0x84>
 8006736:	898a      	ldrh	r2, [r1, #12]
 8006738:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800673c:	d032      	beq.n	80067a4 <__ssputs_r+0x80>
 800673e:	6825      	ldr	r5, [r4, #0]
 8006740:	6909      	ldr	r1, [r1, #16]
 8006742:	eba5 0901 	sub.w	r9, r5, r1
 8006746:	6965      	ldr	r5, [r4, #20]
 8006748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800674c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006750:	3301      	adds	r3, #1
 8006752:	444b      	add	r3, r9
 8006754:	106d      	asrs	r5, r5, #1
 8006756:	429d      	cmp	r5, r3
 8006758:	bf38      	it	cc
 800675a:	461d      	movcc	r5, r3
 800675c:	0553      	lsls	r3, r2, #21
 800675e:	d531      	bpl.n	80067c4 <__ssputs_r+0xa0>
 8006760:	4629      	mov	r1, r5
 8006762:	f000 fb63 	bl	8006e2c <_malloc_r>
 8006766:	4606      	mov	r6, r0
 8006768:	b950      	cbnz	r0, 8006780 <__ssputs_r+0x5c>
 800676a:	230c      	movs	r3, #12
 800676c:	f8ca 3000 	str.w	r3, [sl]
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006776:	81a3      	strh	r3, [r4, #12]
 8006778:	f04f 30ff 	mov.w	r0, #4294967295
 800677c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006780:	6921      	ldr	r1, [r4, #16]
 8006782:	464a      	mov	r2, r9
 8006784:	f000 fabe 	bl	8006d04 <memcpy>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800678e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	6126      	str	r6, [r4, #16]
 8006796:	6165      	str	r5, [r4, #20]
 8006798:	444e      	add	r6, r9
 800679a:	eba5 0509 	sub.w	r5, r5, r9
 800679e:	6026      	str	r6, [r4, #0]
 80067a0:	60a5      	str	r5, [r4, #8]
 80067a2:	463e      	mov	r6, r7
 80067a4:	42be      	cmp	r6, r7
 80067a6:	d900      	bls.n	80067aa <__ssputs_r+0x86>
 80067a8:	463e      	mov	r6, r7
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	4632      	mov	r2, r6
 80067ae:	4641      	mov	r1, r8
 80067b0:	f000 fab6 	bl	8006d20 <memmove>
 80067b4:	68a3      	ldr	r3, [r4, #8]
 80067b6:	1b9b      	subs	r3, r3, r6
 80067b8:	60a3      	str	r3, [r4, #8]
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	4433      	add	r3, r6
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	2000      	movs	r0, #0
 80067c2:	e7db      	b.n	800677c <__ssputs_r+0x58>
 80067c4:	462a      	mov	r2, r5
 80067c6:	f000 fba5 	bl	8006f14 <_realloc_r>
 80067ca:	4606      	mov	r6, r0
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1e1      	bne.n	8006794 <__ssputs_r+0x70>
 80067d0:	6921      	ldr	r1, [r4, #16]
 80067d2:	4650      	mov	r0, sl
 80067d4:	f000 fabe 	bl	8006d54 <_free_r>
 80067d8:	e7c7      	b.n	800676a <__ssputs_r+0x46>
	...

080067dc <_svfiprintf_r>:
 80067dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e0:	4698      	mov	r8, r3
 80067e2:	898b      	ldrh	r3, [r1, #12]
 80067e4:	061b      	lsls	r3, r3, #24
 80067e6:	b09d      	sub	sp, #116	; 0x74
 80067e8:	4607      	mov	r7, r0
 80067ea:	460d      	mov	r5, r1
 80067ec:	4614      	mov	r4, r2
 80067ee:	d50e      	bpl.n	800680e <_svfiprintf_r+0x32>
 80067f0:	690b      	ldr	r3, [r1, #16]
 80067f2:	b963      	cbnz	r3, 800680e <_svfiprintf_r+0x32>
 80067f4:	2140      	movs	r1, #64	; 0x40
 80067f6:	f000 fb19 	bl	8006e2c <_malloc_r>
 80067fa:	6028      	str	r0, [r5, #0]
 80067fc:	6128      	str	r0, [r5, #16]
 80067fe:	b920      	cbnz	r0, 800680a <_svfiprintf_r+0x2e>
 8006800:	230c      	movs	r3, #12
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	e0d1      	b.n	80069ae <_svfiprintf_r+0x1d2>
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	616b      	str	r3, [r5, #20]
 800680e:	2300      	movs	r3, #0
 8006810:	9309      	str	r3, [sp, #36]	; 0x24
 8006812:	2320      	movs	r3, #32
 8006814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006818:	f8cd 800c 	str.w	r8, [sp, #12]
 800681c:	2330      	movs	r3, #48	; 0x30
 800681e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069c8 <_svfiprintf_r+0x1ec>
 8006822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006826:	f04f 0901 	mov.w	r9, #1
 800682a:	4623      	mov	r3, r4
 800682c:	469a      	mov	sl, r3
 800682e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006832:	b10a      	cbz	r2, 8006838 <_svfiprintf_r+0x5c>
 8006834:	2a25      	cmp	r2, #37	; 0x25
 8006836:	d1f9      	bne.n	800682c <_svfiprintf_r+0x50>
 8006838:	ebba 0b04 	subs.w	fp, sl, r4
 800683c:	d00b      	beq.n	8006856 <_svfiprintf_r+0x7a>
 800683e:	465b      	mov	r3, fp
 8006840:	4622      	mov	r2, r4
 8006842:	4629      	mov	r1, r5
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff ff6d 	bl	8006724 <__ssputs_r>
 800684a:	3001      	adds	r0, #1
 800684c:	f000 80aa 	beq.w	80069a4 <_svfiprintf_r+0x1c8>
 8006850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006852:	445a      	add	r2, fp
 8006854:	9209      	str	r2, [sp, #36]	; 0x24
 8006856:	f89a 3000 	ldrb.w	r3, [sl]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 80a2 	beq.w	80069a4 <_svfiprintf_r+0x1c8>
 8006860:	2300      	movs	r3, #0
 8006862:	f04f 32ff 	mov.w	r2, #4294967295
 8006866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800686a:	f10a 0a01 	add.w	sl, sl, #1
 800686e:	9304      	str	r3, [sp, #16]
 8006870:	9307      	str	r3, [sp, #28]
 8006872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006876:	931a      	str	r3, [sp, #104]	; 0x68
 8006878:	4654      	mov	r4, sl
 800687a:	2205      	movs	r2, #5
 800687c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006880:	4851      	ldr	r0, [pc, #324]	; (80069c8 <_svfiprintf_r+0x1ec>)
 8006882:	f7f9 fd3d 	bl	8000300 <memchr>
 8006886:	9a04      	ldr	r2, [sp, #16]
 8006888:	b9d8      	cbnz	r0, 80068c2 <_svfiprintf_r+0xe6>
 800688a:	06d0      	lsls	r0, r2, #27
 800688c:	bf44      	itt	mi
 800688e:	2320      	movmi	r3, #32
 8006890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006894:	0711      	lsls	r1, r2, #28
 8006896:	bf44      	itt	mi
 8006898:	232b      	movmi	r3, #43	; 0x2b
 800689a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800689e:	f89a 3000 	ldrb.w	r3, [sl]
 80068a2:	2b2a      	cmp	r3, #42	; 0x2a
 80068a4:	d015      	beq.n	80068d2 <_svfiprintf_r+0xf6>
 80068a6:	9a07      	ldr	r2, [sp, #28]
 80068a8:	4654      	mov	r4, sl
 80068aa:	2000      	movs	r0, #0
 80068ac:	f04f 0c0a 	mov.w	ip, #10
 80068b0:	4621      	mov	r1, r4
 80068b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b6:	3b30      	subs	r3, #48	; 0x30
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d94e      	bls.n	800695a <_svfiprintf_r+0x17e>
 80068bc:	b1b0      	cbz	r0, 80068ec <_svfiprintf_r+0x110>
 80068be:	9207      	str	r2, [sp, #28]
 80068c0:	e014      	b.n	80068ec <_svfiprintf_r+0x110>
 80068c2:	eba0 0308 	sub.w	r3, r0, r8
 80068c6:	fa09 f303 	lsl.w	r3, r9, r3
 80068ca:	4313      	orrs	r3, r2
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	46a2      	mov	sl, r4
 80068d0:	e7d2      	b.n	8006878 <_svfiprintf_r+0x9c>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	1d19      	adds	r1, r3, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	9103      	str	r1, [sp, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	bfbb      	ittet	lt
 80068de:	425b      	neglt	r3, r3
 80068e0:	f042 0202 	orrlt.w	r2, r2, #2
 80068e4:	9307      	strge	r3, [sp, #28]
 80068e6:	9307      	strlt	r3, [sp, #28]
 80068e8:	bfb8      	it	lt
 80068ea:	9204      	strlt	r2, [sp, #16]
 80068ec:	7823      	ldrb	r3, [r4, #0]
 80068ee:	2b2e      	cmp	r3, #46	; 0x2e
 80068f0:	d10c      	bne.n	800690c <_svfiprintf_r+0x130>
 80068f2:	7863      	ldrb	r3, [r4, #1]
 80068f4:	2b2a      	cmp	r3, #42	; 0x2a
 80068f6:	d135      	bne.n	8006964 <_svfiprintf_r+0x188>
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	1d1a      	adds	r2, r3, #4
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	9203      	str	r2, [sp, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	bfb8      	it	lt
 8006904:	f04f 33ff 	movlt.w	r3, #4294967295
 8006908:	3402      	adds	r4, #2
 800690a:	9305      	str	r3, [sp, #20]
 800690c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069d8 <_svfiprintf_r+0x1fc>
 8006910:	7821      	ldrb	r1, [r4, #0]
 8006912:	2203      	movs	r2, #3
 8006914:	4650      	mov	r0, sl
 8006916:	f7f9 fcf3 	bl	8000300 <memchr>
 800691a:	b140      	cbz	r0, 800692e <_svfiprintf_r+0x152>
 800691c:	2340      	movs	r3, #64	; 0x40
 800691e:	eba0 000a 	sub.w	r0, r0, sl
 8006922:	fa03 f000 	lsl.w	r0, r3, r0
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	4303      	orrs	r3, r0
 800692a:	3401      	adds	r4, #1
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006932:	4826      	ldr	r0, [pc, #152]	; (80069cc <_svfiprintf_r+0x1f0>)
 8006934:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006938:	2206      	movs	r2, #6
 800693a:	f7f9 fce1 	bl	8000300 <memchr>
 800693e:	2800      	cmp	r0, #0
 8006940:	d038      	beq.n	80069b4 <_svfiprintf_r+0x1d8>
 8006942:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <_svfiprintf_r+0x1f4>)
 8006944:	bb1b      	cbnz	r3, 800698e <_svfiprintf_r+0x1b2>
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	3307      	adds	r3, #7
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	3308      	adds	r3, #8
 8006950:	9303      	str	r3, [sp, #12]
 8006952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006954:	4433      	add	r3, r6
 8006956:	9309      	str	r3, [sp, #36]	; 0x24
 8006958:	e767      	b.n	800682a <_svfiprintf_r+0x4e>
 800695a:	fb0c 3202 	mla	r2, ip, r2, r3
 800695e:	460c      	mov	r4, r1
 8006960:	2001      	movs	r0, #1
 8006962:	e7a5      	b.n	80068b0 <_svfiprintf_r+0xd4>
 8006964:	2300      	movs	r3, #0
 8006966:	3401      	adds	r4, #1
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	4619      	mov	r1, r3
 800696c:	f04f 0c0a 	mov.w	ip, #10
 8006970:	4620      	mov	r0, r4
 8006972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006976:	3a30      	subs	r2, #48	; 0x30
 8006978:	2a09      	cmp	r2, #9
 800697a:	d903      	bls.n	8006984 <_svfiprintf_r+0x1a8>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0c5      	beq.n	800690c <_svfiprintf_r+0x130>
 8006980:	9105      	str	r1, [sp, #20]
 8006982:	e7c3      	b.n	800690c <_svfiprintf_r+0x130>
 8006984:	fb0c 2101 	mla	r1, ip, r1, r2
 8006988:	4604      	mov	r4, r0
 800698a:	2301      	movs	r3, #1
 800698c:	e7f0      	b.n	8006970 <_svfiprintf_r+0x194>
 800698e:	ab03      	add	r3, sp, #12
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	462a      	mov	r2, r5
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <_svfiprintf_r+0x1f8>)
 8006996:	a904      	add	r1, sp, #16
 8006998:	4638      	mov	r0, r7
 800699a:	f3af 8000 	nop.w
 800699e:	1c42      	adds	r2, r0, #1
 80069a0:	4606      	mov	r6, r0
 80069a2:	d1d6      	bne.n	8006952 <_svfiprintf_r+0x176>
 80069a4:	89ab      	ldrh	r3, [r5, #12]
 80069a6:	065b      	lsls	r3, r3, #25
 80069a8:	f53f af2c 	bmi.w	8006804 <_svfiprintf_r+0x28>
 80069ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ae:	b01d      	add	sp, #116	; 0x74
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	ab03      	add	r3, sp, #12
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	462a      	mov	r2, r5
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <_svfiprintf_r+0x1f8>)
 80069bc:	a904      	add	r1, sp, #16
 80069be:	4638      	mov	r0, r7
 80069c0:	f000 f87a 	bl	8006ab8 <_printf_i>
 80069c4:	e7eb      	b.n	800699e <_svfiprintf_r+0x1c2>
 80069c6:	bf00      	nop
 80069c8:	080071e8 	.word	0x080071e8
 80069cc:	080071f2 	.word	0x080071f2
 80069d0:	00000000 	.word	0x00000000
 80069d4:	08006725 	.word	0x08006725
 80069d8:	080071ee 	.word	0x080071ee

080069dc <_printf_common>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	4616      	mov	r6, r2
 80069e2:	4699      	mov	r9, r3
 80069e4:	688a      	ldr	r2, [r1, #8]
 80069e6:	690b      	ldr	r3, [r1, #16]
 80069e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bfb8      	it	lt
 80069f0:	4613      	movlt	r3, r2
 80069f2:	6033      	str	r3, [r6, #0]
 80069f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069f8:	4607      	mov	r7, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	b10a      	cbz	r2, 8006a02 <_printf_common+0x26>
 80069fe:	3301      	adds	r3, #1
 8006a00:	6033      	str	r3, [r6, #0]
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	0699      	lsls	r1, r3, #26
 8006a06:	bf42      	ittt	mi
 8006a08:	6833      	ldrmi	r3, [r6, #0]
 8006a0a:	3302      	addmi	r3, #2
 8006a0c:	6033      	strmi	r3, [r6, #0]
 8006a0e:	6825      	ldr	r5, [r4, #0]
 8006a10:	f015 0506 	ands.w	r5, r5, #6
 8006a14:	d106      	bne.n	8006a24 <_printf_common+0x48>
 8006a16:	f104 0a19 	add.w	sl, r4, #25
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	6832      	ldr	r2, [r6, #0]
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	dc26      	bgt.n	8006a72 <_printf_common+0x96>
 8006a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a28:	1e13      	subs	r3, r2, #0
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	bf18      	it	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	0692      	lsls	r2, r2, #26
 8006a32:	d42b      	bmi.n	8006a8c <_printf_common+0xb0>
 8006a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	47c0      	blx	r8
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d01e      	beq.n	8006a80 <_printf_common+0xa4>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	68e5      	ldr	r5, [r4, #12]
 8006a46:	6832      	ldr	r2, [r6, #0]
 8006a48:	f003 0306 	and.w	r3, r3, #6
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	bf08      	it	eq
 8006a50:	1aad      	subeq	r5, r5, r2
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	6922      	ldr	r2, [r4, #16]
 8006a56:	bf0c      	ite	eq
 8006a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a5c:	2500      	movne	r5, #0
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	bfc4      	itt	gt
 8006a62:	1a9b      	subgt	r3, r3, r2
 8006a64:	18ed      	addgt	r5, r5, r3
 8006a66:	2600      	movs	r6, #0
 8006a68:	341a      	adds	r4, #26
 8006a6a:	42b5      	cmp	r5, r6
 8006a6c:	d11a      	bne.n	8006aa4 <_printf_common+0xc8>
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e008      	b.n	8006a84 <_printf_common+0xa8>
 8006a72:	2301      	movs	r3, #1
 8006a74:	4652      	mov	r2, sl
 8006a76:	4649      	mov	r1, r9
 8006a78:	4638      	mov	r0, r7
 8006a7a:	47c0      	blx	r8
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d103      	bne.n	8006a88 <_printf_common+0xac>
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a88:	3501      	adds	r5, #1
 8006a8a:	e7c6      	b.n	8006a1a <_printf_common+0x3e>
 8006a8c:	18e1      	adds	r1, r4, r3
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	2030      	movs	r0, #48	; 0x30
 8006a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a96:	4422      	add	r2, r4
 8006a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa0:	3302      	adds	r3, #2
 8006aa2:	e7c7      	b.n	8006a34 <_printf_common+0x58>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	4638      	mov	r0, r7
 8006aac:	47c0      	blx	r8
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d0e6      	beq.n	8006a80 <_printf_common+0xa4>
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	e7d9      	b.n	8006a6a <_printf_common+0x8e>
	...

08006ab8 <_printf_i>:
 8006ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	7e0f      	ldrb	r7, [r1, #24]
 8006abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac0:	2f78      	cmp	r7, #120	; 0x78
 8006ac2:	4691      	mov	r9, r2
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	469a      	mov	sl, r3
 8006aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ace:	d807      	bhi.n	8006ae0 <_printf_i+0x28>
 8006ad0:	2f62      	cmp	r7, #98	; 0x62
 8006ad2:	d80a      	bhi.n	8006aea <_printf_i+0x32>
 8006ad4:	2f00      	cmp	r7, #0
 8006ad6:	f000 80d8 	beq.w	8006c8a <_printf_i+0x1d2>
 8006ada:	2f58      	cmp	r7, #88	; 0x58
 8006adc:	f000 80a3 	beq.w	8006c26 <_printf_i+0x16e>
 8006ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ae8:	e03a      	b.n	8006b60 <_printf_i+0xa8>
 8006aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aee:	2b15      	cmp	r3, #21
 8006af0:	d8f6      	bhi.n	8006ae0 <_printf_i+0x28>
 8006af2:	a101      	add	r1, pc, #4	; (adr r1, 8006af8 <_printf_i+0x40>)
 8006af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b65 	.word	0x08006b65
 8006b00:	08006ae1 	.word	0x08006ae1
 8006b04:	08006ae1 	.word	0x08006ae1
 8006b08:	08006ae1 	.word	0x08006ae1
 8006b0c:	08006ae1 	.word	0x08006ae1
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006ae1 	.word	0x08006ae1
 8006b18:	08006ae1 	.word	0x08006ae1
 8006b1c:	08006ae1 	.word	0x08006ae1
 8006b20:	08006ae1 	.word	0x08006ae1
 8006b24:	08006c71 	.word	0x08006c71
 8006b28:	08006b95 	.word	0x08006b95
 8006b2c:	08006c53 	.word	0x08006c53
 8006b30:	08006ae1 	.word	0x08006ae1
 8006b34:	08006ae1 	.word	0x08006ae1
 8006b38:	08006c93 	.word	0x08006c93
 8006b3c:	08006ae1 	.word	0x08006ae1
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006ae1 	.word	0x08006ae1
 8006b48:	08006ae1 	.word	0x08006ae1
 8006b4c:	08006c5b 	.word	0x08006c5b
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	1d1a      	adds	r2, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	602a      	str	r2, [r5, #0]
 8006b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0a3      	b.n	8006cac <_printf_i+0x1f4>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	6829      	ldr	r1, [r5, #0]
 8006b68:	0606      	lsls	r6, r0, #24
 8006b6a:	f101 0304 	add.w	r3, r1, #4
 8006b6e:	d50a      	bpl.n	8006b86 <_printf_i+0xce>
 8006b70:	680e      	ldr	r6, [r1, #0]
 8006b72:	602b      	str	r3, [r5, #0]
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	da03      	bge.n	8006b80 <_printf_i+0xc8>
 8006b78:	232d      	movs	r3, #45	; 0x2d
 8006b7a:	4276      	negs	r6, r6
 8006b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b80:	485e      	ldr	r0, [pc, #376]	; (8006cfc <_printf_i+0x244>)
 8006b82:	230a      	movs	r3, #10
 8006b84:	e019      	b.n	8006bba <_printf_i+0x102>
 8006b86:	680e      	ldr	r6, [r1, #0]
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b8e:	bf18      	it	ne
 8006b90:	b236      	sxthne	r6, r6
 8006b92:	e7ef      	b.n	8006b74 <_printf_i+0xbc>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	6029      	str	r1, [r5, #0]
 8006b9c:	0601      	lsls	r1, r0, #24
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_i+0xec>
 8006ba0:	681e      	ldr	r6, [r3, #0]
 8006ba2:	e002      	b.n	8006baa <_printf_i+0xf2>
 8006ba4:	0646      	lsls	r6, r0, #25
 8006ba6:	d5fb      	bpl.n	8006ba0 <_printf_i+0xe8>
 8006ba8:	881e      	ldrh	r6, [r3, #0]
 8006baa:	4854      	ldr	r0, [pc, #336]	; (8006cfc <_printf_i+0x244>)
 8006bac:	2f6f      	cmp	r7, #111	; 0x6f
 8006bae:	bf0c      	ite	eq
 8006bb0:	2308      	moveq	r3, #8
 8006bb2:	230a      	movne	r3, #10
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bba:	6865      	ldr	r5, [r4, #4]
 8006bbc:	60a5      	str	r5, [r4, #8]
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	bfa2      	ittt	ge
 8006bc2:	6821      	ldrge	r1, [r4, #0]
 8006bc4:	f021 0104 	bicge.w	r1, r1, #4
 8006bc8:	6021      	strge	r1, [r4, #0]
 8006bca:	b90e      	cbnz	r6, 8006bd0 <_printf_i+0x118>
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	d04d      	beq.n	8006c6c <_printf_i+0x1b4>
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8006bda:	5dc7      	ldrb	r7, [r0, r7]
 8006bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006be0:	4637      	mov	r7, r6
 8006be2:	42bb      	cmp	r3, r7
 8006be4:	460e      	mov	r6, r1
 8006be6:	d9f4      	bls.n	8006bd2 <_printf_i+0x11a>
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d10b      	bne.n	8006c04 <_printf_i+0x14c>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	07de      	lsls	r6, r3, #31
 8006bf0:	d508      	bpl.n	8006c04 <_printf_i+0x14c>
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	6861      	ldr	r1, [r4, #4]
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	bfde      	ittt	le
 8006bfa:	2330      	movle	r3, #48	; 0x30
 8006bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c04:	1b52      	subs	r2, r2, r5
 8006c06:	6122      	str	r2, [r4, #16]
 8006c08:	f8cd a000 	str.w	sl, [sp]
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	aa03      	add	r2, sp, #12
 8006c10:	4621      	mov	r1, r4
 8006c12:	4640      	mov	r0, r8
 8006c14:	f7ff fee2 	bl	80069dc <_printf_common>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d14c      	bne.n	8006cb6 <_printf_i+0x1fe>
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	b004      	add	sp, #16
 8006c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c26:	4835      	ldr	r0, [pc, #212]	; (8006cfc <_printf_i+0x244>)
 8006c28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c2c:	6829      	ldr	r1, [r5, #0]
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c34:	6029      	str	r1, [r5, #0]
 8006c36:	061d      	lsls	r5, r3, #24
 8006c38:	d514      	bpl.n	8006c64 <_printf_i+0x1ac>
 8006c3a:	07df      	lsls	r7, r3, #31
 8006c3c:	bf44      	itt	mi
 8006c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c42:	6023      	strmi	r3, [r4, #0]
 8006c44:	b91e      	cbnz	r6, 8006c4e <_printf_i+0x196>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f023 0320 	bic.w	r3, r3, #32
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	2310      	movs	r3, #16
 8006c50:	e7b0      	b.n	8006bb4 <_printf_i+0xfc>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	f043 0320 	orr.w	r3, r3, #32
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	2378      	movs	r3, #120	; 0x78
 8006c5c:	4828      	ldr	r0, [pc, #160]	; (8006d00 <_printf_i+0x248>)
 8006c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c62:	e7e3      	b.n	8006c2c <_printf_i+0x174>
 8006c64:	0659      	lsls	r1, r3, #25
 8006c66:	bf48      	it	mi
 8006c68:	b2b6      	uxthmi	r6, r6
 8006c6a:	e7e6      	b.n	8006c3a <_printf_i+0x182>
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	e7bb      	b.n	8006be8 <_printf_i+0x130>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	6826      	ldr	r6, [r4, #0]
 8006c74:	6961      	ldr	r1, [r4, #20]
 8006c76:	1d18      	adds	r0, r3, #4
 8006c78:	6028      	str	r0, [r5, #0]
 8006c7a:	0635      	lsls	r5, r6, #24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	d501      	bpl.n	8006c84 <_printf_i+0x1cc>
 8006c80:	6019      	str	r1, [r3, #0]
 8006c82:	e002      	b.n	8006c8a <_printf_i+0x1d2>
 8006c84:	0670      	lsls	r0, r6, #25
 8006c86:	d5fb      	bpl.n	8006c80 <_printf_i+0x1c8>
 8006c88:	8019      	strh	r1, [r3, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	4615      	mov	r5, r2
 8006c90:	e7ba      	b.n	8006c08 <_printf_i+0x150>
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	1d1a      	adds	r2, r3, #4
 8006c96:	602a      	str	r2, [r5, #0]
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	6862      	ldr	r2, [r4, #4]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f7f9 fb2e 	bl	8000300 <memchr>
 8006ca4:	b108      	cbz	r0, 8006caa <_printf_i+0x1f2>
 8006ca6:	1b40      	subs	r0, r0, r5
 8006ca8:	6060      	str	r0, [r4, #4]
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb4:	e7a8      	b.n	8006c08 <_printf_i+0x150>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	47d0      	blx	sl
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d0ab      	beq.n	8006c1c <_printf_i+0x164>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	079b      	lsls	r3, r3, #30
 8006cc8:	d413      	bmi.n	8006cf2 <_printf_i+0x23a>
 8006cca:	68e0      	ldr	r0, [r4, #12]
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	4298      	cmp	r0, r3
 8006cd0:	bfb8      	it	lt
 8006cd2:	4618      	movlt	r0, r3
 8006cd4:	e7a4      	b.n	8006c20 <_printf_i+0x168>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4632      	mov	r2, r6
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4640      	mov	r0, r8
 8006cde:	47d0      	blx	sl
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d09b      	beq.n	8006c1c <_printf_i+0x164>
 8006ce4:	3501      	adds	r5, #1
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	9903      	ldr	r1, [sp, #12]
 8006cea:	1a5b      	subs	r3, r3, r1
 8006cec:	42ab      	cmp	r3, r5
 8006cee:	dcf2      	bgt.n	8006cd6 <_printf_i+0x21e>
 8006cf0:	e7eb      	b.n	8006cca <_printf_i+0x212>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	f104 0619 	add.w	r6, r4, #25
 8006cf8:	e7f5      	b.n	8006ce6 <_printf_i+0x22e>
 8006cfa:	bf00      	nop
 8006cfc:	080071f9 	.word	0x080071f9
 8006d00:	0800720a 	.word	0x0800720a

08006d04 <memcpy>:
 8006d04:	440a      	add	r2, r1
 8006d06:	4291      	cmp	r1, r2
 8006d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d0c:	d100      	bne.n	8006d10 <memcpy+0xc>
 8006d0e:	4770      	bx	lr
 8006d10:	b510      	push	{r4, lr}
 8006d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d1a:	4291      	cmp	r1, r2
 8006d1c:	d1f9      	bne.n	8006d12 <memcpy+0xe>
 8006d1e:	bd10      	pop	{r4, pc}

08006d20 <memmove>:
 8006d20:	4288      	cmp	r0, r1
 8006d22:	b510      	push	{r4, lr}
 8006d24:	eb01 0402 	add.w	r4, r1, r2
 8006d28:	d902      	bls.n	8006d30 <memmove+0x10>
 8006d2a:	4284      	cmp	r4, r0
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	d807      	bhi.n	8006d40 <memmove+0x20>
 8006d30:	1e43      	subs	r3, r0, #1
 8006d32:	42a1      	cmp	r1, r4
 8006d34:	d008      	beq.n	8006d48 <memmove+0x28>
 8006d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d3e:	e7f8      	b.n	8006d32 <memmove+0x12>
 8006d40:	4402      	add	r2, r0
 8006d42:	4601      	mov	r1, r0
 8006d44:	428a      	cmp	r2, r1
 8006d46:	d100      	bne.n	8006d4a <memmove+0x2a>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d52:	e7f7      	b.n	8006d44 <memmove+0x24>

08006d54 <_free_r>:
 8006d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d56:	2900      	cmp	r1, #0
 8006d58:	d044      	beq.n	8006de4 <_free_r+0x90>
 8006d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5e:	9001      	str	r0, [sp, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f1a1 0404 	sub.w	r4, r1, #4
 8006d66:	bfb8      	it	lt
 8006d68:	18e4      	addlt	r4, r4, r3
 8006d6a:	f000 f913 	bl	8006f94 <__malloc_lock>
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <_free_r+0x94>)
 8006d70:	9801      	ldr	r0, [sp, #4]
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x30>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	b003      	add	sp, #12
 8006d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d80:	f000 b90e 	b.w	8006fa0 <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x46>
 8006d88:	6825      	ldr	r5, [r4, #0]
 8006d8a:	1961      	adds	r1, r4, r5
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1949      	addeq	r1, r1, r5
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x22>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x50>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x46>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1855      	adds	r5, r2, r1
 8006da8:	42a5      	cmp	r5, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x70>
 8006dac:	6824      	ldr	r4, [r4, #0]
 8006dae:	4421      	add	r1, r4
 8006db0:	1854      	adds	r4, r2, r1
 8006db2:	42a3      	cmp	r3, r4
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x26>
 8006db8:	681c      	ldr	r4, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	6053      	str	r3, [r2, #4]
 8006dbe:	4421      	add	r1, r4
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x26>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x78>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x26>
 8006dcc:	6825      	ldr	r5, [r4, #0]
 8006dce:	1961      	adds	r1, r4, r5
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf04      	itt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	bf04      	itt	eq
 8006ddc:	1949      	addeq	r1, r1, r5
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	6054      	str	r4, [r2, #4]
 8006de2:	e7ca      	b.n	8006d7a <_free_r+0x26>
 8006de4:	b003      	add	sp, #12
 8006de6:	bd30      	pop	{r4, r5, pc}
 8006de8:	24000620 	.word	0x24000620

08006dec <sbrk_aligned>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4e0e      	ldr	r6, [pc, #56]	; (8006e28 <sbrk_aligned+0x3c>)
 8006df0:	460c      	mov	r4, r1
 8006df2:	6831      	ldr	r1, [r6, #0]
 8006df4:	4605      	mov	r5, r0
 8006df6:	b911      	cbnz	r1, 8006dfe <sbrk_aligned+0x12>
 8006df8:	f000 f8bc 	bl	8006f74 <_sbrk_r>
 8006dfc:	6030      	str	r0, [r6, #0]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	f000 f8b7 	bl	8006f74 <_sbrk_r>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d00a      	beq.n	8006e20 <sbrk_aligned+0x34>
 8006e0a:	1cc4      	adds	r4, r0, #3
 8006e0c:	f024 0403 	bic.w	r4, r4, #3
 8006e10:	42a0      	cmp	r0, r4
 8006e12:	d007      	beq.n	8006e24 <sbrk_aligned+0x38>
 8006e14:	1a21      	subs	r1, r4, r0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f8ac 	bl	8006f74 <_sbrk_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d101      	bne.n	8006e24 <sbrk_aligned+0x38>
 8006e20:	f04f 34ff 	mov.w	r4, #4294967295
 8006e24:	4620      	mov	r0, r4
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	24000624 	.word	0x24000624

08006e2c <_malloc_r>:
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	1ccd      	adds	r5, r1, #3
 8006e32:	f025 0503 	bic.w	r5, r5, #3
 8006e36:	3508      	adds	r5, #8
 8006e38:	2d0c      	cmp	r5, #12
 8006e3a:	bf38      	it	cc
 8006e3c:	250c      	movcc	r5, #12
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	4607      	mov	r7, r0
 8006e42:	db01      	blt.n	8006e48 <_malloc_r+0x1c>
 8006e44:	42a9      	cmp	r1, r5
 8006e46:	d905      	bls.n	8006e54 <_malloc_r+0x28>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	2600      	movs	r6, #0
 8006e4e:	4630      	mov	r0, r6
 8006e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e54:	4e2e      	ldr	r6, [pc, #184]	; (8006f10 <_malloc_r+0xe4>)
 8006e56:	f000 f89d 	bl	8006f94 <__malloc_lock>
 8006e5a:	6833      	ldr	r3, [r6, #0]
 8006e5c:	461c      	mov	r4, r3
 8006e5e:	bb34      	cbnz	r4, 8006eae <_malloc_r+0x82>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4638      	mov	r0, r7
 8006e64:	f7ff ffc2 	bl	8006dec <sbrk_aligned>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	d14d      	bne.n	8006f0a <_malloc_r+0xde>
 8006e6e:	6834      	ldr	r4, [r6, #0]
 8006e70:	4626      	mov	r6, r4
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	d140      	bne.n	8006ef8 <_malloc_r+0xcc>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	eb04 0803 	add.w	r8, r4, r3
 8006e80:	f000 f878 	bl	8006f74 <_sbrk_r>
 8006e84:	4580      	cmp	r8, r0
 8006e86:	d13a      	bne.n	8006efe <_malloc_r+0xd2>
 8006e88:	6821      	ldr	r1, [r4, #0]
 8006e8a:	3503      	adds	r5, #3
 8006e8c:	1a6d      	subs	r5, r5, r1
 8006e8e:	f025 0503 	bic.w	r5, r5, #3
 8006e92:	3508      	adds	r5, #8
 8006e94:	2d0c      	cmp	r5, #12
 8006e96:	bf38      	it	cc
 8006e98:	250c      	movcc	r5, #12
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f7ff ffa5 	bl	8006dec <sbrk_aligned>
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d02b      	beq.n	8006efe <_malloc_r+0xd2>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	442b      	add	r3, r5
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	e00e      	b.n	8006ecc <_malloc_r+0xa0>
 8006eae:	6822      	ldr	r2, [r4, #0]
 8006eb0:	1b52      	subs	r2, r2, r5
 8006eb2:	d41e      	bmi.n	8006ef2 <_malloc_r+0xc6>
 8006eb4:	2a0b      	cmp	r2, #11
 8006eb6:	d916      	bls.n	8006ee6 <_malloc_r+0xba>
 8006eb8:	1961      	adds	r1, r4, r5
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	6025      	str	r5, [r4, #0]
 8006ebe:	bf18      	it	ne
 8006ec0:	6059      	strne	r1, [r3, #4]
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	bf08      	it	eq
 8006ec6:	6031      	streq	r1, [r6, #0]
 8006ec8:	5162      	str	r2, [r4, r5]
 8006eca:	604b      	str	r3, [r1, #4]
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f104 060b 	add.w	r6, r4, #11
 8006ed2:	f000 f865 	bl	8006fa0 <__malloc_unlock>
 8006ed6:	f026 0607 	bic.w	r6, r6, #7
 8006eda:	1d23      	adds	r3, r4, #4
 8006edc:	1af2      	subs	r2, r6, r3
 8006ede:	d0b6      	beq.n	8006e4e <_malloc_r+0x22>
 8006ee0:	1b9b      	subs	r3, r3, r6
 8006ee2:	50a3      	str	r3, [r4, r2]
 8006ee4:	e7b3      	b.n	8006e4e <_malloc_r+0x22>
 8006ee6:	6862      	ldr	r2, [r4, #4]
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	bf0c      	ite	eq
 8006eec:	6032      	streq	r2, [r6, #0]
 8006eee:	605a      	strne	r2, [r3, #4]
 8006ef0:	e7ec      	b.n	8006ecc <_malloc_r+0xa0>
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	6864      	ldr	r4, [r4, #4]
 8006ef6:	e7b2      	b.n	8006e5e <_malloc_r+0x32>
 8006ef8:	4634      	mov	r4, r6
 8006efa:	6876      	ldr	r6, [r6, #4]
 8006efc:	e7b9      	b.n	8006e72 <_malloc_r+0x46>
 8006efe:	230c      	movs	r3, #12
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	4638      	mov	r0, r7
 8006f04:	f000 f84c 	bl	8006fa0 <__malloc_unlock>
 8006f08:	e7a1      	b.n	8006e4e <_malloc_r+0x22>
 8006f0a:	6025      	str	r5, [r4, #0]
 8006f0c:	e7de      	b.n	8006ecc <_malloc_r+0xa0>
 8006f0e:	bf00      	nop
 8006f10:	24000620 	.word	0x24000620

08006f14 <_realloc_r>:
 8006f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f18:	4680      	mov	r8, r0
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	460e      	mov	r6, r1
 8006f1e:	b921      	cbnz	r1, 8006f2a <_realloc_r+0x16>
 8006f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f24:	4611      	mov	r1, r2
 8006f26:	f7ff bf81 	b.w	8006e2c <_malloc_r>
 8006f2a:	b92a      	cbnz	r2, 8006f38 <_realloc_r+0x24>
 8006f2c:	f7ff ff12 	bl	8006d54 <_free_r>
 8006f30:	4625      	mov	r5, r4
 8006f32:	4628      	mov	r0, r5
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f38:	f000 f838 	bl	8006fac <_malloc_usable_size_r>
 8006f3c:	4284      	cmp	r4, r0
 8006f3e:	4607      	mov	r7, r0
 8006f40:	d802      	bhi.n	8006f48 <_realloc_r+0x34>
 8006f42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f46:	d812      	bhi.n	8006f6e <_realloc_r+0x5a>
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	f7ff ff6e 	bl	8006e2c <_malloc_r>
 8006f50:	4605      	mov	r5, r0
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0ed      	beq.n	8006f32 <_realloc_r+0x1e>
 8006f56:	42bc      	cmp	r4, r7
 8006f58:	4622      	mov	r2, r4
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	bf28      	it	cs
 8006f5e:	463a      	movcs	r2, r7
 8006f60:	f7ff fed0 	bl	8006d04 <memcpy>
 8006f64:	4631      	mov	r1, r6
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7ff fef4 	bl	8006d54 <_free_r>
 8006f6c:	e7e1      	b.n	8006f32 <_realloc_r+0x1e>
 8006f6e:	4635      	mov	r5, r6
 8006f70:	e7df      	b.n	8006f32 <_realloc_r+0x1e>
	...

08006f74 <_sbrk_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d06      	ldr	r5, [pc, #24]	; (8006f90 <_sbrk_r+0x1c>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	f7f9 fe70 	bl	8000c64 <_sbrk>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_sbrk_r+0x1a>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_sbrk_r+0x1a>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	24000628 	.word	0x24000628

08006f94 <__malloc_lock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_lock+0x8>)
 8006f96:	f000 b811 	b.w	8006fbc <__retarget_lock_acquire_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	2400062c 	.word	0x2400062c

08006fa0 <__malloc_unlock>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__malloc_unlock+0x8>)
 8006fa2:	f000 b80c 	b.w	8006fbe <__retarget_lock_release_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	2400062c 	.word	0x2400062c

08006fac <_malloc_usable_size_r>:
 8006fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb0:	1f18      	subs	r0, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bfbc      	itt	lt
 8006fb6:	580b      	ldrlt	r3, [r1, r0]
 8006fb8:	18c0      	addlt	r0, r0, r3
 8006fba:	4770      	bx	lr

08006fbc <__retarget_lock_acquire_recursive>:
 8006fbc:	4770      	bx	lr

08006fbe <__retarget_lock_release_recursive>:
 8006fbe:	4770      	bx	lr

08006fc0 <_init>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	bf00      	nop
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr

08006fcc <_fini>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr
