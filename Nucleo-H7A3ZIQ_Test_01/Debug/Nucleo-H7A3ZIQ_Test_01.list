
Nucleo-H7A3ZIQ_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007954  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08007e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000608  24000074  08007eb0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400067c  08007eb0  0002067c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001765b  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029e9  00000000  00000000  000376fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c8  00000000  00000000  0003a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fb0  00000000  00000000  0003b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003a1c  00000000  00000000  0003c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016e0b  00000000  00000000  0003fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ffee  00000000  00000000  00056987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00196975  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000049c4  00000000  00000000  001969c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007bec 	.word	0x08007bec

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08007bec 	.word	0x08007bec

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b83      	ldr	r3, [pc, #524]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	4a81      	ldr	r2, [pc, #516]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ca:	4b7f      	ldr	r3, [pc, #508]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	623b      	str	r3, [r7, #32]
 80006d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4b7b      	ldr	r3, [pc, #492]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	4a7a      	ldr	r2, [pc, #488]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006e0:	f043 0320 	orr.w	r3, r3, #32
 80006e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e8:	4b77      	ldr	r3, [pc, #476]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	61fb      	str	r3, [r7, #28]
 80006f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fc:	4a72      	ldr	r2, [pc, #456]	; (80008c8 <MX_GPIO_Init+0x224>)
 80006fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000706:	4b70      	ldr	r3, [pc, #448]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b6c      	ldr	r3, [pc, #432]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800071a:	4a6b      	ldr	r2, [pc, #428]	; (80008c8 <MX_GPIO_Init+0x224>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000724:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b65      	ldr	r3, [pc, #404]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000738:	4a63      	ldr	r2, [pc, #396]	; (80008c8 <MX_GPIO_Init+0x224>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000742:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000750:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000756:	4a5c      	ldr	r2, [pc, #368]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000760:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b56      	ldr	r3, [pc, #344]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000774:	4a54      	ldr	r2, [pc, #336]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078c:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <MX_GPIO_Init+0x224>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000792:	4a4d      	ldr	r2, [pc, #308]	; (80008c8 <MX_GPIO_Init+0x224>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800079c:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <MX_GPIO_Init+0x224>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b0:	4846      	ldr	r0, [pc, #280]	; (80008cc <MX_GPIO_Init+0x228>)
 80007b2:	f001 fa79 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2101      	movs	r1, #1
 80007ba:	4845      	ldr	r0, [pc, #276]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80007bc:	f001 fa74 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2102      	movs	r1, #2
 80007c4:	4843      	ldr	r0, [pc, #268]	; (80008d4 <MX_GPIO_Init+0x230>)
 80007c6:	f001 fa6f 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	483d      	ldr	r0, [pc, #244]	; (80008d8 <MX_GPIO_Init+0x234>)
 80007e2:	f001 f8b1 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4833      	ldr	r0, [pc, #204]	; (80008cc <MX_GPIO_Init+0x228>)
 8000800:	f001 f8a2 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000804:	2301      	movs	r3, #1
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	482d      	ldr	r0, [pc, #180]	; (80008d0 <MX_GPIO_Init+0x22c>)
 800081c:	f001 f894 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000824:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	4829      	ldr	r0, [pc, #164]	; (80008dc <MX_GPIO_Init+0x238>)
 8000836:	f001 f887 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800083a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	4824      	ldr	r0, [pc, #144]	; (80008e0 <MX_GPIO_Init+0x23c>)
 8000850:	f001 f87a 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000866:	230a      	movs	r3, #10
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <MX_GPIO_Init+0x23c>)
 8000872:	f001 f869 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000876:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_GPIO_Init+0x23c>)
 8000890:	f001 f85a 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000894:	2302      	movs	r3, #2
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <MX_GPIO_Init+0x230>)
 80008ac:	f001 f84c 	bl	8001948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f001 f812 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ba:	2028      	movs	r0, #40	; 0x28
 80008bc:	f001 f829 	bl	8001912 <HAL_NVIC_EnableIRQ>

}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400
 80008cc:	58021400 	.word	0x58021400
 80008d0:	58020400 	.word	0x58020400
 80008d4:	58021000 	.word	0x58021000
 80008d8:	58020800 	.word	0x58020800
 80008dc:	58021800 	.word	0x58021800
 80008e0:	58020000 	.word	0x58020000

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fe67 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f867 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff fed7 	bl	80006a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008f6:	f000 fc6f 	bl	80011d8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80008fa:	f000 fd23 	bl	8001344 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 80008fe:	f000 fa43 	bl	8000d88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000902:	f000 fa95 	bl	8000e30 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000906:	f000 fae3 	bl	8000ed0 <MX_TIM8_Init>
  MX_TIM12_Init();
 800090a:	f000 fb35 	bl	8000f78 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  BootMessagePrint();
 800090e:	f000 fd21 	bl	8001354 <BootMessagePrint>
  GetClockSourcePrint();
 8000912:	f000 fd9b 	bl	800144c <GetClockSourcePrint>

  HAL_TIM_Base_Start_IT(&htim1);
 8000916:	4823      	ldr	r0, [pc, #140]	; (80009a4 <main+0xc0>)
 8000918:	f004 f84a 	bl	80049b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800091c:	4822      	ldr	r0, [pc, #136]	; (80009a8 <main+0xc4>)
 800091e:	f004 f847 	bl	80049b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000922:	4822      	ldr	r0, [pc, #136]	; (80009ac <main+0xc8>)
 8000924:	f004 f844 	bl	80049b0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000928:	2100      	movs	r1, #0
 800092a:	4821      	ldr	r0, [pc, #132]	; (80009b0 <main+0xcc>)
 800092c:	f004 f91a 	bl	8004b64 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     // LED 밝기 증�?
    for (uint16_t i = 0; i < htim12.Init.Period; i++)
 8000930:	2300      	movs	r3, #0
 8000932:	80fb      	strh	r3, [r7, #6]
 8000934:	e01c      	b.n	8000970 <main+0x8c>
    {
      htim12.Instance->CCR1 = i;
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <main+0xcc>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
      sprintf(uart3_tx_buf, " TIM12 CCR1 : %d\r\n", htim12.Instance->CCR1);
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <main+0xcc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000944:	461a      	mov	r2, r3
 8000946:	491b      	ldr	r1, [pc, #108]	; (80009b4 <main+0xd0>)
 8000948:	481b      	ldr	r0, [pc, #108]	; (80009b8 <main+0xd4>)
 800094a:	f006 fce1 	bl	8007310 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800094e:	481a      	ldr	r0, [pc, #104]	; (80009b8 <main+0xd4>)
 8000950:	f7ff fcce 	bl	80002f0 <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	4916      	ldr	r1, [pc, #88]	; (80009b8 <main+0xd4>)
 800095e:	4817      	ldr	r0, [pc, #92]	; (80009bc <main+0xd8>)
 8000960:	f005 fa86 	bl	8005e70 <HAL_UART_Transmit>
      HAL_Delay(20);  // 
 8000964:	2014      	movs	r0, #20
 8000966:	f000 febb 	bl	80016e0 <HAL_Delay>
    for (uint16_t i = 0; i < htim12.Init.Period; i++)
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	3301      	adds	r3, #1
 800096e:	80fb      	strh	r3, [r7, #6]
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <main+0xcc>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	429a      	cmp	r2, r3
 8000978:	d3dd      	bcc.n	8000936 <main+0x52>
    }

    // LED 밝기 감소
    for (uint16_t i = htim12.Instance->CCR1; htim12.Instance->CCR1 > 0; i--)
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <main+0xcc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	e009      	b.n	8000998 <main+0xb4>
    {
      htim12.Instance->CCR1 = i;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <main+0xcc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	88ba      	ldrh	r2, [r7, #4]
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_Delay(20);  // 
 800098c:	2014      	movs	r0, #20
 800098e:	f000 fea7 	bl	80016e0 <HAL_Delay>
    for (uint16_t i = htim12.Instance->CCR1; htim12.Instance->CCR1 > 0; i--)
 8000992:	88bb      	ldrh	r3, [r7, #4]
 8000994:	3b01      	subs	r3, #1
 8000996:	80bb      	strh	r3, [r7, #4]
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <main+0xcc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f0      	bne.n	8000984 <main+0xa0>
    for (uint16_t i = 0; i < htim12.Init.Period; i++)
 80009a2:	e7c5      	b.n	8000930 <main+0x4c>
 80009a4:	24000094 	.word	0x24000094
 80009a8:	240000e0 	.word	0x240000e0
 80009ac:	2400012c 	.word	0x2400012c
 80009b0:	24000178 	.word	0x24000178
 80009b4:	08007c04 	.word	0x08007c04
 80009b8:	24000264 	.word	0x24000264
 80009bc:	240001c4 	.word	0x240001c4

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b09c      	sub	sp, #112	; 0x70
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	224c      	movs	r2, #76	; 0x4c
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f006 fc96 	bl	8007300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2220      	movs	r2, #32
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fc90 	bl	8007300 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <SystemClock_Config+0xe4>)
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ea:	2004      	movs	r0, #4
 80009ec:	f001 f990 	bl	8001d10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <SystemClock_Config+0xe8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <SystemClock_Config+0xe8>)
 80009fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <SystemClock_Config+0xe8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a0c:	bf00      	nop
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <SystemClock_Config+0xe8>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1a:	d1f8      	bne.n	8000a0e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2321      	movs	r3, #33	; 0x21
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a36:	2346      	movs	r3, #70	; 0x46
 8000a38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a46:	230c      	movs	r3, #12
 8000a48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f9b4 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a62:	f000 f823 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	233f      	movs	r3, #63	; 0x3f
 8000a68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a76:	2340      	movs	r3, #64	; 0x40
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a7a:	2340      	movs	r3, #64	; 0x40
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a84:	2340      	movs	r3, #64	; 0x40
 8000a86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2107      	movs	r1, #7
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fdcb 	bl	8002628 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a98:	f000 f808 	bl	8000aac <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3770      	adds	r7, #112	; 0x70
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	58024800 	.word	0x58024800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_MspInit+0x30>)
 8000ac0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac4:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x30>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x30>)
 8000ad0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	58024400 	.word	0x58024400

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_Delay(1000);
 8000af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afa:	f000 fdf1 	bl	80016e0 <HAL_Delay>
 8000afe:	e7fa      	b.n	8000af6 <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 fdae 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <TIM1_UP_IRQHandler+0x10>)
 8000b4e:	f004 f917 	bl	8004d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24000094 	.word	0x24000094

08000b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <TIM2_IRQHandler+0x10>)
 8000b62:	f004 f90d 	bl	8004d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	240000e0 	.word	0x240000e0

08000b70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b78:	f001 f8af 	bl	8001cda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000b86:	f004 f8fb 	bl	8004d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400012c 	.word	0x2400012c

08000b94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // 1ms period Timer1 Counter.
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d105      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    TIM1_CNT++;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bae:	6013      	str	r3, [r2, #0]
  }
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
  {
    TIM8_CNT++;
  }
}
 8000bb0:	e014      	b.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM2) // 100ms period Timer1 Counter.
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bba:	d105      	bne.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x34>
    TIM2_CNT++;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bc4:	6013      	str	r3, [r2, #0]
}
 8000bc6:	e009      	b.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM8) // 10us period Timer8 Counter.
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d104      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x48>
    TIM8_CNT++;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40010000 	.word	0x40010000
 8000bec:	24000258 	.word	0x24000258
 8000bf0:	2400025c 	.word	0x2400025c
 8000bf4:	40010400 	.word	0x40010400
 8000bf8:	24000260 	.word	0x24000260

08000bfc <HAL_GPIO_EXTI_Callback>:
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
  userButton_state = 0x01;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x28>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
  userButton_cnt++;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c16:	801a      	strh	r2, [r3, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	24000666 	.word	0x24000666
 8000c28:	24000664 	.word	0x24000664

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f006 fb26 	bl	80072ac <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24100000 	.word	0x24100000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	24000090 	.word	0x24000090
 8000c94:	24000680 	.word	0x24000680

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <SystemInit+0xd0>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <SystemInit+0xd0>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cac:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <SystemInit+0xd4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 030f 	and.w	r3, r3, #15
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d807      	bhi.n	8000cc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <SystemInit+0xd4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f023 030f 	bic.w	r3, r3, #15
 8000cc0:	4a2a      	ldr	r2, [pc, #168]	; (8000d6c <SystemInit+0xd4>)
 8000cc2:	f043 0303 	orr.w	r3, r3, #3
 8000cc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cc8:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <SystemInit+0xd8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <SystemInit+0xd8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <SystemInit+0xd8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <SystemInit+0xd8>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4924      	ldr	r1, [pc, #144]	; (8000d70 <SystemInit+0xd8>)
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <SystemInit+0xdc>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <SystemInit+0xd4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <SystemInit+0xd4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 030f 	bic.w	r3, r3, #15
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <SystemInit+0xd4>)
 8000cfc:	f043 0303 	orr.w	r3, r3, #3
 8000d00:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <SystemInit+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <SystemInit+0xd8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <SystemInit+0xd8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <SystemInit+0xd8>)
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <SystemInit+0xe0>)
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <SystemInit+0xd8>)
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <SystemInit+0xe4>)
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <SystemInit+0xd8>)
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <SystemInit+0xe8>)
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <SystemInit+0xd8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <SystemInit+0xd8>)
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <SystemInit+0xe8>)
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <SystemInit+0xd8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <SystemInit+0xd8>)
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <SystemInit+0xe8>)
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <SystemInit+0xd8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <SystemInit+0xd8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <SystemInit+0xd8>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <SystemInit+0xd8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <SystemInit+0xec>)
 8000d58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	52002000 	.word	0x52002000
 8000d70:	58024400 	.word	0x58024400
 8000d74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d78:	02020200 	.word	0x02020200
 8000d7c:	01ff0000 	.word	0x01ff0000
 8000d80:	01010280 	.word	0x01010280
 8000d84:	52004000 	.word	0x52004000

08000d88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000da8:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <MX_TIM1_Init+0xa4>)
 8000daa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 279;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000dae:	f240 1217 	movw	r2, #279	; 0x117
 8000db2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000dbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000dd6:	f003 fd93 	bl	8004900 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000de0:	f7ff fe64 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000df2:	f004 f9e1 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000dfc:	f7ff fe56 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_TIM1_Init+0xa0>)
 8000e12:	f004 ff31 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e1c:	f7ff fe46 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	24000094 	.word	0x24000094
 8000e2c:	40010000 	.word	0x40010000

08000e30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 279;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e58:	f240 1217 	movw	r2, #279	; 0x117
 8000e5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e66:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <MX_TIM2_Init+0x9c>)
 8000e68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e76:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e78:	f003 fd42 	bl	8004900 <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e82:	f7ff fe13 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e94:	f004 f990 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e9e:	f7ff fe05 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000eb0:	f004 fee2 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eba:	f7ff fdf7 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	240000e0 	.word	0x240000e0
 8000ecc:	0001869f 	.word	0x0001869f

08000ed0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <MX_TIM8_Init+0xa4>)
 8000ef2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 279;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000ef6:	f240 1217 	movw	r2, #279	; 0x117
 8000efa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000f04:	2209      	movs	r2, #9
 8000f06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f1a:	4815      	ldr	r0, [pc, #84]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000f1c:	f003 fcf0 	bl	8004900 <HAL_TIM_Base_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000f26:	f7ff fdc1 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000f38:	f004 f93e 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000f42:	f7ff fdb3 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_TIM8_Init+0xa0>)
 8000f58:	f004 fe8e 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f62:	f7ff fda3 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2400012c 	.word	0x2400012c
 8000f74:	40010400 	.word	0x40010400

08000f78 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fac:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <MX_TIM12_Init+0xec>)
 8000fae:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 27999;
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fb2:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8000fb6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fc0:	2263      	movs	r2, #99	; 0x63
 8000fc2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000fd0:	4823      	ldr	r0, [pc, #140]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fd2:	f003 fc95 	bl	8004900 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8000fdc:	f7ff fd66 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fea:	4619      	mov	r1, r3
 8000fec:	481c      	ldr	r0, [pc, #112]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000fee:	f004 f8e3 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8000ff8:	f7ff fd58 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <MX_TIM12_Init+0xe8>)
 8000ffe:	f003 fd4f 	bl	8004aa0 <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001008:	f7ff fd50 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_TIM12_Init+0xe8>)
 800101c:	f004 fe2c 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001026:	f7ff fd41 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_TIM12_Init+0xe8>)
 8001042:	f003 ffa5 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 800104c:	f7ff fd2e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM12_Init+0xe8>)
 8001052:	f000 f885 	bl	8001160 <HAL_TIM_MspPostInit>

}
 8001056:	bf00      	nop
 8001058:	3738      	adds	r7, #56	; 0x38
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	24000178 	.word	0x24000178
 8001064:	40001800 	.word	0x40001800

08001068 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a36      	ldr	r2, [pc, #216]	; (8001150 <HAL_TIM_Base_MspInit+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d117      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 800107c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001080:	4a34      	ldr	r2, [pc, #208]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 800108c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2019      	movs	r0, #25
 800109e:	f000 fc1e 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010a2:	2019      	movs	r0, #25
 80010a4:	f000 fc35 	bl	8001912 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80010a8:	e04d      	b.n	8001146 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b2:	d117      	bne.n	80010e4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 80010b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 80010c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	201c      	movs	r0, #28
 80010d8:	f000 fc01 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010dc:	201c      	movs	r0, #28
 80010de:	f000 fc18 	bl	8001912 <HAL_NVIC_EnableIRQ>
}
 80010e2:	e030      	b.n	8001146 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_TIM_Base_MspInit+0xf0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d117      	bne.n	800111e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 80010f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010f4:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 8001100:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	202c      	movs	r0, #44	; 0x2c
 8001112:	f000 fbe4 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001116:	202c      	movs	r0, #44	; 0x2c
 8001118:	f000 fbfb 	bl	8001912 <HAL_NVIC_EnableIRQ>
}
 800111c:	e013      	b.n	8001146 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM12)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_TIM_Base_MspInit+0xf4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d10e      	bne.n	8001146 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 800112a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 8001130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001134:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_TIM_Base_MspInit+0xec>)
 800113a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800113e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010000 	.word	0x40010000
 8001154:	58024400 	.word	0x58024400
 8001158:	40010400 	.word	0x40010400
 800115c:	40001800 	.word	0x40001800

08001160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_TIM_MspPostInit+0x6c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d11f      	bne.n	80011c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_TIM_MspPostInit+0x70>)
 8001184:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_TIM_MspPostInit+0x70>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_TIM_MspPostInit+0x70>)
 8001194:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_TIM_MspPostInit+0x74>)
 80011be:	f000 fbc3 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40001800 	.word	0x40001800
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58020400 	.word	0x58020400

080011d8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <MX_USART3_UART_Init+0x94>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_USART3_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART3_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001220:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001222:	f004 fdd5 	bl	8005dd0 <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800122c:	f7ff fc3e 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001234:	f005 ff6f 	bl	8007116 <HAL_UARTEx_SetTxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800123e:	f7ff fc35 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001246:	f005 ffa4 	bl	8007192 <HAL_UARTEx_SetRxFifoThreshold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001250:	f7ff fc2c 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001256:	f005 ff25 	bl	80070a4 <HAL_UARTEx_DisableFifoMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001260:	f7ff fc24 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240001c4 	.word	0x240001c4
 800126c:	40004800 	.word	0x40004800

08001270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0ba      	sub	sp, #232	; 0xe8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	22c0      	movs	r2, #192	; 0xc0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f006 f835 	bl	8007300 <memset>
  if(uartHandle->Instance==USART3)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a27      	ldr	r2, [pc, #156]	; (8001338 <HAL_UART_MspInit+0xc8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d146      	bne.n	800132e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012a0:	f04f 0202 	mov.w	r2, #2
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fd42 	bl	8002d40 <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012c2:	f7ff fbf3 	bl	8000aac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_UART_MspInit+0xcc>)
 80012c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_UART_MspInit+0xcc>)
 80012ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_MspInit+0xcc>)
 80012d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0xcc>)
 80012e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_UART_MspInit+0xcc>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0xcc>)
 80012f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800131c:	2307      	movs	r3, #7
 800131e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_UART_MspInit+0xd0>)
 800132a:	f000 fb0d 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800132e:	bf00      	nop
 8001330:	37e8      	adds	r7, #232	; 0xe8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40004800 	.word	0x40004800
 800133c:	58024400 	.word	0x58024400
 8001340:	58020c00 	.word	0x58020c00

08001344 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 8001358:	4930      	ldr	r1, [pc, #192]	; (800141c <BootMessagePrint+0xc8>)
 800135a:	4831      	ldr	r0, [pc, #196]	; (8001420 <BootMessagePrint+0xcc>)
 800135c:	f005 ffd8 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001360:	482f      	ldr	r0, [pc, #188]	; (8001420 <BootMessagePrint+0xcc>)
 8001362:	f7fe ffc5 	bl	80002f0 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	492c      	ldr	r1, [pc, #176]	; (8001420 <BootMessagePrint+0xcc>)
 8001370:	482c      	ldr	r0, [pc, #176]	; (8001424 <BootMessagePrint+0xd0>)
 8001372:	f004 fd7d 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " Project Name        : %s\r\n", PROJECT_NAME );
 8001376:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <BootMessagePrint+0xd4>)
 8001378:	492c      	ldr	r1, [pc, #176]	; (800142c <BootMessagePrint+0xd8>)
 800137a:	4829      	ldr	r0, [pc, #164]	; (8001420 <BootMessagePrint+0xcc>)
 800137c:	f005 ffc8 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <BootMessagePrint+0xcc>)
 8001382:	f7fe ffb5 	bl	80002f0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	4924      	ldr	r1, [pc, #144]	; (8001420 <BootMessagePrint+0xcc>)
 8001390:	4824      	ldr	r0, [pc, #144]	; (8001424 <BootMessagePrint+0xd0>)
 8001392:	f004 fd6d 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HW VERSION        : %s\r\n", STR_HW_VER );
 8001396:	4a26      	ldr	r2, [pc, #152]	; (8001430 <BootMessagePrint+0xdc>)
 8001398:	4926      	ldr	r1, [pc, #152]	; (8001434 <BootMessagePrint+0xe0>)
 800139a:	4821      	ldr	r0, [pc, #132]	; (8001420 <BootMessagePrint+0xcc>)
 800139c:	f005 ffb8 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80013a0:	481f      	ldr	r0, [pc, #124]	; (8001420 <BootMessagePrint+0xcc>)
 80013a2:	f7fe ffa5 	bl	80002f0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	491c      	ldr	r1, [pc, #112]	; (8001420 <BootMessagePrint+0xcc>)
 80013b0:	481c      	ldr	r0, [pc, #112]	; (8001424 <BootMessagePrint+0xd0>)
 80013b2:	f004 fd5d 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - FW VERSION        : %s\r\n", STR_FW_VER );
 80013b6:	4a20      	ldr	r2, [pc, #128]	; (8001438 <BootMessagePrint+0xe4>)
 80013b8:	4920      	ldr	r1, [pc, #128]	; (800143c <BootMessagePrint+0xe8>)
 80013ba:	4819      	ldr	r0, [pc, #100]	; (8001420 <BootMessagePrint+0xcc>)
 80013bc:	f005 ffa8 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80013c0:	4817      	ldr	r0, [pc, #92]	; (8001420 <BootMessagePrint+0xcc>)
 80013c2:	f7fe ff95 	bl	80002f0 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	4914      	ldr	r1, [pc, #80]	; (8001420 <BootMessagePrint+0xcc>)
 80013d0:	4814      	ldr	r0, [pc, #80]	; (8001424 <BootMessagePrint+0xd0>)
 80013d2:	f004 fd4d 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <BootMessagePrint+0xec>)
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <BootMessagePrint+0xf0>)
 80013da:	491b      	ldr	r1, [pc, #108]	; (8001448 <BootMessagePrint+0xf4>)
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <BootMessagePrint+0xcc>)
 80013de:	f005 ff97 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80013e2:	480f      	ldr	r0, [pc, #60]	; (8001420 <BootMessagePrint+0xcc>)
 80013e4:	f7fe ff84 	bl	80002f0 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	490b      	ldr	r1, [pc, #44]	; (8001420 <BootMessagePrint+0xcc>)
 80013f2:	480c      	ldr	r0, [pc, #48]	; (8001424 <BootMessagePrint+0xd0>)
 80013f4:	f004 fd3c 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 80013f8:	4908      	ldr	r1, [pc, #32]	; (800141c <BootMessagePrint+0xc8>)
 80013fa:	4809      	ldr	r0, [pc, #36]	; (8001420 <BootMessagePrint+0xcc>)
 80013fc:	f005 ff88 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <BootMessagePrint+0xcc>)
 8001402:	f7fe ff75 	bl	80002f0 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	4904      	ldr	r1, [pc, #16]	; (8001420 <BootMessagePrint+0xcc>)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <BootMessagePrint+0xd0>)
 8001412:	f004 fd2d 	bl	8005e70 <HAL_UART_Transmit>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08007c18 	.word	0x08007c18
 8001420:	24000264 	.word	0x24000264
 8001424:	240001c4 	.word	0x240001c4
 8001428:	08007c48 	.word	0x08007c48
 800142c:	08007c58 	.word	0x08007c58
 8001430:	08007c74 	.word	0x08007c74
 8001434:	08007c7c 	.word	0x08007c7c
 8001438:	08007c98 	.word	0x08007c98
 800143c:	08007cac 	.word	0x08007cac
 8001440:	08007cc8 	.word	0x08007cc8
 8001444:	08007cd4 	.word	0x08007cd4
 8001448:	08007ce0 	.word	0x08007ce0

0800144c <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    sprintf(uart3_tx_buf, "-------------------------------------------\r\n");
 8001450:	493d      	ldr	r1, [pc, #244]	; (8001548 <GetClockSourcePrint+0xfc>)
 8001452:	483e      	ldr	r0, [pc, #248]	; (800154c <GetClockSourcePrint+0x100>)
 8001454:	f005 ff5c 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <GetClockSourcePrint+0x100>)
 800145a:	f7fe ff49 	bl	80002f0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	4939      	ldr	r1, [pc, #228]	; (800154c <GetClockSourcePrint+0x100>)
 8001468:	4839      	ldr	r0, [pc, #228]	; (8001550 <GetClockSourcePrint+0x104>)
 800146a:	f004 fd01 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800146e:	f001 fa91 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8001472:	4603      	mov	r3, r0
 8001474:	4a37      	ldr	r2, [pc, #220]	; (8001554 <GetClockSourcePrint+0x108>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	461a      	mov	r2, r3
 800147e:	4936      	ldr	r1, [pc, #216]	; (8001558 <GetClockSourcePrint+0x10c>)
 8001480:	4832      	ldr	r0, [pc, #200]	; (800154c <GetClockSourcePrint+0x100>)
 8001482:	f005 ff45 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001486:	4831      	ldr	r0, [pc, #196]	; (800154c <GetClockSourcePrint+0x100>)
 8001488:	f7fe ff32 	bl	80002f0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	492d      	ldr	r1, [pc, #180]	; (800154c <GetClockSourcePrint+0x100>)
 8001496:	482e      	ldr	r0, [pc, #184]	; (8001550 <GetClockSourcePrint+0x104>)
 8001498:	f004 fcea 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 800149c:	f001 fbf4 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a2c      	ldr	r2, [pc, #176]	; (8001554 <GetClockSourcePrint+0x108>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	461a      	mov	r2, r3
 80014ac:	492b      	ldr	r1, [pc, #172]	; (800155c <GetClockSourcePrint+0x110>)
 80014ae:	4827      	ldr	r0, [pc, #156]	; (800154c <GetClockSourcePrint+0x100>)
 80014b0:	f005 ff2e 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014b4:	4825      	ldr	r0, [pc, #148]	; (800154c <GetClockSourcePrint+0x100>)
 80014b6:	f7fe ff1b 	bl	80002f0 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	4922      	ldr	r1, [pc, #136]	; (800154c <GetClockSourcePrint+0x100>)
 80014c4:	4822      	ldr	r0, [pc, #136]	; (8001550 <GetClockSourcePrint+0x104>)
 80014c6:	f004 fcd3 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80014ca:	f001 fc0d 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <GetClockSourcePrint+0x108>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9b      	lsrs	r3, r3, #18
 80014d8:	461a      	mov	r2, r3
 80014da:	4921      	ldr	r1, [pc, #132]	; (8001560 <GetClockSourcePrint+0x114>)
 80014dc:	481b      	ldr	r0, [pc, #108]	; (800154c <GetClockSourcePrint+0x100>)
 80014de:	f005 ff17 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 80014e2:	481a      	ldr	r0, [pc, #104]	; (800154c <GetClockSourcePrint+0x100>)
 80014e4:	f7fe ff04 	bl	80002f0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <GetClockSourcePrint+0x100>)
 80014f2:	4817      	ldr	r0, [pc, #92]	; (8001550 <GetClockSourcePrint+0x104>)
 80014f4:	f004 fcbc 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 80014f8:	f001 fc0c 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <GetClockSourcePrint+0x108>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	0c9b      	lsrs	r3, r3, #18
 8001506:	461a      	mov	r2, r3
 8001508:	4916      	ldr	r1, [pc, #88]	; (8001564 <GetClockSourcePrint+0x118>)
 800150a:	4810      	ldr	r0, [pc, #64]	; (800154c <GetClockSourcePrint+0x100>)
 800150c:	f005 ff00 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 8001510:	480e      	ldr	r0, [pc, #56]	; (800154c <GetClockSourcePrint+0x100>)
 8001512:	f7fe feed 	bl	80002f0 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	490b      	ldr	r1, [pc, #44]	; (800154c <GetClockSourcePrint+0x100>)
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <GetClockSourcePrint+0x104>)
 8001522:	f004 fca5 	bl	8005e70 <HAL_UART_Transmit>

    sprintf(uart3_tx_buf, "-------------------------------------------\r\n" );
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <GetClockSourcePrint+0xfc>)
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <GetClockSourcePrint+0x100>)
 800152a:	f005 fef1 	bl	8007310 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *) uart3_tx_buf, strlen(uart3_tx_buf), HAL_MAX_DELAY);
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <GetClockSourcePrint+0x100>)
 8001530:	f7fe fede 	bl	80002f0 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	4903      	ldr	r1, [pc, #12]	; (800154c <GetClockSourcePrint+0x100>)
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <GetClockSourcePrint+0x104>)
 8001540:	f004 fc96 	bl	8005e70 <HAL_UART_Transmit>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	08007c18 	.word	0x08007c18
 800154c:	24000264 	.word	0x24000264
 8001550:	240001c4 	.word	0x240001c4
 8001554:	431bde83 	.word	0x431bde83
 8001558:	08007d00 	.word	0x08007d00
 800155c:	08007d30 	.word	0x08007d30
 8001560:	08007d60 	.word	0x08007d60
 8001564:	08007d90 	.word	0x08007d90

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800156c:	f7ff fb94 	bl	8000c98 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	; (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001596:	f005 fe8f 	bl	80072b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff f9a3 	bl	80008e4 <main>
  bx  lr
 800159e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80015ac:	08007e3c 	.word	0x08007e3c
  ldr r2, =_sbss
 80015b0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80015b4:	2400067c 	.word	0x2400067c

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f000 f980 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015c8:	f001 f9e4 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_Init+0x68>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	4913      	ldr	r1, [pc, #76]	; (8001628 <HAL_Init+0x6c>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_Init+0x68>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_Init+0x6c>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_Init+0x70>)
 80015fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001600:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_Init+0x74>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001606:	2000      	movs	r0, #0
 8001608:	f000 f814 	bl	8001634 <HAL_InitTick>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e002      	b.n	800161c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001616:	f7ff fa4f 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	58024400 	.word	0x58024400
 8001628:	08007dc0 	.word	0x08007dc0
 800162c:	24000004 	.word	0x24000004
 8001630:	24000000 	.word	0x24000000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_InitTick+0x60>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e021      	b.n	800168c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_InitTick+0x64>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_InitTick+0x60>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f965 	bl	800192e <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f92f 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x68>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2400000c 	.word	0x2400000c
 8001698:	24000000 	.word	0x24000000
 800169c:	24000008 	.word	0x24000008

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2400000c 	.word	0x2400000c
 80016c4:	24000668 	.word	0x24000668

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	24000668 	.word	0x24000668

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_Delay+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2400000c 	.word	0x2400000c

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <__NVIC_SetPriorityGrouping+0x40>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	4313      	orrs	r3, r2
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x40>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	05fa0000 	.word	0x05fa0000

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db0b      	blt.n	80017b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	4907      	ldr	r1, [pc, #28]	; (80017c4 <__NVIC_EnableIRQ+0x38>)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	; (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff29 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff40 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff90 	bl	800181c <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5f 	bl	80017c8 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff33 	bl	800178c <__NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffa4 	bl	8001884 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001956:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <HAL_GPIO_Init+0x234>)
 8001958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800195a:	e194      	b.n	8001c86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8186 	beq.w	8001c80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d005      	beq.n	800198c <HAL_GPIO_Init+0x44>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d130      	bne.n	80019ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019c2:	2201      	movs	r2, #1
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 0201 	and.w	r2, r3, #1
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d017      	beq.n	8001a2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d123      	bne.n	8001a7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	69b9      	ldr	r1, [r7, #24]
 8001a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0203 	and.w	r2, r3, #3
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80e0 	beq.w	8001c80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_GPIO_Init+0x238>)
 8001ac2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ac6:	4a2e      	ldr	r2, [pc, #184]	; (8001b80 <HAL_GPIO_Init+0x238>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_GPIO_Init+0x238>)
 8001ad2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ade:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <HAL_GPIO_Init+0x23c>)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <HAL_GPIO_Init+0x240>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d052      	beq.n	8001bb0 <HAL_GPIO_Init+0x268>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_GPIO_Init+0x244>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d031      	beq.n	8001b76 <HAL_GPIO_Init+0x22e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_GPIO_Init+0x248>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d02b      	beq.n	8001b72 <HAL_GPIO_Init+0x22a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_GPIO_Init+0x24c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d025      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_GPIO_Init+0x250>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01f      	beq.n	8001b6a <HAL_GPIO_Init+0x222>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_GPIO_Init+0x254>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_Init+0x21e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <HAL_GPIO_Init+0x258>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_GPIO_Init+0x25c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_Init+0x216>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_GPIO_Init+0x260>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x212>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_GPIO_Init+0x264>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_Init+0x20e>
 8001b52:	2309      	movs	r3, #9
 8001b54:	e02d      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b56:	230a      	movs	r3, #10
 8001b58:	e02b      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	e029      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b5e:	2307      	movs	r3, #7
 8001b60:	e027      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b62:	2306      	movs	r3, #6
 8001b64:	e025      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b66:	2305      	movs	r3, #5
 8001b68:	e023      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e021      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e01f      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e01d      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e01b      	b.n	8001bb2 <HAL_GPIO_Init+0x26a>
 8001b7a:	bf00      	nop
 8001b7c:	58000080 	.word	0x58000080
 8001b80:	58024400 	.word	0x58024400
 8001b84:	58000400 	.word	0x58000400
 8001b88:	58020000 	.word	0x58020000
 8001b8c:	58020400 	.word	0x58020400
 8001b90:	58020800 	.word	0x58020800
 8001b94:	58020c00 	.word	0x58020c00
 8001b98:	58021000 	.word	0x58021000
 8001b9c:	58021400 	.word	0x58021400
 8001ba0:	58021800 	.word	0x58021800
 8001ba4:	58021c00 	.word	0x58021c00
 8001ba8:	58022000 	.word	0x58022000
 8001bac:	58022400 	.word	0x58022400
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc2:	4938      	ldr	r1, [pc, #224]	; (8001ca4 <HAL_GPIO_Init+0x35c>)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f ae63 	bne.w	800195c <HAL_GPIO_Init+0x14>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	58000400 	.word	0x58000400

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ff7b 	bl	8000bfc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d00a      	beq.n	8001d3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e040      	b.n	8001db8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e03e      	b.n	8001db8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d42:	491f      	ldr	r1, [pc, #124]	; (8001dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d4a:	f7ff fcbd 	bl	80016c8 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d50:	e009      	b.n	8001d66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d52:	f7ff fcb9 	bl	80016c8 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d60:	d901      	bls.n	8001d66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e028      	b.n	8001db8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d72:	d1ee      	bne.n	8001d52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b1e      	cmp	r3, #30
 8001d78:	d008      	beq.n	8001d8c <HAL_PWREx_ConfigSupply+0x7c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d7e:	d005      	beq.n	8001d8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b1d      	cmp	r3, #29
 8001d84:	d002      	beq.n	8001d8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b2d      	cmp	r3, #45	; 0x2d
 8001d8a:	d114      	bne.n	8001db6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d8c:	f7ff fc9c 	bl	80016c8 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d92:	e009      	b.n	8001da8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d94:	f7ff fc98 	bl	80016c8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da2:	d901      	bls.n	8001da8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e007      	b.n	8001db8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d1ee      	bne.n	8001d94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	58024800 	.word	0x58024800

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f000 bc1f 	b.w	8002616 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80b3 	beq.w	8001f4c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4b95      	ldr	r3, [pc, #596]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d007      	beq.n	8001e0c <HAL_RCC_OscConfig+0x48>
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	2b18      	cmp	r3, #24
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x64>
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8098 	beq.w	8001f4a <HAL_RCC_OscConfig+0x186>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 8093 	bne.w	8001f4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e3f6      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x7c>
 8001e32:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a81      	ldr	r2, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e058      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d112      	bne.n	8001e6e <HAL_RCC_OscConfig+0xaa>
 8001e48:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a7b      	ldr	r2, [pc, #492]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b79      	ldr	r3, [pc, #484]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a78      	ldr	r2, [pc, #480]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a75      	ldr	r2, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e041      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e76:	d112      	bne.n	8001e9e <HAL_RCC_OscConfig+0xda>
 8001e78:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6f      	ldr	r2, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b6d      	ldr	r3, [pc, #436]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6c      	ldr	r2, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e029      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001ea6:	d112      	bne.n	8001ece <HAL_RCC_OscConfig+0x10a>
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a60      	ldr	r2, [pc, #384]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e011      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001eec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d013      	beq.n	8001f22 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff fbe5 	bl	80016c8 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f02:	f7ff fbe1 	bl	80016c8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e380      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f14:	4b49      	ldr	r3, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x13e>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff fbd1 	bl	80016c8 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2a:	f7ff fbcd 	bl	80016c8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e36c      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x166>
 8001f48:	e000      	b.n	8001f4c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 808c 	beq.w	8002072 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f62:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_RCC_OscConfig+0x1bc>
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	2b18      	cmp	r3, #24
 8001f74:	d137      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x222>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d132      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1d4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e33e      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 0219 	bic.w	r2, r3, #25
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4925      	ldr	r1, [pc, #148]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7ff fb8d 	bl	80016c8 <HAL_GetTick>
 8001fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fb89 	bl	80016c8 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e328      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	4917      	ldr	r1, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe4:	e045      	b.n	8002072 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d028      	beq.n	8002040 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0219 	bic.w	r2, r3, #25
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4910      	ldr	r1, [pc, #64]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fb62 	bl	80016c8 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff fb5e 	bl	80016c8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e2fd      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_RCC_OscConfig+0x278>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	4901      	ldr	r1, [pc, #4]	; (800203c <HAL_RCC_OscConfig+0x278>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
 800203a:	e01a      	b.n	8002072 <HAL_RCC_OscConfig+0x2ae>
 800203c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002040:	4b97      	ldr	r3, [pc, #604]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a96      	ldr	r2, [pc, #600]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff fb3c 	bl	80016c8 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff fb38 	bl	80016c8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e2d7      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002066:	4b8e      	ldr	r3, [pc, #568]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06a      	beq.n	8002154 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002086:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002088:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d007      	beq.n	80020a4 <HAL_RCC_OscConfig+0x2e0>
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b18      	cmp	r3, #24
 8002098:	d11b      	bne.n	80020d2 <HAL_RCC_OscConfig+0x30e>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d116      	bne.n	80020d2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020a4:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x2f8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e2ac      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020bc:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4975      	ldr	r1, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020d0:	e040      	b.n	8002154 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d023      	beq.n	8002122 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020da:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a70      	ldr	r2, [pc, #448]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff faef 	bl	80016c8 <HAL_GetTick>
 80020ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020ee:	f7ff faeb 	bl	80016c8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e28a      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002100:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800210c:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	4961      	ldr	r1, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800211c:	4313      	orrs	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
 8002120:	e018      	b.n	8002154 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002122:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5e      	ldr	r2, [pc, #376]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7ff facb 	bl	80016c8 <HAL_GetTick>
 8002132:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002136:	f7ff fac7 	bl	80016c8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e266      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d036      	beq.n	80021ce <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d019      	beq.n	800219c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002168:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800216a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216c:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7ff faa8 	bl	80016c8 <HAL_GetTick>
 8002178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff faa4 	bl	80016c8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e243      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800218e:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x3b8>
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff fa8e 	bl	80016c8 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff fa8a 	bl	80016c8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e229      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d036      	beq.n	8002248 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80021e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021ee:	f7ff fa6b 	bl	80016c8 <HAL_GetTick>
 80021f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f6:	f7ff fa67 	bl	80016c8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e206      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x432>
 8002214:	e018      	b.n	8002248 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800221c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002220:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002222:	f7ff fa51 	bl	80016c8 <HAL_GetTick>
 8002226:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222a:	f7ff fa4d 	bl	80016c8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1ec      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80af 	beq.w	80023b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_RCC_OscConfig+0x4e0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_RCC_OscConfig+0x4e0>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002262:	f7ff fa31 	bl	80016c8 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7ff fa2d 	bl	80016c8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	; 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1cc      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_OscConfig+0x4e0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10b      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4e4>
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a02      	ldr	r2, [pc, #8]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	e05b      	b.n	8002356 <HAL_RCC_OscConfig+0x592>
 800229e:	bf00      	nop
 80022a0:	58024400 	.word	0x58024400
 80022a4:	58024800 	.word	0x58024800
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x512>
 80022b0:	4b9d      	ldr	r3, [pc, #628]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a9c      	ldr	r2, [pc, #624]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b9a      	ldr	r3, [pc, #616]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a99      	ldr	r2, [pc, #612]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	4b97      	ldr	r3, [pc, #604]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a96      	ldr	r2, [pc, #600]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
 80022d4:	e03f      	b.n	8002356 <HAL_RCC_OscConfig+0x592>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d112      	bne.n	8002304 <HAL_RCC_OscConfig+0x540>
 80022de:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a91      	ldr	r2, [pc, #580]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ea:	4b8f      	ldr	r3, [pc, #572]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	4a8e      	ldr	r2, [pc, #568]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f4:	6713      	str	r3, [r2, #112]	; 0x70
 80022f6:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a8b      	ldr	r2, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	e028      	b.n	8002356 <HAL_RCC_OscConfig+0x592>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b85      	cmp	r3, #133	; 0x85
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x56e>
 800230c:	4b86      	ldr	r3, [pc, #536]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a85      	ldr	r2, [pc, #532]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800231e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a7f      	ldr	r2, [pc, #508]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	e011      	b.n	8002356 <HAL_RCC_OscConfig+0x592>
 8002332:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6713      	str	r3, [r2, #112]	; 0x70
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a79      	ldr	r2, [pc, #484]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
 800234a:	4b77      	ldr	r3, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a76      	ldr	r2, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235e:	f7ff f9b3 	bl	80016c8 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff f9af 	bl	80016c8 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e14c      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ee      	beq.n	8002366 <HAL_RCC_OscConfig+0x5a2>
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238a:	f7ff f99d 	bl	80016c8 <HAL_GetTick>
 800238e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff f999 	bl	80016c8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e136      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023a8:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 812b 	beq.w	8002614 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023be:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	f000 80bb 	beq.w	8002542 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f040 8095 	bne.w	8002500 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d6:	4b54      	ldr	r3, [pc, #336]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a53      	ldr	r2, [pc, #332]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80023dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7ff f971 	bl	80016c8 <HAL_GetTick>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7ff f96d 	bl	80016c8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e10c      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023fc:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800240a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x768>)
 800240e:	4013      	ands	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	430a      	orrs	r2, r1
 800241c:	4942      	ldr	r1, [pc, #264]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800241e:	4313      	orrs	r3, r2
 8002420:	628b      	str	r3, [r1, #40]	; 0x28
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	3b01      	subs	r3, #1
 8002428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002430:	3b01      	subs	r3, #1
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	b29b      	uxth	r3, r3
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	3b01      	subs	r3, #1
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	3b01      	subs	r3, #1
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002452:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002454:	4313      	orrs	r3, r2
 8002456:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002458:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	4a32      	ldr	r2, [pc, #200]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_OscConfig+0x76c>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002470:	00d2      	lsls	r2, r2, #3
 8002472:	492d      	ldr	r1, [pc, #180]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002474:	4313      	orrs	r3, r2
 8002476:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002478:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f023 020c 	bic.w	r2, r3, #12
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4928      	ldr	r1, [pc, #160]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002486:	4313      	orrs	r3, r2
 8002488:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800248a:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	f023 0202 	bic.w	r2, r3, #2
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4924      	ldr	r1, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002498:	4313      	orrs	r3, r2
 800249a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a15      	ldr	r2, [pc, #84]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff f8f6 	bl	80016c8 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7ff f8f2 	bl	80016c8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e091      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x71c>
 80024fe:	e089      	b.n	8002614 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_RCC_OscConfig+0x764>)
 8002506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800250a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff f8dc 	bl	80016c8 <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002512:	e00f      	b.n	8002534 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7ff f8d8 	bl	80016c8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d908      	bls.n	8002534 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e077      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
 8002526:	bf00      	nop
 8002528:	58024400 	.word	0x58024400
 800252c:	fffffc0c 	.word	0xfffffc0c
 8002530:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e9      	bne.n	8002514 <HAL_RCC_OscConfig+0x750>
 8002540:	e068      	b.n	8002614 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b01      	cmp	r3, #1
 8002554:	d031      	beq.n	80025ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d12a      	bne.n	80025ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d122      	bne.n	80025ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d11a      	bne.n	80025ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d111      	bne.n	80025ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d108      	bne.n	80025ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	0e1b      	lsrs	r3, r3, #24
 80025ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e02b      	b.n	8002616 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	08db      	lsrs	r3, r3, #3
 80025c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025c8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d01f      	beq.n	8002614 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4a11      	ldr	r2, [pc, #68]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025e0:	f7ff f872 	bl	80016c8 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025e6:	bf00      	nop
 80025e8:	f7ff f86e 	bl	80016c8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d0f9      	beq.n	80025e8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 80025f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_OscConfig+0x860>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002600:	00d2      	lsls	r2, r2, #3
 8002602:	4907      	ldr	r1, [pc, #28]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_RCC_OscConfig+0x85c>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3730      	adds	r7, #48	; 0x30
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	58024400 	.word	0x58024400
 8002624:	ffff0007 	.word	0xffff0007

08002628 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e19c      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b8a      	ldr	r3, [pc, #552]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b87      	ldr	r3, [pc, #540]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4985      	ldr	r1, [pc, #532]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b83      	ldr	r3, [pc, #524]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e184      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	4b7b      	ldr	r3, [pc, #492]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002684:	429a      	cmp	r2, r3
 8002686:	d908      	bls.n	800269a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002688:	4b78      	ldr	r3, [pc, #480]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	4975      	ldr	r1, [pc, #468]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002696:	4313      	orrs	r3, r2
 8002698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d908      	bls.n	80026c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	496a      	ldr	r1, [pc, #424]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	4b64      	ldr	r3, [pc, #400]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d908      	bls.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026e4:	4b61      	ldr	r3, [pc, #388]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	495e      	ldr	r1, [pc, #376]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800270e:	429a      	cmp	r2, r3
 8002710:	d908      	bls.n	8002724 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002712:	4b56      	ldr	r3, [pc, #344]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4953      	ldr	r1, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002720:	4313      	orrs	r3, r2
 8002722:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d010      	beq.n	8002752 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4b4d      	ldr	r3, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	429a      	cmp	r2, r3
 800273e:	d908      	bls.n	8002752 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f023 020f 	bic.w	r2, r3, #15
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4947      	ldr	r1, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 800274e:	4313      	orrs	r3, r2
 8002750:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d055      	beq.n	800280a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800275e:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4940      	ldr	r1, [pc, #256]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 800276c:	4313      	orrs	r3, r2
 800276e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d107      	bne.n	8002788 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002778:	4b3c      	ldr	r3, [pc, #240]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0f6      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002790:	4b36      	ldr	r3, [pc, #216]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0ea      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027a8:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0de      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b8:	4b2c      	ldr	r3, [pc, #176]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0d6      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f023 0207 	bic.w	r2, r3, #7
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4925      	ldr	r1, [pc, #148]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027da:	f7fe ff75 	bl	80016c8 <HAL_GetTick>
 80027de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	f7fe ff71 	bl	80016c8 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0be      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	429a      	cmp	r2, r3
 8002808:	d1eb      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	429a      	cmp	r2, r3
 8002824:	d208      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f023 020f 	bic.w	r2, r3, #15
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x244>)
 8002834:	4313      	orrs	r3, r2
 8002836:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d214      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 020f 	bic.w	r2, r3, #15
 800284e:	4906      	ldr	r1, [pc, #24]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <HAL_RCC_ClockConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e086      	b.n	8002976 <HAL_RCC_ClockConfig+0x34e>
 8002868:	52002000 	.word	0x52002000
 800286c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d010      	beq.n	800289e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002888:	429a      	cmp	r2, r3
 800288a:	d208      	bcs.n	800289e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	4939      	ldr	r1, [pc, #228]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 800289a:	4313      	orrs	r3, r2
 800289c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d010      	beq.n	80028cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	4b34      	ldr	r3, [pc, #208]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d208      	bcs.n	80028cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028ba:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	492e      	ldr	r1, [pc, #184]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d208      	bcs.n	80028fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d010      	beq.n	8002928 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002912:	429a      	cmp	r2, r3
 8002914:	d208      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4917      	ldr	r1, [pc, #92]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 8002924:	4313      	orrs	r3, r2
 8002926:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002928:	f000 f834 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	4912      	ldr	r1, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x35c>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
 8002944:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x358>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <HAL_RCC_ClockConfig+0x35c>)
 8002950:	5cd3      	ldrb	r3, [r2, r3]
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x360>)
 800295e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_RCC_ClockConfig+0x364>)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x368>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fe62 	bl	8001634 <HAL_InitTick>
 8002970:	4603      	mov	r3, r0
 8002972:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	58024400 	.word	0x58024400
 8002984:	08007dc0 	.word	0x08007dc0
 8002988:	24000004 	.word	0x24000004
 800298c:	24000000 	.word	0x24000000
 8002990:	24000008 	.word	0x24000008

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299a:	4bb3      	ldr	r3, [pc, #716]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a2:	2b18      	cmp	r3, #24
 80029a4:	f200 8155 	bhi.w	8002c52 <HAL_RCC_GetSysClockFreq+0x2be>
 80029a8:	a201      	add	r2, pc, #4	; (adr r2, 80029b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ae:	bf00      	nop
 80029b0:	08002a15 	.word	0x08002a15
 80029b4:	08002c53 	.word	0x08002c53
 80029b8:	08002c53 	.word	0x08002c53
 80029bc:	08002c53 	.word	0x08002c53
 80029c0:	08002c53 	.word	0x08002c53
 80029c4:	08002c53 	.word	0x08002c53
 80029c8:	08002c53 	.word	0x08002c53
 80029cc:	08002c53 	.word	0x08002c53
 80029d0:	08002a3b 	.word	0x08002a3b
 80029d4:	08002c53 	.word	0x08002c53
 80029d8:	08002c53 	.word	0x08002c53
 80029dc:	08002c53 	.word	0x08002c53
 80029e0:	08002c53 	.word	0x08002c53
 80029e4:	08002c53 	.word	0x08002c53
 80029e8:	08002c53 	.word	0x08002c53
 80029ec:	08002c53 	.word	0x08002c53
 80029f0:	08002a41 	.word	0x08002a41
 80029f4:	08002c53 	.word	0x08002c53
 80029f8:	08002c53 	.word	0x08002c53
 80029fc:	08002c53 	.word	0x08002c53
 8002a00:	08002c53 	.word	0x08002c53
 8002a04:	08002c53 	.word	0x08002c53
 8002a08:	08002c53 	.word	0x08002c53
 8002a0c:	08002c53 	.word	0x08002c53
 8002a10:	08002a47 	.word	0x08002a47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a14:	4b94      	ldr	r3, [pc, #592]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a20:	4b91      	ldr	r3, [pc, #580]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	4a90      	ldr	r2, [pc, #576]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a32:	e111      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a34:	4b8d      	ldr	r3, [pc, #564]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a36:	61bb      	str	r3, [r7, #24]
      break;
 8002a38:	e10e      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a3a:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a3c:	61bb      	str	r3, [r7, #24]
      break;
 8002a3e:	e10b      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a40:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a42:	61bb      	str	r3, [r7, #24]
      break;
 8002a44:	e108      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a46:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a50:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a5c:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a66:	4b80      	ldr	r3, [pc, #512]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	08db      	lsrs	r3, r3, #3
 8002a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80e1 	beq.w	8002c4c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f000 8083 	beq.w	8002b98 <HAL_RCC_GetSysClockFreq+0x204>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	f200 80a1 	bhi.w	8002bdc <HAL_RCC_GetSysClockFreq+0x248>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x114>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d056      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002aa6:	e099      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d02d      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ab4:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	4a6b      	ldr	r2, [pc, #428]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ade:	4b62      	ldr	r3, [pc, #392]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002af2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b0e:	e087      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b22:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b52:	e065      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b66:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b96:	e043      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bda:	e021      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	ee07 3a90 	vmov	s15, r3
 8002c34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c44:	ee17 3a90 	vmov	r3, s15
 8002c48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c4a:	e005      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
      break;
 8002c50:	e002      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c54:	61bb      	str	r3, [r7, #24]
      break;
 8002c56:	bf00      	nop
  }

  return sysclockfreq;
 8002c58:	69bb      	ldr	r3, [r7, #24]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	03d09000 	.word	0x03d09000
 8002c70:	003d0900 	.word	0x003d0900
 8002c74:	007a1200 	.word	0x007a1200
 8002c78:	46000000 	.word	0x46000000
 8002c7c:	4c742400 	.word	0x4c742400
 8002c80:	4a742400 	.word	0x4a742400
 8002c84:	4af42400 	.word	0x4af42400

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002c8e:	f7ff fe81 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490f      	ldr	r1, [pc, #60]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x54>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x54>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	58024400 	.word	0x58024400
 8002cdc:	08007dc0 	.word	0x08007dc0
 8002ce0:	24000004 	.word	0x24000004
 8002ce4:	24000000 	.word	0x24000000

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002cec:	f7ff ffcc 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4904      	ldr	r1, [pc, #16]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	08007dc0 	.word	0x08007dc0

08002d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002d18:	f7ff ffb6 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4904      	ldr	r1, [pc, #16]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	08007dc0 	.word	0x08007dc0

08002d40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d44:	b0c8      	sub	sp, #288	; 0x120
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002d64:	2500      	movs	r5, #0
 8002d66:	ea54 0305 	orrs.w	r3, r4, r5
 8002d6a:	d049      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d76:	d02f      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d7c:	d828      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d82:	d01a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d88:	d822      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d92:	d007      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d94:	e01c      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d96:	4ba7      	ldr	r3, [pc, #668]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	4aa6      	ldr	r2, [pc, #664]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002da2:	e01a      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da8:	3308      	adds	r3, #8
 8002daa:	2102      	movs	r1, #2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fc43 	bl	8004638 <RCCEx_PLL2_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002db8:	e00f      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dbe:	3328      	adds	r3, #40	; 0x28
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 fcea 	bl	800479c <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dce:	e004      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002de2:	4b94      	ldr	r3, [pc, #592]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df0:	4a90      	ldr	r2, [pc, #576]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6513      	str	r3, [r2, #80]	; 0x50
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002e0c:	f04f 0900 	mov.w	r9, #0
 8002e10:	ea58 0309 	orrs.w	r3, r8, r9
 8002e14:	d047      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d82a      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e3d 	.word	0x08002e3d
 8002e2c:	08002e4b 	.word	0x08002e4b
 8002e30:	08002e61 	.word	0x08002e61
 8002e34:	08002e7f 	.word	0x08002e7f
 8002e38:	08002e7f 	.word	0x08002e7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3c:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	4a7c      	ldr	r2, [pc, #496]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e48:	e01a      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4e:	3308      	adds	r3, #8
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 fbf0 	bl	8004638 <RCCEx_PLL2_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e5e:	e00f      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e64:	3328      	adds	r3, #40	; 0x28
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fc97 	bl	800479c <RCCEx_PLL3_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e74:	e004      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e7c:	e000      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	f023 0107 	bic.w	r1, r3, #7
 8002e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a67      	ldr	r2, [pc, #412]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e9c:	e003      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ea2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002eb2:	f04f 0b00 	mov.w	fp, #0
 8002eb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002eba:	d054      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ec6:	d036      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002ec8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ecc:	d82f      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed2:	d032      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed8:	d829      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002eda:	2bc0      	cmp	r3, #192	; 0xc0
 8002edc:	d02f      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002ede:	2bc0      	cmp	r3, #192	; 0xc0
 8002ee0:	d825      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d018      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d821      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d007      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002ef2:	e01c      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4a4e      	ldr	r2, [pc, #312]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002f00:	e01e      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f06:	3308      	adds	r3, #8
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fb94 	bl	8004638 <RCCEx_PLL2_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002f16:	e013      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f1c:	3328      	adds	r3, #40	; 0x28
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 fc3b 	bl	800479c <RCCEx_PLL3_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002f2c:	e008      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f34:	e004      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002f48:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	4a37      	ldr	r2, [pc, #220]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6513      	str	r3, [r2, #80]	; 0x50
 8002f5c:	e003      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002f72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002f80:	460b      	mov	r3, r1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	d05c      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002f90:	d03b      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f92:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002f96:	d834      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9c:	d037      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa2:	d82e      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002fa4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fa8:	d033      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002faa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fae:	d828      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d01a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d822      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc4:	d007      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002fc6:	e01c      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002fd4:	e01e      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fda:	3308      	adds	r3, #8
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 fb2a 	bl	8004638 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002fea:	e013      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff0:	3328      	adds	r3, #40	; 0x28
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fbd1 	bl	800479c <RCCEx_PLL3_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003000:	e008      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003008:	e004      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800300a:	bf00      	nop
 800300c:	e002      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003014:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10d      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800301e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003020:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302a:	4a02      	ldr	r2, [pc, #8]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6513      	str	r3, [r2, #80]	; 0x50
 8003030:	e006      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003032:	bf00      	nop
 8003034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800303c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800304c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003056:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800305a:	460b      	mov	r3, r1
 800305c:	4313      	orrs	r3, r2
 800305e:	d03a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	2b30      	cmp	r3, #48	; 0x30
 8003068:	d01f      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800306a:	2b30      	cmp	r3, #48	; 0x30
 800306c:	d819      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800306e:	2b20      	cmp	r3, #32
 8003070:	d00c      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003072:	2b20      	cmp	r3, #32
 8003074:	d815      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d019      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800307a:	2b10      	cmp	r3, #16
 800307c:	d111      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800307e:	4bae      	ldr	r3, [pc, #696]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	4aad      	ldr	r2, [pc, #692]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800308a:	e011      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800308c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003090:	3308      	adds	r3, #8
 8003092:	2102      	movs	r1, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f001 facf 	bl	8004638 <RCCEx_PLL2_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030a0:	e006      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030a8:	e002      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80030aa:	bf00      	nop
 80030ac:	e000      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80030ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030b8:	4b9f      	ldr	r3, [pc, #636]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80030c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	4a9c      	ldr	r2, [pc, #624]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030cc:	e003      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80030e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80030ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4313      	orrs	r3, r2
 80030f4:	d051      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80030f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003100:	d035      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003106:	d82e      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800310c:	d031      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800310e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003112:	d828      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003118:	d01a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800311a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311e:	d822      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003128:	d007      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800312a:	e01c      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800312c:	4b82      	ldr	r3, [pc, #520]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	4a81      	ldr	r2, [pc, #516]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003138:	e01c      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800313a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800313e:	3308      	adds	r3, #8
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f001 fa78 	bl	8004638 <RCCEx_PLL2_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800314e:	e011      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003154:	3328      	adds	r3, #40	; 0x28
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fb1f 	bl	800479c <RCCEx_PLL3_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003164:	e006      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800316c:	e002      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003174:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800317c:	4b6e      	ldr	r3, [pc, #440]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318a:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800318c:	430b      	orrs	r3, r1
 800318e:	6513      	str	r3, [r2, #80]	; 0x50
 8003190:	e003      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003196:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80031a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80031b4:	460b      	mov	r3, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	d053      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d033      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80031c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ca:	d82c      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80031cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d0:	d02f      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80031d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d6:	d826      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80031d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031dc:	d02b      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80031de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e2:	d820      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80031e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e8:	d012      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80031ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ee:	d81a      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d022      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d115      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fe:	3308      	adds	r3, #8
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f001 fa18 	bl	8004638 <RCCEx_PLL2_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800320e:	e015      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003214:	3328      	adds	r3, #40	; 0x28
 8003216:	2101      	movs	r1, #1
 8003218:	4618      	mov	r0, r3
 800321a:	f001 fabf 	bl	800479c <RCCEx_PLL3_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003224:	e00a      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800323a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003244:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800324c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003252:	4a39      	ldr	r2, [pc, #228]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003254:	430b      	orrs	r3, r1
 8003256:	6513      	str	r3, [r2, #80]	; 0x50
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800326e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003278:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800327c:	460b      	mov	r3, r1
 800327e:	4313      	orrs	r3, r2
 8003280:	d060      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800328a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800328e:	d039      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003290:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003294:	d832      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d035      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800329c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a0:	d82c      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d031      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d826      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032b2:	d02d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80032b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032b8:	d820      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032be:	d012      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80032c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c4:	d81a      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d024      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ce:	d115      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d4:	3308      	adds	r3, #8
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 f9ad 	bl	8004638 <RCCEx_PLL2_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032e4:	e017      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ea:	3328      	adds	r3, #40	; 0x28
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 fa54 	bl	800479c <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032fa:	e00c      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003302:	e008      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003304:	bf00      	nop
 8003306:	e006      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003308:	bf00      	nop
 800330a:	e004      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800330c:	bf00      	nop
 800330e:	e002      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800332e:	4a02      	ldr	r2, [pc, #8]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003330:	430b      	orrs	r3, r1
 8003332:	6593      	str	r3, [r2, #88]	; 0x58
 8003334:	e006      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003336:	bf00      	nop
 8003338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003340:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800335a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d037      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800336e:	d00e      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003374:	d816      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800337a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337e:	d111      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003380:	4bc4      	ldr	r3, [pc, #784]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4ac3      	ldr	r2, [pc, #780]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800338c:	e00f      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800338e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003392:	3308      	adds	r3, #8
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f001 f94e 	bl	8004638 <RCCEx_PLL2_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033a2:	e004      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033aa:	e000      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80033ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033b6:	4bb7      	ldr	r3, [pc, #732]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c4:	4ab3      	ldr	r2, [pc, #716]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6513      	str	r3, [r2, #80]	; 0x50
 80033ca:	e003      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80033e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80033ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4313      	orrs	r3, r2
 80033f2:	d039      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80033f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d81c      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003441 	.word	0x08003441
 8003408:	08003415 	.word	0x08003415
 800340c:	08003423 	.word	0x08003423
 8003410:	08003441 	.word	0x08003441
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003414:	4b9f      	ldr	r3, [pc, #636]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	4a9e      	ldr	r2, [pc, #632]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800341a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003420:	e00f      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003426:	3308      	adds	r3, #8
 8003428:	2102      	movs	r1, #2
 800342a:	4618      	mov	r0, r3
 800342c:	f001 f904 	bl	8004638 <RCCEx_PLL2_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003436:	e004      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003442:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800344a:	4b92      	ldr	r3, [pc, #584]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	f023 0103 	bic.w	r1, r3, #3
 8003452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003458:	4a8e      	ldr	r2, [pc, #568]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800345a:	430b      	orrs	r3, r1
 800345c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003464:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800347e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	f000 8099 	beq.w	80035bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800348a:	4b83      	ldr	r3, [pc, #524]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a82      	ldr	r2, [pc, #520]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003496:	f7fe f917 	bl	80016c8 <HAL_GetTick>
 800349a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800349e:	e00b      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a0:	f7fe f912 	bl	80016c8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d903      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034b6:	e005      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034b8:	4b77      	ldr	r3, [pc, #476]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ed      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80034c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d173      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034cc:	4b71      	ldr	r3, [pc, #452]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034d8:	4053      	eors	r3, r2
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d015      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e2:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ee:	4b69      	ldr	r3, [pc, #420]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a68      	ldr	r2, [pc, #416]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034fa:	4b66      	ldr	r3, [pc, #408]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a65      	ldr	r2, [pc, #404]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003506:	4a63      	ldr	r2, [pc, #396]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800350e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003512:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d118      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe f8d4 	bl	80016c8 <HAL_GetTick>
 8003520:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003524:	e00d      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe f8cf 	bl	80016c8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003530:	1ad2      	subs	r2, r2, r3
 8003532:	f241 3388 	movw	r3, #5000	; 0x1388
 8003536:	429a      	cmp	r2, r3
 8003538:	d903      	bls.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003540:	e005      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0eb      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800354e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003552:	2b00      	cmp	r3, #0
 8003554:	d129      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003566:	d10e      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003578:	091a      	lsrs	r2, r3, #4
 800357a:	4b48      	ldr	r3, [pc, #288]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800357c:	4013      	ands	r3, r2
 800357e:	4a45      	ldr	r2, [pc, #276]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6113      	str	r3, [r2, #16]
 8003584:	e005      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003586:	4b43      	ldr	r3, [pc, #268]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800358c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003590:	6113      	str	r3, [r2, #16]
 8003592:	4b40      	ldr	r3, [pc, #256]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003594:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	e008      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80035b2:	e003      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f002 0301 	and.w	r3, r2, #1
 80035c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	f000 8090 	beq.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80035de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e6:	2b28      	cmp	r3, #40	; 0x28
 80035e8:	d870      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	080036d5 	.word	0x080036d5
 80035f4:	080036cd 	.word	0x080036cd
 80035f8:	080036cd 	.word	0x080036cd
 80035fc:	080036cd 	.word	0x080036cd
 8003600:	080036cd 	.word	0x080036cd
 8003604:	080036cd 	.word	0x080036cd
 8003608:	080036cd 	.word	0x080036cd
 800360c:	080036cd 	.word	0x080036cd
 8003610:	080036a1 	.word	0x080036a1
 8003614:	080036cd 	.word	0x080036cd
 8003618:	080036cd 	.word	0x080036cd
 800361c:	080036cd 	.word	0x080036cd
 8003620:	080036cd 	.word	0x080036cd
 8003624:	080036cd 	.word	0x080036cd
 8003628:	080036cd 	.word	0x080036cd
 800362c:	080036cd 	.word	0x080036cd
 8003630:	080036b7 	.word	0x080036b7
 8003634:	080036cd 	.word	0x080036cd
 8003638:	080036cd 	.word	0x080036cd
 800363c:	080036cd 	.word	0x080036cd
 8003640:	080036cd 	.word	0x080036cd
 8003644:	080036cd 	.word	0x080036cd
 8003648:	080036cd 	.word	0x080036cd
 800364c:	080036cd 	.word	0x080036cd
 8003650:	080036d5 	.word	0x080036d5
 8003654:	080036cd 	.word	0x080036cd
 8003658:	080036cd 	.word	0x080036cd
 800365c:	080036cd 	.word	0x080036cd
 8003660:	080036cd 	.word	0x080036cd
 8003664:	080036cd 	.word	0x080036cd
 8003668:	080036cd 	.word	0x080036cd
 800366c:	080036cd 	.word	0x080036cd
 8003670:	080036d5 	.word	0x080036d5
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036cd 	.word	0x080036cd
 800367c:	080036cd 	.word	0x080036cd
 8003680:	080036cd 	.word	0x080036cd
 8003684:	080036cd 	.word	0x080036cd
 8003688:	080036cd 	.word	0x080036cd
 800368c:	080036cd 	.word	0x080036cd
 8003690:	080036d5 	.word	0x080036d5
 8003694:	58024400 	.word	0x58024400
 8003698:	58024800 	.word	0x58024800
 800369c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a4:	3308      	adds	r3, #8
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 ffc5 	bl	8004638 <RCCEx_PLL2_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036b4:	e00f      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ba:	3328      	adds	r3, #40	; 0x28
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f86c 	bl	800479c <RCCEx_PLL3_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036ca:	e004      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80036d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036de:	4bc0      	ldr	r3, [pc, #768]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ee:	4abc      	ldr	r2, [pc, #752]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6553      	str	r3, [r2, #84]	; 0x54
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f002 0302 	and.w	r3, r2, #2
 800370a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003714:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003718:	460b      	mov	r3, r1
 800371a:	4313      	orrs	r3, r2
 800371c:	d043      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800371e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003726:	2b05      	cmp	r3, #5
 8003728:	d824      	bhi.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	0800377d 	.word	0x0800377d
 8003734:	08003749 	.word	0x08003749
 8003738:	0800375f 	.word	0x0800375f
 800373c:	0800377d 	.word	0x0800377d
 8003740:	0800377d 	.word	0x0800377d
 8003744:	0800377d 	.word	0x0800377d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374c:	3308      	adds	r3, #8
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 ff71 	bl	8004638 <RCCEx_PLL2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800375c:	e00f      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800375e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003762:	3328      	adds	r3, #40	; 0x28
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f818 	bl	800479c <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003772:	e004      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800377c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003786:	4b96      	ldr	r3, [pc, #600]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f023 0107 	bic.w	r1, r3, #7
 800378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003796:	4a92      	ldr	r2, [pc, #584]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003798:	430b      	orrs	r3, r1
 800379a:	6553      	str	r3, [r2, #84]	; 0x54
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f002 0304 	and.w	r3, r2, #4
 80037b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b6:	2300      	movs	r3, #0
 80037b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037bc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4313      	orrs	r3, r2
 80037c4:	d043      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d824      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	08003825 	.word	0x08003825
 80037dc:	080037f1 	.word	0x080037f1
 80037e0:	08003807 	.word	0x08003807
 80037e4:	08003825 	.word	0x08003825
 80037e8:	08003825 	.word	0x08003825
 80037ec:	08003825 	.word	0x08003825
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f4:	3308      	adds	r3, #8
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 ff1d 	bl	8004638 <RCCEx_PLL2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003804:	e00f      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380a:	3328      	adds	r3, #40	; 0x28
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 ffc4 	bl	800479c <RCCEx_PLL3_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800381a:	e004      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003826:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382e:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	f023 0107 	bic.w	r1, r3, #7
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800383e:	4a68      	ldr	r2, [pc, #416]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6593      	str	r3, [r2, #88]	; 0x58
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800384a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800384e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f002 0320 	and.w	r3, r2, #32
 800385a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d055      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800386e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800387a:	d033      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800387c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003880:	d82c      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d02f      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d826      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800388e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003892:	d02b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003894:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003898:	d820      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800389a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800389e:	d012      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d81a      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d022      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80038aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ae:	d115      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b4:	3308      	adds	r3, #8
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 febd 	bl	8004638 <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038c4:	e015      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ca:	3328      	adds	r3, #40	; 0x28
 80038cc:	2102      	movs	r1, #2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 ff64 	bl	800479c <RCCEx_PLL3_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038da:	e00a      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038e2:	e006      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80038e4:	bf00      	nop
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80038e8:	bf00      	nop
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80038f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038fa:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390a:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800390c:	430b      	orrs	r3, r1
 800390e:	6553      	str	r3, [r2, #84]	; 0x54
 8003910:	e003      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003912:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003916:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800391a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800392a:	2300      	movs	r3, #0
 800392c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003930:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003934:	460b      	mov	r3, r1
 8003936:	4313      	orrs	r3, r2
 8003938:	d058      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800393a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003942:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003946:	d033      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003948:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800394c:	d82c      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	d02f      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d826      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800395a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800395e:	d02b      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003964:	d820      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396a:	d012      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	d81a      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d022      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397a:	d115      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800397c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003980:	3308      	adds	r3, #8
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe57 	bl	8004638 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003990:	e015      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003996:	3328      	adds	r3, #40	; 0x28
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fefe 	bl	800479c <RCCEx_PLL3_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039a6:	e00a      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039ae:	e006      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039b0:	bf00      	nop
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039b4:	bf00      	nop
 80039b6:	e002      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10e      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80039ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039d6:	4a02      	ldr	r2, [pc, #8]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039d8:	430b      	orrs	r3, r1
 80039da:	6593      	str	r3, [r2, #88]	; 0x58
 80039dc:	e006      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80039de:	bf00      	nop
 80039e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80039ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80039f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d055      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a18:	d033      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003a1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a1e:	d82c      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d02f      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2a:	d826      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a30:	d02b      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003a32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a36:	d820      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a3c:	d012      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a42:	d81a      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d022      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4c:	d115      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a52:	3308      	adds	r3, #8
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fdee 	bl	8004638 <RCCEx_PLL2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a62:	e015      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a68:	3328      	adds	r3, #40	; 0x28
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fe95 	bl	800479c <RCCEx_PLL3_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a78:	e00a      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003a82:	bf00      	nop
 8003a84:	e004      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a98:	4ba1      	ldr	r3, [pc, #644]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aa8:	4a9d      	ldr	r2, [pc, #628]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	6593      	str	r3, [r2, #88]	; 0x58
 8003aae:	e003      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ab4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f002 0308 	and.w	r3, r2, #8
 8003ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ace:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d01e      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aea:	3328      	adds	r3, #40	; 0x28
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fe54 	bl	800479c <RCCEx_PLL3_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b00:	4b87      	ldr	r3, [pc, #540]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b10:	4a83      	ldr	r2, [pc, #524]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f002 0310 	and.w	r3, r2, #16
 8003b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b30:	460b      	mov	r3, r1
 8003b32:	4313      	orrs	r3, r2
 8003b34:	d01e      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b48:	3328      	adds	r3, #40	; 0x28
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fe25 	bl	800479c <RCCEx_PLL3_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b6e:	4a6c      	ldr	r2, [pc, #432]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4313      	orrs	r3, r2
 8003b92:	d03e      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba0:	d022      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba6:	d81b      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d00b      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003bb2:	e015      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb8:	3308      	adds	r3, #8
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fd3b 	bl	8004638 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bc8:	e00f      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bce:	3328      	adds	r3, #40	; 0x28
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fde2 	bl	800479c <RCCEx_PLL3_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bde:	e004      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf2:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c02:	4a47      	ldr	r2, [pc, #284]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6593      	str	r3, [r2, #88]	; 0x58
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003c1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c20:	2300      	movs	r3, #0
 8003c22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	d03b      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c3a:	d01f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c40:	d818      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c46:	d003      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c4c:	d007      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003c4e:	e011      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	4a32      	ldr	r2, [pc, #200]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c62:	3328      	adds	r3, #40	; 0x28
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fd98 	bl	800479c <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6553      	str	r3, [r2, #84]	; 0x54
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ca2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	677b      	str	r3, [r7, #116]	; 0x74
 8003cb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d034      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d007      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003cd2:	e011      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ce0:	e00e      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fca4 	bl	8004638 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	4a02      	ldr	r2, [pc, #8]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d1c:	e006      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003d1e:	bf00      	nop
 8003d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d00c      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4c:	3328      	adds	r3, #40	; 0x28
 8003d4e:	2102      	movs	r1, #2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fd23 	bl	800479c <RCCEx_PLL3_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d70:	2300      	movs	r3, #0
 8003d72:	667b      	str	r3, [r7, #100]	; 0x64
 8003d74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	d038      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8a:	d018      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d90:	d811      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d96:	d014      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9c:	d80b      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d011      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da6:	d106      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4bc3      	ldr	r3, [pc, #780]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4ac2      	ldr	r2, [pc, #776]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003db4:	e008      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dd0:	4bb9      	ldr	r3, [pc, #740]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	4ab5      	ldr	r2, [pc, #724]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6553      	str	r3, [r2, #84]	; 0x54
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dfe:	2300      	movs	r3, #0
 8003e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e0c:	4baa      	ldr	r3, [pc, #680]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1a:	4aa7      	ldr	r2, [pc, #668]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e2e:	2300      	movs	r3, #0
 8003e30:	657b      	str	r3, [r7, #84]	; 0x54
 8003e32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003e36:	460b      	mov	r3, r1
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e3c:	4b9e      	ldr	r3, [pc, #632]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a9b      	ldr	r2, [pc, #620]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5e:	2300      	movs	r3, #0
 8003e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e66:	460b      	mov	r3, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003e6c:	4b92      	ldr	r3, [pc, #584]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	4a8f      	ldr	r2, [pc, #572]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8e:	2300      	movs	r3, #0
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
 8003e92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e96:	460b      	mov	r3, r1
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e9c:	4b86      	ldr	r3, [pc, #536]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	4a85      	ldr	r2, [pc, #532]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ea6:	6113      	str	r3, [r2, #16]
 8003ea8:	4b83      	ldr	r3, [pc, #524]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eaa:	6919      	ldr	r1, [r3, #16]
 8003eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003eb4:	4a80      	ldr	r2, [pc, #512]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec8:	2300      	movs	r3, #0
 8003eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ecc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ed6:	4b78      	ldr	r3, [pc, #480]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	4a74      	ldr	r2, [pc, #464]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef8:	2300      	movs	r3, #0
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
 8003efc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003f00:	460b      	mov	r3, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f06:	4b6c      	ldr	r3, [pc, #432]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f16:	4a68      	ldr	r2, [pc, #416]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	2100      	movs	r1, #0
 8003f26:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d011      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fb79 	bl	8004638 <RCCEx_PLL2_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	2100      	movs	r1, #0
 8003f66:	6239      	str	r1, [r7, #32]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f72:	460b      	mov	r3, r1
 8003f74:	4313      	orrs	r3, r2
 8003f76:	d011      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fb59 	bl	8004638 <RCCEx_PLL2_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	61b9      	str	r1, [r7, #24]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	d011      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fb39 	bl	8004638 <RCCEx_PLL2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	6139      	str	r1, [r7, #16]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d011      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffc:	3328      	adds	r3, #40	; 0x28
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fbcb 	bl	800479c <RCCEx_PLL3_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800400c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004018:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	2100      	movs	r1, #0
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d011      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403c:	3328      	adds	r3, #40	; 0x28
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fbab 	bl	800479c <RCCEx_PLL3_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800404c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004058:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800405c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	2100      	movs	r1, #0
 8004066:	6039      	str	r1, [r7, #0]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d011      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407c:	3328      	adds	r3, #40	; 0x28
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fb8b 	bl	800479c <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800408c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004098:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800409c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80040b0:	46bd      	mov	sp, r7
 80040b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b6:	bf00      	nop
 80040b8:	58024400 	.word	0x58024400

080040bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80040c0:	f7fe fde2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4904      	ldr	r1, [pc, #16]	; (80040e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	58024400 	.word	0x58024400
 80040e4:	08007dc0 	.word	0x08007dc0

080040e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040f0:	4ba1      	ldr	r3, [pc, #644]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80040fa:	4b9f      	ldr	r3, [pc, #636]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	0b1b      	lsrs	r3, r3, #12
 8004100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004104:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004106:	4b9c      	ldr	r3, [pc, #624]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004112:	4b99      	ldr	r3, [pc, #612]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	08db      	lsrs	r3, r3, #3
 8004118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	fb02 f303 	mul.w	r3, r2, r3
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8111 	beq.w	8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b02      	cmp	r3, #2
 800413a:	f000 8083 	beq.w	8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b02      	cmp	r3, #2
 8004142:	f200 80a1 	bhi.w	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d056      	beq.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004152:	e099      	b.n	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004154:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02d      	beq.n	80041bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004160:	4b85      	ldr	r3, [pc, #532]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	4a84      	ldr	r2, [pc, #528]	; (800437c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
 8004170:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418a:	4b7b      	ldr	r3, [pc, #492]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419a:	ed97 6a03 	vldr	s12, [r7, #12]
 800419e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041ba:	e087      	b.n	80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041de:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041fe:	e065      	b.n	80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800420e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004212:	4b59      	ldr	r3, [pc, #356]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004222:	ed97 6a03 	vldr	s12, [r7, #12]
 8004226:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800422a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004242:	e043      	b.n	80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800438c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004256:	4b48      	ldr	r3, [pc, #288]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004266:	ed97 6a03 	vldr	s12, [r7, #12]
 800426a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800426e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800427a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004286:	e021      	b.n	80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429a:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	0a5b      	lsrs	r3, r3, #9
 80042d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f2:	ee17 2a90 	vmov	r2, s15
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80042fa:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004314:	edd7 6a07 	vldr	s13, [r7, #28]
 8004318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800431c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004320:	ee17 2a90 	vmov	r2, s15
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	0e1b      	lsrs	r3, r3, #24
 800432e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800433e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004342:	edd7 6a07 	vldr	s13, [r7, #28]
 8004346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800434a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434e:	ee17 2a90 	vmov	r2, s15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004356:	e008      	b.n	800436a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
}
 800436a:	bf00      	nop
 800436c:	3724      	adds	r7, #36	; 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	58024400 	.word	0x58024400
 800437c:	03d09000 	.word	0x03d09000
 8004380:	46000000 	.word	0x46000000
 8004384:	4c742400 	.word	0x4c742400
 8004388:	4a742400 	.word	0x4a742400
 800438c:	4af42400 	.word	0x4af42400

08004390 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004398:	4ba1      	ldr	r3, [pc, #644]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043a2:	4b9f      	ldr	r3, [pc, #636]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	0d1b      	lsrs	r3, r3, #20
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043ae:	4b9c      	ldr	r3, [pc, #624]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043ba:	4b99      	ldr	r3, [pc, #612]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	08db      	lsrs	r3, r3, #3
 80043c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8111 	beq.w	8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	f000 8083 	beq.w	80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	f200 80a1 	bhi.w	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d056      	beq.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043fa:	e099      	b.n	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043fc:	4b88      	ldr	r3, [pc, #544]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d02d      	beq.n	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004408:	4b85      	ldr	r3, [pc, #532]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	4a84      	ldr	r2, [pc, #528]	; (8004624 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	ee07 3a90 	vmov	s15, r3
 8004420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b7b      	ldr	r3, [pc, #492]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a03 	vldr	s12, [r7, #12]
 8004446:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004462:	e087      	b.n	8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800462c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a03 	vldr	s12, [r7, #12]
 800448a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044a6:	e065      	b.n	8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ba:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ea:	e043      	b.n	8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fe:	4b48      	ldr	r3, [pc, #288]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004512:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800452e:	e021      	b.n	8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800453e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004552:	ed97 6a03 	vldr	s12, [r7, #12]
 8004556:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800455a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004572:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004574:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	0a5b      	lsrs	r3, r3, #9
 800457a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800458e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 2a90 	vmov	r2, s15
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	0c1b      	lsrs	r3, r3, #16
 80045a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c8:	ee17 2a90 	vmov	r2, s15
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	0e1b      	lsrs	r3, r3, #24
 80045d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f6:	ee17 2a90 	vmov	r2, s15
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045fe:	e008      	b.n	8004612 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
}
 8004612:	bf00      	nop
 8004614:	3724      	adds	r7, #36	; 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	58024400 	.word	0x58024400
 8004624:	03d09000 	.word	0x03d09000
 8004628:	46000000 	.word	0x46000000
 800462c:	4c742400 	.word	0x4c742400
 8004630:	4a742400 	.word	0x4a742400
 8004634:	4af42400 	.word	0x4af42400

08004638 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004646:	4b53      	ldr	r3, [pc, #332]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b03      	cmp	r3, #3
 8004650:	d101      	bne.n	8004656 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e099      	b.n	800478a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004656:	4b4f      	ldr	r3, [pc, #316]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a4e      	ldr	r2, [pc, #312]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800465c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004662:	f7fd f831 	bl	80016c8 <HAL_GetTick>
 8004666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004668:	e008      	b.n	800467c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800466a:	f7fd f82d 	bl	80016c8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e086      	b.n	800478a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800467c:	4b45      	ldr	r3, [pc, #276]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f0      	bne.n	800466a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	493f      	ldr	r1, [pc, #252]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	628b      	str	r3, [r1, #40]	; 0x28
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	025b      	lsls	r3, r3, #9
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046cc:	4931      	ldr	r1, [pc, #196]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046d2:	4b30      	ldr	r3, [pc, #192]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	492d      	ldr	r1, [pc, #180]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	f023 0220 	bic.w	r2, r3, #32
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	4928      	ldr	r1, [pc, #160]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	f023 0310 	bic.w	r3, r3, #16
 8004700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004702:	4b24      	ldr	r3, [pc, #144]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <RCCEx_PLL2_Config+0x160>)
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	69d2      	ldr	r2, [r2, #28]
 800470e:	00d2      	lsls	r2, r2, #3
 8004710:	4920      	ldr	r1, [pc, #128]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004712:	4313      	orrs	r3, r2
 8004714:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004716:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800471c:	f043 0310 	orr.w	r3, r3, #16
 8004720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004728:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800472e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004732:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004734:	e00f      	b.n	8004756 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d106      	bne.n	800474a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800473c:	4b15      	ldr	r3, [pc, #84]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004746:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004748:	e005      	b.n	8004756 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	4a11      	ldr	r2, [pc, #68]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004754:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004756:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800475c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004762:	f7fc ffb1 	bl	80016c8 <HAL_GetTick>
 8004766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004768:	e008      	b.n	800477c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800476a:	f7fc ffad 	bl	80016c8 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e006      	b.n	800478a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <RCCEx_PLL2_Config+0x15c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	58024400 	.word	0x58024400
 8004798:	ffff0007 	.word	0xffff0007

0800479c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047aa:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d101      	bne.n	80047ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e099      	b.n	80048ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047ba:	4b4f      	ldr	r3, [pc, #316]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a4e      	ldr	r2, [pc, #312]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80047c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c6:	f7fc ff7f 	bl	80016c8 <HAL_GetTick>
 80047ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ce:	f7fc ff7b 	bl	80016c8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e086      	b.n	80048ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047e0:	4b45      	ldr	r3, [pc, #276]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047ec:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	051b      	lsls	r3, r3, #20
 80047fa:	493f      	ldr	r1, [pc, #252]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	3b01      	subs	r3, #1
 8004806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	3b01      	subs	r3, #1
 8004810:	025b      	lsls	r3, r3, #9
 8004812:	b29b      	uxth	r3, r3
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	041b      	lsls	r3, r3, #16
 800481e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	3b01      	subs	r3, #1
 800482a:	061b      	lsls	r3, r3, #24
 800482c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004830:	4931      	ldr	r1, [pc, #196]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004836:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	492d      	ldr	r1, [pc, #180]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004844:	4313      	orrs	r3, r2
 8004846:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004848:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4928      	ldr	r1, [pc, #160]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800485a:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004864:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <RCCEx_PLL3_Config+0x160>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	69d2      	ldr	r2, [r2, #28]
 8004872:	00d2      	lsls	r2, r2, #3
 8004874:	4920      	ldr	r1, [pc, #128]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800487a:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 8004892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004898:	e00f      	b.n	80048ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d106      	bne.n	80048ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048a0:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80048a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048ac:	e005      	b.n	80048ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80048b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c6:	f7fc feff 	bl	80016c8 <HAL_GetTick>
 80048ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048cc:	e008      	b.n	80048e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048ce:	f7fc fefb 	bl	80016c8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e006      	b.n	80048ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <RCCEx_PLL3_Config+0x15c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	58024400 	.word	0x58024400
 80048fc:	ffff0007 	.word	0xffff0007

08004900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e049      	b.n	80049a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fb9e 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 fd5a 	bl	80053f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d001      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e054      	b.n	8004a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f2:	d01d      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x80>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x80>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	; (8004a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x80>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x80>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x80>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x80>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d115      	bne.n	8004a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_TIM_Base_Start_IT+0xec>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d015      	beq.n	8004a6e <HAL_TIM_Base_Start_IT+0xbe>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d011      	beq.n	8004a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	e008      	b.n	8004a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e000      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40010400 	.word	0x40010400
 8004a94:	40001800 	.word	0x40001800
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	00010007 	.word	0x00010007

08004aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e049      	b.n	8004b46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f841 	bl	8004b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 fc8a 	bl	80053f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x24>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e03c      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d109      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x3e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e02f      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x58>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e022      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d109      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0x72>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e015      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d109      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x8c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e008      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0a1      	b.n	8004d4e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0xb6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	e023      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0xc6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c28:	e01b      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Start+0xd6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	e013      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_PWM_Start+0xe6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c48:	e00b      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_PWM_Start+0xf6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c58:	e003      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2201      	movs	r2, #1
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 ffde 	bl	8005c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <HAL_TIM_PWM_Start+0x1f4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a37      	ldr	r2, [pc, #220]	; (8004d5c <HAL_TIM_PWM_Start+0x1f8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a35      	ldr	r2, [pc, #212]	; (8004d60 <HAL_TIM_PWM_Start+0x1fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <HAL_TIM_PWM_Start+0x200>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a32      	ldr	r2, [pc, #200]	; (8004d68 <HAL_TIM_PWM_Start+0x204>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0x142>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_PWM_Start+0x144>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_TIM_PWM_Start+0x1f4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1a8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cce:	d01d      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1a8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <HAL_TIM_PWM_Start+0x208>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1a8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <HAL_TIM_PWM_Start+0x20c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1a8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <HAL_TIM_PWM_Start+0x210>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1a8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_TIM_PWM_Start+0x1f8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1a8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <HAL_TIM_PWM_Start+0x214>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1a8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIM_PWM_Start+0x1fc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d115      	bne.n	8004d38 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_TIM_PWM_Start+0x218>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d015      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x1e6>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d011      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e008      	b.n	8004d4a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e000      	b.n	8004d4c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40010400 	.word	0x40010400
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40014400 	.word	0x40014400
 8004d68:	40014800 	.word	0x40014800
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40001800 	.word	0x40001800
 8004d7c:	00010007 	.word	0x00010007

08004d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d020      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01b      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0202 	mvn.w	r2, #2
 8004db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 faf6 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fae8 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 faf9 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d020      	beq.n	8004e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0204 	mvn.w	r2, #4
 8004e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fad0 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fac2 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fad3 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d020      	beq.n	8004e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01b      	beq.n	8004e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0208 	mvn.w	r2, #8
 8004e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2204      	movs	r2, #4
 8004e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 faaa 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa9c 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 faad 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d020      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01b      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0210 	mvn.w	r2, #16
 8004e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa84 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa76 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fa87 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00c      	beq.n	8004eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0201 	mvn.w	r2, #1
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fb fe54 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 ff47 	bl	8005da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 ff3f 	bl	8005dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fa41 	bl	80053e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f06f 0220 	mvn.w	r2, #32
 8004f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 ff07 	bl	8005d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e0ff      	b.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b14      	cmp	r3, #20
 8004fba:	f200 80f0 	bhi.w	800519e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fbe:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	0800519f 	.word	0x0800519f
 8004fcc:	0800519f 	.word	0x0800519f
 8004fd0:	0800519f 	.word	0x0800519f
 8004fd4:	08005059 	.word	0x08005059
 8004fd8:	0800519f 	.word	0x0800519f
 8004fdc:	0800519f 	.word	0x0800519f
 8004fe0:	0800519f 	.word	0x0800519f
 8004fe4:	0800509b 	.word	0x0800509b
 8004fe8:	0800519f 	.word	0x0800519f
 8004fec:	0800519f 	.word	0x0800519f
 8004ff0:	0800519f 	.word	0x0800519f
 8004ff4:	080050db 	.word	0x080050db
 8004ff8:	0800519f 	.word	0x0800519f
 8004ffc:	0800519f 	.word	0x0800519f
 8005000:	0800519f 	.word	0x0800519f
 8005004:	0800511d 	.word	0x0800511d
 8005008:	0800519f 	.word	0x0800519f
 800500c:	0800519f 	.word	0x0800519f
 8005010:	0800519f 	.word	0x0800519f
 8005014:	0800515d 	.word	0x0800515d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fa90 	bl	8005544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0208 	orr.w	r2, r2, #8
 8005032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0204 	bic.w	r2, r2, #4
 8005042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6999      	ldr	r1, [r3, #24]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	619a      	str	r2, [r3, #24]
      break;
 8005056:	e0a5      	b.n	80051a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb00 	bl	8005664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6999      	ldr	r1, [r3, #24]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	021a      	lsls	r2, r3, #8
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	619a      	str	r2, [r3, #24]
      break;
 8005098:	e084      	b.n	80051a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fb69 	bl	8005778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0208 	orr.w	r2, r2, #8
 80050b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0204 	bic.w	r2, r2, #4
 80050c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69d9      	ldr	r1, [r3, #28]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	61da      	str	r2, [r3, #28]
      break;
 80050d8:	e064      	b.n	80051a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fbd1 	bl	8005888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69da      	ldr	r2, [r3, #28]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69d9      	ldr	r1, [r3, #28]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	021a      	lsls	r2, r3, #8
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	61da      	str	r2, [r3, #28]
      break;
 800511a:	e043      	b.n	80051a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc1a 	bl	800595c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0208 	orr.w	r2, r2, #8
 8005136:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0204 	bic.w	r2, r2, #4
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800515a:	e023      	b.n	80051a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fc5e 	bl	8005a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005176:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800519c:	e002      	b.n	80051a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
      break;
 80051a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop

080051b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_ConfigClockSource+0x1c>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e0dc      	b.n	800538e <HAL_TIM_ConfigClockSource+0x1d6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	4b6a      	ldr	r3, [pc, #424]	; (8005398 <HAL_TIM_ConfigClockSource+0x1e0>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a64      	ldr	r2, [pc, #400]	; (800539c <HAL_TIM_ConfigClockSource+0x1e4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	f000 80a9 	beq.w	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 8005210:	4a62      	ldr	r2, [pc, #392]	; (800539c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	f200 80ae 	bhi.w	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005218:	4a61      	ldr	r2, [pc, #388]	; (80053a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f000 80a1 	beq.w	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 8005220:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	f200 80a6 	bhi.w	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005228:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800522a:	4293      	cmp	r3, r2
 800522c:	f000 8099 	beq.w	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 8005230:	4a5c      	ldr	r2, [pc, #368]	; (80053a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f200 809e 	bhi.w	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005238:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800523c:	f000 8091 	beq.w	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 8005240:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005244:	f200 8096 	bhi.w	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524c:	f000 8089 	beq.w	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 8005250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005254:	f200 808e 	bhi.w	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525c:	d03e      	beq.n	80052dc <HAL_TIM_ConfigClockSource+0x124>
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005262:	f200 8087 	bhi.w	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	f000 8086 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1c2>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005272:	d87f      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005274:	2b70      	cmp	r3, #112	; 0x70
 8005276:	d01a      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0xf6>
 8005278:	2b70      	cmp	r3, #112	; 0x70
 800527a:	d87b      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 800527c:	2b60      	cmp	r3, #96	; 0x60
 800527e:	d050      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x16a>
 8005280:	2b60      	cmp	r3, #96	; 0x60
 8005282:	d877      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005284:	2b50      	cmp	r3, #80	; 0x50
 8005286:	d03c      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x14a>
 8005288:	2b50      	cmp	r3, #80	; 0x50
 800528a:	d873      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d058      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x18a>
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d86f      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d064      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 8005298:	2b30      	cmp	r3, #48	; 0x30
 800529a:	d86b      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 800529c:	2b20      	cmp	r3, #32
 800529e:	d060      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d867      	bhi.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d05c      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d05a      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x1aa>
 80052ac:	e062      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6899      	ldr	r1, [r3, #8]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f000 fc95 	bl	8005bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	609a      	str	r2, [r3, #8]
      break;
 80052da:	e04f      	b.n	800537c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6899      	ldr	r1, [r3, #8]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f000 fc7e 	bl	8005bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052fe:	609a      	str	r2, [r3, #8]
      break;
 8005300:	e03c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fbee 	bl	8005af0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2150      	movs	r1, #80	; 0x50
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fc48 	bl	8005bb0 <TIM_ITRx_SetConfig>
      break;
 8005320:	e02c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 fc0d 	bl	8005b4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2160      	movs	r1, #96	; 0x60
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fc38 	bl	8005bb0 <TIM_ITRx_SetConfig>
      break;
 8005340:	e01c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	461a      	mov	r2, r3
 8005350:	f000 fbce 	bl	8005af0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fc28 	bl	8005bb0 <TIM_ITRx_SetConfig>
      break;
 8005360:	e00c      	b.n	800537c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f000 fc1f 	bl	8005bb0 <TIM_ITRx_SetConfig>
      break;
 8005372:	e003      	b.n	800537c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      break;
 8005378:	e000      	b.n	800537c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800537a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	ffceff88 	.word	0xffceff88
 800539c:	00100040 	.word	0x00100040
 80053a0:	00100030 	.word	0x00100030
 80053a4:	00100020 	.word	0x00100020

080053a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a46      	ldr	r2, [pc, #280]	; (8005524 <TIM_Base_SetConfig+0x12c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005416:	d00f      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a43      	ldr	r2, [pc, #268]	; (8005528 <TIM_Base_SetConfig+0x130>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a42      	ldr	r2, [pc, #264]	; (800552c <TIM_Base_SetConfig+0x134>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a41      	ldr	r2, [pc, #260]	; (8005530 <TIM_Base_SetConfig+0x138>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a40      	ldr	r2, [pc, #256]	; (8005534 <TIM_Base_SetConfig+0x13c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d108      	bne.n	800544a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a35      	ldr	r2, [pc, #212]	; (8005524 <TIM_Base_SetConfig+0x12c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005458:	d01b      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a32      	ldr	r2, [pc, #200]	; (8005528 <TIM_Base_SetConfig+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d017      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a31      	ldr	r2, [pc, #196]	; (800552c <TIM_Base_SetConfig+0x134>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a30      	ldr	r2, [pc, #192]	; (8005530 <TIM_Base_SetConfig+0x138>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2f      	ldr	r2, [pc, #188]	; (8005534 <TIM_Base_SetConfig+0x13c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2e      	ldr	r2, [pc, #184]	; (8005538 <TIM_Base_SetConfig+0x140>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2d      	ldr	r2, [pc, #180]	; (800553c <TIM_Base_SetConfig+0x144>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x9a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <TIM_Base_SetConfig+0x148>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <TIM_Base_SetConfig+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <TIM_Base_SetConfig+0x13c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0xf8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <TIM_Base_SetConfig+0x140>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0xf8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <TIM_Base_SetConfig+0x144>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0xf8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a15      	ldr	r2, [pc, #84]	; (8005540 <TIM_Base_SetConfig+0x148>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d103      	bne.n	80054f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f023 0201 	bic.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]
  }
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40010400 	.word	0x40010400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800

08005544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f023 0201 	bic.w	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4b37      	ldr	r3, [pc, #220]	; (800564c <TIM_OC1_SetConfig+0x108>)
 8005570:	4013      	ands	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0302 	bic.w	r3, r3, #2
 800558c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <TIM_OC1_SetConfig+0x10c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00f      	beq.n	80055c0 <TIM_OC1_SetConfig+0x7c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <TIM_OC1_SetConfig+0x110>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <TIM_OC1_SetConfig+0x7c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <TIM_OC1_SetConfig+0x114>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_OC1_SetConfig+0x7c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a2a      	ldr	r2, [pc, #168]	; (800565c <TIM_OC1_SetConfig+0x118>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC1_SetConfig+0x7c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a29      	ldr	r2, [pc, #164]	; (8005660 <TIM_OC1_SetConfig+0x11c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10c      	bne.n	80055da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0308 	bic.w	r3, r3, #8
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <TIM_OC1_SetConfig+0x10c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00f      	beq.n	8005602 <TIM_OC1_SetConfig+0xbe>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a1b      	ldr	r2, [pc, #108]	; (8005654 <TIM_OC1_SetConfig+0x110>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00b      	beq.n	8005602 <TIM_OC1_SetConfig+0xbe>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <TIM_OC1_SetConfig+0x114>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <TIM_OC1_SetConfig+0xbe>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a19      	ldr	r2, [pc, #100]	; (800565c <TIM_OC1_SetConfig+0x118>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC1_SetConfig+0xbe>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a18      	ldr	r2, [pc, #96]	; (8005660 <TIM_OC1_SetConfig+0x11c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d111      	bne.n	8005626 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	fffeff8f 	.word	0xfffeff8f
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f023 0210 	bic.w	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4b34      	ldr	r3, [pc, #208]	; (8005760 <TIM_OC2_SetConfig+0xfc>)
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a29      	ldr	r2, [pc, #164]	; (8005764 <TIM_OC2_SetConfig+0x100>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC2_SetConfig+0x68>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a28      	ldr	r2, [pc, #160]	; (8005768 <TIM_OC2_SetConfig+0x104>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10d      	bne.n	80056e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a1e      	ldr	r2, [pc, #120]	; (8005764 <TIM_OC2_SetConfig+0x100>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_OC2_SetConfig+0xac>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <TIM_OC2_SetConfig+0x104>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_OC2_SetConfig+0xac>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a1c      	ldr	r2, [pc, #112]	; (800576c <TIM_OC2_SetConfig+0x108>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_OC2_SetConfig+0xac>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a1b      	ldr	r2, [pc, #108]	; (8005770 <TIM_OC2_SetConfig+0x10c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC2_SetConfig+0xac>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <TIM_OC2_SetConfig+0x110>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d113      	bne.n	8005738 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800571e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	feff8fff 	.word	0xfeff8fff
 8005764:	40010000 	.word	0x40010000
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4b33      	ldr	r3, [pc, #204]	; (8005870 <TIM_OC3_SetConfig+0xf8>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a28      	ldr	r2, [pc, #160]	; (8005874 <TIM_OC3_SetConfig+0xfc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_OC3_SetConfig+0x66>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a27      	ldr	r2, [pc, #156]	; (8005878 <TIM_OC3_SetConfig+0x100>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10d      	bne.n	80057fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <TIM_OC3_SetConfig+0xfc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00f      	beq.n	8005822 <TIM_OC3_SetConfig+0xaa>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <TIM_OC3_SetConfig+0x100>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00b      	beq.n	8005822 <TIM_OC3_SetConfig+0xaa>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <TIM_OC3_SetConfig+0x104>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d007      	beq.n	8005822 <TIM_OC3_SetConfig+0xaa>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <TIM_OC3_SetConfig+0x108>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_OC3_SetConfig+0xaa>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a19      	ldr	r2, [pc, #100]	; (8005884 <TIM_OC3_SetConfig+0x10c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d113      	bne.n	800584a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	fffeff8f 	.word	0xfffeff8f
 8005874:	40010000 	.word	0x40010000
 8005878:	40010400 	.word	0x40010400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <TIM_OC4_SetConfig+0xbc>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a19      	ldr	r2, [pc, #100]	; (8005948 <TIM_OC4_SetConfig+0xc0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00f      	beq.n	8005908 <TIM_OC4_SetConfig+0x80>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <TIM_OC4_SetConfig+0xc4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00b      	beq.n	8005908 <TIM_OC4_SetConfig+0x80>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a17      	ldr	r2, [pc, #92]	; (8005950 <TIM_OC4_SetConfig+0xc8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_OC4_SetConfig+0x80>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a16      	ldr	r2, [pc, #88]	; (8005954 <TIM_OC4_SetConfig+0xcc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC4_SetConfig+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a15      	ldr	r2, [pc, #84]	; (8005958 <TIM_OC4_SetConfig+0xd0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d109      	bne.n	800591c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800590e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	019b      	lsls	r3, r3, #6
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	feff8fff 	.word	0xfeff8fff
 8005948:	40010000 	.word	0x40010000
 800594c:	40010400 	.word	0x40010400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4b21      	ldr	r3, [pc, #132]	; (8005a0c <TIM_OC5_SetConfig+0xb0>)
 8005988:	4013      	ands	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800599c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <TIM_OC5_SetConfig+0xb4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <TIM_OC5_SetConfig+0x76>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <TIM_OC5_SetConfig+0xb8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <TIM_OC5_SetConfig+0x76>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <TIM_OC5_SetConfig+0xbc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <TIM_OC5_SetConfig+0x76>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <TIM_OC5_SetConfig+0xc0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_OC5_SetConfig+0x76>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <TIM_OC5_SetConfig+0xc4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d109      	bne.n	80059e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	621a      	str	r2, [r3, #32]
}
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	fffeff8f 	.word	0xfffeff8f
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40010400 	.word	0x40010400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800

08005a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4b22      	ldr	r3, [pc, #136]	; (8005ad8 <TIM_OC6_SetConfig+0xb4>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	051b      	lsls	r3, r3, #20
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a19      	ldr	r2, [pc, #100]	; (8005adc <TIM_OC6_SetConfig+0xb8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00f      	beq.n	8005a9c <TIM_OC6_SetConfig+0x78>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <TIM_OC6_SetConfig+0xbc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <TIM_OC6_SetConfig+0x78>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <TIM_OC6_SetConfig+0xc0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d007      	beq.n	8005a9c <TIM_OC6_SetConfig+0x78>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <TIM_OC6_SetConfig+0xc4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_OC6_SetConfig+0x78>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a15      	ldr	r2, [pc, #84]	; (8005aec <TIM_OC6_SetConfig+0xc8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d109      	bne.n	8005ab0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	feff8fff 	.word	0xfeff8fff
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 030a 	bic.w	r3, r3, #10
 8005b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f023 0210 	bic.w	r2, r3, #16
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	031b      	lsls	r3, r3, #12
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <TIM_ITRx_SetConfig+0x38>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f043 0307 	orr.w	r3, r3, #7
 8005bd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	609a      	str	r2, [r3, #8]
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	ffcfff8f 	.word	0xffcfff8f

08005bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	021a      	lsls	r2, r3, #8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	2201      	movs	r2, #1
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	fa01 f303 	lsl.w	r3, r1, r3
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e06d      	b.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a30      	ldr	r2, [pc, #192]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2f      	ldr	r2, [pc, #188]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d022      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d02:	d01d      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d018      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1a      	ldr	r2, [pc, #104]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00e      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a16      	ldr	r2, [pc, #88]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10c      	bne.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40001800 	.word	0x40001800
 8005d90:	40014000 	.word	0x40014000

08005d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e042      	b.n	8005e68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7fb fa3b 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2224      	movs	r2, #36	; 0x24
 8005dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0201 	bic.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 ff22 	bl	8006c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f8b3 	bl	8005f8c <UART_SetConfig>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e01b      	b.n	8005e68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 ffa1 	bl	8006da8 <UART_CheckIdleState>
 8005e66:	4603      	mov	r3, r0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d17b      	bne.n	8005f82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_Transmit+0x26>
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e074      	b.n	8005f84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2221      	movs	r2, #33	; 0x21
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eaa:	f7fb fc0d 	bl	80016c8 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec8:	d108      	bne.n	8005edc <HAL_UART_Transmit+0x6c>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e003      	b.n	8005ee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ee4:	e030      	b.n	8005f48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2200      	movs	r2, #0
 8005eee:	2180      	movs	r1, #128	; 0x80
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f001 f803 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e03d      	b.n	8005f84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	3302      	adds	r3, #2
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e007      	b.n	8005f36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	781a      	ldrb	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1c8      	bne.n	8005ee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 ffcc 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e006      	b.n	8005f84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e000      	b.n	8005f84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
  }
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f90:	b092      	sub	sp, #72	; 0x48
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4bbe      	ldr	r3, [pc, #760]	; (80062b4 <UART_SetConfig+0x328>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4ab3      	ldr	r2, [pc, #716]	; (80062b8 <UART_SetConfig+0x32c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	4baf      	ldr	r3, [pc, #700]	; (80062bc <UART_SetConfig+0x330>)
 8006000:	4013      	ands	r3, r2
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	6812      	ldr	r2, [r2, #0]
 8006006:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006008:	430b      	orrs	r3, r1
 800600a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	f023 010f 	bic.w	r1, r3, #15
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4aa6      	ldr	r2, [pc, #664]	; (80062c0 <UART_SetConfig+0x334>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d177      	bne.n	800611c <UART_SetConfig+0x190>
 800602c:	4ba5      	ldr	r3, [pc, #660]	; (80062c4 <UART_SetConfig+0x338>)
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006034:	2b28      	cmp	r3, #40	; 0x28
 8006036:	d86d      	bhi.n	8006114 <UART_SetConfig+0x188>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <UART_SetConfig+0xb4>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	080060e5 	.word	0x080060e5
 8006044:	08006115 	.word	0x08006115
 8006048:	08006115 	.word	0x08006115
 800604c:	08006115 	.word	0x08006115
 8006050:	08006115 	.word	0x08006115
 8006054:	08006115 	.word	0x08006115
 8006058:	08006115 	.word	0x08006115
 800605c:	08006115 	.word	0x08006115
 8006060:	080060ed 	.word	0x080060ed
 8006064:	08006115 	.word	0x08006115
 8006068:	08006115 	.word	0x08006115
 800606c:	08006115 	.word	0x08006115
 8006070:	08006115 	.word	0x08006115
 8006074:	08006115 	.word	0x08006115
 8006078:	08006115 	.word	0x08006115
 800607c:	08006115 	.word	0x08006115
 8006080:	080060f5 	.word	0x080060f5
 8006084:	08006115 	.word	0x08006115
 8006088:	08006115 	.word	0x08006115
 800608c:	08006115 	.word	0x08006115
 8006090:	08006115 	.word	0x08006115
 8006094:	08006115 	.word	0x08006115
 8006098:	08006115 	.word	0x08006115
 800609c:	08006115 	.word	0x08006115
 80060a0:	080060fd 	.word	0x080060fd
 80060a4:	08006115 	.word	0x08006115
 80060a8:	08006115 	.word	0x08006115
 80060ac:	08006115 	.word	0x08006115
 80060b0:	08006115 	.word	0x08006115
 80060b4:	08006115 	.word	0x08006115
 80060b8:	08006115 	.word	0x08006115
 80060bc:	08006115 	.word	0x08006115
 80060c0:	08006105 	.word	0x08006105
 80060c4:	08006115 	.word	0x08006115
 80060c8:	08006115 	.word	0x08006115
 80060cc:	08006115 	.word	0x08006115
 80060d0:	08006115 	.word	0x08006115
 80060d4:	08006115 	.word	0x08006115
 80060d8:	08006115 	.word	0x08006115
 80060dc:	08006115 	.word	0x08006115
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e326      	b.n	800673a <UART_SetConfig+0x7ae>
 80060ec:	2304      	movs	r3, #4
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f2:	e322      	b.n	800673a <UART_SetConfig+0x7ae>
 80060f4:	2308      	movs	r3, #8
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fa:	e31e      	b.n	800673a <UART_SetConfig+0x7ae>
 80060fc:	2310      	movs	r3, #16
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e31a      	b.n	800673a <UART_SetConfig+0x7ae>
 8006104:	2320      	movs	r3, #32
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e316      	b.n	800673a <UART_SetConfig+0x7ae>
 800610c:	2340      	movs	r3, #64	; 0x40
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e312      	b.n	800673a <UART_SetConfig+0x7ae>
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e30e      	b.n	800673a <UART_SetConfig+0x7ae>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a69      	ldr	r2, [pc, #420]	; (80062c8 <UART_SetConfig+0x33c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d130      	bne.n	8006188 <UART_SetConfig+0x1fc>
 8006126:	4b67      	ldr	r3, [pc, #412]	; (80062c4 <UART_SetConfig+0x338>)
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b05      	cmp	r3, #5
 8006130:	d826      	bhi.n	8006180 <UART_SetConfig+0x1f4>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x1ac>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006151 	.word	0x08006151
 800613c:	08006159 	.word	0x08006159
 8006140:	08006161 	.word	0x08006161
 8006144:	08006169 	.word	0x08006169
 8006148:	08006171 	.word	0x08006171
 800614c:	08006179 	.word	0x08006179
 8006150:	2300      	movs	r3, #0
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e2f0      	b.n	800673a <UART_SetConfig+0x7ae>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e2ec      	b.n	800673a <UART_SetConfig+0x7ae>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e2e8      	b.n	800673a <UART_SetConfig+0x7ae>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e2e4      	b.n	800673a <UART_SetConfig+0x7ae>
 8006170:	2320      	movs	r3, #32
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e2e0      	b.n	800673a <UART_SetConfig+0x7ae>
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e2dc      	b.n	800673a <UART_SetConfig+0x7ae>
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006186:	e2d8      	b.n	800673a <UART_SetConfig+0x7ae>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a4f      	ldr	r2, [pc, #316]	; (80062cc <UART_SetConfig+0x340>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d130      	bne.n	80061f4 <UART_SetConfig+0x268>
 8006192:	4b4c      	ldr	r3, [pc, #304]	; (80062c4 <UART_SetConfig+0x338>)
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	2b05      	cmp	r3, #5
 800619c:	d826      	bhi.n	80061ec <UART_SetConfig+0x260>
 800619e:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <UART_SetConfig+0x218>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061c5 	.word	0x080061c5
 80061ac:	080061cd 	.word	0x080061cd
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c2:	e2ba      	b.n	800673a <UART_SetConfig+0x7ae>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ca:	e2b6      	b.n	800673a <UART_SetConfig+0x7ae>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d2:	e2b2      	b.n	800673a <UART_SetConfig+0x7ae>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e2ae      	b.n	800673a <UART_SetConfig+0x7ae>
 80061dc:	2320      	movs	r3, #32
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e2aa      	b.n	800673a <UART_SetConfig+0x7ae>
 80061e4:	2340      	movs	r3, #64	; 0x40
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e2a6      	b.n	800673a <UART_SetConfig+0x7ae>
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e2a2      	b.n	800673a <UART_SetConfig+0x7ae>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a35      	ldr	r2, [pc, #212]	; (80062d0 <UART_SetConfig+0x344>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d130      	bne.n	8006260 <UART_SetConfig+0x2d4>
 80061fe:	4b31      	ldr	r3, [pc, #196]	; (80062c4 <UART_SetConfig+0x338>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b05      	cmp	r3, #5
 8006208:	d826      	bhi.n	8006258 <UART_SetConfig+0x2cc>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0x284>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006229 	.word	0x08006229
 8006214:	08006231 	.word	0x08006231
 8006218:	08006239 	.word	0x08006239
 800621c:	08006241 	.word	0x08006241
 8006220:	08006249 	.word	0x08006249
 8006224:	08006251 	.word	0x08006251
 8006228:	2300      	movs	r3, #0
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e284      	b.n	800673a <UART_SetConfig+0x7ae>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e280      	b.n	800673a <UART_SetConfig+0x7ae>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623e:	e27c      	b.n	800673a <UART_SetConfig+0x7ae>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006246:	e278      	b.n	800673a <UART_SetConfig+0x7ae>
 8006248:	2320      	movs	r3, #32
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e274      	b.n	800673a <UART_SetConfig+0x7ae>
 8006250:	2340      	movs	r3, #64	; 0x40
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e270      	b.n	800673a <UART_SetConfig+0x7ae>
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e26c      	b.n	800673a <UART_SetConfig+0x7ae>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <UART_SetConfig+0x348>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d142      	bne.n	80062f0 <UART_SetConfig+0x364>
 800626a:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <UART_SetConfig+0x338>)
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	2b05      	cmp	r3, #5
 8006274:	d838      	bhi.n	80062e8 <UART_SetConfig+0x35c>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <UART_SetConfig+0x2f0>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	08006295 	.word	0x08006295
 8006280:	0800629d 	.word	0x0800629d
 8006284:	080062a5 	.word	0x080062a5
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062d9 	.word	0x080062d9
 8006290:	080062e1 	.word	0x080062e1
 8006294:	2300      	movs	r3, #0
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e24e      	b.n	800673a <UART_SetConfig+0x7ae>
 800629c:	2304      	movs	r3, #4
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e24a      	b.n	800673a <UART_SetConfig+0x7ae>
 80062a4:	2308      	movs	r3, #8
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062aa:	e246      	b.n	800673a <UART_SetConfig+0x7ae>
 80062ac:	2310      	movs	r3, #16
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b2:	e242      	b.n	800673a <UART_SetConfig+0x7ae>
 80062b4:	cfff69f3 	.word	0xcfff69f3
 80062b8:	58000c00 	.word	0x58000c00
 80062bc:	11fff4ff 	.word	0x11fff4ff
 80062c0:	40011000 	.word	0x40011000
 80062c4:	58024400 	.word	0x58024400
 80062c8:	40004400 	.word	0x40004400
 80062cc:	40004800 	.word	0x40004800
 80062d0:	40004c00 	.word	0x40004c00
 80062d4:	40005000 	.word	0x40005000
 80062d8:	2320      	movs	r3, #32
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062de:	e22c      	b.n	800673a <UART_SetConfig+0x7ae>
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e6:	e228      	b.n	800673a <UART_SetConfig+0x7ae>
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ee:	e224      	b.n	800673a <UART_SetConfig+0x7ae>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4ab1      	ldr	r2, [pc, #708]	; (80065bc <UART_SetConfig+0x630>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d176      	bne.n	80063e8 <UART_SetConfig+0x45c>
 80062fa:	4bb1      	ldr	r3, [pc, #708]	; (80065c0 <UART_SetConfig+0x634>)
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006302:	2b28      	cmp	r3, #40	; 0x28
 8006304:	d86c      	bhi.n	80063e0 <UART_SetConfig+0x454>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0x380>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	080063b1 	.word	0x080063b1
 8006310:	080063e1 	.word	0x080063e1
 8006314:	080063e1 	.word	0x080063e1
 8006318:	080063e1 	.word	0x080063e1
 800631c:	080063e1 	.word	0x080063e1
 8006320:	080063e1 	.word	0x080063e1
 8006324:	080063e1 	.word	0x080063e1
 8006328:	080063e1 	.word	0x080063e1
 800632c:	080063b9 	.word	0x080063b9
 8006330:	080063e1 	.word	0x080063e1
 8006334:	080063e1 	.word	0x080063e1
 8006338:	080063e1 	.word	0x080063e1
 800633c:	080063e1 	.word	0x080063e1
 8006340:	080063e1 	.word	0x080063e1
 8006344:	080063e1 	.word	0x080063e1
 8006348:	080063e1 	.word	0x080063e1
 800634c:	080063c1 	.word	0x080063c1
 8006350:	080063e1 	.word	0x080063e1
 8006354:	080063e1 	.word	0x080063e1
 8006358:	080063e1 	.word	0x080063e1
 800635c:	080063e1 	.word	0x080063e1
 8006360:	080063e1 	.word	0x080063e1
 8006364:	080063e1 	.word	0x080063e1
 8006368:	080063e1 	.word	0x080063e1
 800636c:	080063c9 	.word	0x080063c9
 8006370:	080063e1 	.word	0x080063e1
 8006374:	080063e1 	.word	0x080063e1
 8006378:	080063e1 	.word	0x080063e1
 800637c:	080063e1 	.word	0x080063e1
 8006380:	080063e1 	.word	0x080063e1
 8006384:	080063e1 	.word	0x080063e1
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063d1 	.word	0x080063d1
 8006390:	080063e1 	.word	0x080063e1
 8006394:	080063e1 	.word	0x080063e1
 8006398:	080063e1 	.word	0x080063e1
 800639c:	080063e1 	.word	0x080063e1
 80063a0:	080063e1 	.word	0x080063e1
 80063a4:	080063e1 	.word	0x080063e1
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	080063d9 	.word	0x080063d9
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e1c0      	b.n	800673a <UART_SetConfig+0x7ae>
 80063b8:	2304      	movs	r3, #4
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e1bc      	b.n	800673a <UART_SetConfig+0x7ae>
 80063c0:	2308      	movs	r3, #8
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e1b8      	b.n	800673a <UART_SetConfig+0x7ae>
 80063c8:	2310      	movs	r3, #16
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e1b4      	b.n	800673a <UART_SetConfig+0x7ae>
 80063d0:	2320      	movs	r3, #32
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e1b0      	b.n	800673a <UART_SetConfig+0x7ae>
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e1ac      	b.n	800673a <UART_SetConfig+0x7ae>
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e1a8      	b.n	800673a <UART_SetConfig+0x7ae>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a75      	ldr	r2, [pc, #468]	; (80065c4 <UART_SetConfig+0x638>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d130      	bne.n	8006454 <UART_SetConfig+0x4c8>
 80063f2:	4b73      	ldr	r3, [pc, #460]	; (80065c0 <UART_SetConfig+0x634>)
 80063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d826      	bhi.n	800644c <UART_SetConfig+0x4c0>
 80063fe:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <UART_SetConfig+0x478>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	0800641d 	.word	0x0800641d
 8006408:	08006425 	.word	0x08006425
 800640c:	0800642d 	.word	0x0800642d
 8006410:	08006435 	.word	0x08006435
 8006414:	0800643d 	.word	0x0800643d
 8006418:	08006445 	.word	0x08006445
 800641c:	2300      	movs	r3, #0
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e18a      	b.n	800673a <UART_SetConfig+0x7ae>
 8006424:	2304      	movs	r3, #4
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e186      	b.n	800673a <UART_SetConfig+0x7ae>
 800642c:	2308      	movs	r3, #8
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e182      	b.n	800673a <UART_SetConfig+0x7ae>
 8006434:	2310      	movs	r3, #16
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e17e      	b.n	800673a <UART_SetConfig+0x7ae>
 800643c:	2320      	movs	r3, #32
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e17a      	b.n	800673a <UART_SetConfig+0x7ae>
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e176      	b.n	800673a <UART_SetConfig+0x7ae>
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e172      	b.n	800673a <UART_SetConfig+0x7ae>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a5b      	ldr	r2, [pc, #364]	; (80065c8 <UART_SetConfig+0x63c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d130      	bne.n	80064c0 <UART_SetConfig+0x534>
 800645e:	4b58      	ldr	r3, [pc, #352]	; (80065c0 <UART_SetConfig+0x634>)
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	2b05      	cmp	r3, #5
 8006468:	d826      	bhi.n	80064b8 <UART_SetConfig+0x52c>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0x4e4>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006489 	.word	0x08006489
 8006474:	08006491 	.word	0x08006491
 8006478:	08006499 	.word	0x08006499
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a9 	.word	0x080064a9
 8006484:	080064b1 	.word	0x080064b1
 8006488:	2300      	movs	r3, #0
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e154      	b.n	800673a <UART_SetConfig+0x7ae>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e150      	b.n	800673a <UART_SetConfig+0x7ae>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e14c      	b.n	800673a <UART_SetConfig+0x7ae>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e148      	b.n	800673a <UART_SetConfig+0x7ae>
 80064a8:	2320      	movs	r3, #32
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e144      	b.n	800673a <UART_SetConfig+0x7ae>
 80064b0:	2340      	movs	r3, #64	; 0x40
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e140      	b.n	800673a <UART_SetConfig+0x7ae>
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e13c      	b.n	800673a <UART_SetConfig+0x7ae>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a41      	ldr	r2, [pc, #260]	; (80065cc <UART_SetConfig+0x640>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	f040 8082 	bne.w	80065d0 <UART_SetConfig+0x644>
 80064cc:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <UART_SetConfig+0x634>)
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d4:	2b28      	cmp	r3, #40	; 0x28
 80064d6:	d86d      	bhi.n	80065b4 <UART_SetConfig+0x628>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <UART_SetConfig+0x554>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	08006585 	.word	0x08006585
 80064e4:	080065b5 	.word	0x080065b5
 80064e8:	080065b5 	.word	0x080065b5
 80064ec:	080065b5 	.word	0x080065b5
 80064f0:	080065b5 	.word	0x080065b5
 80064f4:	080065b5 	.word	0x080065b5
 80064f8:	080065b5 	.word	0x080065b5
 80064fc:	080065b5 	.word	0x080065b5
 8006500:	0800658d 	.word	0x0800658d
 8006504:	080065b5 	.word	0x080065b5
 8006508:	080065b5 	.word	0x080065b5
 800650c:	080065b5 	.word	0x080065b5
 8006510:	080065b5 	.word	0x080065b5
 8006514:	080065b5 	.word	0x080065b5
 8006518:	080065b5 	.word	0x080065b5
 800651c:	080065b5 	.word	0x080065b5
 8006520:	08006595 	.word	0x08006595
 8006524:	080065b5 	.word	0x080065b5
 8006528:	080065b5 	.word	0x080065b5
 800652c:	080065b5 	.word	0x080065b5
 8006530:	080065b5 	.word	0x080065b5
 8006534:	080065b5 	.word	0x080065b5
 8006538:	080065b5 	.word	0x080065b5
 800653c:	080065b5 	.word	0x080065b5
 8006540:	0800659d 	.word	0x0800659d
 8006544:	080065b5 	.word	0x080065b5
 8006548:	080065b5 	.word	0x080065b5
 800654c:	080065b5 	.word	0x080065b5
 8006550:	080065b5 	.word	0x080065b5
 8006554:	080065b5 	.word	0x080065b5
 8006558:	080065b5 	.word	0x080065b5
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065a5 	.word	0x080065a5
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080065b5 	.word	0x080065b5
 800656c:	080065b5 	.word	0x080065b5
 8006570:	080065b5 	.word	0x080065b5
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065b5 	.word	0x080065b5
 800657c:	080065b5 	.word	0x080065b5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658a:	e0d6      	b.n	800673a <UART_SetConfig+0x7ae>
 800658c:	2304      	movs	r3, #4
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006592:	e0d2      	b.n	800673a <UART_SetConfig+0x7ae>
 8006594:	2308      	movs	r3, #8
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659a:	e0ce      	b.n	800673a <UART_SetConfig+0x7ae>
 800659c:	2310      	movs	r3, #16
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a2:	e0ca      	b.n	800673a <UART_SetConfig+0x7ae>
 80065a4:	2320      	movs	r3, #32
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e0c6      	b.n	800673a <UART_SetConfig+0x7ae>
 80065ac:	2340      	movs	r3, #64	; 0x40
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e0c2      	b.n	800673a <UART_SetConfig+0x7ae>
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ba:	e0be      	b.n	800673a <UART_SetConfig+0x7ae>
 80065bc:	40011400 	.word	0x40011400
 80065c0:	58024400 	.word	0x58024400
 80065c4:	40007800 	.word	0x40007800
 80065c8:	40007c00 	.word	0x40007c00
 80065cc:	40011800 	.word	0x40011800
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4aad      	ldr	r2, [pc, #692]	; (800688c <UART_SetConfig+0x900>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d176      	bne.n	80066c8 <UART_SetConfig+0x73c>
 80065da:	4bad      	ldr	r3, [pc, #692]	; (8006890 <UART_SetConfig+0x904>)
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065e2:	2b28      	cmp	r3, #40	; 0x28
 80065e4:	d86c      	bhi.n	80066c0 <UART_SetConfig+0x734>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0x660>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006691 	.word	0x08006691
 80065f0:	080066c1 	.word	0x080066c1
 80065f4:	080066c1 	.word	0x080066c1
 80065f8:	080066c1 	.word	0x080066c1
 80065fc:	080066c1 	.word	0x080066c1
 8006600:	080066c1 	.word	0x080066c1
 8006604:	080066c1 	.word	0x080066c1
 8006608:	080066c1 	.word	0x080066c1
 800660c:	08006699 	.word	0x08006699
 8006610:	080066c1 	.word	0x080066c1
 8006614:	080066c1 	.word	0x080066c1
 8006618:	080066c1 	.word	0x080066c1
 800661c:	080066c1 	.word	0x080066c1
 8006620:	080066c1 	.word	0x080066c1
 8006624:	080066c1 	.word	0x080066c1
 8006628:	080066c1 	.word	0x080066c1
 800662c:	080066a1 	.word	0x080066a1
 8006630:	080066c1 	.word	0x080066c1
 8006634:	080066c1 	.word	0x080066c1
 8006638:	080066c1 	.word	0x080066c1
 800663c:	080066c1 	.word	0x080066c1
 8006640:	080066c1 	.word	0x080066c1
 8006644:	080066c1 	.word	0x080066c1
 8006648:	080066c1 	.word	0x080066c1
 800664c:	080066a9 	.word	0x080066a9
 8006650:	080066c1 	.word	0x080066c1
 8006654:	080066c1 	.word	0x080066c1
 8006658:	080066c1 	.word	0x080066c1
 800665c:	080066c1 	.word	0x080066c1
 8006660:	080066c1 	.word	0x080066c1
 8006664:	080066c1 	.word	0x080066c1
 8006668:	080066c1 	.word	0x080066c1
 800666c:	080066b1 	.word	0x080066b1
 8006670:	080066c1 	.word	0x080066c1
 8006674:	080066c1 	.word	0x080066c1
 8006678:	080066c1 	.word	0x080066c1
 800667c:	080066c1 	.word	0x080066c1
 8006680:	080066c1 	.word	0x080066c1
 8006684:	080066c1 	.word	0x080066c1
 8006688:	080066c1 	.word	0x080066c1
 800668c:	080066b9 	.word	0x080066b9
 8006690:	2301      	movs	r3, #1
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e050      	b.n	800673a <UART_SetConfig+0x7ae>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e04c      	b.n	800673a <UART_SetConfig+0x7ae>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e048      	b.n	800673a <UART_SetConfig+0x7ae>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e044      	b.n	800673a <UART_SetConfig+0x7ae>
 80066b0:	2320      	movs	r3, #32
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e040      	b.n	800673a <UART_SetConfig+0x7ae>
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e03c      	b.n	800673a <UART_SetConfig+0x7ae>
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e038      	b.n	800673a <UART_SetConfig+0x7ae>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a71      	ldr	r2, [pc, #452]	; (8006894 <UART_SetConfig+0x908>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d130      	bne.n	8006734 <UART_SetConfig+0x7a8>
 80066d2:	4b6f      	ldr	r3, [pc, #444]	; (8006890 <UART_SetConfig+0x904>)
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2b05      	cmp	r3, #5
 80066dc:	d826      	bhi.n	800672c <UART_SetConfig+0x7a0>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0x758>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	080066fd 	.word	0x080066fd
 80066e8:	08006705 	.word	0x08006705
 80066ec:	0800670d 	.word	0x0800670d
 80066f0:	08006715 	.word	0x08006715
 80066f4:	0800671d 	.word	0x0800671d
 80066f8:	08006725 	.word	0x08006725
 80066fc:	2302      	movs	r3, #2
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006702:	e01a      	b.n	800673a <UART_SetConfig+0x7ae>
 8006704:	2304      	movs	r3, #4
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e016      	b.n	800673a <UART_SetConfig+0x7ae>
 800670c:	2308      	movs	r3, #8
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e012      	b.n	800673a <UART_SetConfig+0x7ae>
 8006714:	2310      	movs	r3, #16
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671a:	e00e      	b.n	800673a <UART_SetConfig+0x7ae>
 800671c:	2320      	movs	r3, #32
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006722:	e00a      	b.n	800673a <UART_SetConfig+0x7ae>
 8006724:	2340      	movs	r3, #64	; 0x40
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672a:	e006      	b.n	800673a <UART_SetConfig+0x7ae>
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006732:	e002      	b.n	800673a <UART_SetConfig+0x7ae>
 8006734:	2380      	movs	r3, #128	; 0x80
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a55      	ldr	r2, [pc, #340]	; (8006894 <UART_SetConfig+0x908>)
 8006740:	4293      	cmp	r3, r2
 8006742:	f040 80f8 	bne.w	8006936 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800674a:	2b20      	cmp	r3, #32
 800674c:	dc46      	bgt.n	80067dc <UART_SetConfig+0x850>
 800674e:	2b02      	cmp	r3, #2
 8006750:	db75      	blt.n	800683e <UART_SetConfig+0x8b2>
 8006752:	3b02      	subs	r3, #2
 8006754:	2b1e      	cmp	r3, #30
 8006756:	d872      	bhi.n	800683e <UART_SetConfig+0x8b2>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x7d4>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	080067e3 	.word	0x080067e3
 8006764:	0800683f 	.word	0x0800683f
 8006768:	080067eb 	.word	0x080067eb
 800676c:	0800683f 	.word	0x0800683f
 8006770:	0800683f 	.word	0x0800683f
 8006774:	0800683f 	.word	0x0800683f
 8006778:	080067fb 	.word	0x080067fb
 800677c:	0800683f 	.word	0x0800683f
 8006780:	0800683f 	.word	0x0800683f
 8006784:	0800683f 	.word	0x0800683f
 8006788:	0800683f 	.word	0x0800683f
 800678c:	0800683f 	.word	0x0800683f
 8006790:	0800683f 	.word	0x0800683f
 8006794:	0800683f 	.word	0x0800683f
 8006798:	0800680b 	.word	0x0800680b
 800679c:	0800683f 	.word	0x0800683f
 80067a0:	0800683f 	.word	0x0800683f
 80067a4:	0800683f 	.word	0x0800683f
 80067a8:	0800683f 	.word	0x0800683f
 80067ac:	0800683f 	.word	0x0800683f
 80067b0:	0800683f 	.word	0x0800683f
 80067b4:	0800683f 	.word	0x0800683f
 80067b8:	0800683f 	.word	0x0800683f
 80067bc:	0800683f 	.word	0x0800683f
 80067c0:	0800683f 	.word	0x0800683f
 80067c4:	0800683f 	.word	0x0800683f
 80067c8:	0800683f 	.word	0x0800683f
 80067cc:	0800683f 	.word	0x0800683f
 80067d0:	0800683f 	.word	0x0800683f
 80067d4:	0800683f 	.word	0x0800683f
 80067d8:	08006831 	.word	0x08006831
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d02a      	beq.n	8006836 <UART_SetConfig+0x8aa>
 80067e0:	e02d      	b.n	800683e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80067e2:	f7fd fc6b 	bl	80040bc <HAL_RCCEx_GetD3PCLK1Freq>
 80067e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067e8:	e02f      	b.n	800684a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fd fc7a 	bl	80040e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f8:	e027      	b.n	800684a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067fa:	f107 0318 	add.w	r3, r7, #24
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fd fdc6 	bl	8004390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006808:	e01f      	b.n	800684a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800680a:	4b21      	ldr	r3, [pc, #132]	; (8006890 <UART_SetConfig+0x904>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006816:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <UART_SetConfig+0x904>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	08db      	lsrs	r3, r3, #3
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	4a1d      	ldr	r2, [pc, #116]	; (8006898 <UART_SetConfig+0x90c>)
 8006822:	fa22 f303 	lsr.w	r3, r2, r3
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006828:	e00f      	b.n	800684a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800682a:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <UART_SetConfig+0x90c>)
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800682e:	e00c      	b.n	800684a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <UART_SetConfig+0x910>)
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006834:	e009      	b.n	800684a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800683c:	e005      	b.n	800684a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 81ee 	beq.w	8006c2e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	4a12      	ldr	r2, [pc, #72]	; (80068a0 <UART_SetConfig+0x914>)
 8006858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800685c:	461a      	mov	r2, r3
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	fbb3 f3f2 	udiv	r3, r3, r2
 8006864:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	4413      	add	r3, r2
 8006870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006872:	429a      	cmp	r2, r3
 8006874:	d305      	bcc.n	8006882 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800687c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687e:	429a      	cmp	r2, r3
 8006880:	d910      	bls.n	80068a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006888:	e1d1      	b.n	8006c2e <UART_SetConfig+0xca2>
 800688a:	bf00      	nop
 800688c:	40011c00 	.word	0x40011c00
 8006890:	58024400 	.word	0x58024400
 8006894:	58000c00 	.word	0x58000c00
 8006898:	03d09000 	.word	0x03d09000
 800689c:	003d0900 	.word	0x003d0900
 80068a0:	08007dd0 	.word	0x08007dd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	2200      	movs	r2, #0
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	60fa      	str	r2, [r7, #12]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	4ac0      	ldr	r2, [pc, #768]	; (8006bb4 <UART_SetConfig+0xc28>)
 80068b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2200      	movs	r2, #0
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068c6:	f7f9 fd6b 	bl	80003a0 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	020b      	lsls	r3, r1, #8
 80068dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068e0:	0202      	lsls	r2, r0, #8
 80068e2:	6979      	ldr	r1, [r7, #20]
 80068e4:	6849      	ldr	r1, [r1, #4]
 80068e6:	0849      	lsrs	r1, r1, #1
 80068e8:	2000      	movs	r0, #0
 80068ea:	460c      	mov	r4, r1
 80068ec:	4605      	mov	r5, r0
 80068ee:	eb12 0804 	adds.w	r8, r2, r4
 80068f2:	eb43 0905 	adc.w	r9, r3, r5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	469a      	mov	sl, r3
 80068fe:	4693      	mov	fp, r2
 8006900:	4652      	mov	r2, sl
 8006902:	465b      	mov	r3, fp
 8006904:	4640      	mov	r0, r8
 8006906:	4649      	mov	r1, r9
 8006908:	f7f9 fd4a 	bl	80003a0 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691a:	d308      	bcc.n	800692e <UART_SetConfig+0x9a2>
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006922:	d204      	bcs.n	800692e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800692a:	60da      	str	r2, [r3, #12]
 800692c:	e17f      	b.n	8006c2e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006934:	e17b      	b.n	8006c2e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693e:	f040 80bd 	bne.w	8006abc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006942:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006946:	2b20      	cmp	r3, #32
 8006948:	dc48      	bgt.n	80069dc <UART_SetConfig+0xa50>
 800694a:	2b00      	cmp	r3, #0
 800694c:	db7b      	blt.n	8006a46 <UART_SetConfig+0xaba>
 800694e:	2b20      	cmp	r3, #32
 8006950:	d879      	bhi.n	8006a46 <UART_SetConfig+0xaba>
 8006952:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x9cc>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	080069e3 	.word	0x080069e3
 800695c:	080069eb 	.word	0x080069eb
 8006960:	08006a47 	.word	0x08006a47
 8006964:	08006a47 	.word	0x08006a47
 8006968:	080069f3 	.word	0x080069f3
 800696c:	08006a47 	.word	0x08006a47
 8006970:	08006a47 	.word	0x08006a47
 8006974:	08006a47 	.word	0x08006a47
 8006978:	08006a03 	.word	0x08006a03
 800697c:	08006a47 	.word	0x08006a47
 8006980:	08006a47 	.word	0x08006a47
 8006984:	08006a47 	.word	0x08006a47
 8006988:	08006a47 	.word	0x08006a47
 800698c:	08006a47 	.word	0x08006a47
 8006990:	08006a47 	.word	0x08006a47
 8006994:	08006a47 	.word	0x08006a47
 8006998:	08006a13 	.word	0x08006a13
 800699c:	08006a47 	.word	0x08006a47
 80069a0:	08006a47 	.word	0x08006a47
 80069a4:	08006a47 	.word	0x08006a47
 80069a8:	08006a47 	.word	0x08006a47
 80069ac:	08006a47 	.word	0x08006a47
 80069b0:	08006a47 	.word	0x08006a47
 80069b4:	08006a47 	.word	0x08006a47
 80069b8:	08006a47 	.word	0x08006a47
 80069bc:	08006a47 	.word	0x08006a47
 80069c0:	08006a47 	.word	0x08006a47
 80069c4:	08006a47 	.word	0x08006a47
 80069c8:	08006a47 	.word	0x08006a47
 80069cc:	08006a47 	.word	0x08006a47
 80069d0:	08006a47 	.word	0x08006a47
 80069d4:	08006a47 	.word	0x08006a47
 80069d8:	08006a39 	.word	0x08006a39
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d02e      	beq.n	8006a3e <UART_SetConfig+0xab2>
 80069e0:	e031      	b.n	8006a46 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e2:	f7fc f981 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 80069e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069e8:	e033      	b.n	8006a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ea:	f7fc f993 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 80069ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069f0:	e02f      	b.n	8006a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd fb76 	bl	80040e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a00:	e027      	b.n	8006a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a02:	f107 0318 	add.w	r3, r7, #24
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fd fcc2 	bl	8004390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a10:	e01f      	b.n	8006a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a12:	4b69      	ldr	r3, [pc, #420]	; (8006bb8 <UART_SetConfig+0xc2c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a1e:	4b66      	ldr	r3, [pc, #408]	; (8006bb8 <UART_SetConfig+0xc2c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	4a64      	ldr	r2, [pc, #400]	; (8006bbc <UART_SetConfig+0xc30>)
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a30:	e00f      	b.n	8006a52 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006a32:	4b62      	ldr	r3, [pc, #392]	; (8006bbc <UART_SetConfig+0xc30>)
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a36:	e00c      	b.n	8006a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a38:	4b61      	ldr	r3, [pc, #388]	; (8006bc0 <UART_SetConfig+0xc34>)
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80ea 	beq.w	8006c2e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	4a55      	ldr	r2, [pc, #340]	; (8006bb4 <UART_SetConfig+0xc28>)
 8006a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a6c:	005a      	lsls	r2, r3, #1
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	441a      	add	r2, r3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	2b0f      	cmp	r3, #15
 8006a84:	d916      	bls.n	8006ab4 <UART_SetConfig+0xb28>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8c:	d212      	bcs.n	8006ab4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f023 030f 	bic.w	r3, r3, #15
 8006a96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	085b      	lsrs	r3, r3, #1
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ab0:	60da      	str	r2, [r3, #12]
 8006ab2:	e0bc      	b.n	8006c2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006aba:	e0b8      	b.n	8006c2e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006abc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	dc4b      	bgt.n	8006b5c <UART_SetConfig+0xbd0>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f2c0 8087 	blt.w	8006bd8 <UART_SetConfig+0xc4c>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	f200 8084 	bhi.w	8006bd8 <UART_SetConfig+0xc4c>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <UART_SetConfig+0xb4c>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006b63 	.word	0x08006b63
 8006adc:	08006b6b 	.word	0x08006b6b
 8006ae0:	08006bd9 	.word	0x08006bd9
 8006ae4:	08006bd9 	.word	0x08006bd9
 8006ae8:	08006b73 	.word	0x08006b73
 8006aec:	08006bd9 	.word	0x08006bd9
 8006af0:	08006bd9 	.word	0x08006bd9
 8006af4:	08006bd9 	.word	0x08006bd9
 8006af8:	08006b83 	.word	0x08006b83
 8006afc:	08006bd9 	.word	0x08006bd9
 8006b00:	08006bd9 	.word	0x08006bd9
 8006b04:	08006bd9 	.word	0x08006bd9
 8006b08:	08006bd9 	.word	0x08006bd9
 8006b0c:	08006bd9 	.word	0x08006bd9
 8006b10:	08006bd9 	.word	0x08006bd9
 8006b14:	08006bd9 	.word	0x08006bd9
 8006b18:	08006b93 	.word	0x08006b93
 8006b1c:	08006bd9 	.word	0x08006bd9
 8006b20:	08006bd9 	.word	0x08006bd9
 8006b24:	08006bd9 	.word	0x08006bd9
 8006b28:	08006bd9 	.word	0x08006bd9
 8006b2c:	08006bd9 	.word	0x08006bd9
 8006b30:	08006bd9 	.word	0x08006bd9
 8006b34:	08006bd9 	.word	0x08006bd9
 8006b38:	08006bd9 	.word	0x08006bd9
 8006b3c:	08006bd9 	.word	0x08006bd9
 8006b40:	08006bd9 	.word	0x08006bd9
 8006b44:	08006bd9 	.word	0x08006bd9
 8006b48:	08006bd9 	.word	0x08006bd9
 8006b4c:	08006bd9 	.word	0x08006bd9
 8006b50:	08006bd9 	.word	0x08006bd9
 8006b54:	08006bd9 	.word	0x08006bd9
 8006b58:	08006bcb 	.word	0x08006bcb
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d037      	beq.n	8006bd0 <UART_SetConfig+0xc44>
 8006b60:	e03a      	b.n	8006bd8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b62:	f7fc f8c1 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8006b66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b68:	e03c      	b.n	8006be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6a:	f7fc f8d3 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 8006b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b70:	e038      	b.n	8006be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fd fab6 	bl	80040e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b80:	e030      	b.n	8006be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b82:	f107 0318 	add.w	r3, r7, #24
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fd fc02 	bl	8004390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b90:	e028      	b.n	8006be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <UART_SetConfig+0xc2c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d012      	beq.n	8006bc4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <UART_SetConfig+0xc2c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	08db      	lsrs	r3, r3, #3
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <UART_SetConfig+0xc30>)
 8006baa:	fa22 f303 	lsr.w	r3, r2, r3
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bb0:	e018      	b.n	8006be4 <UART_SetConfig+0xc58>
 8006bb2:	bf00      	nop
 8006bb4:	08007dd0 	.word	0x08007dd0
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	03d09000 	.word	0x03d09000
 8006bc0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006bc4:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <UART_SetConfig+0xccc>)
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bc8:	e00c      	b.n	8006be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bca:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <UART_SetConfig+0xcd0>)
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bce:	e009      	b.n	8006be4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd6:	e005      	b.n	8006be4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006be2:	bf00      	nop
    }

    if (pclk != 0U)
 8006be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d021      	beq.n	8006c2e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	4a1c      	ldr	r2, [pc, #112]	; (8006c60 <UART_SetConfig+0xcd4>)
 8006bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	441a      	add	r2, r3
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	2b0f      	cmp	r3, #15
 8006c12:	d909      	bls.n	8006c28 <UART_SetConfig+0xc9c>
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1a:	d205      	bcs.n	8006c28 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	e002      	b.n	8006c2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2200      	movs	r2, #0
 8006c42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2200      	movs	r2, #0
 8006c48:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3748      	adds	r7, #72	; 0x48
 8006c52:	46bd      	mov	sp, r7
 8006c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c58:	03d09000 	.word	0x03d09000
 8006c5c:	003d0900 	.word	0x003d0900
 8006c60:	08007dd0 	.word	0x08007dd0

08006c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01a      	beq.n	8006d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d62:	d10a      	bne.n	8006d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	605a      	str	r2, [r3, #4]
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b098      	sub	sp, #96	; 0x60
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006db8:	f7fa fc86 	bl	80016c8 <HAL_GetTick>
 8006dbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d12f      	bne.n	8006e2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f88e 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d022      	beq.n	8006e2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e04:	647b      	str	r3, [r7, #68]	; 0x44
 8006e06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e6      	bne.n	8006de6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e063      	b.n	8006ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d149      	bne.n	8006ece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e42:	2200      	movs	r2, #0
 8006e44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f857 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d03c      	beq.n	8006ece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	623b      	str	r3, [r7, #32]
   return(result);
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
 8006e74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e6      	bne.n	8006e54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea6:	61fa      	str	r2, [r7, #28]
 8006ea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	69b9      	ldr	r1, [r7, #24]
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e5      	bne.n	8006e86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e012      	b.n	8006ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3758      	adds	r7, #88	; 0x58
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0c:	e04f      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d04b      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f16:	f7fa fbd7 	bl	80016c8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d302      	bcc.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e04e      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d037      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b80      	cmp	r3, #128	; 0x80
 8006f42:	d034      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d031      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d110      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2208      	movs	r2, #8
 8006f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f839 	bl	8006fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e029      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f88:	d111      	bne.n	8006fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f81f 	bl	8006fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e00f      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d0a0      	beq.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b095      	sub	sp, #84	; 0x54
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8007000:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e6      	bne.n	8006fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	61fb      	str	r3, [r7, #28]
   return(result);
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	4b1e      	ldr	r3, [pc, #120]	; (80070a0 <UART_EndRxTransfer+0xc8>)
 8007026:	4013      	ands	r3, r2
 8007028:	64bb      	str	r3, [r7, #72]	; 0x48
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d118      	bne.n	8007080 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	60bb      	str	r3, [r7, #8]
   return(result);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f023 0310 	bic.w	r3, r3, #16
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	6979      	ldr	r1, [r7, #20]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	613b      	str	r3, [r7, #16]
   return(result);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e6      	bne.n	800704e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007094:	bf00      	nop
 8007096:	3754      	adds	r7, #84	; 0x54
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	effffffe 	.word	0xeffffffe

080070a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_UARTEx_DisableFifoMode+0x16>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e027      	b.n	800710a <HAL_UARTEx_DisableFifoMode+0x66>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2224      	movs	r2, #36	; 0x24
 80070c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800712a:	2302      	movs	r3, #2
 800712c:	e02d      	b.n	800718a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2224      	movs	r2, #36	; 0x24
 800713a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f850 	bl	8007210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e02d      	b.n	8007206 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2224      	movs	r2, #36	; 0x24
 80071b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0201 	bic.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f812 	bl	8007210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800721c:	2b00      	cmp	r3, #0
 800721e:	d108      	bne.n	8007232 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007230:	e031      	b.n	8007296 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007232:	2310      	movs	r3, #16
 8007234:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007236:	2310      	movs	r3, #16
 8007238:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	0e5b      	lsrs	r3, r3, #25
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	0f5b      	lsrs	r3, r3, #29
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	7b3a      	ldrb	r2, [r7, #12]
 800725e:	4911      	ldr	r1, [pc, #68]	; (80072a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007260:	5c8a      	ldrb	r2, [r1, r2]
 8007262:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007266:	7b3a      	ldrb	r2, [r7, #12]
 8007268:	490f      	ldr	r1, [pc, #60]	; (80072a8 <UARTEx_SetNbDataToProcess+0x98>)
 800726a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800726c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	7b7a      	ldrb	r2, [r7, #13]
 800727c:	4909      	ldr	r1, [pc, #36]	; (80072a4 <UARTEx_SetNbDataToProcess+0x94>)
 800727e:	5c8a      	ldrb	r2, [r1, r2]
 8007280:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007284:	7b7a      	ldrb	r2, [r7, #13]
 8007286:	4908      	ldr	r1, [pc, #32]	; (80072a8 <UARTEx_SetNbDataToProcess+0x98>)
 8007288:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800728a:	fb93 f3f2 	sdiv	r3, r3, r2
 800728e:	b29a      	uxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	08007de8 	.word	0x08007de8
 80072a8:	08007df0 	.word	0x08007df0

080072ac <__errno>:
 80072ac:	4b01      	ldr	r3, [pc, #4]	; (80072b4 <__errno+0x8>)
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	24000010 	.word	0x24000010

080072b8 <__libc_init_array>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	4d0d      	ldr	r5, [pc, #52]	; (80072f0 <__libc_init_array+0x38>)
 80072bc:	4c0d      	ldr	r4, [pc, #52]	; (80072f4 <__libc_init_array+0x3c>)
 80072be:	1b64      	subs	r4, r4, r5
 80072c0:	10a4      	asrs	r4, r4, #2
 80072c2:	2600      	movs	r6, #0
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	d109      	bne.n	80072dc <__libc_init_array+0x24>
 80072c8:	4d0b      	ldr	r5, [pc, #44]	; (80072f8 <__libc_init_array+0x40>)
 80072ca:	4c0c      	ldr	r4, [pc, #48]	; (80072fc <__libc_init_array+0x44>)
 80072cc:	f000 fc8e 	bl	8007bec <_init>
 80072d0:	1b64      	subs	r4, r4, r5
 80072d2:	10a4      	asrs	r4, r4, #2
 80072d4:	2600      	movs	r6, #0
 80072d6:	42a6      	cmp	r6, r4
 80072d8:	d105      	bne.n	80072e6 <__libc_init_array+0x2e>
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e0:	4798      	blx	r3
 80072e2:	3601      	adds	r6, #1
 80072e4:	e7ee      	b.n	80072c4 <__libc_init_array+0xc>
 80072e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ea:	4798      	blx	r3
 80072ec:	3601      	adds	r6, #1
 80072ee:	e7f2      	b.n	80072d6 <__libc_init_array+0x1e>
 80072f0:	08007e34 	.word	0x08007e34
 80072f4:	08007e34 	.word	0x08007e34
 80072f8:	08007e34 	.word	0x08007e34
 80072fc:	08007e38 	.word	0x08007e38

08007300 <memset>:
 8007300:	4402      	add	r2, r0
 8007302:	4603      	mov	r3, r0
 8007304:	4293      	cmp	r3, r2
 8007306:	d100      	bne.n	800730a <memset+0xa>
 8007308:	4770      	bx	lr
 800730a:	f803 1b01 	strb.w	r1, [r3], #1
 800730e:	e7f9      	b.n	8007304 <memset+0x4>

08007310 <siprintf>:
 8007310:	b40e      	push	{r1, r2, r3}
 8007312:	b500      	push	{lr}
 8007314:	b09c      	sub	sp, #112	; 0x70
 8007316:	ab1d      	add	r3, sp, #116	; 0x74
 8007318:	9002      	str	r0, [sp, #8]
 800731a:	9006      	str	r0, [sp, #24]
 800731c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007320:	4809      	ldr	r0, [pc, #36]	; (8007348 <siprintf+0x38>)
 8007322:	9107      	str	r1, [sp, #28]
 8007324:	9104      	str	r1, [sp, #16]
 8007326:	4909      	ldr	r1, [pc, #36]	; (800734c <siprintf+0x3c>)
 8007328:	f853 2b04 	ldr.w	r2, [r3], #4
 800732c:	9105      	str	r1, [sp, #20]
 800732e:	6800      	ldr	r0, [r0, #0]
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	a902      	add	r1, sp, #8
 8007334:	f000 f868 	bl	8007408 <_svfiprintf_r>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	b01c      	add	sp, #112	; 0x70
 8007340:	f85d eb04 	ldr.w	lr, [sp], #4
 8007344:	b003      	add	sp, #12
 8007346:	4770      	bx	lr
 8007348:	24000010 	.word	0x24000010
 800734c:	ffff0208 	.word	0xffff0208

08007350 <__ssputs_r>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	688e      	ldr	r6, [r1, #8]
 8007356:	429e      	cmp	r6, r3
 8007358:	4682      	mov	sl, r0
 800735a:	460c      	mov	r4, r1
 800735c:	4690      	mov	r8, r2
 800735e:	461f      	mov	r7, r3
 8007360:	d838      	bhi.n	80073d4 <__ssputs_r+0x84>
 8007362:	898a      	ldrh	r2, [r1, #12]
 8007364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007368:	d032      	beq.n	80073d0 <__ssputs_r+0x80>
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	6909      	ldr	r1, [r1, #16]
 800736e:	eba5 0901 	sub.w	r9, r5, r1
 8007372:	6965      	ldr	r5, [r4, #20]
 8007374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800737c:	3301      	adds	r3, #1
 800737e:	444b      	add	r3, r9
 8007380:	106d      	asrs	r5, r5, #1
 8007382:	429d      	cmp	r5, r3
 8007384:	bf38      	it	cc
 8007386:	461d      	movcc	r5, r3
 8007388:	0553      	lsls	r3, r2, #21
 800738a:	d531      	bpl.n	80073f0 <__ssputs_r+0xa0>
 800738c:	4629      	mov	r1, r5
 800738e:	f000 fb63 	bl	8007a58 <_malloc_r>
 8007392:	4606      	mov	r6, r0
 8007394:	b950      	cbnz	r0, 80073ac <__ssputs_r+0x5c>
 8007396:	230c      	movs	r3, #12
 8007398:	f8ca 3000 	str.w	r3, [sl]
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ac:	6921      	ldr	r1, [r4, #16]
 80073ae:	464a      	mov	r2, r9
 80073b0:	f000 fabe 	bl	8007930 <memcpy>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	6126      	str	r6, [r4, #16]
 80073c2:	6165      	str	r5, [r4, #20]
 80073c4:	444e      	add	r6, r9
 80073c6:	eba5 0509 	sub.w	r5, r5, r9
 80073ca:	6026      	str	r6, [r4, #0]
 80073cc:	60a5      	str	r5, [r4, #8]
 80073ce:	463e      	mov	r6, r7
 80073d0:	42be      	cmp	r6, r7
 80073d2:	d900      	bls.n	80073d6 <__ssputs_r+0x86>
 80073d4:	463e      	mov	r6, r7
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	4632      	mov	r2, r6
 80073da:	4641      	mov	r1, r8
 80073dc:	f000 fab6 	bl	800794c <memmove>
 80073e0:	68a3      	ldr	r3, [r4, #8]
 80073e2:	1b9b      	subs	r3, r3, r6
 80073e4:	60a3      	str	r3, [r4, #8]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	4433      	add	r3, r6
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	2000      	movs	r0, #0
 80073ee:	e7db      	b.n	80073a8 <__ssputs_r+0x58>
 80073f0:	462a      	mov	r2, r5
 80073f2:	f000 fba5 	bl	8007b40 <_realloc_r>
 80073f6:	4606      	mov	r6, r0
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d1e1      	bne.n	80073c0 <__ssputs_r+0x70>
 80073fc:	6921      	ldr	r1, [r4, #16]
 80073fe:	4650      	mov	r0, sl
 8007400:	f000 fabe 	bl	8007980 <_free_r>
 8007404:	e7c7      	b.n	8007396 <__ssputs_r+0x46>
	...

08007408 <_svfiprintf_r>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	4698      	mov	r8, r3
 800740e:	898b      	ldrh	r3, [r1, #12]
 8007410:	061b      	lsls	r3, r3, #24
 8007412:	b09d      	sub	sp, #116	; 0x74
 8007414:	4607      	mov	r7, r0
 8007416:	460d      	mov	r5, r1
 8007418:	4614      	mov	r4, r2
 800741a:	d50e      	bpl.n	800743a <_svfiprintf_r+0x32>
 800741c:	690b      	ldr	r3, [r1, #16]
 800741e:	b963      	cbnz	r3, 800743a <_svfiprintf_r+0x32>
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	f000 fb19 	bl	8007a58 <_malloc_r>
 8007426:	6028      	str	r0, [r5, #0]
 8007428:	6128      	str	r0, [r5, #16]
 800742a:	b920      	cbnz	r0, 8007436 <_svfiprintf_r+0x2e>
 800742c:	230c      	movs	r3, #12
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	e0d1      	b.n	80075da <_svfiprintf_r+0x1d2>
 8007436:	2340      	movs	r3, #64	; 0x40
 8007438:	616b      	str	r3, [r5, #20]
 800743a:	2300      	movs	r3, #0
 800743c:	9309      	str	r3, [sp, #36]	; 0x24
 800743e:	2320      	movs	r3, #32
 8007440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007444:	f8cd 800c 	str.w	r8, [sp, #12]
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075f4 <_svfiprintf_r+0x1ec>
 800744e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007452:	f04f 0901 	mov.w	r9, #1
 8007456:	4623      	mov	r3, r4
 8007458:	469a      	mov	sl, r3
 800745a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800745e:	b10a      	cbz	r2, 8007464 <_svfiprintf_r+0x5c>
 8007460:	2a25      	cmp	r2, #37	; 0x25
 8007462:	d1f9      	bne.n	8007458 <_svfiprintf_r+0x50>
 8007464:	ebba 0b04 	subs.w	fp, sl, r4
 8007468:	d00b      	beq.n	8007482 <_svfiprintf_r+0x7a>
 800746a:	465b      	mov	r3, fp
 800746c:	4622      	mov	r2, r4
 800746e:	4629      	mov	r1, r5
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff ff6d 	bl	8007350 <__ssputs_r>
 8007476:	3001      	adds	r0, #1
 8007478:	f000 80aa 	beq.w	80075d0 <_svfiprintf_r+0x1c8>
 800747c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800747e:	445a      	add	r2, fp
 8007480:	9209      	str	r2, [sp, #36]	; 0x24
 8007482:	f89a 3000 	ldrb.w	r3, [sl]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 80a2 	beq.w	80075d0 <_svfiprintf_r+0x1c8>
 800748c:	2300      	movs	r3, #0
 800748e:	f04f 32ff 	mov.w	r2, #4294967295
 8007492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007496:	f10a 0a01 	add.w	sl, sl, #1
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074a2:	931a      	str	r3, [sp, #104]	; 0x68
 80074a4:	4654      	mov	r4, sl
 80074a6:	2205      	movs	r2, #5
 80074a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ac:	4851      	ldr	r0, [pc, #324]	; (80075f4 <_svfiprintf_r+0x1ec>)
 80074ae:	f7f8 ff27 	bl	8000300 <memchr>
 80074b2:	9a04      	ldr	r2, [sp, #16]
 80074b4:	b9d8      	cbnz	r0, 80074ee <_svfiprintf_r+0xe6>
 80074b6:	06d0      	lsls	r0, r2, #27
 80074b8:	bf44      	itt	mi
 80074ba:	2320      	movmi	r3, #32
 80074bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c0:	0711      	lsls	r1, r2, #28
 80074c2:	bf44      	itt	mi
 80074c4:	232b      	movmi	r3, #43	; 0x2b
 80074c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ca:	f89a 3000 	ldrb.w	r3, [sl]
 80074ce:	2b2a      	cmp	r3, #42	; 0x2a
 80074d0:	d015      	beq.n	80074fe <_svfiprintf_r+0xf6>
 80074d2:	9a07      	ldr	r2, [sp, #28]
 80074d4:	4654      	mov	r4, sl
 80074d6:	2000      	movs	r0, #0
 80074d8:	f04f 0c0a 	mov.w	ip, #10
 80074dc:	4621      	mov	r1, r4
 80074de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e2:	3b30      	subs	r3, #48	; 0x30
 80074e4:	2b09      	cmp	r3, #9
 80074e6:	d94e      	bls.n	8007586 <_svfiprintf_r+0x17e>
 80074e8:	b1b0      	cbz	r0, 8007518 <_svfiprintf_r+0x110>
 80074ea:	9207      	str	r2, [sp, #28]
 80074ec:	e014      	b.n	8007518 <_svfiprintf_r+0x110>
 80074ee:	eba0 0308 	sub.w	r3, r0, r8
 80074f2:	fa09 f303 	lsl.w	r3, r9, r3
 80074f6:	4313      	orrs	r3, r2
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	46a2      	mov	sl, r4
 80074fc:	e7d2      	b.n	80074a4 <_svfiprintf_r+0x9c>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	1d19      	adds	r1, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9103      	str	r1, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfbb      	ittet	lt
 800750a:	425b      	neglt	r3, r3
 800750c:	f042 0202 	orrlt.w	r2, r2, #2
 8007510:	9307      	strge	r3, [sp, #28]
 8007512:	9307      	strlt	r3, [sp, #28]
 8007514:	bfb8      	it	lt
 8007516:	9204      	strlt	r2, [sp, #16]
 8007518:	7823      	ldrb	r3, [r4, #0]
 800751a:	2b2e      	cmp	r3, #46	; 0x2e
 800751c:	d10c      	bne.n	8007538 <_svfiprintf_r+0x130>
 800751e:	7863      	ldrb	r3, [r4, #1]
 8007520:	2b2a      	cmp	r3, #42	; 0x2a
 8007522:	d135      	bne.n	8007590 <_svfiprintf_r+0x188>
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	9203      	str	r2, [sp, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	bfb8      	it	lt
 8007530:	f04f 33ff 	movlt.w	r3, #4294967295
 8007534:	3402      	adds	r4, #2
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007604 <_svfiprintf_r+0x1fc>
 800753c:	7821      	ldrb	r1, [r4, #0]
 800753e:	2203      	movs	r2, #3
 8007540:	4650      	mov	r0, sl
 8007542:	f7f8 fedd 	bl	8000300 <memchr>
 8007546:	b140      	cbz	r0, 800755a <_svfiprintf_r+0x152>
 8007548:	2340      	movs	r3, #64	; 0x40
 800754a:	eba0 000a 	sub.w	r0, r0, sl
 800754e:	fa03 f000 	lsl.w	r0, r3, r0
 8007552:	9b04      	ldr	r3, [sp, #16]
 8007554:	4303      	orrs	r3, r0
 8007556:	3401      	adds	r4, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755e:	4826      	ldr	r0, [pc, #152]	; (80075f8 <_svfiprintf_r+0x1f0>)
 8007560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007564:	2206      	movs	r2, #6
 8007566:	f7f8 fecb 	bl	8000300 <memchr>
 800756a:	2800      	cmp	r0, #0
 800756c:	d038      	beq.n	80075e0 <_svfiprintf_r+0x1d8>
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <_svfiprintf_r+0x1f4>)
 8007570:	bb1b      	cbnz	r3, 80075ba <_svfiprintf_r+0x1b2>
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	3307      	adds	r3, #7
 8007576:	f023 0307 	bic.w	r3, r3, #7
 800757a:	3308      	adds	r3, #8
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007580:	4433      	add	r3, r6
 8007582:	9309      	str	r3, [sp, #36]	; 0x24
 8007584:	e767      	b.n	8007456 <_svfiprintf_r+0x4e>
 8007586:	fb0c 3202 	mla	r2, ip, r2, r3
 800758a:	460c      	mov	r4, r1
 800758c:	2001      	movs	r0, #1
 800758e:	e7a5      	b.n	80074dc <_svfiprintf_r+0xd4>
 8007590:	2300      	movs	r3, #0
 8007592:	3401      	adds	r4, #1
 8007594:	9305      	str	r3, [sp, #20]
 8007596:	4619      	mov	r1, r3
 8007598:	f04f 0c0a 	mov.w	ip, #10
 800759c:	4620      	mov	r0, r4
 800759e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a2:	3a30      	subs	r2, #48	; 0x30
 80075a4:	2a09      	cmp	r2, #9
 80075a6:	d903      	bls.n	80075b0 <_svfiprintf_r+0x1a8>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0c5      	beq.n	8007538 <_svfiprintf_r+0x130>
 80075ac:	9105      	str	r1, [sp, #20]
 80075ae:	e7c3      	b.n	8007538 <_svfiprintf_r+0x130>
 80075b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b4:	4604      	mov	r4, r0
 80075b6:	2301      	movs	r3, #1
 80075b8:	e7f0      	b.n	800759c <_svfiprintf_r+0x194>
 80075ba:	ab03      	add	r3, sp, #12
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	462a      	mov	r2, r5
 80075c0:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <_svfiprintf_r+0x1f8>)
 80075c2:	a904      	add	r1, sp, #16
 80075c4:	4638      	mov	r0, r7
 80075c6:	f3af 8000 	nop.w
 80075ca:	1c42      	adds	r2, r0, #1
 80075cc:	4606      	mov	r6, r0
 80075ce:	d1d6      	bne.n	800757e <_svfiprintf_r+0x176>
 80075d0:	89ab      	ldrh	r3, [r5, #12]
 80075d2:	065b      	lsls	r3, r3, #25
 80075d4:	f53f af2c 	bmi.w	8007430 <_svfiprintf_r+0x28>
 80075d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075da:	b01d      	add	sp, #116	; 0x74
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e0:	ab03      	add	r3, sp, #12
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4b06      	ldr	r3, [pc, #24]	; (8007600 <_svfiprintf_r+0x1f8>)
 80075e8:	a904      	add	r1, sp, #16
 80075ea:	4638      	mov	r0, r7
 80075ec:	f000 f87a 	bl	80076e4 <_printf_i>
 80075f0:	e7eb      	b.n	80075ca <_svfiprintf_r+0x1c2>
 80075f2:	bf00      	nop
 80075f4:	08007df8 	.word	0x08007df8
 80075f8:	08007e02 	.word	0x08007e02
 80075fc:	00000000 	.word	0x00000000
 8007600:	08007351 	.word	0x08007351
 8007604:	08007dfe 	.word	0x08007dfe

08007608 <_printf_common>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	4616      	mov	r6, r2
 800760e:	4699      	mov	r9, r3
 8007610:	688a      	ldr	r2, [r1, #8]
 8007612:	690b      	ldr	r3, [r1, #16]
 8007614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007618:	4293      	cmp	r3, r2
 800761a:	bfb8      	it	lt
 800761c:	4613      	movlt	r3, r2
 800761e:	6033      	str	r3, [r6, #0]
 8007620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007624:	4607      	mov	r7, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b10a      	cbz	r2, 800762e <_printf_common+0x26>
 800762a:	3301      	adds	r3, #1
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	0699      	lsls	r1, r3, #26
 8007632:	bf42      	ittt	mi
 8007634:	6833      	ldrmi	r3, [r6, #0]
 8007636:	3302      	addmi	r3, #2
 8007638:	6033      	strmi	r3, [r6, #0]
 800763a:	6825      	ldr	r5, [r4, #0]
 800763c:	f015 0506 	ands.w	r5, r5, #6
 8007640:	d106      	bne.n	8007650 <_printf_common+0x48>
 8007642:	f104 0a19 	add.w	sl, r4, #25
 8007646:	68e3      	ldr	r3, [r4, #12]
 8007648:	6832      	ldr	r2, [r6, #0]
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	42ab      	cmp	r3, r5
 800764e:	dc26      	bgt.n	800769e <_printf_common+0x96>
 8007650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007654:	1e13      	subs	r3, r2, #0
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	bf18      	it	ne
 800765a:	2301      	movne	r3, #1
 800765c:	0692      	lsls	r2, r2, #26
 800765e:	d42b      	bmi.n	80076b8 <_printf_common+0xb0>
 8007660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007664:	4649      	mov	r1, r9
 8007666:	4638      	mov	r0, r7
 8007668:	47c0      	blx	r8
 800766a:	3001      	adds	r0, #1
 800766c:	d01e      	beq.n	80076ac <_printf_common+0xa4>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	68e5      	ldr	r5, [r4, #12]
 8007672:	6832      	ldr	r2, [r6, #0]
 8007674:	f003 0306 	and.w	r3, r3, #6
 8007678:	2b04      	cmp	r3, #4
 800767a:	bf08      	it	eq
 800767c:	1aad      	subeq	r5, r5, r2
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	bf0c      	ite	eq
 8007684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007688:	2500      	movne	r5, #0
 800768a:	4293      	cmp	r3, r2
 800768c:	bfc4      	itt	gt
 800768e:	1a9b      	subgt	r3, r3, r2
 8007690:	18ed      	addgt	r5, r5, r3
 8007692:	2600      	movs	r6, #0
 8007694:	341a      	adds	r4, #26
 8007696:	42b5      	cmp	r5, r6
 8007698:	d11a      	bne.n	80076d0 <_printf_common+0xc8>
 800769a:	2000      	movs	r0, #0
 800769c:	e008      	b.n	80076b0 <_printf_common+0xa8>
 800769e:	2301      	movs	r3, #1
 80076a0:	4652      	mov	r2, sl
 80076a2:	4649      	mov	r1, r9
 80076a4:	4638      	mov	r0, r7
 80076a6:	47c0      	blx	r8
 80076a8:	3001      	adds	r0, #1
 80076aa:	d103      	bne.n	80076b4 <_printf_common+0xac>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b4:	3501      	adds	r5, #1
 80076b6:	e7c6      	b.n	8007646 <_printf_common+0x3e>
 80076b8:	18e1      	adds	r1, r4, r3
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	2030      	movs	r0, #48	; 0x30
 80076be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c2:	4422      	add	r2, r4
 80076c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076cc:	3302      	adds	r3, #2
 80076ce:	e7c7      	b.n	8007660 <_printf_common+0x58>
 80076d0:	2301      	movs	r3, #1
 80076d2:	4622      	mov	r2, r4
 80076d4:	4649      	mov	r1, r9
 80076d6:	4638      	mov	r0, r7
 80076d8:	47c0      	blx	r8
 80076da:	3001      	adds	r0, #1
 80076dc:	d0e6      	beq.n	80076ac <_printf_common+0xa4>
 80076de:	3601      	adds	r6, #1
 80076e0:	e7d9      	b.n	8007696 <_printf_common+0x8e>
	...

080076e4 <_printf_i>:
 80076e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	7e0f      	ldrb	r7, [r1, #24]
 80076ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076ec:	2f78      	cmp	r7, #120	; 0x78
 80076ee:	4691      	mov	r9, r2
 80076f0:	4680      	mov	r8, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	469a      	mov	sl, r3
 80076f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076fa:	d807      	bhi.n	800770c <_printf_i+0x28>
 80076fc:	2f62      	cmp	r7, #98	; 0x62
 80076fe:	d80a      	bhi.n	8007716 <_printf_i+0x32>
 8007700:	2f00      	cmp	r7, #0
 8007702:	f000 80d8 	beq.w	80078b6 <_printf_i+0x1d2>
 8007706:	2f58      	cmp	r7, #88	; 0x58
 8007708:	f000 80a3 	beq.w	8007852 <_printf_i+0x16e>
 800770c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007714:	e03a      	b.n	800778c <_printf_i+0xa8>
 8007716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800771a:	2b15      	cmp	r3, #21
 800771c:	d8f6      	bhi.n	800770c <_printf_i+0x28>
 800771e:	a101      	add	r1, pc, #4	; (adr r1, 8007724 <_printf_i+0x40>)
 8007720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007724:	0800777d 	.word	0x0800777d
 8007728:	08007791 	.word	0x08007791
 800772c:	0800770d 	.word	0x0800770d
 8007730:	0800770d 	.word	0x0800770d
 8007734:	0800770d 	.word	0x0800770d
 8007738:	0800770d 	.word	0x0800770d
 800773c:	08007791 	.word	0x08007791
 8007740:	0800770d 	.word	0x0800770d
 8007744:	0800770d 	.word	0x0800770d
 8007748:	0800770d 	.word	0x0800770d
 800774c:	0800770d 	.word	0x0800770d
 8007750:	0800789d 	.word	0x0800789d
 8007754:	080077c1 	.word	0x080077c1
 8007758:	0800787f 	.word	0x0800787f
 800775c:	0800770d 	.word	0x0800770d
 8007760:	0800770d 	.word	0x0800770d
 8007764:	080078bf 	.word	0x080078bf
 8007768:	0800770d 	.word	0x0800770d
 800776c:	080077c1 	.word	0x080077c1
 8007770:	0800770d 	.word	0x0800770d
 8007774:	0800770d 	.word	0x0800770d
 8007778:	08007887 	.word	0x08007887
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	602a      	str	r2, [r5, #0]
 8007784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800778c:	2301      	movs	r3, #1
 800778e:	e0a3      	b.n	80078d8 <_printf_i+0x1f4>
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	6829      	ldr	r1, [r5, #0]
 8007794:	0606      	lsls	r6, r0, #24
 8007796:	f101 0304 	add.w	r3, r1, #4
 800779a:	d50a      	bpl.n	80077b2 <_printf_i+0xce>
 800779c:	680e      	ldr	r6, [r1, #0]
 800779e:	602b      	str	r3, [r5, #0]
 80077a0:	2e00      	cmp	r6, #0
 80077a2:	da03      	bge.n	80077ac <_printf_i+0xc8>
 80077a4:	232d      	movs	r3, #45	; 0x2d
 80077a6:	4276      	negs	r6, r6
 80077a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ac:	485e      	ldr	r0, [pc, #376]	; (8007928 <_printf_i+0x244>)
 80077ae:	230a      	movs	r3, #10
 80077b0:	e019      	b.n	80077e6 <_printf_i+0x102>
 80077b2:	680e      	ldr	r6, [r1, #0]
 80077b4:	602b      	str	r3, [r5, #0]
 80077b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077ba:	bf18      	it	ne
 80077bc:	b236      	sxthne	r6, r6
 80077be:	e7ef      	b.n	80077a0 <_printf_i+0xbc>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	6820      	ldr	r0, [r4, #0]
 80077c4:	1d19      	adds	r1, r3, #4
 80077c6:	6029      	str	r1, [r5, #0]
 80077c8:	0601      	lsls	r1, r0, #24
 80077ca:	d501      	bpl.n	80077d0 <_printf_i+0xec>
 80077cc:	681e      	ldr	r6, [r3, #0]
 80077ce:	e002      	b.n	80077d6 <_printf_i+0xf2>
 80077d0:	0646      	lsls	r6, r0, #25
 80077d2:	d5fb      	bpl.n	80077cc <_printf_i+0xe8>
 80077d4:	881e      	ldrh	r6, [r3, #0]
 80077d6:	4854      	ldr	r0, [pc, #336]	; (8007928 <_printf_i+0x244>)
 80077d8:	2f6f      	cmp	r7, #111	; 0x6f
 80077da:	bf0c      	ite	eq
 80077dc:	2308      	moveq	r3, #8
 80077de:	230a      	movne	r3, #10
 80077e0:	2100      	movs	r1, #0
 80077e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077e6:	6865      	ldr	r5, [r4, #4]
 80077e8:	60a5      	str	r5, [r4, #8]
 80077ea:	2d00      	cmp	r5, #0
 80077ec:	bfa2      	ittt	ge
 80077ee:	6821      	ldrge	r1, [r4, #0]
 80077f0:	f021 0104 	bicge.w	r1, r1, #4
 80077f4:	6021      	strge	r1, [r4, #0]
 80077f6:	b90e      	cbnz	r6, 80077fc <_printf_i+0x118>
 80077f8:	2d00      	cmp	r5, #0
 80077fa:	d04d      	beq.n	8007898 <_printf_i+0x1b4>
 80077fc:	4615      	mov	r5, r2
 80077fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007802:	fb03 6711 	mls	r7, r3, r1, r6
 8007806:	5dc7      	ldrb	r7, [r0, r7]
 8007808:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800780c:	4637      	mov	r7, r6
 800780e:	42bb      	cmp	r3, r7
 8007810:	460e      	mov	r6, r1
 8007812:	d9f4      	bls.n	80077fe <_printf_i+0x11a>
 8007814:	2b08      	cmp	r3, #8
 8007816:	d10b      	bne.n	8007830 <_printf_i+0x14c>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	07de      	lsls	r6, r3, #31
 800781c:	d508      	bpl.n	8007830 <_printf_i+0x14c>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	6861      	ldr	r1, [r4, #4]
 8007822:	4299      	cmp	r1, r3
 8007824:	bfde      	ittt	le
 8007826:	2330      	movle	r3, #48	; 0x30
 8007828:	f805 3c01 	strble.w	r3, [r5, #-1]
 800782c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007830:	1b52      	subs	r2, r2, r5
 8007832:	6122      	str	r2, [r4, #16]
 8007834:	f8cd a000 	str.w	sl, [sp]
 8007838:	464b      	mov	r3, r9
 800783a:	aa03      	add	r2, sp, #12
 800783c:	4621      	mov	r1, r4
 800783e:	4640      	mov	r0, r8
 8007840:	f7ff fee2 	bl	8007608 <_printf_common>
 8007844:	3001      	adds	r0, #1
 8007846:	d14c      	bne.n	80078e2 <_printf_i+0x1fe>
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	b004      	add	sp, #16
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	4835      	ldr	r0, [pc, #212]	; (8007928 <_printf_i+0x244>)
 8007854:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007858:	6829      	ldr	r1, [r5, #0]
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007860:	6029      	str	r1, [r5, #0]
 8007862:	061d      	lsls	r5, r3, #24
 8007864:	d514      	bpl.n	8007890 <_printf_i+0x1ac>
 8007866:	07df      	lsls	r7, r3, #31
 8007868:	bf44      	itt	mi
 800786a:	f043 0320 	orrmi.w	r3, r3, #32
 800786e:	6023      	strmi	r3, [r4, #0]
 8007870:	b91e      	cbnz	r6, 800787a <_printf_i+0x196>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	f023 0320 	bic.w	r3, r3, #32
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	2310      	movs	r3, #16
 800787c:	e7b0      	b.n	80077e0 <_printf_i+0xfc>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f043 0320 	orr.w	r3, r3, #32
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	2378      	movs	r3, #120	; 0x78
 8007888:	4828      	ldr	r0, [pc, #160]	; (800792c <_printf_i+0x248>)
 800788a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800788e:	e7e3      	b.n	8007858 <_printf_i+0x174>
 8007890:	0659      	lsls	r1, r3, #25
 8007892:	bf48      	it	mi
 8007894:	b2b6      	uxthmi	r6, r6
 8007896:	e7e6      	b.n	8007866 <_printf_i+0x182>
 8007898:	4615      	mov	r5, r2
 800789a:	e7bb      	b.n	8007814 <_printf_i+0x130>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	6826      	ldr	r6, [r4, #0]
 80078a0:	6961      	ldr	r1, [r4, #20]
 80078a2:	1d18      	adds	r0, r3, #4
 80078a4:	6028      	str	r0, [r5, #0]
 80078a6:	0635      	lsls	r5, r6, #24
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	d501      	bpl.n	80078b0 <_printf_i+0x1cc>
 80078ac:	6019      	str	r1, [r3, #0]
 80078ae:	e002      	b.n	80078b6 <_printf_i+0x1d2>
 80078b0:	0670      	lsls	r0, r6, #25
 80078b2:	d5fb      	bpl.n	80078ac <_printf_i+0x1c8>
 80078b4:	8019      	strh	r1, [r3, #0]
 80078b6:	2300      	movs	r3, #0
 80078b8:	6123      	str	r3, [r4, #16]
 80078ba:	4615      	mov	r5, r2
 80078bc:	e7ba      	b.n	8007834 <_printf_i+0x150>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	602a      	str	r2, [r5, #0]
 80078c4:	681d      	ldr	r5, [r3, #0]
 80078c6:	6862      	ldr	r2, [r4, #4]
 80078c8:	2100      	movs	r1, #0
 80078ca:	4628      	mov	r0, r5
 80078cc:	f7f8 fd18 	bl	8000300 <memchr>
 80078d0:	b108      	cbz	r0, 80078d6 <_printf_i+0x1f2>
 80078d2:	1b40      	subs	r0, r0, r5
 80078d4:	6060      	str	r0, [r4, #4]
 80078d6:	6863      	ldr	r3, [r4, #4]
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	2300      	movs	r3, #0
 80078dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e0:	e7a8      	b.n	8007834 <_printf_i+0x150>
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	462a      	mov	r2, r5
 80078e6:	4649      	mov	r1, r9
 80078e8:	4640      	mov	r0, r8
 80078ea:	47d0      	blx	sl
 80078ec:	3001      	adds	r0, #1
 80078ee:	d0ab      	beq.n	8007848 <_printf_i+0x164>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	079b      	lsls	r3, r3, #30
 80078f4:	d413      	bmi.n	800791e <_printf_i+0x23a>
 80078f6:	68e0      	ldr	r0, [r4, #12]
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	4298      	cmp	r0, r3
 80078fc:	bfb8      	it	lt
 80078fe:	4618      	movlt	r0, r3
 8007900:	e7a4      	b.n	800784c <_printf_i+0x168>
 8007902:	2301      	movs	r3, #1
 8007904:	4632      	mov	r2, r6
 8007906:	4649      	mov	r1, r9
 8007908:	4640      	mov	r0, r8
 800790a:	47d0      	blx	sl
 800790c:	3001      	adds	r0, #1
 800790e:	d09b      	beq.n	8007848 <_printf_i+0x164>
 8007910:	3501      	adds	r5, #1
 8007912:	68e3      	ldr	r3, [r4, #12]
 8007914:	9903      	ldr	r1, [sp, #12]
 8007916:	1a5b      	subs	r3, r3, r1
 8007918:	42ab      	cmp	r3, r5
 800791a:	dcf2      	bgt.n	8007902 <_printf_i+0x21e>
 800791c:	e7eb      	b.n	80078f6 <_printf_i+0x212>
 800791e:	2500      	movs	r5, #0
 8007920:	f104 0619 	add.w	r6, r4, #25
 8007924:	e7f5      	b.n	8007912 <_printf_i+0x22e>
 8007926:	bf00      	nop
 8007928:	08007e09 	.word	0x08007e09
 800792c:	08007e1a 	.word	0x08007e1a

08007930 <memcpy>:
 8007930:	440a      	add	r2, r1
 8007932:	4291      	cmp	r1, r2
 8007934:	f100 33ff 	add.w	r3, r0, #4294967295
 8007938:	d100      	bne.n	800793c <memcpy+0xc>
 800793a:	4770      	bx	lr
 800793c:	b510      	push	{r4, lr}
 800793e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007946:	4291      	cmp	r1, r2
 8007948:	d1f9      	bne.n	800793e <memcpy+0xe>
 800794a:	bd10      	pop	{r4, pc}

0800794c <memmove>:
 800794c:	4288      	cmp	r0, r1
 800794e:	b510      	push	{r4, lr}
 8007950:	eb01 0402 	add.w	r4, r1, r2
 8007954:	d902      	bls.n	800795c <memmove+0x10>
 8007956:	4284      	cmp	r4, r0
 8007958:	4623      	mov	r3, r4
 800795a:	d807      	bhi.n	800796c <memmove+0x20>
 800795c:	1e43      	subs	r3, r0, #1
 800795e:	42a1      	cmp	r1, r4
 8007960:	d008      	beq.n	8007974 <memmove+0x28>
 8007962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800796a:	e7f8      	b.n	800795e <memmove+0x12>
 800796c:	4402      	add	r2, r0
 800796e:	4601      	mov	r1, r0
 8007970:	428a      	cmp	r2, r1
 8007972:	d100      	bne.n	8007976 <memmove+0x2a>
 8007974:	bd10      	pop	{r4, pc}
 8007976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800797a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800797e:	e7f7      	b.n	8007970 <memmove+0x24>

08007980 <_free_r>:
 8007980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007982:	2900      	cmp	r1, #0
 8007984:	d044      	beq.n	8007a10 <_free_r+0x90>
 8007986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800798a:	9001      	str	r0, [sp, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f1a1 0404 	sub.w	r4, r1, #4
 8007992:	bfb8      	it	lt
 8007994:	18e4      	addlt	r4, r4, r3
 8007996:	f000 f913 	bl	8007bc0 <__malloc_lock>
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <_free_r+0x94>)
 800799c:	9801      	ldr	r0, [sp, #4]
 800799e:	6813      	ldr	r3, [r2, #0]
 80079a0:	b933      	cbnz	r3, 80079b0 <_free_r+0x30>
 80079a2:	6063      	str	r3, [r4, #4]
 80079a4:	6014      	str	r4, [r2, #0]
 80079a6:	b003      	add	sp, #12
 80079a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ac:	f000 b90e 	b.w	8007bcc <__malloc_unlock>
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d908      	bls.n	80079c6 <_free_r+0x46>
 80079b4:	6825      	ldr	r5, [r4, #0]
 80079b6:	1961      	adds	r1, r4, r5
 80079b8:	428b      	cmp	r3, r1
 80079ba:	bf01      	itttt	eq
 80079bc:	6819      	ldreq	r1, [r3, #0]
 80079be:	685b      	ldreq	r3, [r3, #4]
 80079c0:	1949      	addeq	r1, r1, r5
 80079c2:	6021      	streq	r1, [r4, #0]
 80079c4:	e7ed      	b.n	80079a2 <_free_r+0x22>
 80079c6:	461a      	mov	r2, r3
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	b10b      	cbz	r3, 80079d0 <_free_r+0x50>
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	d9fa      	bls.n	80079c6 <_free_r+0x46>
 80079d0:	6811      	ldr	r1, [r2, #0]
 80079d2:	1855      	adds	r5, r2, r1
 80079d4:	42a5      	cmp	r5, r4
 80079d6:	d10b      	bne.n	80079f0 <_free_r+0x70>
 80079d8:	6824      	ldr	r4, [r4, #0]
 80079da:	4421      	add	r1, r4
 80079dc:	1854      	adds	r4, r2, r1
 80079de:	42a3      	cmp	r3, r4
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	d1e0      	bne.n	80079a6 <_free_r+0x26>
 80079e4:	681c      	ldr	r4, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	6053      	str	r3, [r2, #4]
 80079ea:	4421      	add	r1, r4
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	e7da      	b.n	80079a6 <_free_r+0x26>
 80079f0:	d902      	bls.n	80079f8 <_free_r+0x78>
 80079f2:	230c      	movs	r3, #12
 80079f4:	6003      	str	r3, [r0, #0]
 80079f6:	e7d6      	b.n	80079a6 <_free_r+0x26>
 80079f8:	6825      	ldr	r5, [r4, #0]
 80079fa:	1961      	adds	r1, r4, r5
 80079fc:	428b      	cmp	r3, r1
 80079fe:	bf04      	itt	eq
 8007a00:	6819      	ldreq	r1, [r3, #0]
 8007a02:	685b      	ldreq	r3, [r3, #4]
 8007a04:	6063      	str	r3, [r4, #4]
 8007a06:	bf04      	itt	eq
 8007a08:	1949      	addeq	r1, r1, r5
 8007a0a:	6021      	streq	r1, [r4, #0]
 8007a0c:	6054      	str	r4, [r2, #4]
 8007a0e:	e7ca      	b.n	80079a6 <_free_r+0x26>
 8007a10:	b003      	add	sp, #12
 8007a12:	bd30      	pop	{r4, r5, pc}
 8007a14:	2400066c 	.word	0x2400066c

08007a18 <sbrk_aligned>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4e0e      	ldr	r6, [pc, #56]	; (8007a54 <sbrk_aligned+0x3c>)
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	6831      	ldr	r1, [r6, #0]
 8007a20:	4605      	mov	r5, r0
 8007a22:	b911      	cbnz	r1, 8007a2a <sbrk_aligned+0x12>
 8007a24:	f000 f8bc 	bl	8007ba0 <_sbrk_r>
 8007a28:	6030      	str	r0, [r6, #0]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f8b7 	bl	8007ba0 <_sbrk_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d00a      	beq.n	8007a4c <sbrk_aligned+0x34>
 8007a36:	1cc4      	adds	r4, r0, #3
 8007a38:	f024 0403 	bic.w	r4, r4, #3
 8007a3c:	42a0      	cmp	r0, r4
 8007a3e:	d007      	beq.n	8007a50 <sbrk_aligned+0x38>
 8007a40:	1a21      	subs	r1, r4, r0
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f8ac 	bl	8007ba0 <_sbrk_r>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d101      	bne.n	8007a50 <sbrk_aligned+0x38>
 8007a4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a50:	4620      	mov	r0, r4
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	24000670 	.word	0x24000670

08007a58 <_malloc_r>:
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	1ccd      	adds	r5, r1, #3
 8007a5e:	f025 0503 	bic.w	r5, r5, #3
 8007a62:	3508      	adds	r5, #8
 8007a64:	2d0c      	cmp	r5, #12
 8007a66:	bf38      	it	cc
 8007a68:	250c      	movcc	r5, #12
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	db01      	blt.n	8007a74 <_malloc_r+0x1c>
 8007a70:	42a9      	cmp	r1, r5
 8007a72:	d905      	bls.n	8007a80 <_malloc_r+0x28>
 8007a74:	230c      	movs	r3, #12
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	2600      	movs	r6, #0
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a80:	4e2e      	ldr	r6, [pc, #184]	; (8007b3c <_malloc_r+0xe4>)
 8007a82:	f000 f89d 	bl	8007bc0 <__malloc_lock>
 8007a86:	6833      	ldr	r3, [r6, #0]
 8007a88:	461c      	mov	r4, r3
 8007a8a:	bb34      	cbnz	r4, 8007ada <_malloc_r+0x82>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f7ff ffc2 	bl	8007a18 <sbrk_aligned>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	4604      	mov	r4, r0
 8007a98:	d14d      	bne.n	8007b36 <_malloc_r+0xde>
 8007a9a:	6834      	ldr	r4, [r6, #0]
 8007a9c:	4626      	mov	r6, r4
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	d140      	bne.n	8007b24 <_malloc_r+0xcc>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	eb04 0803 	add.w	r8, r4, r3
 8007aac:	f000 f878 	bl	8007ba0 <_sbrk_r>
 8007ab0:	4580      	cmp	r8, r0
 8007ab2:	d13a      	bne.n	8007b2a <_malloc_r+0xd2>
 8007ab4:	6821      	ldr	r1, [r4, #0]
 8007ab6:	3503      	adds	r5, #3
 8007ab8:	1a6d      	subs	r5, r5, r1
 8007aba:	f025 0503 	bic.w	r5, r5, #3
 8007abe:	3508      	adds	r5, #8
 8007ac0:	2d0c      	cmp	r5, #12
 8007ac2:	bf38      	it	cc
 8007ac4:	250c      	movcc	r5, #12
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7ff ffa5 	bl	8007a18 <sbrk_aligned>
 8007ace:	3001      	adds	r0, #1
 8007ad0:	d02b      	beq.n	8007b2a <_malloc_r+0xd2>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	442b      	add	r3, r5
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	e00e      	b.n	8007af8 <_malloc_r+0xa0>
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	1b52      	subs	r2, r2, r5
 8007ade:	d41e      	bmi.n	8007b1e <_malloc_r+0xc6>
 8007ae0:	2a0b      	cmp	r2, #11
 8007ae2:	d916      	bls.n	8007b12 <_malloc_r+0xba>
 8007ae4:	1961      	adds	r1, r4, r5
 8007ae6:	42a3      	cmp	r3, r4
 8007ae8:	6025      	str	r5, [r4, #0]
 8007aea:	bf18      	it	ne
 8007aec:	6059      	strne	r1, [r3, #4]
 8007aee:	6863      	ldr	r3, [r4, #4]
 8007af0:	bf08      	it	eq
 8007af2:	6031      	streq	r1, [r6, #0]
 8007af4:	5162      	str	r2, [r4, r5]
 8007af6:	604b      	str	r3, [r1, #4]
 8007af8:	4638      	mov	r0, r7
 8007afa:	f104 060b 	add.w	r6, r4, #11
 8007afe:	f000 f865 	bl	8007bcc <__malloc_unlock>
 8007b02:	f026 0607 	bic.w	r6, r6, #7
 8007b06:	1d23      	adds	r3, r4, #4
 8007b08:	1af2      	subs	r2, r6, r3
 8007b0a:	d0b6      	beq.n	8007a7a <_malloc_r+0x22>
 8007b0c:	1b9b      	subs	r3, r3, r6
 8007b0e:	50a3      	str	r3, [r4, r2]
 8007b10:	e7b3      	b.n	8007a7a <_malloc_r+0x22>
 8007b12:	6862      	ldr	r2, [r4, #4]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	bf0c      	ite	eq
 8007b18:	6032      	streq	r2, [r6, #0]
 8007b1a:	605a      	strne	r2, [r3, #4]
 8007b1c:	e7ec      	b.n	8007af8 <_malloc_r+0xa0>
 8007b1e:	4623      	mov	r3, r4
 8007b20:	6864      	ldr	r4, [r4, #4]
 8007b22:	e7b2      	b.n	8007a8a <_malloc_r+0x32>
 8007b24:	4634      	mov	r4, r6
 8007b26:	6876      	ldr	r6, [r6, #4]
 8007b28:	e7b9      	b.n	8007a9e <_malloc_r+0x46>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f000 f84c 	bl	8007bcc <__malloc_unlock>
 8007b34:	e7a1      	b.n	8007a7a <_malloc_r+0x22>
 8007b36:	6025      	str	r5, [r4, #0]
 8007b38:	e7de      	b.n	8007af8 <_malloc_r+0xa0>
 8007b3a:	bf00      	nop
 8007b3c:	2400066c 	.word	0x2400066c

08007b40 <_realloc_r>:
 8007b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b44:	4680      	mov	r8, r0
 8007b46:	4614      	mov	r4, r2
 8007b48:	460e      	mov	r6, r1
 8007b4a:	b921      	cbnz	r1, 8007b56 <_realloc_r+0x16>
 8007b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b50:	4611      	mov	r1, r2
 8007b52:	f7ff bf81 	b.w	8007a58 <_malloc_r>
 8007b56:	b92a      	cbnz	r2, 8007b64 <_realloc_r+0x24>
 8007b58:	f7ff ff12 	bl	8007980 <_free_r>
 8007b5c:	4625      	mov	r5, r4
 8007b5e:	4628      	mov	r0, r5
 8007b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b64:	f000 f838 	bl	8007bd8 <_malloc_usable_size_r>
 8007b68:	4284      	cmp	r4, r0
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	d802      	bhi.n	8007b74 <_realloc_r+0x34>
 8007b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b72:	d812      	bhi.n	8007b9a <_realloc_r+0x5a>
 8007b74:	4621      	mov	r1, r4
 8007b76:	4640      	mov	r0, r8
 8007b78:	f7ff ff6e 	bl	8007a58 <_malloc_r>
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0ed      	beq.n	8007b5e <_realloc_r+0x1e>
 8007b82:	42bc      	cmp	r4, r7
 8007b84:	4622      	mov	r2, r4
 8007b86:	4631      	mov	r1, r6
 8007b88:	bf28      	it	cs
 8007b8a:	463a      	movcs	r2, r7
 8007b8c:	f7ff fed0 	bl	8007930 <memcpy>
 8007b90:	4631      	mov	r1, r6
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7ff fef4 	bl	8007980 <_free_r>
 8007b98:	e7e1      	b.n	8007b5e <_realloc_r+0x1e>
 8007b9a:	4635      	mov	r5, r6
 8007b9c:	e7df      	b.n	8007b5e <_realloc_r+0x1e>
	...

08007ba0 <_sbrk_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d06      	ldr	r5, [pc, #24]	; (8007bbc <_sbrk_r+0x1c>)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	f7f9 f83e 	bl	8000c2c <_sbrk>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_sbrk_r+0x1a>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_sbrk_r+0x1a>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	24000674 	.word	0x24000674

08007bc0 <__malloc_lock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	; (8007bc8 <__malloc_lock+0x8>)
 8007bc2:	f000 b811 	b.w	8007be8 <__retarget_lock_acquire_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	24000678 	.word	0x24000678

08007bcc <__malloc_unlock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__malloc_unlock+0x8>)
 8007bce:	f000 b80c 	b.w	8007bea <__retarget_lock_release_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	24000678 	.word	0x24000678

08007bd8 <_malloc_usable_size_r>:
 8007bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bdc:	1f18      	subs	r0, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfbc      	itt	lt
 8007be2:	580b      	ldrlt	r3, [r1, r0]
 8007be4:	18c0      	addlt	r0, r0, r3
 8007be6:	4770      	bx	lr

08007be8 <__retarget_lock_acquire_recursive>:
 8007be8:	4770      	bx	lr

08007bea <__retarget_lock_release_recursive>:
 8007bea:	4770      	bx	lr

08007bec <_init>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	bf00      	nop
 8007bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	469e      	mov	lr, r3
 8007bf6:	4770      	bx	lr

08007bf8 <_fini>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr
